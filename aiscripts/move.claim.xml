<?xml version="1.0" encoding="iso-8859-1" ?>
<aiscript name="move.claim" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <params>
    <param name="target"/>
    <param name="oldrole" default="null"/>
    <param name="debugchance" default="0"/>
  </params>
  <interrupts>
    <handler ref="TargetInvalidHandler"/>
  </interrupts>
  <init>
    <do_if value="not $target.isoperational">
      <return value="false"/>
    </do_if>

    <set_value name="$startship" exact="this.ship" />
  </init>
  <attention min="visible">
    <actions>
      <set_command command="command.move" param="$target"/>

      <do_if value="this.ship.dock">
        <debug_text text="'docked. undocking.'" chance="$debugchance"/>
        <undock ship="$startship"/>
        <signal_objects object="player.entity" param="'SendingOutClaimPod'" param2="this" delay="10ms" comment="Signal MD listener to start default script" />
      </do_if>

      <label name="move" />

      <debug_text text="'moving to target.'" chance="$debugchance"/>
      <move_to destination="$target" object="this.ship" flightbehaviour="flightbehaviour.default" uselocalhighways="false" finishonapproach="true" forcesteering="true" avoid="false">
        <interrupt>
          <conditions>
            <event_object_approaching_waypoint object="$target" />
          </conditions>
        </interrupt>
      </move_to>

      <!-- Make sure that the target has default FCM -->
      <set_to_default_flight_control_model object="$target" />
      <!-- Disable my collision reaction with the target -->
      <set_avoid_collisions object="this.ship" bigobjects="false" smallobjects="false" />
      <disable_collision_response object="this.ship" />

      <!-- find surface and move to it -->
      <find_object_surface object="$target" posname="$targetpos" rotname="$targerrot" space="$target" chance="100" >
        <position object="this.ship" />
      </find_object_surface>
      <!-- in case of no surface position -->
      <do_if value="not @$targetpos">
        <create_position name="$targetpos" space="$target" />
        <debug_text text="'no target pos found on find_surface: %s'.[$targetpos]" />
      </do_if>

      <set_object_active object="this.ship" activate="true" />      

      <debug_text text="'moving to attach to target.'" chance="$debugchance"/>
      
      <move_to destination="$target" object="this.ship" flightbehaviour="flightbehaviour.droneattach" uselocalhighways="false" forcesteering="true" abortpath="true" relativemovement="true">
        <position value="$targetpos" />
      </move_to>

      <!-- attachment needs to happen after claim or the pilot will be wrecked! -->
      <!-- DANGER DANGER! do NOT use this.ship here, as this has already been moved to $target in claim_ship, therefore this.ship == $target ! -->
      <debug_text text="'attaching to target.'" chance="$debugchance"/>
      <attach_object_to_target object="$startship" target="$target" keepoffset="true" />

      <wait min="3s" />
      
      <do_if value="$target.trueowner == faction.ownerless">
        <debug_text text="'claiming target'" chance="$debugchance"/>
        <claim_ship target="$target" pilot="this" />
      </do_if>
      <do_elseif value="$target.trueowner == this.trueowner">
        <!-- join the crew -->
        <set_value name="$newrole" exact="if $oldrole then $oldrole else entityrole.service"/>
        <debug_text text="'cannot claim target since it already belongs to us. joining crew as %s.'.[$newrole]" chance="$debugchance"/>
        <create_npc_template name="$person" entity="this" object="$startship" role="$newrole"/>
        <transfer_people object="$target" otherobject="$startship">
          <existing_people people="[$person]"/>
        </transfer_people>
        <set_value name="$cleanmeup"/>
      </do_elseif>
      <do_else>
        <!-- taken prisoner -->
        <debug_text text="'cannot claim target since it already belongs to someone else. taken prisoner.'" chance="$debugchance"/>
        <create_npc_template name="$person" entity="this" object="$startship" role="entityrole.prisoner"/>
        <transfer_people object="$target" otherobject="$startship">
          <existing_people people="[$person]"/>
        </transfer_people>
        <set_value name="$cleanmeup"/>
      </do_else>

      <wait min="100ms" />

      <label name="finish"/>

      <do_if value="$cleanmeup?">
        <return/>
      </do_if>

      <wait min="2s" />

      <do_if value="this.ship == $target">
        <set_value name="$damagemaxpercent" exact="this.assignedcontrolled.combinedskill"/>
        <do_if value="$damagemaxpercent lt 100">
          <set_object_hull object="$target" exact="[($target.hullpercentage - $damagemaxpercent), [($target.hullpercentage - 30), 1].max].max"/>
          <do_if value="$target.scuttleeffect != ''">
            <add_effect object="$target" effect="$target.scuttleeffect"/>
          </do_if>
          <do_else>
            <debug_text text="'%s %s %s %s has no scuttle effect.'.[$target.class, $target.idcode, $target.knownname, $target]" filter="error"/>
          </do_else>
          <find_object_component name="$subcomponents" object="$target" class="[class.weapon, class.turret, class.shieldgenerator]" multiple="true"/>
          <shuffle_list list="$subcomponents"/>
          <do_all exact="[$subcomponents.count, 100 / [this.assignedcontrolled.combinedskill, 1].max].min" counter="$i" reverse="true">
            <debug_text text="'caused damage breaching the hull. destroying %s'.[$subcomponents.{$i}.knownname]" chance="$debugchance"/>
            <destroy_object object="$subcomponents.{$i}" explosion="false" chance="100 - this.assignedcontrolled.combinedskill"/>
            <remove_value name="$subcomponents.{$i}"/>
          </do_all>
        </do_if>

        <debug_text text="'successfully claimed ' + $target.knownname" chance="$debugchance" />
        <!-- <destroy_object object="$startship" explosion="false" /> -->
        <do_if value="this.isplayerowned">
          <!-- boarding marine gains a little experience -->
          <apply_experience entity="this" experience="'board_success'" factor="1.0"/>

          <!-- clear the ship's order queue and reset the default order. -->
          <cancel_all_orders object="$target"/>
          <run_script name="'lib.request.orders'">
            <param name="object" value="$target"/>
          </run_script>

          <set_value name="stat.ships_claimed" operation="add" />
          <signal_objects object="player.entity" param="'ClaimedShip'" param2="this" delay="10ms" comment="Signal MD listener to start default script" />
        </do_if>
      </do_if>
      <do_else>
        <debug_text text="'claiming ' + $target.knownname + ' failed!'" chance="$debugchance" />
      </do_else>

      <destroy_object object="$startship" explosion="false"/>

    </actions>
  </attention>
  <attention min="unknown">
    <actions>
      <do_if value="this.ship.dock">
        <debug_text text="'docked. undocking.'" chance="$debugchance"/>
        <undock ship="$startship"/>
      </do_if>

      <label name="move" />

      <!-- Disable my collision with the target -->
      <disable_collisions_between object="this.ship" target="$target"/>

      <debug_text text="'(low) moving to target.'" chance="$debugchance"/>
      <!-- NB: we cannot use flightbehaviour.droneattach in low attention at the moment since that requires collision-avoidance. -->
      <move_to destination="$target" object="this.ship" uselocalhighways="false" forcesteering="true">
        <interrupt_after_time time="30s" comment="finish if not reach the first position in 30s"/>
        <interrupt>
          <conditions>
            <event_object_approaching_waypoint object="this.ship"/>
          </conditions>
        </interrupt>
      </move_to>

      <wait min="1s" max="3s"/>

      <do_if value="$target.trueowner == faction.ownerless">
        <debug_text text="'(low) claiming target'" chance="$debugchance"/>
        <claim_ship target="$target" pilot="this" />
      </do_if>
      <do_elseif value="$target.trueowner == this.trueowner">
        <!-- join the crew -->
        <set_value name="$newrole" exact="if $oldrole then $oldrole else entityrole.service"/>
        <debug_text text="'(low) cannot claim target since it already belongs to us. joining crew as %s.'.[$newrole]" chance="$debugchance"/>
        <create_npc_template name="$person" entity="this" object="$startship" role="$newrole"/>
        <transfer_people object="$target" otherobject="$startship">
          <existing_people people="[$person]"/>
        </transfer_people>
        <set_value name="$cleanmeup"/>
      </do_elseif>
      <do_else>
        <!-- taken prisoner-->
        <debug_text text="'(low) cannot claim target since it already belongs to someone else. taken prisoner.'" chance="$debugchance"/>
        <create_npc_template name="$person" entity="this" object="$startship" role="entityrole.prisoner"/>
        <transfer_people object="$target" otherobject="$startship">
          <existing_people people="[$person]"/>
        </transfer_people>
        <set_value name="$cleanmeup"/>
      </do_else>

      <label name="finish"/>

      <do_if value="$cleanmeup?">
        <destroy_object object="$startship" explosion="false"/>
        <return/>
      </do_if>

      <wait min="1s" max="3s" />

      <do_if value="this.ship == $target">
        <set_value name="$damagemaxpercent" exact="this.assignedcontrolled.combinedskill"/>
        <do_if value="$damagemaxpercent lt 100">
          <set_object_hull object="$target" exact="[($target.hullpercentage - $damagemaxpercent), [($target.hullpercentage - 30), 1].max].max"/>
          <find_object_component name="$subcomponents" object="$target" class="[class.weapon, class.turret, class.shieldgenerator]" multiple="true"/>
          <shuffle_list list="$subcomponents"/>
          <do_all exact="[$subcomponents.count, 100 / [this.assignedcontrolled.combinedskill, 1].max].min" counter="$i" reverse="true">
            <debug_text text="'caused damage breaching the hull. destroying %s'.[$subcomponents.{$i}.knownname]" chance="$debugchance"/>
            <destroy_object object="$subcomponents.{$i}" explosion="false" chance="100 - this.assignedcontrolled.combinedskill"/>
            <remove_value name="$subcomponents.{$i}"/>
          </do_all>
        </do_if>

        <debug_text text="'(low) successfully claimed ' + $target.knownname" chance="$debugchance" />
        <do_if value="this.isplayerowned">
          <!-- boarding marine gains a little experience -->
          <apply_experience entity="this" experience="'board_success'" factor="1.0"/>

          <!-- clear the ship's order queue and reset the default order. -->
          <cancel_all_orders object="$target"/>
          <run_script name="'lib.request.orders'">
            <param name="object" value="$target"/>
          </run_script>

          <set_value name="stat.ships_claimed" operation="add" />
          <signal_objects object="player.entity" param="'ClaimedShip'" param2="this" delay="10ms" comment="Signal MD listener to start default script" />
        </do_if>
      </do_if>
      <do_else>
        <debug_text text="'(low) claiming ' + $target.knownname + ' failed!'" chance="$debugchance" />
      </do_else>

      <destroy_object object="$startship" explosion="false"/>

    </actions>
  </attention>
</aiscript>