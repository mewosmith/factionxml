<?xml version="1.0" encoding="utf-8"?>
<aiscript name="lib.find.point.indeepspace" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <params>
    <param name="sector" default="this.assignedcontrolled.sector" comment="Sector in which a point in deep space will be found."/>
    <param name="mindistance" default="50km" comment="minimum distance added to distance of farthest station in $sector from the sector center"/>
    <param name="maxdistance" default="150km" comment="maximum distance added to distance of farthest station in $sector from the sector center"/>
    <param name="safeposradius" default="this.assignedcontrolled.size / 2.0"/>
    <param name="allowyaxis" default="false"/>
    <param name="debugchance" default="0"/>
  </params>
  <attention min="unknown">
    <actions>
      <!-- if the player places a station in deep space, we don't want deep space to move. or do we? -->
      <find_station name="$sectorstations" space="$sector" multiple="true">
        <match owner="[faction.player, faction.ownerless]" negate="true"/>
      </find_station>
      <do_all exact="$sectorstations.count" counter="$i">
        <do_if value="$sectorstations.{$i}.distanceto.{$sector} gt @$fartheststation.distanceto.{$sector}">
          <set_value name="$fartheststation" exact="$sectorstations.{$i}"/>
        </do_if>
      </do_all>
      <do_if value="not $fartheststation?">
        <set_value name="$fartheststation" exact="$sector"/>
      </do_if>

      <set_value name="$fartheststationdistance" exact="$fartheststation.distanceto.{$sector}"/>
      <do_if value="$fartheststationdistance + $mindistance gt $sector.size / 2.0 or $fartheststationdistance + $maxdistance gt $sector.size / 2.0">
        <debug_text text="'farthest station distance + mindistance or maxdistance is greater than half of sector size. capping at half of sector size.\n effective min distance: %sMm\n effective max distance: %sMm\n sector size: %sMm\n\n farthest station distance: %skm\n mindistance: %skm\n maxdistance: %skm'.[($fartheststationdistance + $mindistance) / 1000000m, ($fartheststationdistance + $maxdistance) / 1000000m, $sector.size / 1000000m, $fartheststationdistance / 1000m, $mindistance / 1000m, $maxdistance / 1000m]" chance="$debugchance"/>
      </do_if>
      <!-- NB: only necessary to have otherwise duplicate instances of <get_safe_pos/> because the allowyaxis attribute does not accept variables. -->
      <do_if value="$allowyaxis">
        <get_safe_pos result="$pos" sector="$sector" object="$sector" min="[($fartheststationdistance + $mindistance), ($sector.size / 2.0)].min" max="[($fartheststationdistance + $maxdistance), ($sector.size / 2.0)].min" radius="$safeposradius" ignored="this.assignedcontrolled" allowyaxis="true"/>
      </do_if>
      <do_else>
        <get_safe_pos result="$pos" sector="$sector" object="$sector" min="[($fartheststationdistance + $mindistance), ($sector.size / 2.0)].min" max="[($fartheststationdistance + $maxdistance), ($sector.size / 2.0)].min" radius="$safeposradius" ignored="this.assignedcontrolled" allowyaxis="false"/>
      </do_else>
      <!--<assert value="($sector.distanceto.[$sector, $pos] ge $fartheststationdistance + 50km) and ($fartheststation.distanceto.[$sector, $pos] ge 50km)" text="'pos is not far enough away.\ndistance to sector center: %sm.\ndistance to farthest station: %sm\nfarthest station distance to sector center: %sm'.[$sector.distanceto.[$sector, $pos], $fartheststation.distanceto.[$sector, $pos], $fartheststationdistance]" break="always"/>-->
      <debug_text text="'returning position %s, %s, %s relative to sector %s %s.\ndistance from sector center: %sm.\ndistance to farthest station: %sm'.[$pos.x, $pos.y, $pos.z, $sector.knownname, $sector, $sector.distanceto.[$sector, $pos], $fartheststation.distanceto.[$sector, $pos]]" chance="$debugchance"/>

      <return value="$pos"/>
    </actions>
  </attention>
</aiscript>