<?xml version="1.0" encoding="iso-8859-1"?>
<aiscript name="mining.collect.ship.liquid" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <!--
  
  Liquid/gas gathering.
  Only visible attention level, low level handled on mining.collect.ship
  
  Supports small and capital ships
  
  -->
  <params>
    <param name="destination" comment="[space, position]"/>
    <param name="ware"/>
    <param name="secwares"/>
    <param name="dronelaunchdelay"/>
    <param name="debugchance"/>

    <!-- debug_eco -->
    <param name="time_started"/>
    <param name="debug_eco" default="0"/>
  </params>
  <interrupts>
    <handler ref="TargetInvalidHandler"/>
  </interrupts>
  <init>
    <!-- Destination no longer exists -->
    <do_if value="not $destination.{1}.exists">
      <!--<do_if value="not $zone.exists">-->
      <debug_text text="'input destination, %s %s %s, does not exist.'.[$destination.{1}.class, $destination.{1}.knownname, $destination.{1}]" filter="error"/>
      <return value="'aborted'"/>
    </do_if>

    <do_if value="$destination.{1}.isclass.sector">
      <set_value name="$sector" exact="$destination.{1}"/>
      <set_value name="$pos" exact="$destination.{2}"/>
    </do_if>
    <do_elseif value="$destination.{1}.sector">
      <set_value name="$sector" exact="$destination.{1}.sector"/>
      <create_position name="$pos" space="$sector" value="$destination.{2}" object="$destination.{1}"/>
    </do_elseif>
    <do_else>
      <debug_text text="'ERROR: destination %s %s %s is neither a sector nor in a sector.'.[$destination.{1}.class, $destination.{1}.knownname, $destination.{1}]" filter="error"/>
      <return value="'nosector'"/>
    </do_else>

    <set_value name="$gathertime" min="172s" max="188s" comment="the time spent to gather resources at a certain location (gases only)"/>
    <set_value name="$traveltime" min="76s" max="84s" comment="the time between gathering at two different locations (gases only)"/>
    <set_value name="$bigship" exact="this.ship.isclass.[class.ship_l, class.ship_xl]"/>

    <do_if value="not $bigship">
      <set_value name="$traveltime" exact="$traveltime/5" comment="reduced for small ships"/>
      <set_value name="$gathertime" exact="$gathertime/5" comment="reduced for small ships"/>
    </do_if>
  </init>
  <attention min="visible">
    <actions>

      <!-- chance to skip initial movement -->
      <do_if value="true" chance="$gathertime / ($gathertime + $traveltime) * 100">
        <set_value name="$skipmovement" exact="true"/>
      </do_if>
      <do_else>
        <set_value name="$skipmovement" exact="false"/>
      </do_else>
      <set_value name="$gathercounter" exact="0s"/>

      <!-- loop as long as there is at least 5% free cargo space -->
      <do_while value="this.ship.cargo.{$ware}.free">

        <!-- Command action -->
        <set_command_action commandaction="commandaction.searchingresources" />

        <!--  initial movement-->
        <do_if value="$skipmovement" exact="false">
          <do_if value="not $targetpos? or this.ship.distanceto.{$targetpos} lt 4km">
            <debug_text text="player.age+' destination almost reached, creating a new destination'" chance="$debugchance"/>
            <get_safe_pos result="$targetpos" object="this.ship" space="this.zone" zone="this.zone" radius="this.ship.size" min="1km" max="35km" ignored="this.ship"/>
          </do_if>
          <debug_text text="player.age+' movement started (destination: '+this.ship.distanceto.{$targetpos}+'m)'" chance="$debugchance"/>
          <move_to object="this.ship" destination="this.zone" finishonapproach="true" forceposition="false">
            <position value="$targetpos"/>
            <interrupt_after_time time="$traveltime"/>
          </move_to>
          <debug_text text="player.age+' movement stopped, preparing to mine'" chance="$debugchance"/>
          <stop_moving object="this.ship" immediate="false"/>
          <wait min="1s" max="3s"/>
        </do_if>
        <do_else>
          <set_value name="$skipmovement" exact="false"/>
        </do_else>

        <!-- loop for gathering -->
        <debug_text text="player.age+' collecting gas/liquid'" chance="$debugchance"/>
        <!-- for small ships trigger the gas/liquid gathering animation -->
        <do_if value="not $bigship">
          <set_object_active object="this.ship" activate="true" />
        </do_if>
        <set_value name="$gatherstart" exact="player.age"/>
        <do_while value="(player.age lt ($gatherstart + $gathertime)) and this.ship.cargo.{$ware}.free">
          <!-- for capital ships launch drones -->
          <do_if value="$bigship">
            <!-- launch drones to collect gas -->
            <launch_drone name="$drone" object="this.ship" category="unitcategory.gascollector" exact="1"/>
            <do_if value="$drone.isoperational">
              <start_script name="'mining.collect.drone'" object="$drone.pilot">
                <param name="homebase" value="this.ship"/>
                <param name="ware" value="$ware"/>
              </start_script>
            </do_if>
          </do_if>

          <wait exact="$dronelaunchdelay"/>
          <set_value name="$gathercounter" exact="$gathercounter + $dronelaunchdelay" />
          <!-- gas gathering uses low attention mechanic -->
          <do_if value="$gathercounter ge 15s">
            <set_value name="$gathercounter" exact="15s" />
            <do_if value="($gatherstart + $traveltime) lt player.age">
              <create_position name="$sectorpos" space="$sector" object="this.ship"/>
              <get_resource_gatherrate name="$gatherrate" refobject="this.ship" sector="$sector" ware="$ware">
                <position value="$sectorpos" />
              </get_resource_gatherrate>
              <set_value name="$gathered" min="$gatherrate * $gathercounter * 0.75" max="$gatherrate * $gathercounter * 1.25"/>
              <set_value name="$currentware" exact="$ware" />
              <deplete_yield sector="$sector" container="this.ship" ware="$ware" amount="$gathered">
                <position value="$sectorpos" />
              </deplete_yield>

              <debug_text text="'$gathered: %s, good haul threshold: %s'.[$gathered, this.assignedcontrolled.cargo.{$ware}.max * 0.2]" chance="$debugchance"/>
              <do_if value="$gathered ge (this.assignedcontrolled.cargo.{$ware}.max * 0.2)">
                <!-- what a crew considers a good haul is relative to maximum amount that can be carried in cargo hold. -->
                <set_value name="$XP_factor" exact="[($gathered * 2.0)f / [(this.assignedcontrolled.cargo.{$ware}.max)f, 1.0].max, 1.0].min"/>
                <debug_text text="'good haul. collected %s %s. factor: %s, max capacity: %s'.[$gathered, $ware, $XP_factor, this.assignedcontrolled.cargo.{$ware}.max]" chance="$debugchance"/>

                <apply_experience entity="this" experience="'ship_mine_good'" factor="$XP_factor"/>
                <apply_experience object="this.assignedcontrolled" role="entityrole.service" experience="'ship_mine_good'" factor="$XP_factor"/>
                <remove_value name="$XP_factor"/>
              </do_if>

              <!-- Used for economy logging data -->
              <include_interrupt_actions ref="debug.economy.mining" />

              <debug_text text="player.age + ' collected %1 units of %2 (%3 units/s on average)'.[$gathered, $ware, $gatherrate]" chance="$debugchance"/>
              <set_value name="$gathercounter" exact="0"/>
            </do_if>
          </do_if>
        </do_while>
        <!-- deactivate animation -->

        <set_object_active object="this.ship" activate="false" />

        <debug_text text="player.age+' stop launching drones'" chance="$debugchance"/>
      </do_while>

      <debug_text text="player.age+' less than 5% free cargo space'" chance="$debugchance"/>

      <!-- deactivate animation -->
      <set_object_active object="this.ship" activate="false" />

      <return value="'cargofull'" />

    </actions>
  </attention>
  <attention min="unknown">
    <actions>
      <!-- Go back to unknown attention level of mining.collect.ship -->
      <return value="'attention_change'"/>
    </actions>
  </attention>
  <on_abort>
    <set_object_active object="this.ship" activate="false" />
  </on_abort>
</aiscript>