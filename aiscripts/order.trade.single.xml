<?xml version="1.0" encoding="utf-8"?>
<aiscript name="order.trade.single" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="3">
  <order id="SingleTrade" name="{1041, 131}" description="{1041, 132}" category="internal">
    <params>
      <param name="ware" required="true" type="ware" text="{1041, 10145}" comment="Ware to trade. What do we want to trade?">
        <input_param name="cancarry" value="this.ship"/>
      </param>
      <param name="locations" default="[this.ship.sector]" type="list" text="{1041, 10049}" comment="Locations. Where do we want to look? Can be a station, a group of stations, a space, or a group of spaces">
        <input_param name="type" value="'object'"/>
        <input_param name="class" value="[class.station, class.cluster, class.sector]"/>
      </param>
      <param name="maxamount" default="this.ship.cargo.capacity.all" type="number" advanced="true" text="{1041, 10051}" comment="Max amount. How much do we want to trade?">
        <input_param name="startvalue" value="this.ship.cargo.capacity.all"/>
        <input_param name="min" value="0"/>
        <input_param name="max" value="this.ship.cargo.capacity.all"/>
        <input_param name="step" value="this.ship.cargo.capacity.all / 10"/>
      </param>
      <param name="minamount" default="0" type="number" advanced="true" text="{1041, 10065}" comment="Min amount. How much do we want to trade?">
        <input_param name="startvalue" value="0"/>
        <input_param name="min" value="0"/>
        <input_param name="max" value="this.ship.cargo.capacity.all"/>
        <input_param name="step" value="this.ship.cargo.capacity.all / 10"/>
      </param>
      <param name="pricethreshold" default="($ware.averageprice / 1Cr)Cr" type="money" text="{1041, 10071}" comment="Min/Max price. At which price is a trade acceptable?">
        <input_param name="startvalue" value="($ware.averageprice / 1Cr)Cr"/>
        <input_param name="min" value="0Cr"/>
        <input_param name="max" value="($ware.maxprice / 1Cr)Cr"/>
        <input_param name="step" value="1Cr"/>
        <!-- below will set the slider to 20 steps regardless of what the price range is. -->
        <!--<input_param name="step" value="(($ware.maxprice / 20) / 1Cr)Cr"/>-->
      </param>
      <param name="sell" default="false" type="bool" text="{1041, 10111}" comment="Sell. Do we want to sell?"/>

      <param name="unbundle" type="internal" default="null" text="{1041, 10134}" comment="Unbundle"/>
      <param name="internalorder" type="bool" default="false" advanced="true" text="{1041, 10159}" comment="Order results from an automated behavior."/>
      <param name="gotrade" type="internal" default="true" comment="Go ahead and trade. If false, will simply return the trade offer that it would have used."/>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
    </requires>
  </order>
  <interrupts>
    <handler ref="SectorChangeHandler"/>
    <handler ref="AttackHandler" />
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler" />
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="ResupplyHandler" />
    <handler ref="TargetInvalidHandler"/>
  </interrupts>
  <init>
    <include_interrupt_actions ref="GetBlacklistgroup"/>
  </init>
  <patch sinceversion="1">
    <!-- patched to true since that is safer. if no path is possible, order should be called again with the proper flag set. -->
    <set_value name="$internalorder" exact="this.isplayerowned"/>
  </patch>
  <patch sinceversion="2">
    <include_interrupt_actions ref="GetBlacklistgroup"/>
  </patch>
  <patch sinceversion="3">
    <set_value name="$gotrade" exact="not this.assignedcontrolled.order or this.assignedcontrolled.order.id == 'GetSupplies'"/>
  </patch>
  <attention min="unknown">
    <actions>

      <label name="start"/>

      <do_if value="$ware">
        <set_value name="$wares" exact="[$ware]"/>
      </do_if>
      <do_else>
        <debug_text text="'ERROR: trade script called without ware specified.'"/>
        <return value="false"/>
      </do_else>

      <shuffle_list list="$locations"/>
      <do_all exact="$locations.count" counter="$i" chance="$debugchance">
        <debug_text text="'pre-sort - location %1: %2. gate distance: %3'.[$i, $locations.{$i}.knownname, this.ship.gatedistance.{$locations.{$i}}]"/>
      </do_all>
      <set_value name="$table_locationgatedist" exact="table[]"/>
      <do_all exact="$locations.count" counter="$i" reverse="true">
        <do_if value="$locations.{$i}.isclass.[class.sector, class.zone, class.station]">
          <set_value name="$gatedist" exact="this.ship.gatedistance.{$locations.{$i}}"/>
          <do_if value="$gatedist" min="0">
            <set_value name="$table_locationgatedist.{$locations.{$i}}" exact="$gatedist"/>
          </do_if>
        </do_if>
        <do_elseif value="$locations.{$i}.isclass.[class.cluster, class.galaxy]">
          <find_sector name="$locsectors" space="$locations.{$i}" multiple="true"/>
          <do_all exact="$locsectors.count" counter="$j">
            <set_value name="$gatedist" exact="this.ship.gatedistance.{$locsectors.{$j}}"/>
            <do_if value="$gatedist" min="0">
              <set_value name="$table_locationgatedist.{$locsectors.{$j}}" exact="$gatedist"/>
            </do_if>
          </do_all>
          <remove_value name="$locsectors"/>
        </do_elseif>
        <do_else>
          <remove_value name="$locations.{$i}"/>
        </do_else>
      </do_all>
      <set_value name="$locations" exact="$table_locationgatedist.keys.sorted" />
      <do_all exact="$locations.count" counter="$i" chance="$debugchance">
        <debug_text text="'post-sort - location %1: %2. gate distance: %3'.[$i, $locations.{$i}.knownname, this.ship.gatedistance.{$locations.{$i}}]"/>
      </do_all>
      <remove_value name="$gatedist" />
      <remove_value name="$table_locationgatedist"/>

      <label name="buy"/>

      <do_if value="$sell">
        <resume label="sell"/>
      </do_if>

      <create_list name="$selloffers"/>
      <do_all exact="$locations.count" counter="$i">
        <do_if value="$locations.{$i}.isclass.[class.station, class.buildstorage]">
          <wait min="50ms" max="100ms" comment="Avoid performance peaks with find functions"/>
          <do_if value="$locations.{$i}.isoperational">
            <find_sell_offer tradepartner="this.assignedcontrolled" seller="$locations.{$i}" result="$selloffers" wares="$wares" multiple="true">
              <match_seller tradesknownto="this.owner">
                <match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
              </match_seller>
              <amount min="$minamount"/>
              <price max="$pricethreshold"/>
            </find_sell_offer>
            <debug_text text="player.age + ' Checking to see if we can buy from %1: found %2 sell offer(s)'.[$locations.{$i}.knownname, $selloffers.count]" chance="$debugchance"/>
          </do_if>
        </do_if>
        <do_elseif value="$locations.{$i}.isclass.[class.cluster, class.sector, class.zone]">
          <wait min="50ms" max="100ms" comment="Avoid performance peaks with find functions"/>
          <find_sell_offer tradepartner="this.assignedcontrolled" space="$locations.{$i}" result="$selloffers" wares="$wares" multiple="true">
            <match_seller tradesknownto="this.owner">
              <match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
            </match_seller>
            <amount min="$minamount"/>
            <price max="$pricethreshold"/>
          </find_sell_offer>
          <debug_text text="player.age + ' Checking to see if we can buy in %1: found %2 sell offer(s)'.[$locations.{$i}.knownname, $selloffers.count]" chance="$debugchance"/>
        </do_elseif>
        <do_else>
          <debug_text text="'ERROR: %1 (%2) is neither a station nor a space, and was not filtered out.'.[$locations.{$i}.knownname, $locations.{$i}]"/>
        </do_else>

        <do_if value="$selloffers.count">
          <do_if value="this.assignedcontrolled.iscapitalship and not this.assignedcontrolled.availableunits.{unitcategory.transport}.count">
            <do_for_each name="$locoffer" in="$selloffers" counter="$i_offer" reverse="true">
              <do_if value="not $locoffer.owner.availableunits.{unitcategory.transport}.count">
                <remove_value name="$selloffers.{$i_offer}"/>
              </do_if>
            </do_for_each>
          </do_if>
          <do_if value="not $selloffers.count">
            <continue/>
          </do_if>
          <!-- shuffle list so that offers with the same relprice are still in a random order and not in the consistent order that the stations were found in -->
          <shuffle_list list="$selloffers"/>
          <sort_trades name="$selloffers" tradelist="$selloffers" sorter="relativeprice"/>
          <set_value name="$tradeoffer" exact="$selloffers.{1}"/>
          <clamp_trade_amount result="$amount" trade="$tradeoffer" amount="$tradeoffer.amount" buyer="this.ship" seller="$tradeoffer.owner" unbundle="$unbundle"/>
          <remove_value name="$selloffers"/>

          <do_if value="$amount le 0">
            <!-- to do: add player feedback here. -->
            <debug_text text="'trade clamped to 0. possibly valid. figure out why. offer: %1, ware: %2, offer amount: %3, our free storage: %4, their free storage: %5, selling? %6'.[$tradeoffer, $tradeoffer.ware, $tradeoffer.amount, this.ship.cargo.{$ware}.free, $tradeoffer.owner.cargo.{$ware}.free, $sell]" chance="$debugchance"/>
            <return value="false"/>
          </do_if>

          <break/>
        </do_if>
      </do_all>

      <resume label="execute"/>

      <label name="sell"/>

      <create_list name="$buyoffers"/>
      <do_all exact="$locations.count" counter="$i">
        <do_if value="$locations.{$i}.isclass.[class.station, class.buildstorage]">
          <wait min="50ms" max="100ms" comment="Avoid performance peaks with find functions"/>
          <do_if value="$locations.{$i}.isoperational">
            <find_buy_offer tradepartner="this.assignedcontrolled" buyer="$locations.{$i}" result="$buyoffers" wares="$wares" multiple="true">
              <match_buyer tradesknownto="this.owner">
                <match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
              </match_buyer>
              <amount min="$minamount"/>
              <price min="$pricethreshold"/>
            </find_buy_offer>
            <debug_text text="player.age + ' Checking to see if we can sell to %1: found %2 buy offer(s)'.[$locations.{$i}.knownname, $buyoffers.count]" chance="$debugchance"/>
          </do_if>
        </do_if>
        <do_elseif value="$locations.{$i}.isclass.[class.cluster, class.sector, class.zone]">
          <wait min="50ms" max="100ms" comment="Avoid performance peaks with find functions"/>
          <find_buy_offer tradepartner="this.assignedcontrolled" space="$locations.{$i}" result="$buyoffers" wares="$wares" multiple="true">
            <amount min="$minamount"/>
            <price min="$pricethreshold"/>
            <match_buyer tradesknownto="this.owner">
              <match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
            </match_buyer>
          </find_buy_offer>
          <debug_text text="player.age + ' Checking to see if we can sell to %1: found %2 buy offer(s)'.[$locations.{$i}.knownname, $buyoffers.count]" chance="$debugchance"/>
        </do_elseif>
        <do_else>
          <debug_text text="'ERROR: %1 (%2) is neither a station nor a space, and was not filtered out.'.[$locations.{$i}.knownname, $locations.{$i}]"/>
        </do_else>

        <do_if value="$buyoffers.count">
          <do_if value="this.assignedcontrolled.iscapitalship and not this.assignedcontrolled.availableunits.{unitcategory.transport}.count">
            <do_for_each name="$locoffer" in="$buyoffers" counter="$i_offer" reverse="true">
              <do_if value="not $locoffer.owner.availableunits.{unitcategory.transport}.count">
                <remove_value name="$buyoffers.{$i_offer}"/>
              </do_if>
            </do_for_each>
          </do_if>
          <!-- shuffle list so that offers with the same relprice are still in a random order and not in the consistent order that the stations were found in -->
          <shuffle_list list="$buyoffers"/>
          <sort_trades name="$buyoffers" tradelist="$buyoffers" sorter="relativeprice"/>
          <set_value name="$tradeoffer" exact="$buyoffers.{$buyoffers.count}"/>
          <clamp_trade_amount result="$amount" trade="$tradeoffer" amount="$tradeoffer.amount" buyer="$tradeoffer.owner"/>
          <remove_value name="$buyoffers"/>
          <break/>
        </do_if>
      </do_all>

      <label name="execute"/>

      <do_if value="not @$tradeoffer">
        <debug_text text="'No trade offer found for %1 in %2 locations.'.[$ware, $locations.count]" chance="$debugchance"/>
        <!-- to do: add player feedback here. wait and try again? idly visit stations as if we are checking for trade offers? this will actually update trade offers at the visited stations. -->
        <do_if value="this.ship.orders.count le 1 and (this.ship.order.id == 'SingleBuy' or this.ship.order.id == 'SingleSell')">
          <set_value name="$check_location" exact="$locations.random"/>
          <do_if value="not $check_location.isclass.[class.station, class.buildstorage]">
            <find_station name="$check_station" space="$locations.random">
              <match_relation_to object="this.ship" relation="enemy" comparison="not"/>
            </find_station>
            <do_if value="@$check_station">
              <set_value name="$check_location" exact="$check_station"/>
              <remove_value name="$check_station"/>
            </do_if>
          </do_if>
          <debug_text text="'Going to %1 in %2, %3 to check for trade offers there.'.[$check_location.knownname, @$check_location.sector.knownname, @$check_location.cluster.knownname]" chance="$debugchance"/>

          <do_if value="this.zone != $check_location.zone">
            <!-- move.generic may return failure due to blacklists. failure here is safe. -->
            <run_script name="'move.generic'" >
              <param name="destination" value="$check_location"/>
              <param name="strictblacklist" value="$internalorder"/>
              <param name="endintargetzone" value="true"/>
            </run_script>
          </do_if>
          <do_else>
            <move_to object="this.ship" destination="$check_location"/>
          </do_else>
          <remove_value name="$check_location"/>

          <resume label="buy"/>
        </do_if>
        <do_else>
          <return value="false"/>
        </do_else>
      </do_if>
      <do_else>
        <!-- limit the amount to what the station has on offer/wants, or maxamount, whichever is lower. -->
        <set_value name="$amount" exact="[$maxamount, $amount].min"/>
        <debug_text text="'Moving to trade %1 %2 for %3Cr per unit at %4 in %5, %6. Gate distance: %7. Price threshold: %8Cr'.[$amount, $ware, $tradeoffer.unitprice.formatted.default, $tradeoffer.owner.knownname, $tradeoffer.owner.sector.knownname, $tradeoffer.owner.cluster.knownname, this.ship.gatedistance.{$tradeoffer.owner}, $pricethreshold.formatted.default]" chance="$debugchance"/>

        <do_if value="$gotrade">
          <create_trade_order object="this.object" tradeoffer="$tradeoffer" amount="$amount" unbundle="$unbundle" immediate="true" internal="$internalorder"/>
          <return value="true"/>
        </do_if>
        <do_else>
          <return value="$tradeoffer"/>
        </do_else>
      </do_else>

      <label name="finish"/>

    </actions>
  </attention>
</aiscript>