<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="order.dock.trade.player" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <order id="Player_DockToTrade" name="{1041, 461}" description="{1041, 462}" category="trade">
    <params>
      <param name="destination" type="object" text="{1041, 10027}" comment="Destination. Object">
        <input_param name="class" value="[class.station, class.buildstorage]"/>
      </param>
      <param name="waittime" type="time" default="10min" text="{1041, 10061}" advanced="true" comment="Max wait time">
        <input_param name="startvalue" value="10min"/>
        <input_param name="min" value="0s"/>
        <input_param name="max" value="10h"/>
        <input_param name="step" value="30s"/>
      </param>
      <param name="dockfollowers" type="bool" default="false" text="{1041, 10032}" advanced="true" comment="Dock subordinates"/>
      <param name="subordinateorders" type="internal" default="[]" comment="Subordinate orders. subordinate dock orders to cancel"/>
      <param name="dockorder" type="internal" default="null" comment="Dock order ID. the DockAt order created in this script. used for cleanup."/>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
    </requires>
    <location object="$destination" condition="$destination.exists"/>
  </order>
  <interrupts>
    <handler ref="SectorChangeHandler"/>
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
  </interrupts>
  <init>
    <set_command command="command.dockat" param="$destination" />
  </init>
  <attention min="unknown">
    <actions>

      <label name="start"/>

      <debug_text text="'docked: %s, container: %s %s %s, docked at container: %s, dock allows trade: %s'.[this.ship.dock, @this.ship.dock.container.idcode, @this.ship.dock.container.knownname, @this.ship.dock.container, @this.ship.dock.container == $destination, @this.ship.dock.istradingallowed]" chance="$debugchance"/>
      <do_if value="@this.ship.dock.container != $destination or (this.ship.dock and not this.ship.dock.istradingallowed)">
        <debug_text text="'docking to trade'" chance="$debugchance"/>
        <create_order name="$dockorder" object="this.ship" id="'DockAt'" immediate="true">
          <param name="destination" value="$destination"/>
          <param name="trading" value="true"/>
          <param name="allowplayeronly" value="true"/>
          <param name="waittime" value="$waittime"/>
          <param name="dockfollowers" value="$dockfollowers"/>
          <param name="dockandwaitid" value="this.ship.order"/>
          <param name="debugchance" value="$debugchance"/>
        </create_order>
        <wait exact="1ms"/>
      </do_if>

      <label name="signal_player"/>

      <debug_text text="'calling player'" chance="$debugchance"/>
      <!-- responses are either 'trade' or null. if 'trade', trade context menu was accessed and action will be issued via that menu if needed.
        no further action needed here in either case. -->
      <!-- INTERACTION: ship has docked and is ready to trade -->
      <run_script name="'player.interaction'" result="$response">
        <param name="Line" value="10907" comment="(Ship just docked at station)Ready to trade"/>
        <param name="UIText" value="{1015, 35}.[this.ship.idcode, this.ship.name]" comment="Requesting Orders"/>
        <param name="ConversationParam" value="'g_playerownedship_dockedtotrade'"/>
        <param name="MaxQueueDelay" value="10s"/>
        <param name="caption" value="{1015, 266} + ' - %s (%s)'.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]" comment="Ready to trade"/>
        <param name="debugchance" value="$debugchance"/>
      </run_script>
      <write_to_logbook category="general" title="{1015, 266}" text="{1016, 92}.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode, $destination.knownname, $destination.idcode]" interaction="showonmap" object="this.assignedcontrolled" comment="%1 (%2) docked at %3 (%4) and is ready to trade."/>

      <label name="finish"/>

      <!-- $subordinateorders initialized in order.dock -->
      <do_if value="$dockfollowers">
        <do_all exact="$subordinateorders.count" counter="$i">
          <do_if value="$subordinateorders.{$i}.exists">
            <debug_text text="'ordering %1 %2 %3 out of dock and back to the squadron.'.[$subordinateorders.{$i}.object.idcode, $subordinateorders.{$i}.object.knownname, $subordinateorders.{$i}.object]" chance="$debugchance"/>
            <cancel_order order="$subordinateorders.{$i}"/>
          </do_if>
        </do_all>
      </do_if>

    </actions>
  </attention>
  <on_abort>
    <do_all exact="$subordinateorders.count" counter="$i">
      <do_if value="$subordinateorders.{$i}.exists and $subordinateorders.{$i}.state == orderstate.started">
        <debug_text text="'on_abort: ordering %1 %2 %3 out of dock and back to the squadron.'.[$subordinateorders.{$i}.object.idcode, $subordinateorders.{$i}.object.knownname, $subordinateorders.{$i}.object]" chance="$debugchance"/>
        <cancel_order order="$subordinateorders.{$i}"/>
      </do_if>
    </do_all>
    <!-- problem:
	    order (A) starts immediate order (B).
	    you want to be able to cancel B by cancelling A,
		    so on_abort A, cancel B.
	    BUT starting an immediate order aborts the current order.
		    so A immediately starting B aborts A which aborts B.

    solution:
      only cancel the attached DockAt order if it has already started. -->
    <do_if value="$dockorder? and $dockorder.exists and $dockorder.state == orderstate.started">
      <debug_text text="'on_abort: %s %s aborting attached dock order'.[this.ship.knownname, this.ship]" chance="$debugchance"/>
      <cancel_order order="$dockorder"/>
    </do_if>
  </on_abort>
</aiscript>
