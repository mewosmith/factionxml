<?xml version="1.0" encoding="utf-8"?>
<aiscript name="order.recall.subordinates" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" priority="5">
  <order id="RecallSubordinates" name="{1041, 221}" description="{1041, 222}" category="internal">
    <params>
      <param name="timeout" type="time" default="15min" text="{1041, 10034}" advanced="true" comment="Duration">
        <input_param name="min" value="0s"/>
        <input_param name="max" value="24h"/>
        <input_param name="step" value="30s"/>
      </param>
      <param name="activepatrol" default="false" type="bool" text="{1041, 10002}" advanced="true" comment="Active patrol. Should subordinates actively engage any targets at the target location?"/>
      <param name="destination" default="null" type="position" text="Position" advanced="true" comment="Position in a Sector. Used to send subordinates that are unable to dock ahead to where we are going.">
        <input_param name="class" value="class.sector"/>
      </param>
      <param name="safetodockat" default="null" type="internal" text="{1041, 10078}" comment="Object To dock at. Object subordinates can dock at if they cannot dock at this.ship"/>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
    </requires>
  </order>
  <!-- TODO: consider adding interrupt handlers. careful choosing which ones since this would cause all subordinates ordered to dock to undock. -->
  <attention min="unknown">
    <actions>
      <do_if value="this.ship.subordinates.count and not this.$recalling_subordinates?">
        <debug_text text="'%s %s recalling subordinates. safe to dock at: %s %s, destination: %s, activepatrol: %s, timeout: %s'.[this.ship.knownname, this.ship, @$safetodockat.knownname, $safetodockat, $destination, $activepatrol, $timeout]" chance="$debugchance"/>
        <run_script name="'lib.recall.subordinates'" result="$subordinateorders">
          <param name="timeout" value="$timeout"/>
          <param name="activepatrol" value="$activepatrol"/>
          <param name="destination" value="$destination"/>
          <param name="safetodockat" value="$safetodockat"/>
          <param name="debugchance" value="$debugchance"/>
        </run_script>
        <do_if value="$subordinateorders.count">
          <debug_text text="'%s %s recording %s subordinate order(s).'.[this.ship.knownname, this.ship, $subordinateorders.count]" chance="$debugchance"/>
          <set_value name="this.$recalling_subordinates" exact="$subordinateorders.clone"/>
        </do_if>
        <do_else>
          <debug_text text="'%s %s. no subordinates were recalled. numsubordinates: %s'.[this.ship.knownname, this.ship, this.ship.subordinates.count]" chance="$debugchance"/>
          <set_value name="this.$recalling_subordinates"/>
        </do_else>
      </do_if>
      <do_else>
        <debug_text text="'%s %s did not recall subordinates. has subordinates? %s, already recalling? %s'.[this.ship.knownname, this.ship, this.ship.subordinates.count, this.$recalling_subordinates?]" chance="$debugchance"/>
      </do_else>
    </actions>
  </attention>
</aiscript>