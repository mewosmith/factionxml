<?xml version="1.0" encoding="utf-8"?>
<!--
  Try to open the specified lockbox and collect the contents.

  Ship has to be a small or medium ship and must have at least one forward-mounted non-missile-based weapon.
-->
<aiscript name="order.collect.ship.lockbox" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="3">
  <order id="CollectLockbox" name="{1041, 661}" description="{1041, 662}" category="trade">
    <params>
      <param name="target" type="object" text="{1041, 10160}" comment="Lockbox. Target lockbox">
        <input_param name="class" value="[class.lockbox]"/>
      </param>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
    </requires>
    <location condition="$target.exists" object="$target"/>
  </order>
  <interrupts>
    <library>
      <actions name="SanityChecks">
        <!-- do these sanity checks after every blocking action. -->
        <do_if value="not @$target.isoperational">
          <debug_text text="'target %s %s is not operational or does not exist. cannot execute order.'.[@$target.knownname, $target]" chance="$debugchance"/>
          <set_value name="$fail"/>
        </do_if>
        <do_elseif value="$target.zone.isclass.highway">
          <debug_text text="'target %s %s is in a highway. cannot execute order.'.[@$target.knownname, $target]" chance="$debugchance"/>
          <set_value name="$fail"/>
        </do_elseif>
      </actions>
    </library>
    <handler ref="TargetInvalidHandler"/>
    <handler ref="AttackHandler"/>
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler"/>
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="ResupplyHandler"/>
    <handler>
      <conditions>
        <event_object_destroyed object="$target" check="false"/>
      </conditions>
      <actions>
        <debug_text text="'target lockbox was destroyed. ending.'" chance="$debugchance"/>
        <abort_called_scripts resume="finish"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_object_collided object="$target" check="false"/>
        <check_value value="not $collecting?"/>
      </conditions>
      <actions>
        <debug_text text="'target lockbox collided and we have not started collecting yet. evaluate new position and move.'" chance="$debugchance"/>
        <abort_called_scripts resume="openlockbox"/>
      </actions>
    </handler>
  </interrupts>
  <init>
    <set_command command="command.collect" param="$target"/>
    <debug_text text="'%s %s %s collecting lockbox %s with macro %s in sector %s %s'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, $target, @$target.macro, @$target.sector.knownname, @$target.sector]" chance="$debugchance"/>
  </init>
  <patch sinceversion="2">
    <!-- if we're still too far away, this should get reset when we get closer. -->
    <set_value name="$pickupradius" exact="this.assignedcontrolled.distanceto.{$target} + $target.size / 2.0"/>
  </patch>
  <patch sinceversion="3">
    <do_if value="not @global.$foundlockboxes.indexof.{$target}">
      <include_interrupt_actions ref="SanityChecks"/>
      <do_if value="not $fail?">
        <do_if value="not global.$foundlockboxes?">
          <set_value name="global.$foundlockboxes" exact="[$target]"/>
        </do_if>
        <do_else>
          <append_to_list name="global.$foundlockboxes" exact="$target"/>
        </do_else>
      </do_if>
    </do_if>
  </patch>
  <attention min="visible">
    <actions>

      <wait exact="1ms"/>

      <label name="start"/>

      <do_if value="this.assignedcontrolled.iscapitalship">
        <debug_text text="'ship is a capital ship. unable to comply'" chance="$debugchance"/>
        <set_value name="$fail"/>
      </do_if>
      <do_elseif value="not this.assignedcontrolled.dps.lasers.all">
        <debug_text text="'no non-missile forward-mounted weapons available. unable to comply'" chance="$debugchance"/>
        <set_value name="$fail"/>
      </do_elseif>
      <include_interrupt_actions ref="SanityChecks"/>
      <do_if value="$fail?">
        <resume label="finish"/>
      </do_if>

      <do_if value="not @global.$foundlockboxes.indexof.{$target}">
        <do_if value="not global.$foundlockboxes?">
          <!-- prevent other ships from finding this lockbox again since it's already been found. -->
          <set_value name="global.$foundlockboxes" exact="[$target]"/>
        </do_if>
        <do_else>
          <append_to_list name="global.$foundlockboxes" exact="$target"/>
        </do_else>
      </do_if>

      <do_if value="this.zone != $target.zone">
        <do_if value="'going to target zone.'"/>
        <run_script name="'move.generic'">
          <param name="destination" value="$target.zone"/>
          <param name="endintargetzone" value="true"/>
          <param name="debugchance" value="$debugchance" />
        </run_script>
      </do_if>
      <include_interrupt_actions ref="SanityChecks"/>
      <do_if value="$fail?">
        <resume label="finish"/>
      </do_if>

      <label name="openlockbox"/>

      <!-- NB: this assumes that all lockboxes have locks concentrated on one edge of the lockbox. if we ever make a lockbox with locks distributed evenly among all of the lockbox's edges, adjust. -->
      <add_to_group groupname="$locks" list="$target.locks.operational.list"/>
      <debug_text text="'found %s locks on %s %s'.[$locks.count, $target.knownname, $target]" chance="$debugchance"/>
      <do_if value="not $locks.count">
        <debug_text text="'lockbox was already open! checking to see if there is stuff to collect.'" chance="$debugchance"/>
        <resume label="collect"/>
      </do_if>

      <do_all exact="$locks.count" counter="$i">
        <create_position name="$locpos" space="$target" object="$locks.{$i}"/>

        <set_value name="$locx" exact="$locpos.x"/>
        <set_value name="$x_abs" exact="$locx"/>
        <do_if value="$locx lt 0">
          <set_value name="$x_abs" exact="-$locx"/>
        </do_if>
        <set_value name="$locy" exact="$locpos.y"/>
        <set_value name="$y_abs" exact="$locy"/>
        <do_if value="$locy lt 0">
          <set_value name="$y_abs" exact="-$locy"/>
        </do_if>
        <set_value name="$locz" exact="$locpos.z"/>
        <set_value name="$z_abs" exact="$locz"/>
        <do_if value="$locz lt 0">
          <set_value name="$z_abs" exact="-$locz"/>
        </do_if>

        <set_value name="$x_total" exact="@$x_total + $locx"/>
        <set_value name="$y_total" exact="@$y_total + $locy"/>
        <set_value name="$z_total" exact="@$z_total + $locz"/>
        <set_value name="$x_totalabs" exact="@$x_totalabs + $x_abs"/>
        <set_value name="$y_totalabs" exact="@$y_totalabs + $y_abs"/>
        <set_value name="$z_totalabs" exact="@$z_totalabs + $z_abs"/>
        <debug_text text="'%s %s %s is destructible: %s at pos: %s'.[$locks.{$i}.class, $locks.{$i}.knownname, $locks.{$i}, $locks.{$i}.isclass.destructible, $locpos]" chance="$debugchance"/>
        <remove_value name="$locz"/>
        <remove_value name="$locy"/>
        <remove_value name="$locx"/>
        <remove_value name="$z_abs"/>
        <remove_value name="$y_abs"/>
        <remove_value name="$x_abs"/>
        <remove_value name="$locpos"/>
      </do_all>

      <!-- quadrant.back currently applies to the most common case. -->
      <set_value name="$quadrant" exact="quadrant.back"/>
      <set_value name="$offset" exact="[this.assignedcontrolled.length * 4, this.assignedcontrolled.maxcombatrange.lasers.all].min"/>
      <do_if value="$z_totalabs gt $x_totalabs and $z_totalabs gt $y_totalabs">
        <set_value name="$offset" exact="$offset + ($target.length / 2)"/>
        <set_value name="$pos" exact="position.[0, 0, -$offset]"/>
        <do_if value="$z_total gt 0">
          <set_value name="$quadrant" exact="quadrant.front"/>
          <set_value name="$pos" exact="position.[0, 0, $offset]"/>
        </do_if>
      </do_if>
      <do_elseif value="$y_totalabs gt $x_totalabs and $y_totalabs gt $z_totalabs">
        <set_value name="$quadrant" exact="quadrant.down"/>
        <set_value name="$offset" exact="$offset + ($target.height / 2)"/>
        <set_value name="$pos" exact="position.[0, -$offset, 0]"/>
        <do_if value="$y_total gt 0">
          <set_value name="$quadrant" exact="quadrant.up"/>
          <set_value name="$pos" exact="position.[0, $offset, 0]"/>
        </do_if>
      </do_elseif>
      <do_elseif value="$x_totalabs gt $y_totalabs and $x_totalabs gt $z_totalabs">
        <set_value name="$quadrant" exact="quadrant.left"/>
        <set_value name="$offset" exact="$offset + ($target.width / 2)"/>
        <set_value name="$pos" exact="position.[-$offset, 0, 0]"/>
        <do_if value="$x_total gt 0">
          <set_value name="$quadrant" exact="quadrant.right"/>
          <set_value name="$pos" exact="position.[$offset, 0, 0]"/>
        </do_if>
      </do_elseif>

      <debug_text text="'quadrant: %s, offset: %s'.[$quadrant, $offset]" chance="$pos? * $debugchance"/>
      <get_safe_pos result="$safepos" zone="$target.zone" value="$pos" object="$target" direction="$quadrant" directionobject="$target" radius="this.assignedcontrolled.size / 2.0" ignored="this.assignedcontrolled"/>
      <create_orientation name="$rot" orientation="look_at" refobject="$target">
        <position value="$safepos"/>
      </create_orientation>
      <create_position name="$relsafepos" space="$target" value="$safepos" object="$target.zone"/>
      <debug_text text="'pos: %s, safepos: %s'.[$pos, $relsafepos]" chance="$debugchance"/>
      <move_to object="this.assignedcontrolled" destination="$target.zone" finishonapproach="false" forcesteering="not this.assignedcontrolled.iscapitalship" forceposition="false" forcerotation="true" abortpath="true" uselocalhighways="false" rollintoturns="false">
        <position value="$safepos"/>
        <rotation value="$rot"/>
      </move_to>

      <set_value name="$loopcount" exact="0"/>

      <label name="shoot"/>

      <include_interrupt_actions ref="SanityChecks"/>
      <do_if value="$fail?">
        <resume label="finish"/>
      </do_if>

      <set_value name="$pickupradius" exact="this.assignedcontrolled.distanceto.{$target} + $target.size / 2.0"/>

      <debug_text text="'locks acquired. opening fire.'" chance="$debugchance"/>
      <!-- doesn't really matter which one we choose. have to shoot off all of them. -->
      <set_value name="$primarytarget" exact="$locks.random"/>
      <do_all exact="$locks.count" counter="$i">
        <check_line_of_sight name="$los" object="this.assignedcontrolled" target="$locks.{$i}"/>
        <do_if value="$los">
          <set_value name="$primarytarget" exact="$locks.{$i}"/>
          <debug_text text="'target changed to %s in line of sight.'.[$primarytarget]" chance="$debugchance"/>
          <break/>
        </do_if>
      </do_all>
      <remove_value name="$los"/>

      <!-- if using tight tolerances, do not pass in a target list to use the basic shoot controller. otherwise, it will use the tolerance to decide which target to shoot at and, if all targets are all beyond tolerance with respect to the gun barrels, won't choose any of them. -->
      <shoot_at object="this.assignedcontrolled" target="$primarytarget" missiles="false" tolerance="0.1deg"/>

      <wait>
        <interrupt>
          <conditions>
            <check_any>
              <event_object_destroyed object="$primarytarget"/>
              <check_all>
                <event_object_destroyed group="$locks"/>
                <debug_text text="'lock destroyed. %s locks remaining.'.[@$locks.count]" debugchance="$debugchance"/>
                <check_value value="not @$locks.count"/>
              </check_all>
            </check_any>
          </conditions>
          <actions>
            <set_value name="$shot"/>
          </actions>
        </interrupt>
        <interrupt_after_time time="15s"/>
      </wait>

      <do_if value="@$locks.count">
        <do_if value="not $shot?">
          <set_value name="$loopcount" exact="@$loopcount + 1"/>
        </do_if>
        <remove_value name="$shot"/>
        <do_if value="@$loopcount lt 4">
          <resume label="shoot"/>
        </do_if>
        <debug_text text="'no shot after 4 loops. repositioning'" chance="$debugchance"/>
        <resume label="openlockbox"/>
      </do_if>

      <apply_experience entity="this" experience="'ship_opened_lockbox'" factor="1.0"/>
      <apply_experience object="this.assignedcontrolled" role="entityrole.service" experience="'ship_opened_lockbox'" factor="1.0"/>

      <label name="collect"/>

      <set_value name="$collecting"/>

      <debug_text text="'collecting dropped items'" chance="$debugchance"/>
      <do_if value="not $pickupradius?">
        <set_value name="$pickupradius" exact="this.assignedcontrolled.maxradarrange / 4m"/>
        <do_if value="$target.exists">
          <set_value name="$pickupradius" exact="this.assignedcontrolled.distanceto.{$target} + $target.size / 2.0"/>
        </do_if>
      </do_if>
      <create_position name="$sectorpos" space="this.sector" value="this.assignedcontrolled.position" object="this.zone"/>
      <!-- by default, this will collect everything within this ship's radar range. -->
      <run_script name="'order.collect.ship.radius'">
        <param name="destination" value="[this.sector, $sectorpos]"/>
        <param name="radius" value="$pickupradius"/>
        <param name="debugchance" value="$debugchance"/>
      </run_script>

      <label name="finish"/>

      <do_if value="@global.$foundlockboxes.indexof.{$target}">
        <debug_text text="'finish, high: removing %s from list.'.[$target]" chance="$debugchance"/>
        <remove_from_list name="global.$foundlockboxes" exact="$target"/>
      </do_if>

      <set_to_default_flight_control_model object="this.assignedcontrolled"/>

      <do_if value="$fail?">
        <do_if value="@this.assignedcontrolled.order.id == 'CollectLockbox'">
          <cancel_order order="this.assignedcontrolled.order"/>
        </do_if>
        <return value="false"/>
      </do_if>

      <wait exact="1ms"/>

      <do_if value="not this.assignedcontrolled.isunit and not this.assignedcontrolled.nextorder and (not this.assignedcontrolled.commander or (this.assignedcontrolled.commander == player.occupiedship)) and notification.npc_await_orders.active">
        <set_value name="$speakline" exact="10304" comment="Awaiting orders."/>
        <run_script name="'player.interaction'" sinceversion="1">
          <param name="Line" value="$speakline"/>
          <param name="MaxQueueDelay" value="10s"/>
          <param name="caption" value="'%s (%s)'.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]"/>
          <param name="interactive" value="false"/>
          <param name="debugchance" value="$debugchance"/>
        </run_script>
      </do_if>
    </actions>
  </attention>
  <attention min="unknown">
    <actions>

      <wait exact="1ms"/>

      <label name="start"/>

      <do_if value="this.assignedcontrolled.iscapitalship">
        <debug_text text="'ship is a capital ship. unable to comply'" chance="$debugchance"/>
        <set_value name="$fail"/>
      </do_if>
      <do_elseif value="not this.assignedcontrolled.dps.lasers.all">
        <debug_text text="'no non-missile forward-mounted weapons available. unable to comply'" chance="$debugchance"/>
        <set_value name="$fail"/>
      </do_elseif>
      <include_interrupt_actions ref="SanityChecks"/>
      <do_if value="$fail?">
        <resume label="finish"/>
      </do_if>

      <do_if value="not @global.$foundlockboxes.indexof.{$target}">
        <do_if value="not global.$foundlockboxes?">
          <set_value name="global.$foundlockboxes" exact="[$target]"/>
        </do_if>
        <do_else>
          <append_to_list name="global.$foundlockboxes" exact="$target"/>
        </do_else>
      </do_if>

      <do_if value="this.zone != $target.zone">
        <do_if value="'going to target zone.'"/>
        <run_script name="'move.generic'">
          <param name="destination" value="$target.zone"/>
          <param name="endintargetzone" value="true"/>
          <param name="debugchance" value="$debugchance" />
        </run_script>
      </do_if>
      <include_interrupt_actions ref="SanityChecks"/>
      <do_if value="$fail?">
        <resume label="finish"/>
      </do_if>

      <label name="openlockbox"/>

      <move_to object="this.assignedcontrolled" destination="$target" finishonapproach="true" forceposition="false" forcerotation="false" abortpath="true" uselocalhighways="false"/>

      <label name="shoot"/>

      <include_interrupt_actions ref="SanityChecks"/>
      <do_if value="$fail?">
        <resume label="finish"/>
      </do_if>

      <set_value name="$pickupradius" exact="this.assignedcontrolled.distanceto.{$target} + $target.size / 2.0"/>

      <do_if value="true" chance="this.assignedcontrolled.combinedskill">
        <debug_text text="'opening lockbox'" chance="$debugchance"/>
        <open_lockbox object="this.assignedcontrolled" lockbox="$target"/>
      </do_if>
      <do_else>
        <debug_text text="'opening failed. lockbox destroyed.'" chance="$debugchance"/>
        <destroy_object object="$target"/>
        <resume label="finish"/>
      </do_else>

      <apply_experience entity="this" experience="'ship_opened_lockbox'" factor="1.0"/>
      <apply_experience object="this.assignedcontrolled" role="entityrole.service" experience="'ship_opened_lockbox'" factor="1.0"/>

      <label name="collect"/>

      <set_value name="$collecting"/>

      <debug_text text="'collecting dropped items'" chance="$debugchance"/>
      <do_if value="not $pickupradius?">
        <set_value name="$pickupradius" exact="this.assignedcontrolled.maxradarrange / 4m"/>
        <do_if value="$target.exists">
          <set_value name="$pickupradius" exact="this.assignedcontrolled.distanceto.{$target} + $target.size / 2.0"/>
        </do_if>
      </do_if>
      <create_position name="$sectorpos" space="this.sector" value="this.assignedcontrolled.position" object="this.zone"/>
      <!-- by default, this will collect everything within this ship's radar range. -->
      <run_script name="'order.collect.ship.radius'">
        <param name="destination" value="[this.sector, $sectorpos]"/>
        <param name="radius" value="$pickupradius"/>
        <param name="debugchance" value="$debugchance"/>
      </run_script>

      <label name="finish"/>

      <do_if value="@global.$foundlockboxes.indexof.{$target}">
        <debug_text text="'finish, low: removing %s from list.'.[$target]" chance="$debugchance"/>
        <remove_from_list name="global.$foundlockboxes" exact="$target"/>
      </do_if>

      <set_to_default_flight_control_model object="this.assignedcontrolled"/>

      <do_if value="$fail?">
        <do_if value="@this.assignedcontrolled.order.id == 'CollectLockbox'">
          <cancel_order order="this.assignedcontrolled.order"/>
        </do_if>
        <return value="false"/>
      </do_if>

      <wait exact="1ms"/>

      <do_if value="not this.assignedcontrolled.isunit and not this.assignedcontrolled.nextorder and (not this.assignedcontrolled.commander or (this.assignedcontrolled.commander == player.occupiedship)) and notification.npc_await_orders.active">
        <set_value name="$speakline" exact="10304" comment="Awaiting orders."/>
        <run_script name="'player.interaction'" sinceversion="1">
          <param name="Line" value="$speakline"/>
          <param name="MaxQueueDelay" value="10s"/>
          <param name="caption" value="'%s (%s)'.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]"/>
          <param name="interactive" value="false"/>
          <param name="debugchance" value="$debugchance"/>
        </run_script>
      </do_if>
    </actions>
  </attention>
  <on_abort>
    <!-- do not clean up global.$foundlockboxes here! it will allow the ship to detect the lockbox again if this order is aborted due to adding a new order. global.$foundlockboxes cleaned up at label finish or at detection. -->
    <set_to_default_flight_control_model object="this.assignedcontrolled"/>
  </on_abort>
</aiscript>