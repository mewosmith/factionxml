<?xml version="1.0" encoding="iso-8859-1"?>
<aiscript name="order.mining.collect.ship" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="2">
  <!--
  This script does the actual mining both high and low attention. While there is
  no difference between gas and mineral mining in low attention, solid mining is
  separated in high attention (because gases can't be picked up).
  by Michael, Benedikt, Adrian
  -->
  <order id="MiningCollect" name="{1041, 561}" description="{1041, 562}" category="internal">
    <params>
      <param name="destination" required="true" type="position" text="{1041, 10027}" comment="Destination. Position: [space, position]. Defines position where resources are to be found.">
        <input_param name="class" value="class.sector"/>
      </param>
      <param name="ware" type="ware" text="{1041, 10144}" comment="Ware. Ware to mine.">
        <input_param name="mining" value="$destination"/>
        <input_param name="cancarry" value="this.ship"/>
      </param>
      <param name="secwares" type="list" default="[]" text="{1041, 10110}" advanced="true" comment="Secondary wares">
        <input_param name="type" value="'ware'"/>
        <input_param name="mining" value="$destination" />
        <input_param name="cancarry" value="this.ship"/>
      </param>
      <param name="internalorder" type="bool" default="false" advanced="true" text="{1041, 10159}" comment="Order results from an automated behavior."/>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>

      <!-- debug_eco -->
      <param name="time_started" default="player.age" type="internal" text="'Time Started'"/>
      <param name="debug_eco" default="0" type="internal" text="'Eco Debugchance'"/>
    </params>
    <requires primarypurpose="purpose.mine"/>
    <location object="$destination.{1}" position="$destination.{2}"/>
  </order>
  <interrupts>
    <library>
      <actions name="debug.economy.mining">
        <do_if value="@global.$economydebuggingactive">
          <do_if value="not this.$gatherdata?">
            <set_value name="this.$gatherdata" exact="table[]" />
          </do_if>
          <set_value name="this.$gatherdata.{$currentware}" exact="$gathered" operation="add" />
        </do_if>
      </actions>
    </library>
    <handler ref="SectorChangeHandler"/>
    <handler ref="AttackHandler" />
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler" />
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="ResupplyHandler" />
    <handler ref="TargetInvalidHandler"/>
  </interrupts>
  <init>
    <!-- Destination no longer exists -->
    <do_if value="not $destination.{1}.exists">
      <debug_text text="'input destination, %s %s %s, does not exist.'.[$destination.{1}.class, $destination.{1}.knownname, $destination.{1}]" filter="error"/>
      <return value="'aborted'"/>
    </do_if>

    <do_if value="$destination.{1}.isclass.sector">
      <set_value name="$sector" exact="$destination.{1}"/>
      <set_value name="$pos" exact="$destination.{2}"/>
    </do_if>
    <do_elseif value="$destination.{1}.sector">
      <set_value name="$sector" exact="$destination.{1}.sector"/>
      <create_position name="$pos" space="$sector" value="$destination.{2}" object="$destination.{1}"/>
    </do_elseif>
    <do_else>
      <debug_text text="'ERROR: destination %s %s %s is neither a sector nor in a sector.'.[$destination.{1}.class, $destination.{1}.knownname, $destination.{1}]" filter="error"/>
      <return value="'nosector'"/>
    </do_else>

    <set_value name="$dronelaunchdelay" exact="3s" comment="the minimum delay between two drone launches (used also for simulating waits)"/>
    <set_value name="$bigship" exact="this.ship.isclass.[class.ship_xl, class.ship_l]" />
    <set_value name="$startcapacity" exact="this.assignedcontrolled.cargo.{$ware}.free"/>

    <set_command command="command.mining" param="$sector"/>
  </init>
  <patch sinceversion="2">
    <!-- patched to true since that is safer. if no path is possible, order should be called again with the proper flag set. -->
    <set_value name="$internalorder" exact="this.isplayerowned"/>
  </patch>
  <attention min="visible">
    <actions>
      <!-- For big ships, if mineral mining, check drones collectors -->
      <do_if value="$bigship and $ware.tags.indexof.{tag.mineral} and not this.ship.units.collect.{$ware}.count">
        <debug_text text="'Ship trying to gather minerals with collector drones, but has none'" filter="error" />
        <signal_objects object="this.assignedcontrolled" param="'resupply'" param2="[true]" param3="$debugchance" comment="param2 = [urgent?, resupplystationID], param3 = $debugchance"/>
        <!-- NB: this script will end either by interrupt.restock adding a new order while this script waits or by this script returning. -->
        <wait exact="1s" sinceversion="1"/>
        <return value="'nodrones'"/>
      </do_if>

      <label name="start" />

      <!-- Move to destination -->
      <!-- NB: this script does no movement to $pos before trying to gather resources so we must always be at $pos before proceeding to the while below. -->
      <debug_text text="'Go mining to: %s %s %s'.[$sector.class, $sector.knownname, $sector]" chance="$debugchance"/>
      <run_script name="'move.generic'" result="$movesuccess">
        <param name="destination" value="$sector"/>
        <param name="position" value="$pos"/>
        <param name="strictblacklist" value="$internalorder"/>
        <param name="debugchance" value="$debugchance"/>
      </run_script>
      <do_if value="not $movesuccess">
        <debug_text text="'Unable to move to destination %s %s possibly due to blacklist. Returning.'.[$sector.class, @$sector.knownname]" chance="$debugchance"/>
        <return value="'nopath'"/>
      </do_if>

      <!-- mineral mining -->
      <do_if value="$ware.tags.indexof.{tag.mineral}">
        <!-- capital ships -->
        <do_if value="this.ship.iscapitalship">
          <set_value name="$collectscript" exact="'mining.collect.ship.capital'" />
        </do_if>
        <!-- S/M ships -->
        <do_else>
          <set_value name="$collectscript" exact="'mining.collect.ship.medium'" />
        </do_else>
      </do_if>
      <!-- non-mineral mining (gas) -->
      <do_else>
        <set_value name="$collectscript" exact="'mining.collect.ship.liquid'" />        
      </do_else>

      <debug_text text="'run $collectscript %1, this class %2'.[$collectscript, this.ship.class]" chance="$debugchance" />

      <!-- Helper script to execute mineral or liquid mining on medium or capital ships-->
      <run_script name="$collectscript" result="$returnresult">
        <param name="destination" value="$destination"/>
        <param name="ware" value="$ware"/>
        <param name="secwares" value="$secwares"/>
        <param name="dronelaunchdelay" value="$dronelaunchdelay" />
        <param name="debugchance" value="$debugchance"/>

        <!-- debug_eco -->
        <param name="time_started" value="$time_started"/>
        <param name="debug_eco" value="$debug_eco"/>
      </run_script>

      <do_if value="not this.assignedcontrolled.cargo.{$ware}.free and (this.assignedcontrolled.cargo.{$ware}.max - $startcapacity)">
        <!-- we have duration, amount collected, max capacity. nothing sensible and consistent to compare duration with so sticking with amount. useful since ratio between amount collected and max capacity can be influenced. -->
        <set_value name="$XP_factor" exact="[(this.assignedcontrolled.cargo.{$ware}.max - $startcapacity)f / [(this.assignedcontrolled.cargo.{$ware}.max)f, 1.0].max, 1.0].min"/>
        <debug_text text="'applying mining XP. factor: %s, start capacity: %s, max capacity: %s'.[$XP_factor, $startcapacity, this.assignedcontrolled.cargo.{$ware}.max]" chance="$debugchance"/>

        <apply_experience entity="this" experience="'ship_mine_full'" factor="$XP_factor"/>
        <apply_experience object="this.assignedcontrolled" role="entityrole.service" experience="'ship_mine_full'" factor="$XP_factor"/>
      </do_if>

      <!-- high timeout. miners have time and we want to make sure all drones make it back in. -->
      <run_script name="'lib.recall.subordinates'">
        <param name="timeout" value="1h"/>
        <param name="debugchance" value="$debugchance"/>
      </run_script>
      <debug_text text="'%1 Result of collecting %2 in %3 %4 (%5): %6'.[player.age, $ware, $sector.class, $sector.knownname, $sector, $returnresult]" chance="$debugchance"/>

      <return value="$returnresult" />

    </actions>
  </attention>
  <attention min="unknown">
    <actions>
      <!-- For big ships, if mineral mining, check drones collectors -->
      <do_if value="$bigship and $ware.tags.indexof.{tag.mineral} and not this.ship.units.collect.{$ware}.count">
        <debug_text text="'Ship trying to gather minerals with collector drones, but has none'" filter="error" />
        <signal_objects object="this.assignedcontrolled" param="'resupply'" param2="[true]" param3="$debugchance" comment="param2 = [urgent?, resupplystationID], param3 = $debugchance"/>
        <!-- NB: this script will end either by interrupt.restock adding a new order while this script waits or by this script returning. -->
        <wait exact="1s" sinceversion="1"/>
        <return value="'nodrones'" />
      </do_if>

      <label name="start" />

      <!-- Move to destination -->
      <!-- NB: this script does no movement to $pos before trying to gather resources so we must always be at $pos before proceeding to the while below. -->
      <do_if value="@$returnresult != 'in_position'">
        <debug_text text="'Go mining to: %s %s %s'.[$sector.class, $sector.knownname, $sector]" chance="$debugchance"/>
        <run_script name="'move.generic'" result="$movesuccess">
          <param name="destination" value="$sector"/>
          <param name="position" value="$pos"/>
          <param name="strictblacklist" value="$internalorder"/>
          <param name="debugchance" value="0"/>
        </run_script>
        <do_if value="not $movesuccess">
          <debug_text text="'Unable to move to destination %s %s possibly due to blacklist. Returning.'.[$sector.class, @$sector.knownname]" chance="$debugchance"/>
          <return value="'nopath'"/>
        </do_if>
      </do_if>

      <wait min="8s" max="12s" />

      <do_while value="this.ship.cargo.{$ware}.free gt 0">

        <!-- command action simulation -->
        <do_any>
          <set_command_action commandaction="commandaction.searchingresources" weight="60" />
          <set_command_action commandaction="commandaction.flying" weight="40" />
        </do_any>

        <!-- For big ships, if mineral mining, check drones collectors -->
        <do_if value="$bigship and $ware.tags.indexof.{tag.mineral} and not this.ship.units.collect.{$ware}.count">
          <debug_text text="'Ship trying to gather minerals with collector drones, but has none'" filter="error" />
          <cease_fire object="this.ship" weaponmode="weaponmode.mining"/>
          <return value="'nodrones'" />
        </do_if>

        <set_value name="$currentware" exact="$ware" />
        <!-- 20% chance that we try to collect one of the other resources that can be gathered in this sector if they are useful to our homebase, $tryware can be the same as $ware -->
        <do_if value="$secwares.count" chance="10">
          <set_value name="$tryware" exact="$secwares.random"/>
          <!-- evaluate if should use a secondary ware (either is not a big ship, or the ware is not mineral, or it is mineral and needs collectors) -->
          <do_if value="this.ship.cargo.{$tryware}.free and (not $bigship or not $tryware.tags.indexof.{tag.mineral} or this.ship.units.collect.{$tryware}.count)">
            <debug_text text="'OOZ mining: try other ware (%1)'.[$tryware]" chance="$debugchance" />
            <set_value name="$currentware" exact="$tryware"/>
          </do_if>
          <remove_value name="$tryware" />
        </do_if>
        <create_position name="$sectorpos" space="$sector" object="this.ship" />
        <get_resource_gatherrate name="$gatherrate" refobject="this.ship" sector="$sector" ware="$currentware">
          <position value="$sectorpos" />
        </get_resource_gatherrate>
        <do_if value="$gatherrate" max="0">
          <debug_text text="player.age + ' WARNING: gatherrate for %1 in sector %2 is %3'.[$currentware, $sector.knownname, $gatherrate]" chance="$debugchance"/>
        </do_if>
        <set_value name="$gatherstart" exact="player.age" />
        <!-- smaller mining ships need some time to gather more than zero resources -->
        <set_turret_targets object="this.ship" weaponmode="weaponmode.mining" />
        <do_if value="this.ship.isclass.[class.ship_xl, class.ship_l]">
          <wait min="16s" max="24s"/>
        </do_if>
        <do_else>
          <wait min="112s" max="128s"/>
        </do_else>
        <set_value name="$currentgathertime" exact="player.age - $gatherstart" />
        <set_value name="$gathered" exact="$currentgathertime * $gatherrate" />
        <do_if value="this.ship.cargo.{$currentware}.free lt $gathered">
          <set_value name="$gathered" exact="[0, this.ship.cargo.{$currentware}.free].max" />
        </do_if>
        <debug_text text="'gather rate: %s, gathered: %s, capacity: %s'.[$gatherrate, $gathered, this.ship.cargo.{$currentware}.free]" chance="$debugchance"/>

        <!-- Used for economy logging data -->
        <include_interrupt_actions ref="debug.economy.mining" />
        
        <debug_text text="player.age + ' collected %1 units of %2 in sector %3 in %4 seconds (%5 units/s)'.[$gathered, $currentware, $sector.knownname, $currentgathertime, $gatherrate]" chance="$debugchance" />

        <deplete_yield sector="$sector" container="this.ship" ware="$currentware" amount="$gathered">
          <position value="$sectorpos" />
        </deplete_yield>

      </do_while>

      <cease_fire object="this.ship" weaponmode="weaponmode.mining"/>

      <debug_text text="player.age + ' %1(job: \'%2\') completed gather-run of %3 in %4. Cargo: %5'.[this.ship.knownname, this.ship.job, $ware, $sector.knownname, this.ship.cargo.list]" chance="$debugchance" />

      <do_if value="not this.assignedcontrolled.cargo.{$ware}.free and (this.assignedcontrolled.cargo.{$ware}.max - $startcapacity)">
        <!-- we have duration, amount collected, max capacity. nothing sensible and consistent to compare duration with so sticking with amount. useful since ratio between amount collected and max capacity can be influenced. -->
        <set_value name="$XP_factor" exact="[(this.assignedcontrolled.cargo.{$ware}.max - $startcapacity)f / [(this.assignedcontrolled.cargo.{$ware}.max)f, 1.0].max, 1.0].min"/>
        <debug_text text="'applying mining XP. factor: %s, start capacity: %s, max capacity: %s'.[$XP_factor, $startcapacity, this.assignedcontrolled.cargo.{$ware}.max]" chance="$debugchance"/>

        <apply_experience entity="this" experience="'ship_mine_full'" factor="$XP_factor"/>
        <apply_experience object="this.assignedcontrolled" role="entityrole.service" experience="'ship_mine_full'" factor="$XP_factor"/>
      </do_if>

      <run_script name="'lib.recall.subordinates'"/>
      <debug_text text="'%1 Result of collecting %2 in %3 %4 (%5): %6'.[player.age, $ware, $sector.class, $sector.knownname, $sector, 'cargofull']" chance="$debugchance"/>

      <return value="'cargofull'" />

    </actions>
  </attention>
</aiscript>