<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="fight.attack.object.bigtarget" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="9">
  <!--

  Fighter vs Capital/Station 
  
  Attack of a small ship (xs, s, m) against big object (l, xl, station).  
  The target can be a component or big object.
    
  Attack run:	
	1 - Select component (shields, turrets, ...)
	1 - Weapons in large shoot controller (shoot the entire object)
	2 - Fly with the big fight behaviour
	3 - Gain distance (after time)
		3.1 - Evade under attack (NPC skill)
	4 - Go to 1

	Will break the attack when:
	- target destroyed/docked/not enemy
	- far away from escort (if escort)
	- far away from this (if not pursuetargets)	

  -->
  <params>
    <param name="target" comment="Big target to attack. Must be station (or component) or capital ship (ship_l, ship_xl or component)" />
    <param name="escort" comment="Objects to escort - stay at 'pursuedistance' and shoot enemies attacking this" />
    <param name="pursuedistance" comment="Distance to pursue/escort (if pursuetargets true or 'escort' provided). Default: max radar range" />
    <param name="pursuetargets" comment="Pursue the target no matter what. Default: false" />
    <param name="allowothertargets" comment="Whether the script shall keep running when all primary targets have been destroyed. Default: true" />
    <param name="checkrelation" />
    <param name="disable" default="false" comment="Instructs this ship to only try to disable the target or targets without destroying it."/>
    <param name="disablehullpercentagethreshold" default="20" comment="If disable is set, this ship will stop firing if the hull of the target is at or below this percentage."/>
    <param name="maintaindistance" comment="If a carrier, use radar range instead of weapon range to determine range thresholds. Only used in capital ship combat movement script. Default: false"/>
    <param name="boardingbehavior" comment="If not null, the behavior assigned to this ship while boarding $target."/>
    <param name="behaviortargetclasses" comment="Target classes associated with boardingbehavior. disablehullpercentagethreshold will be ignored if current target is a behavior target. (Otherwise, we could have a situation where the hull threshold is reached but the boarding phase threshold has not been reached thus stalling the boarding operation.)"/>
    <param name="allowboost" default="true" comment="Allow use of boost while in combat."/>

    <param name="radius" default="null" comment="disengage if target goes beyond this distance relative to radiusanchorpos in radiusanchorspace"/>
    <param name="radiusanchorpos" default="null"/>
    <param name="radiusanchorspace" default="null"/>

    <param name="debugchance" default="0"/>
  </params>
  <interrupts>
    <handler ref="DisengageHandler"/>
    <handler ref="TargetInvalidHandler"/>
  </interrupts>
  <init>
    <!-- check for components in station/capital ship  -->
    <do_if value="$target.container.exists">
      <set_value name="$bigtarget" exact="$target.container"/>
      <set_value name="$iscapship" exact="@$bigtarget.iscapitalship"/>
    </do_if>
    <do_else>
      <!-- For stations, l,xl ships and Stations -->
      <set_value name="$bigtarget" exact="$target"/>
      <set_value name="$iscapship" exact="@$target.iscapitalship"/>
      <set_value name="$attackingbigtarget"/>
    </do_else>

    <do_if value="not this.assignedcontrolled.dps.lasers.all and this.assignedcontrolled.dps.missiles.all">
      <set_value name="$needsammo"/>
    </do_if>
  </init>
  <patch sinceversion="1">
    <do_if value="$target == $bigtarget">
      <set_value name="$attackingbigtarget"/>
    </do_if>
  </patch>
  <patch sinceversion="2">
    <do_if value="this.assignedcontrolled.attention ge attention.visible">
      <set_value name="$duration_movement" exact="[((this.assignedcontrolled.bboxdistanceto.{$target} + this.assignedcontrolled.size) / [this.assignedcontrolled.maxspeed, 1m].max)s, 40s].max"/>
      <debug_text text="'PATCH: duration of attack movement: %ss'.[$duration_movement]" filter="savegame"/>
    </do_if>
  </patch>
  <patch sinceversion="3">
    <do_if value="not @$radius">
      <set_value name="$radius" exact="null"/>
      <set_value name="$radiusanchorpos" exact="null"/>
      <set_value name="$radiusanchorspace" exact="null"/>
    </do_if>
  </patch>
  <patch sinceversion="5" early="true">
    <set_value name="$boost" exact="false"/>
  </patch>
  <patch sinceversion="6">
    <do_if value="not $allowboost?">
      <set_value name="$allowboost" exact="true"/>
    </do_if>
  </patch>
  <patch sinceversion="7">
    <do_if value="$result? and $bigtarget.canbeattacked and (this.attention lt attention.visible)">
      <get_attackstrength object="this.assignedcontrolled" target="$bigtarget" usedrones="false">
        <result hullshield="$result_hullshield" hullonly="$result_hullonly" shieldonly="$result_shieldonly" hullnoshield="$result_hullnoshield"/>
      </get_attackstrength>
      <remove_value name="$result"/>
    </do_if>
  </patch>
  <patch sinceversion="8">
    <do_if value="this.attention lt attention.visible">
      <set_value name="$table_ammousage" exact="table[]"/>
      <do_for_each name="$turret" in="this.assignedcontrolled.turrets.operational.list">
        <set_value name="$locmacro" exact="$turret.ammo.macro"/>
        <do_if value="$locmacro and this.assignedcontrolled.ammostorage.{$locmacro}.count">
          <set_value name="$table_ammousage.{$locmacro}" exact="1" operation="add"/>
        </do_if>
      </do_for_each>
      <do_for_each name="$weapon" in="this.assignedcontrolled.weapons.operational.list">
        <set_value name="$locmacro" exact="$weapon.ammo.macro"/>
        <do_if value="$locmacro and this.assignedcontrolled.ammostorage.{$locmacro}.count">
          <set_value name="$table_ammousage.{$locmacro}" exact="1" operation="add"/>
        </do_if>
      </do_for_each>
      <remove_value name="$locmacro"/>
    </do_if>
  </patch>
  <patch sinceversion="9">
    <set_value name="$MaxGainDistance" exact="this.ship.maxcombatrange.all"/>
    <set_value name="$MinGainDistance" exact="$MaxGainDistance * 0.5"/>
  </patch>
  <attention min="visible">
    <actions>
      <do_if value="not $target.canbeattacked">
        <debug_text text="'target cannot be attacked'" chance="$debugchance" />
        <resume label="finish" />
      </do_if>

      <label name="fight"/>

      <do_if value="@$bigtarget.zone.isclass.highway">
        <!-- DisengageHandler will land us here. -->
        <debug_text text="'target now in a highway. disengaging.'" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <!-- Set the shoot target, depending on a component of a station or a entire capship -->
      <do_if value="$iscapship">
        <!-- Tolerances depending on: l,xl ships, stations, station components-->
        <set_value name="$ToleranceWeapon1" exact="8.0deg" />
        <set_value name="$ToleranceWeapon2" exact="4.0deg" />
        <set_value name="$MinGainDistance" exact="this.ship.maxcombatrange.all * 0.75" />
      </do_if>
      <do_else>
        <!-- Tolerances depending on: l,xl ships, stations, station components-->
        <set_value name="$ToleranceWeapon1" exact="18.0deg" />
        <set_value name="$ToleranceWeapon2" exact="8.0deg" />
        <set_value name="$MinGainDistance" exact="this.ship.maxcombatrange.all" />
      </do_else>

      <!-- if we want to disable the target we will need tighter control of whether we shoot or not so that will have to be set within the do_while below. -->
      <do_if value="not $disable and not this.ship.defencenpc">
        <!-- Fire -->
        <shoot_at object="this.ship" target="$bigtarget" largetarget="true" tolerance="$ToleranceWeapon1" fixedtarget="true"/>
      </do_if>

      <!-- BEGIN FIGHT MOVEMENT -->
      <!-- 
            1. fly towards the target
            2. this script is meant for fighters, so don't do any drastic speed changes
            3. if we get too close, veer off, preferably in the direction we're going to minimize turns
            4. repeat
        -->

      <debug_text text="'start fight (select shooting): ' + $target.knownname" chance="$debugchance"/>

      <set_value name="$doevade" exact="false" />

      <do_while value="$target.canbeattacked">

        <do_if value="($checkrelation and not this.mayattack.{$bigtarget}) or @$bigtarget.dock">
          <debug_text text="this.ship.name + ' is not killable enemy to ' + $bigtarget.knownname" chance="$debugchance"/>
          <resume label="finish"/>
        </do_if>

        <do_if value="$disable and not this.ship.defencenpc">
          <do_if value="(@$behaviortargetclasses.count and $target.isclass.{$behaviortargetclasses}) or ( $bigtarget.hull gt this.ship.dps.lasers.all and ($bigtarget.hullpercentage + $bigtarget.shieldpercentage) gt $disablehullpercentagethreshold )">
            <!-- Fire. If shooting to disable, only shoot at the target. should be some subcomponent. -->
            <shoot_at object="this.ship" target="$target" tolerance="$ToleranceWeapon1" fixedtarget="true"/>
            <debug_text text="'disabletarget hull level above threshold. continuing attack.\n target hull percentage: %s\n threshold: %s\n behavior target? %s'.[$bigtarget.hullpercentage, $disablehullpercentagethreshold, not @$behaviortargetclasses.count or $target.isclass.{$behaviortargetclasses}]" chance="$debugchance"/>
          </do_if>
          <do_else>
            <stop_shooting object="this.ship"/>
            <debug_text text="'disabletarget hull level below threshold. holding fire.'" chance="$debugchance"/>
          </do_else>
        </do_if>

        <do_if value="$needsammo? and not this.assignedcontrolled.ammostorage.missile.count">
          <do_if value="not @this.$resupplier.isoperational and not @$localresupplier.isoperational and this.sector">
            <find_ship name="$localresupplier" cansupplyclass="this.assignedcontrolled.class" owner="this.owner" space="this.sector"/>
          </do_if>
          <do_if value="not this.isplayerowned or @this.$resupplier.isoperational or @$localresupplier.isoperational">
            <debug_text text="'%s %s %s out of ammo. moving to drydock for supplies.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
            <set_value name="$resupplier" exact="null"/>
            <do_if value="@this.$resupplier.isoperational">
              <set_value name="$resupplier" exact="this.$resupplier"/>
            </do_if>
            <do_elseif value="@$localresupplier.isoperational">
              <set_value name="$resupplier" exact="$localresupplier"/>
            </do_elseif>
            <create_order id="'Resupply'" object="this.assignedcontrolled" immediate="true">
              <param name="param_station" value="$resupplier"/>
              <param name="internalorder" value="true"/>
              <param name="debugchance" value="$debugchance"/>
            </create_order>
            <!-- cancel the attack order so we don't keep trying to attack in case resupply fails -->
            <do_if value="(this.assignedcontrolled.nextorder.id != 'Board')">
              <!-- if we are out of ammo, cannot attack, and are boarding, do not cancel the board order. situation is handled when that script initializes. -->
              <cancel_order order="this.assignedcontrolled.nextorder"/>
            </do_if>
          </do_if>
          <do_else>
            <debug_text text="'player-owned ship %s %s %s out of ammo. sending notification and stopping attack.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
            <do_if value="notification.npc_out_of_ammo.active">
              <!-- INTERACTION: out of ammo. cannot attack. -->
              <run_script name="'player.interaction'" result="$locresponse">
                <param name="Line" value="5028" comment="Requesting instructions."/>
                <param name="UIText" value="{1015, 35}.[this.ship.idcode, this.ship.name]" comment="Requesting Orders"/>
                <param name="ConversationParam" value="'g_playerownedship_attacking_outofammo'"/>
                <param name="MaxQueueDelay" value="10s"/>
                <param name="caption" value="{1015, 43} + ' - %s (%s)'.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]" comment="Out of ammo"/>
                <param name="debugchance" value="$debugchance"/>
              </run_script>
            </do_if>
            <do_if value="@$locresponse != 'getammo' and this.assignedcontrolled.order">
              <write_to_logbook category="general" title="{1015, 43}" text="{1016, 95}.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]" interaction="showonmap" object="this.assignedcontrolled"/>
              <do_if value="this.assignedcontrolled.order.id != 'Board'">
                <!-- if we are out of ammo, cannot attack, and are boarding, do not cancel the board order. situation is handled when that script initializes. -->
                <cancel_order order="this.assignedcontrolled.order"/>
              </do_if>
            </do_if>
          </do_else>
          <do_if value="@$locresponse != 'getammo'">
            <create_order id="'Flee'" object="this.assignedcontrolled" immediate="true">
              <param name="method" value="'boost'"/>
              <param name="attacker" value="$bigtarget"/>
              <param name="donotdrop" value="true"/>
              <param name="deploydistraction" value="true"/>
              <param name="log" value="false"/>
              <param name="debugchance" value="$debugchance"/>
            </create_order>
          </do_if>
          <remove_value name="$locresponse"/>
        </do_if>

        <do_if value="$escort.exists">
          <set_value name="$refobject" exact="$escort"/>
        </do_if>
        <do_else>
          <set_value name="$refobject" exact="this.ship"/>
        </do_else>

        <!-- If the target is in a different sector, or is farther than pursuedistance (should normally be radar range), -->
        <do_if value="this.sector != $bigtarget.sector or (not $pursuetargets and $refobject.distanceto.{$bigtarget} gt $pursuedistance)">
          <!-- break off attack. implementation of pursuetargets moved to order.fight.attack.object. -->
          <debug_text text="'target is either not in the same sector or not within 10 minutes travel time and i am not authorized to pursue. breaking off attack.\n  my sector: %s\n target sector: %s\n distance to target: %s\n max distance in 10 minutes: %s\n pursue distance: %s'.[$refobject.sector, $bigtarget.sector, $refobject.distanceto.{$bigtarget}, this.ship.maxspeed*600, $pursuedistance]" chance="$debugchance"/>
          <resume label="finish"/>
        </do_if>

        <!-- check if the component in in view -->
        <check_line_of_sight object="this.ship" target="$target" name="$isinview" />
        <do_if value="$isinview" chance="this.assignedcontrolled.combinedskill">
          <set_value name="$missiletarget" exact="$target" />
          <debug_text text="'Missile target is %1 and is in view!'.[$missiletarget.knownname]" chance="$debugchance" />
        </do_if>
        <do_elseif value="$target.parent.hascontext.{$bigtarget} and $target.parent.isclass.{class.destructible}">
          <!-- station module -->
          <set_value name="$missiletarget" exact="$target.parent" />
          <debug_text text="'Missile target component %1 is NOT selected, attack parent %2'.[$target.knownname, $missiletarget.knownname]" chance="$debugchance" />
        </do_elseif>
        <do_else>
          <set_value name="$missiletarget" exact="$bigtarget" />
          <debug_text text="'Missile target component %1 is NOT selected, attack main object %2'.[$target.knownname, $missiletarget.knownname]" chance="$debugchance" />
        </do_else>

        <do_if value="not this.ship.defencenpc">
          <do_if value="not $disable or ($bigtarget.hull gt this.ship.dps.missiles.all and $bigtarget.hullpercentage gt $disablehullpercentagethreshold)">
            <do_if value="$disable">
              <shoot_at object="this.ship" target="$missiletarget" missiles="true" tolerance="$ToleranceWeapon2" fixedtarget="true"/>
            </do_if>
            <do_else>
              <shoot_at object="this.ship" target="$missiletarget" largetarget="true" missiles="true" tolerance="$ToleranceWeapon2" fixedtarget="true" />
            </do_else>
          </do_if>
        </do_if>

        <set_value name="$time_startedattackrun" exact="player.age" chance="$debugchance"/>

        <!-- this is simply to prevent prematurely stopping the attack run if we start while we are very far from the target. -->
        <set_value name="$duration_movement" exact="[((this.assignedcontrolled.bboxdistanceto.{$bigtarget} + this.assignedcontrolled.size) / [this.assignedcontrolled.maxspeed, 1m].max)s, 40s].max"/>
        <debug_text text="'starting attack run. ETA: %ss. distance to target: %sm, maximum normal speed: %s'.[$duration_movement, this.assignedcontrolled.bboxdistanceto.{$bigtarget}, this.assignedcontrolled.maxspeed]" chance="$debugchance"/>

        <!-- do a Big Target attack run -->
        <debug_text text="'start Big Target attack run to: ' + $bigtarget.knownname + ' component: ' + $target.knownname + ' - Distance=' + this.ship.distanceto.{$bigtarget} + ' .Behaviour bigfight'" chance="$debugchance" />
        <include_interrupt_actions ref="NPCUseCase_AttackRun_Small" />
        <!-- Note: the 'bigfight' behaviour takes the component (surface element) if there is one, and finds the best angle to attack it
        for regular containers (ship/station) keeps attacking normally. So $target could be: shield, turret, engine, ship, station -->
        <!-- flightbehavior stops the movement before we get too close. -->
        <move_to object="this.ship" destination="$target" flightbehaviour="flightbehaviour.bigfight" forcesteering="true" travel="$duration_movement gt 40s">
          <interrupt_after_time time="$duration_movement"/>
          <interrupt>
            <conditions>
              <check_any>
                <event_object_destroyed object="$target" />
                <event_object_launched_missile object="this.ship" />
              </check_any>
            </conditions>
          </interrupt>
        </move_to>
        <remove_value name="$duration_movement"/>

        <!-- try to gain distance for a new attack run -->
        <set_value name="$gaindistancetimeout" exact="player.age + 30s" />
        <do_if value="not this.ship.defencenpc">
          <!-- Stop shooting missiles to avoid self-hits -->
          <stop_shooting object="this.ship" missiles="true"/>
        </do_if>

        <debug_text text="'attack run done after %s seconds. moving away for another attack run.'.[player.age - $time_startedattackrun]" chance="$debugchance"/>

        <do_while value="$target.canbeattacked and $gaindistancetimeout gt player.age">

          <set_value name="$time_gaindistance" min="[10s * this.assignedcontrolled.combinedskill / 100, 1s].max" max="[30s * this.assignedcontrolled.combinedskill / 100, 3s].max"/>
          <set_value name="$boost" exact="false"/>
          <do_if value="$allowboost and not $boosted? and (this.assignedcontrolled.shieldpercentage gt 50)">
            <set_value name="$boost"/>
            <set_value name="$boosted"/>
            <set_value name="$time_gaindistance" exact="(this.assignedcontrolled.boost.maxduration * (this.assignedcontrolled.shieldpercentage / 100.0) * 0.5)s"/>
          </do_if>

          <move_to object="this.assignedcontrolled" destination="$target" flightbehaviour="flightbehaviour.gaindistance" forcesteering="true" boost="$boost">
            <interrupt_after_time time="$time_gaindistance" />
            <interrupt>
              <conditions>
                <event_object_attacked object="this.assignedcontrolled" />
                <check_value value="event.param" exact="this.assignedcontrolled" negate="true" />
                <check_value value="this.assignedcontrolled.type != shiptype.frigate"/>
                <!-- we absolutely have to get away from the target. set doevade if necessary, but do not interrupt the movement. -->
                <set_value name="$doevade" exact="true"/>
                <check_value value="false"/>
              </conditions>
            </interrupt>
          </move_to>

          <do_if value="$target.canbeattacked">
            <do_if value="$doevade">
              <break />
            </do_if>
            <do_if value="this.ship.distanceto.{$target} gt $MinGainDistance">
              <debug_text text="'component distance=' + this.ship.distanceto.{$target}" chance="$debugchance" />
              <break />
            </do_if>
          </do_if>
          <do_else>
            <break />
          </do_else>

        </do_while>
        <do_if value="$boosted?">
          <debug_text text="'%s %s %s shield percentage after boost: %s'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, this.assignedcontrolled.shieldpercentage]" chance="0"/>
        </do_if>
        <remove_value name="$boosted"/>

        <!-- evasive maneuver -->
        <do_if value="$doevade">
          <set_value name="$doevade" exact="false"/>
          <run_script name="'move.evade'">
            <param name="allowboost" value="$allowboost"/>
            <param name="debugchance" value="$debugchance"/>
          </run_script>
        </do_if>

        <wait min="100ms" max="300ms" />

      </do_while>

      <do_if value="$attackingbigtarget? and $bigtarget.canbeattacked and (not $disable or $bigtarget.hullpercentage lt $disablehullpercentage)">
        <!-- bigtarget is still operational. acquire a new subsystem and keep attacking -->
        <!-- NB: query every time we get to this point because stuff being wrecked is temporary. -->
        <do_if value="not @$behaviortargetclasses.count">
          <find_object_component name="$target" object="$bigtarget" checkoperational="true" integrated="false" indestructible="false" invulnerable="false">
            <match_any>
              <match surfaceelement="true"/>
              <match module="$bigtarget.isrealclass.station"/>
            </match_any>
          </find_object_component>
        </do_if>
        <do_else>
          <find_object_component name="$target" object="$bigtarget" checkoperational="true" class="$behaviortargetclasses" integrated="false" indestructible="false" invulnerable="false">
            <match_any>
              <match surfaceelement="true"/>
              <match module="$bigtarget.isrealclass.station"/>
            </match_any>
          </find_object_component>
        </do_else>
        <do_if value="$target.canbeattacked">
          <debug_text text="'%s %s %s attacking %s %s %s . acquired new subtarget: %s %s. valid? %s. continuing fight.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $bigtarget.idcode, $bigtarget.knownname, $bigtarget, $target.knownname, $target, not @$behaviortargetclasses.count or $target.isclass.{$behaviortargetclasses}]" chance="$debugchance"/>
          <resume label="fight"/>
        </do_if>
        <do_else>
          <debug_text text="'%s %s %s attacking %s %s %s. no more valid subtargets. back to order.fight.attack.object.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $bigtarget.idcode, $bigtarget.knownname, $bigtarget]" chance="$debugchance"/>
        </do_else>
      </do_if>

      <!-- END FIGHT MOVEMENT -->

      <label name="finish" />

      <reset_flight_behaviour object="this.ship"/>
      <stop_moving object="this.ship" />
      <do_if value="not this.ship.defencenpc">
        <cease_fire object="this.object" />
        <set_alert_level object="this.ship" level="green" />
      </do_if>
      <wait exact="100ms" />

    </actions>
  </attention>
  <attention min="unknown">
    <actions>
      <!-- OOZ -->
      <label name="fight"/>

      <do_if value="@$bigtarget.zone.isclass.highway">
        <!-- DisengageHandler will land us here. -->
        <debug_text text="'target now in a highway. disengaging.'" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <!-- Simulate the attack -->
      <set_command_action commandaction="commandaction.attacking" />

      <debug_text text="player.age + ' block 1. dist to target: ' + this.ship.distanceto.{$bigtarget}" chance="0"/>

      <set_value name="$isdead" exact="0" />
      <set_value name="$attacktime" exact="player.age + 10min" />
      <do_if value="not this.assignedcontrolled.defencenpc">
        <set_value name="$table_ammousage" exact="table[]"/>
        <do_for_each name="$turret" in="this.assignedcontrolled.turrets.operational.list">
          <set_value name="$locmacro" exact="$turret.ammo.macro"/>
          <do_if value="$locmacro and this.assignedcontrolled.ammostorage.{$locmacro}.count">
            <set_value name="$table_ammousage.{$locmacro}" exact="1" operation="add"/>
          </do_if>
        </do_for_each>
        <do_for_each name="$weapon" in="this.assignedcontrolled.weapons.operational.list">
          <set_value name="$locmacro" exact="$weapon.ammo.macro"/>
          <do_if value="$locmacro and this.assignedcontrolled.ammostorage.{$locmacro}.count">
            <set_value name="$table_ammousage.{$locmacro}" exact="1" operation="add"/>
          </do_if>
        </do_for_each>
        <remove_value name="$locmacro"/>
        <set_value name="$numammotypes" exact="$table_ammousage.keys.count" chance="$debugchance"/>
      </do_if>
      <set_value name="$MaxGainDistance" exact="this.ship.maxcombatrange.all"/>
      <set_value name="$MinGainDistance" exact="$MaxGainDistance * 0.5"/>

      <!-- repeat until target is dead (or we are) -->
      <do_while value="$bigtarget.canbeattacked and not $isdead" >

        <do_if value="($checkrelation and not this.mayattack.{$bigtarget}) or @$bigtarget.dock">
          <debug_text text="this.ship.name + ' is not killable enemy to ' + $bigtarget.knownname" chance="$debugchance"/>
          <resume label="finish"/>
        </do_if>

        <do_if value="$needsammo? and not this.assignedcontrolled.ammostorage.missile.count">
          <do_if value="not @this.$resupplier.isoperational and not @$localresupplier.isoperational and this.sector">
            <find_ship name="$localresupplier" cansupplyclass="this.assignedcontrolled.class" owner="this.owner" space="this.sector"/>
          </do_if>
          <do_if value="not this.isplayerowned or @this.$resupplier.isoperational or @$localresupplier.isoperational">
            <debug_text text="'%s %s %s out of ammo. moving to drydock for supplies.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
            <set_value name="$resupplier" exact="null"/>
            <do_if value="@this.$resupplier.isoperational">
              <set_value name="$resupplier" exact="this.$resupplier"/>
            </do_if>
            <do_elseif value="@$localresupplier.isoperational">
              <set_value name="$resupplier" exact="$localresupplier"/>
            </do_elseif>
            <create_order id="'Resupply'" object="this.assignedcontrolled" immediate="true">
              <param name="param_station" value="$resupplier"/>
              <param name="internalorder" value="true"/>
              <param name="debugchance" value="$debugchance"/>
            </create_order>
            <!-- cancel the attack order so we don't keep trying to attack in case resupply fails -->
            <do_if value="(this.assignedcontrolled.nextorder.id != 'Board')">
              <!-- if we are out of ammo, cannot attack, and are boarding, do not cancel the board order. situation is handled when that script initializes. -->
              <cancel_order order="this.assignedcontrolled.nextorder"/>
            </do_if>
          </do_if>
          <do_else>
            <debug_text text="'player-owned ship %s %s %s out of ammo. sending notification and stopping attack.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
            <do_if value="notification.npc_out_of_ammo.active">
              <!-- INTERACTION: out of ammo. cannot attack. -->
              <run_script name="'player.interaction'" result="$locresponse">
                <param name="Line" value="5028" comment="Requesting instructions."/>
                <param name="UIText" value="{1015, 35}.[this.ship.idcode, this.ship.name]" comment="Requesting Orders"/>
                <param name="ConversationParam" value="'g_playerownedship_attacking_outofammo'"/>
                <param name="MaxQueueDelay" value="10s"/>
                <param name="caption" value="{1015, 43} + ' - %s (%s)'.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]" comment="Out of ammo"/>
                <param name="debugchance" value="$debugchance"/>
              </run_script>
            </do_if>
            <do_if value="@$locresponse != 'getammo' and this.assignedcontrolled.order">
              <write_to_logbook category="general" title="{1015, 43}" text="{1016, 95}.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]" interaction="showonmap" object="this.assignedcontrolled"/>
              <do_if value="this.assignedcontrolled.order.id != 'Board'">
                <!-- if we are out of ammo, cannot attack, and are boarding, do not cancel the board order. situation is handled when that script initializes. -->
                <cancel_order order="this.assignedcontrolled.order"/>
              </do_if>
            </do_if>
          </do_else>
          <do_if value="@$locresponse != 'getammo'">
            <create_order id="'Flee'" object="this.assignedcontrolled" immediate="true">
              <param name="method" value="'boost'"/>
              <param name="attacker" value="$bigtarget"/>
              <param name="donotdrop" value="true"/>
              <param name="deploydistraction" value="true"/>
              <param name="log" value="false"/>
              <param name="debugchance" value="$debugchance"/>
            </create_order>
          </do_if>
          <remove_value name="$locresponse"/>
        </do_if>

        <do_if value="$escort.exists">
          <set_value name="$refobject" exact="$escort"/>
        </do_if>
        <do_else>
          <set_value name="$refobject" exact="this.ship"/>
        </do_else>

        <!-- If the target is in a different sector, or is farther than pursuedistance (should normally be radar range), -->
        <do_if value="this.sector != $bigtarget.sector or (not $pursuetargets and $refobject.distanceto.{$bigtarget} gt $pursuedistance)">
          <!-- break off attack. implementation of pursuetargets moved to order.fight.attack.object. -->
          <debug_text text="'target is either not in the same sector or not within 10 minutes travel time and i am not authorized to pursue. breaking off attack.\n  my sector: %s\n target sector: %s\n distance to target: %s\n max distance in 10 minutes: %s\n pursue distance: %s'.[$refobject.sector, $bigtarget.sector, $refobject.distanceto.{$bigtarget}, this.ship.maxspeed*600, $pursuedistance]" chance="$debugchance"/>
          <resume label="finish"/>
        </do_if>

        <!-- New simulated run attack. -->
        <do_if value="$bigtarget.canbeattacked">
          <debug_text text="player.age + ' block 2.1. dist to target: ' + this.ship.distanceto.{$bigtarget}" chance="0"/>
          <move_to object="this.ship" destination="$bigtarget" finishonapproach="true" >
            <interrupt_after_time time="1s" />
          </move_to>
          <debug_text text="player.age + ' block 2.2. dist to target: ' + this.ship.distanceto.{$bigtarget}" chance="0"/>
          <wait min="500ms" max="5s" profile="flat" chance="0" comment="deprecated at v9. we fire while approaching the target."/>
        </do_if>

        <do_if value="$bigtarget.canbeattacked and not this.assignedcontrolled.defencenpc">
          <!-- Attacking 1-7 seconds -->
          <!-- get strength of the next attack -->
          <get_attackstrength object="this.assignedcontrolled" target="$bigtarget" usedrones="false">
            <result hullshield="$result_hullshield" hullonly="$result_hullonly" shieldonly="$result_shieldonly" hullnoshield="$result_hullnoshield"/>
          </get_attackstrength>
          <do_if value="this.assignedcontrolled.isformationleader">
            <!-- ships flying in formation with this ship fire on target as the opportunity presents itself -->
            <do_for_each name="$locship" in="this.assignedcontrolled.subordinates">
              <do_if value="@$locship.formationleader == this.assignedcontrolled and not $locship.defencenpc" chance="15">
                <get_attackstrength object="this.assignedcontrolled" target="$bigtarget" usedrones="false">
                  <result hullshield="$locresult_hullshield" hullonly="$locresult_hullonly" shieldonly="$locresult_shieldonly" hullnoshield="$locresult_hullnoshield"/>
                </get_attackstrength>
                <set_value name="$result_hullshield" exact="$result_hullshield + $locresult_hullshield"/>
                <set_value name="$result_hullonly" exact="$result_hullonly + $locresult_hullonly"/>
                <set_value name="$result_shieldonly" exact="$result_shieldonly + $locresult_shieldonly"/>
                <set_value name="$result_hullnoshield" exact="$result_hullnoshield + $locresult_hullnoshield"/>
              </do_if>
            </do_for_each>
            <remove_value name="$locresult_hullshield"/>
            <remove_value name="$locresult_hullonly"/>
            <remove_value name="$locresult_shieldonly"/>
            <remove_value name="$locresult_hullnoshield"/>
          </do_if>
          <find_object_component groupname="$modules" class="class.module" checkoperational="false" multiple="true" object="$bigtarget">
            <match state="componentstate.wreck" negate="true"/>
          </find_object_component>
          <do_all min="1" max="7" profile="increasing" comment="chance of fail and attack" >
            <debug_text text="player.age + ' block 2.3. dist to target: ' + this.ship.distanceto.{$bigtarget}" chance="0"/>
            <wait exact="1s" comment="dps-> every second makes damage" />
            <do_if value="$bigtarget.canbeattacked and not $isdead">
              <!-- do not attack objects that are too far away, gravidar range can be 20km+ !! -->
              <do_if value="this.ship.distanceto.{$bigtarget} lt this.ship.maxcombatrange.all" >
                <do_if value="not @$module.canbeattacked and @$modules.count gt 0">
                  <set_value name="$module" exact="$modules.random"/>
                </do_if>
                <!-- Apply the attack strength -->
                <apply_attackstrength object="$bigtarget" attacker="this.assignedcontrolled" hullshield="$result_hullshield" hullonly="$result_hullonly" shieldonly="$result_shieldonly" hullnoshield="$result_hullnoshield" module="@$module" surfaceelement="@$surfaceelement">
                  <result killed="$isdead" module="$module" surfaceelement="$surfaceelement"/>
                </apply_attackstrength>
                <set_value name="$numammo" exact="this.assignedcontrolled.ammostorage.missile.count" chance="$debugchance"/>
                <do_for_each name="$missile" valuename="$amount" in="$table_ammousage">
                  <do_if value="this.assignedcontrolled.ammostorage.{$missile}.count" chance="50">
                    <set_value name="$locamount" min="1" max="$amount"/>
                    <remove_ammo object="this.assignedcontrolled" macro="$missile" amount="$locamount"/>
                    <remove_value name="$locamount"/>
                  </do_if>
                </do_for_each>
                <debug_text text="'ammo reduced, \nnum reduced: %s\nnum ammo: %s\nnum ammo types: %s'.[@$numammo - this.assignedcontrolled.ammostorage.missile.count, this.assignedcontrolled.ammostorage.missile.count, @$numammotypes]" chance="($numammo? and ($numammo - this.assignedcontrolled.ammostorage.missile.count) gt 0) * $debugchance"/>
                <debug_text text="'%1 OOS. Apply strength of %2 against %3 is: %4(%5|%6). Is killed: %7'.[player.age,this.ship.knownname,$bigtarget.knownname,$result_hullshield+$result_hullonly+$result_shieldonly+$result_hullnoshield,$bigtarget.hull,$bigtarget.shield,$isdead]" chance="$debugchance" />
              </do_if>
            </do_if>
          </do_all>
        </do_if>

        <!-- Search/Attacking wait time -->
        <do_if value="$bigtarget.canbeattacked">
          <debug_text text="player.age + ' block 2.4. dist to target: ' + this.ship.distanceto.{$bigtarget}" chance="0"/>
          <create_position name="$locpos" space="$bigtarget.zone" min="$MinGainDistance" max="$MaxGainDistance" object="$bigtarget"/>
          <debug_text text="'pos %sm away from target'.[$bigtarget.distanceto.{$locpos}]" chance="0"/>
          <move_to object="this.ship" destination="$bigtarget.zone" finishonapproach="true" >
            <position value="$locpos"/>
            <interrupt_after_time time="1s" />
          </move_to>
          <remove_value name="$locpos"/>
          <debug_text text="player.age + ' block 2.5. dist to target: ' + this.ship.distanceto.{$bigtarget}" chance="0"/>
          <wait min="5s" max="10s" profile="flat" />
        </do_if>

        <!-- Avoid an infite loop-->
        <do_if value="player.age" min="$attacktime">
          <resume label="finish"/>
        </do_if>
      </do_while>

      <label name="finish" />

      <do_if value="not this.ship.defencenpc">
        <cease_fire object="this.object" />
      </do_if>
      <reset_flight_behaviour object="this.assignedcontrolled"/>
      <set_to_default_flight_control_model object="this.assignedcontrolled"/>
      <stop_moving object="this.assignedcontrolled"/>
      <debug_text text="'No more targets to be found'" chance="$debugchance" />
      <wait exact="100ms" />

    </actions>
  </attention>
  <on_abort>
    <reset_flight_behaviour object="this.ship"/>
    <set_to_default_flight_control_model object="this.ship"/>
    <stop_moving object="this.ship" />
    <do_if value="not this.ship.defencenpc">
      <cease_fire object="this.object" />
      <set_alert_level object="this.ship" level="green" />
    </do_if>
  </on_abort>
</aiscript>
