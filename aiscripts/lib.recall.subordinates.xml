<?xml version="1.0" encoding="iso-8859-1" ?>
<aiscript name="lib.recall.subordinates" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" priority="5" version="1">
  <params>
    <param name="timeout" default="15min" comment="If less than 0, does not force them to return" />
    <param name="activepatrol" default="false" comment="Should subordinates actively engage any targets at the target location?"/>
    <param name="destination" default="null" comment="If provided, inform subordinates to go there" />
    <param name="safetodockat" default="null" comment="Object subordinates can dock at if they cannot dock at this.ship. Defined here and passed to subordinates so that subordinates of subordinates can dock here, space allowing."/>
    <param name="debugchance" default="0"/>
  </params>
  <patch sinceversion="1">
    <find_dockingbay name="$sdocks" object="this.assignedcontrolled" multiple="true">
      <match_dock size="tag.dock_s" free="true"/>
    </find_dockingbay>
    <find_dockingbay name="$mdocks" object="this.assignedcontrolled" multiple="true">
      <match_dock size="tag.dock_m" free="true"/>
    </find_dockingbay>
    <set_value name="$freedocks" exact="table[{class.ship_s} = $sdocks.count, {class.ship_m} = $mdocks.count]"/>
  </patch>
  <attention min="unknown">
    <actions>

      <set_command_action commandaction="commandaction.waitingdrones" />

      <create_list name="$subordinateorders" comment="orders that will be created on the subordinates"/>

      <do_if value="this.ship.subordinates.count lt 1">
        <return value="$subordinateorders"/>
      </do_if>

      <!-- only use external docks to speed up preparation for travel. -->
      <find_dockingbay name="$sdocks" object="this.assignedcontrolled" multiple="true">
        <match_dock size="tag.dock_s" free="true"/>
      </find_dockingbay>
      <find_dockingbay name="$mdocks" object="this.assignedcontrolled" multiple="true">
        <match_dock size="tag.dock_m" free="true"/>
      </find_dockingbay>
      <debug_text text="'num free external docks: S: %s, M: %s'.[$sdocks.count, $mdocks.count]" chance="$debugchance"/>

      <set_value name="$storagecapacity_s" exact="0"/>
      <set_value name="$storagecapacity_m" exact="0"/>
      <do_if value="this.assignedcontrolled.type == shiptype.carrier">
        <find_dockingbay name="$sdocks_int" object="this.assignedcontrolled" multiple="true">
          <match_dock size="tag.dock_s" free="true" storage="true"/>
        </find_dockingbay>
        <do_all exact="$sdocks_int.count" counter="$i">
          <set_value name="$storagecapacity_s" exact="$storagecapacity_s + $sdocks_int.{$i}.shipstorage.free"/>
        </do_all>
        <do_if value="$storagecapacity_s">
          <!-- reserve 1 spot for units -->
          <set_value name="$storagecapacity_s" exact="$storagecapacity_s - 1"/>
        </do_if>

        <find_dockingbay name="$mdocks_int" object="this.assignedcontrolled" multiple="true">
          <match_dock size="tag.dock_m" free="true" storage="true"/>
        </find_dockingbay>
        <do_all exact="$mdocks_int.count" counter="$i">
          <set_value name="$storagecapacity_m" exact="$storagecapacity_m + $mdocks_int.{$i}.shipstorage.free"/>
        </do_all>
      </do_if>

      <set_value name="$freedocks" exact="table[{class.ship_s} = $sdocks.count + $storagecapacity_s, {class.ship_m} = $mdocks.count + $storagecapacity_m]"/>
      <debug_text text="'%s %s %s has %s free S docks and %s free M docks'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, $freedocks.{class.ship_s}, $freedocks.{class.ship_m}]" chance="$debugchance"/>

      <create_group groupname="$subordinates"/>
      <set_value name="$unsortedsubordinates" exact="this.assignedcontrolled.subordinates"/>
      <do_for_each name="$locsub" in="$unsortedsubordinates" counter="$i" reverse="true">
        <do_if value="not $locsub.isoperational or ($locsub.defaultorder and $locsub.defaultorder.id != 'Escort')">
          <remove_value name="$unsortedsubordinates.{$i}"/>
        </do_if>
        <do_elseif value="not $locsub.isunit">
          <do_for_each name="$evalclass" in="$freedocks">
            <do_if value="$freedocks.{$evalclass} and $locsub.isclass.{$evalclass}">
              <set_value name="$freedocks.{$evalclass}" exact="$freedocks.{$evalclass} - 1"/>
              <!-- NB: subordinates are processed in reverse order. we want all units that are currently subordinate to dock, so put units at the back of the list. -->
              <add_to_group groupname="$subordinates" object="$locsub"/>
              <break/>
            </do_if>
          </do_for_each>
          <remove_value name="$unsortedsubordinates.{$i}"/>
        </do_elseif>
      </do_for_each>
      <add_to_group groupname="$subordinates" list="$unsortedsubordinates"/>
      <debug_text text="'%s %s recalling %s subordinates. has %s immediate subordinates.'.[this.ship.knownname, this.ship, $subordinates.count, this.ship.subordinates.count]" chance="$debugchance"/>
      <remove_value name="$unsortedsubordinates"/>

      <label name="issue_orders"/>

      <do_if value="$destination and not $destination.{1}.exists">
        <debug_text text="'destination no longer exists. destination: %1. my order: %2.'.[$destination, this.ship.order.id]" chance="$debugchance"/>
        <return value="@$subordinateorders"/>
      </do_if>

      <do_if value="$subordinates.count gt 0">
        <do_if value="(this.ship == player.ship) and ($subordinates.{1}.primarypurpose == purpose.mine)">
          <speak actor="this" line="5004" comment="Recalling units now." />
        </do_if>
        <!-- Script dock for them -->
        <do_all exact="$subordinates.count" counter="$i" reverse="true">
          <set_value name="$dockcontainer" exact="this.ship"/>
          <do_if value="this.ship.dockingallowed.{$subordinates.{$i}}">
            <set_value name="$safetodockat" exact="this.ship"/>
          </do_if>
          <do_elseif value="$safetodockat.isoperational and $safetodockat.dockingallowed.{$subordinates.{$i}}">
            <set_value name="$dockcontainer" exact="$safetodockat"/>
          </do_elseif>

          <do_if value="@$subordinates.{$i}.dock.container == $dockcontainer">
            <debug_text text="'%1 (%2) is already docked. cancelling recall for %1.'.[$subordinates.{$i}.knownname, $subordinates.{$i}]" chance="$debugchance"/>
            <remove_from_group group="$subordinates" object="$subordinates.{$i}"/>
          </do_if>
          <do_elseif value="$subordinates.{$i}.islasertower">
            <debug_text text="'%1 (%2) is a lasertower. cancelling recall for %1.'.[$subordinates.{$i}.knownname, $subordinates.{$i}]" chance="$debugchance"/>
            <remove_from_group group="$subordinates" object="$subordinates.{$i}"/>
          </do_elseif>
          <do_else>
            <!-- $subordinates.{$i} is a unit or ship that can dock at this.assignedcontrolled. order it to dock. -->
            <!-- NB: only cancel unit orders if no unit wings are assembling. otherwise, we'll end up with unit subordinates that don't get an order to dock. -->
            <do_if value="@$subordinates.{$i}.order.exists">
              <do_if value="($subordinates.{$i}.order.id != 'DockAt') and ($subordinates.{$i}.order.id != 'DockAndWait') and (not $subordinates.{$i}.isunit or not @this.assignedcontrolled.defencenpc.$launchedunitcount or ($subordinates.{$i}.order.id != 'Escort'))">
                <!-- cancel all of the subordinates orders first. they likely involve this local area and our local area and the squadron's immediate activity is about to change. -->
                <debug_text text="'cancelling orders of %s %s %s and ordering to dock.\n current order: %s\n next order: %s\n num orders: %s'.[@$subordinates.{$i}.idcode, @$subordinates.{$i}.knownname, $subordinates.{$i}, @$subordinates.{$i}.order.id, @$subordinates.{$i}.nextorder.id, @$subordinates.{$i}.orders.count]" chance="$debugchance"/>
                <cancel_all_orders object="$subordinates.{$i}"/>

                <debug_text text="'%s %s ordering %s %s to recall subordinates.'.[this.ship.knownname, this.ship, $subordinates.{$i}.knownname, $subordinates.{$i}]" chance="$debugchance"/>
                <!-- this also orders subordinates' subordinates to dock at $safetodockat, normally this.ship, if they cannot dock at their immediate commander.  -->
                <create_order id="'RecallSubordinates'" object="$subordinates.{$i}">
                  <param name="timeout" value="$timeout"/>
                  <param name="activepatrol" value="$activepatrol"/>
                  <param name="destination" value="$destination"/>
                  <param name="safetodockat" value="$safetodockat"/>
                  <param name="debugchance" value="$debugchance"/>
                </create_order>

                <create_order id="'DockAndWait'" object="$subordinates.{$i}" name="$order">
                  <param name="destination" value="$dockcontainer" />
                  <param name="debugchance" value="$debugchance"/>
                </create_order>
                <append_to_list name="$subordinateorders" exact="$order"/>
              </do_if>
              <do_else>
                <debug_text text="'%s %s %s is either already docked or is not supposed to dock.'.[@$subordinates.{$i}.idcode, @$subordinates.{$i}.knownname, $subordinates.{$i}]" chance="$debugchance"/>
                <remove_from_group group="$subordinates" object="$subordinates.{$i}"/>
              </do_else>
            </do_if>
            <do_else>
              <do_if value="not $subordinates.{$i}.isunit">
                <debug_text text="'%s %s %s is not a unit but does not have orders.'.[@$subordinates.{$i}.idcode, @$subordinates.{$i}.knownname, $subordinates.{$i}]" filter="error"/>
              </do_if>
              <do_if value="$subordinates.{$i}.unitcategory == unitcategory.transport">
                <!-- transport drones use masstraffic docks which are not supported by order.dock. -->
                <start_script name="'move.collect.drone'" object="$subordinates.{$i}.pilot">
                  <param name="homebase" value="this.assignedcontrolled"/>
                  <param name="masstraffic" value="true"/>
                  <param name="launching" value="false"/>
                  <param name="debugchance" value="$debugchance"/>
                </start_script>
              </do_if>
              <do_else>
                <!-- at the moment, these should only be mining drones. they use normal docks but do not use orders. -->
                <start_script name="'order.dock'" object="$subordinates.{$i}.pilot">
                  <param name="destination" value="this.assignedcontrolled"/>
                  <param name="abouttofinish" value="true"/>
                  <param name="debugchance" value="$debugchance"/>
                </start_script>
              </do_else>
            </do_else>
          </do_else>
        </do_all>

        <!-- if there is timeout, wait for all ships to be docked -->
        <do_if value="$subordinates.count and ($timeout gt 1s)">
          <do_if value="true" chance="$debugchance">
            <set_value name="$num_subordinates_initial" exact="$subordinates.count"/>
            <set_value name="$time_dockstart" exact="player.age"/>
          </do_if>
          <set_value name="$docktimeout" exact="player.age + $timeout"/>
          <!--<set_value name="$docktimeout" exact="player.age + ($timeout * $subordinates.count)"/>-->
          <do_while value="$subordinates.count and (player.age lt $docktimeout)">
            <wait min="30s" max="2min" >
              <interrupt>
                <conditions>
                  <event_object_docked_at container="$dockcontainer" />
                </conditions>
                <actions>
                  <do_if value="event.param.exists">
                    <debug_text text="'%s %s %s docked.'.[@event.param.idcode, @event.param.knownname, event.param]" chance="$debugchance"/>
                    <remove_from_group group="$subordinates" object="event.param"/>
                  </do_if>
                </actions>
              </interrupt>              
            </wait>
            <do_for_each name="$locship" in="$subordinates" reverse="true">
              <do_if value="@$locship.dock and $locship.hascontext.{this.assignedcontrolled}">
                <debug_text text="'%s %s %s already docked. skipping check.'.[@$locship.idcode, @$locship.knownname, $locship]" chance="$debugchance"/>
                <remove_from_group group="$subordinates" object="$locship"/>
              </do_if>
            </do_for_each>
          </do_while>
          <debug_text text="'%1 (%2) waited %3s for %4 subordinates to dock. %5 subordinates still waiting to dock.'.[this.ship.knownname, this.ship, player.age - $time_dockstart, $num_subordinates_initial, $subordinates.count]" chance="$debugchance"/>
        </do_if>
        <do_elseif value="$subordinates.count">
          <debug_text text="'%1 (%2) did not wait for %3 subordinates to dock. time out: %4s'.[this.ship.knownname, this.ship, $subordinates.count, $timeout]" chance="$debugchance"/>
        </do_elseif>
      </do_if>

      <label name="finish"/>

      <return value="$subordinateorders"/>

    </actions>
  </attention>
  <on_abort>
    <do_if value="$subordinateorders?">
      <!-- Script dock for them -->
      <do_all exact="$subordinateorders.count" counter="$i" >
        <!-- If they are waiting, cancel their order so they undock/stop waiting -->
        <cancel_order order="$subordinateorders.{$i}" />
      </do_all>
    </do_if>
  </on_abort>
</aiscript>