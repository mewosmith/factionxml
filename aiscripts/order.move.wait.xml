<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="order.move.wait" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="4">
  <!--
   Wrapper script for explicit order to Move and Wait command
   by Adrian

   Variations:
    - Hold Position
    - Fly to me and wait
    - Fly to X and wait
    - Withdraw from battle

  -->
  <order id="MoveWait" name="{1041, 251}" description="{1041, 252}" category="navigation">
    <params>
      <param name="destination" type="position" text="{1041, 10027}" comment="Destination. Position in a Sector. Not required if $withdraw is true. if $destination.{1} is null, $destination.{2} is provided, and this.ship.jobmainzone.sector exists, $destination.{1} == this.ship.jobmainzone.sector; for use with jobs.">
        <input_param name="class" value="class.sector"/>
      </param>
      <param name="timeout" type="time" default="0s" infinitevalue="0s" text="{1041, 10034}" advanced="true" comment="Duration">
        <input_param name="min" value="0s" />
        <input_param name="max" value="10h" />
        <input_param name="step" value="30s" />
      </param>
      <param name="withdraw" type="internal" default="false" text="{1041, 10147}" comment="Withdraw from battle"/>
      <param name="precise" default="false" type="internal" comment="Move only to the position specified as long as it is safe. Do not use if moving multiple ships to the same position"/>
      <param name="waitforatgate" type="internal" default="null" comment="Wait for object with this component ID after crossing every gate to the destination. Passed to move.generic which passes it on to move.gate. Only works if at least one gate is crossed.">
        <patch value="null" early="true" sinceversion="3"/>
      </param>
      <param name="recallsubordinates" type="internal" default="true" comment="recall subordinates and cancel existing recall subordinate orders. passed in to move.generic.">
        <patch value="true" sinceversion="4"/>
      </param>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
    </requires>
    <location object="$destination.{1}" position="$destination.{2}" condition="$destination.{1} and $destination.{2}" />
  </order>
  <interrupts>
    <handler>
      <conditions>
        <check_any>
          <event_object_changed_sector object="this.assignedcontrolled"/>
          <event_object_changed_sector object="$waitforatgate" check="false"/>
        </check_any>
        <check_value value="$waitforatgate.isoperational and ($waitforatgate.sector == this.sector)"/>
      </conditions>
      <actions>
        <debug_text text="'%s %s %s crossed a gate to rendezvous with %s %s %s which is already across. skipping further movement.'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, @$waitforatgate.idcode, @$waitforatgate.knownname, $waitforatgate]" chance="$debugchance"/>
        <abort_called_scripts resume="finish"/>
      </actions>
    </handler>
    <handler ref="SectorChangeHandler"/>
    <handler ref="TargetInvalidHandler"/>
    <handler ref="AttackHandler"/>
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler"/>
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="ResupplyHandler"/>
  </interrupts>
  <init>
    <!-- only comment this, and the debug output line that uses it, in for debugging. adds a blackboard variable that's only used for debugging. has to be a blackboard variable because it has to persist over multiple calls of this script. -->
    <!--<do_if value="this.isplayerowned and not this.$time_start_movewait?">
      <set_value name="this.$time_start_movewait" exact="player.age"/>
      <set_value name="this.$sector_start_movewait" exact="this.sector"/>
      <set_value name="this.$sector_end_movewait" exact="$destination.{1}"/>
    </do_if>-->
  </init>
  <patch sinceversion="2">
    <do_if value="not $precise?">
      <set_value name="$precise" exact="false"/>
    </do_if>
  </patch>
  <patch sinceversion="3" early="true">
    <do_if value="not $waitforatgate?">
      <set_value name="$waitforatgate" exact="null"/>
    </do_if>
  </patch>
  <attention min="unknown">
    <actions>

      <do_if value="not $withdraw">
        <do_if value="not $destination">
          <debug_text text="'Error: No input destination.'" filter="error"/>
          <resume label="finish"/>
        </do_if>

        <do_if value="not $destination.{1}">
          <do_if value="@this.assignedcontrolled.jobmainzone.sector.exists">
            <set_value name="$destination.{1}" exact="this.assignedcontrolled.jobmainzone.sector"/>
            <do_if value="this.assignedcontrolled.order.id == 'MoveWait'">
              <edit_order_param order="this.assignedcontrolled.order" param="'destination'" value="$destination"/>
              <do_if value="this.assignedcontrolled.defaultorder.id == 'MoveWait'">
                <edit_order_param order="this.assignedcontrolled.defaultorder" param="'destination'" value="$destination"/>
              </do_if>
            </do_if>
          </do_if>
          <do_else>
            <debug_text text="'Error: No input destination space.'" filter="error"/>
            <resume label="finish"/>
          </do_else>
        </do_if>

        <do_if value="not $destination.{2}">
          <debug_text text="'Error: No input destination position.'" filter="error"/>
          <resume label="finish"/>
        </do_if>

        <do_if value="not $destination.{1}.isclass.sector">
          <debug_text text="'Error: Input position is relative to %1. Should be relative to a sector. Trying anyway.'.[$destination.{1}.class]" filter="error"/>
        </do_if>
      </do_if>

      <set_value name="$targetsector" exact="$destination.{1}"/>
      <set_value name="$pos" exact="$destination.{2}"/>

      <!-- Initial checks -->
      <label name="start" />
      <debug_text text="'command move to %1 and wait'.[$targetsector.knownname]" chance="$debugchance" />

      <!-- Withdraw from battle -->
      <do_if value="$withdraw">
        <!-- Command -->
        <set_command command="command.withdrawbattle" />

        <!-- hold fire -->
        <run_script name="'lib.set.weaponmode'" result="$weaponmodes" sinceversion="1">
          <param name="weaponmode" value="weaponmode.holdfire"/>
          <param name="debugchance" value="$debugchance"/>
        </run_script>

        <set_value name="$subordinates" exact="this.ship.subordinates"/>
        <do_all exact="$subordinates.count" counter="$i">
          <do_if value="$subordinates.{$i}.order != $subordinates.{$i}.defaultorder">
            <cancel_order order="$subordinates.{$i}.order"/>
          </do_if>
          <create_order object="$subordinates.{$i}" id="'Flee'" immediate="true">
            <param name="method" value="3"/>
          </create_order>
        </do_all>
        <remove_value name="$subordinates"/>
        <!-- flee boosting  -->
        <run_script name="'move.flee.boost'"/>
      </do_if>
      <!-- If no destination is provided, just a wait -->
      <do_elseif value="$targetsector">
        <!-- Command Info -->
        <set_command command="command.movetozone" param="$targetsector"/>

        <!-- Move there -->
        <!--<do_if value="$targetzone.zone.isclass.highway" >
          <set_value name="$targetzone" exact="$targetzone.zone.exit" />
        </do_if>-->

        <run_script name="'move.generic'">
          <param name="destination" value="$targetsector" />
          <param name="position" value="$pos" />
          <param name="recallsubordinates" value="$recallsubordinates"/>
          <param name="precise" value="$precise"/>
          <param name="waitforatgate" value="$waitforatgate"/>
          <param name="debugchance" value="$debugchance"/>
        </run_script>
      </do_elseif>

      <!-- Wait for orders -->
      <do_if value="not $withdraw">
        <set_command command="command.wait" />
      </do_if>
      <set_command_action commandaction="commandaction.standingby" />

      <!-- skip wait if $waitforatgate is populated at all. -->
      <do_if value="$waitforatgate">
        <!-- waiting for $waitforatgate handled in move.gate called via move.generic. if we are at this point, we no longer have to wait. -->
        <debug_text text="'already waited for %s %s %s. skipping further wait.'.[@$waitforatgate.idcode, @$waitforatgate.knownname, $waitforatgate]" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <stop_moving object="this.ship" />
      <stop_boost object="this.ship" />

      <label name="wait"/>

      <do_if value="this.isplayerowned and not this.isclass.computer and not this.assignedcontrolled.nextorder and (not this.assignedcontrolled.commander or (this.assignedcontrolled.commander == player.occupiedship)) and notification.npc_await_orders.active">
        <!-- Player notification -->
        <set_value name="$speakline" exact="10304" comment="Awaiting orders."/>
        <run_script name="'player.interaction'">
          <param name="Line" value="$speakline"/>
          <param name="MaxQueueDelay" value="10s"/>
          <param name="caption" value="'%s (%s)'.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]"/>
          <param name="interactive" value="false"/>
          <param name="debugchance" value="$debugchance"/>
        </run_script>
      </do_if>

      <!-- Implement the waiting part by calling the Wait order script, including sync point handling. "this.ship.order" will still be the MoveWait order. -->
      <run_script name="'order.wait'">
        <param name="timeout" value="$timeout" />
      </run_script>

      <label name="finish" />

      <!-- restore weapon modes -->
      <do_if value="$withdraw and $weaponmodes? and $weaponmodes.keys.count">
        <run_script name="'lib.set.weaponmode'" sinceversion="1">
          <param name="weapons" value="$weaponmodes.keys.list"/>
          <param name="weaponmodes" value="$weaponmodes"/>
          <param name="debugchance" value="$debugchance"/>
        </run_script>
      </do_if>

      <!--<do_if value="this.$time_start_movewait?">
        <debug_text text="'movement from %s %s to %s %s finished after %s minutes.'.[this.$sector_start_movewait.class, this.$sector_start_movewait.knownname, this.$sector_end_movewait.class, this.$sector_end_movewait.knownname, (player.age - this.$time_start_movewait) / 60s]"/>
      </do_if>-->

    </actions>
  </attention>

  <on_abort>
    <!-- restore weapon modes -->
    <do_if value="$withdraw and $weaponmodes? and $weaponmodes.keys.count">
      <do_all exact="$weaponmodes.keys.count" counter="$i">
        <debug_text text="'restore weapon %s %s. mode: %s'.[$weaponmodes.keys.{$i}.knownname, $weaponmodes.keys.{$i}, $weaponmodes.{$weaponmodes.keys.{$i}}]" chance="$debugchance"/>
        <set_weapon_mode weapon="$weaponmodes.keys.{$i}" weaponmode="$weaponmodes.{$weaponmodes.keys.{$i}}" />
      </do_all>
    </do_if>
    <stop_moving object="this.ship" />
    <stop_boost object="this.ship" />
  </on_abort>
</aiscript>