<?xml version="1.0" encoding="utf-8"?>
<!-- NB: script only has two blocking actions. a wait in label 'scan' and a move_to in label 'track'. -->
<aiscript name="order.fight.lasertower" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="6">
  <order id="Lasertower" name="{1041, 401}" description="{1041, 402}" category="internal" infinite="true">
    <params>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires shiptype="shiptype.lasertower"/>
  </order>
  <interrupts>
    <handler comment="add objects found in gravidar to detected list but do not interrupt the script">
      <conditions>
        <event_gravidar_has_scanned object="this.assignedcontrolled"/>
        <check_value value="not $scanning? and this.sector"/>
        <check_value value="this.assignedcontrolled.isactive"/>
        <count_gravidar_contacts groupname="$_newdetected" object="this.assignedcontrolled" class="class.defensible" docked="false" checkoperational="false" min="1">
          <match_context macro="this.sector.macro"/>
          <match_parent class="class.object" negate="true"/>
          <match class="[class.collectable, class.buildstorage]" negate="true"/>
          <match state="componentstate.wreck" negate="true"/>
          <match_relation_of object="this.assignedcontrolled" comparison="lt" relation="friend"/>
        </count_gravidar_contacts>
        <debug_text text="'new targets entered gravidar range. tracking %s targets.'.[$_newdetected.count]" debugchance="$debugchance"/>
      </conditions>
      <actions>
        <do_if value="@$_newdetected.count">
          <clear_group group="$detected"/>
          <add_to_group groupname="$detected" group="$_newdetected"/>
        </do_if>
        <remove_value name="$_newdetected"/>
        <do_all exact="$detected.count" counter="$interruptcounter">
          <do_if value="not $hostiletargets.indexof.{$detected.{$interruptcounter}} and this.hasrelation.enemy.{$detected.{$interruptcounter}}">
            <add_to_group groupname="$hostiletargets" object="$detected.{$interruptcounter}"/>
            <debug_text text="'hostile target: %s %s %s found. tracking %s hostile targets'.[$detected.{$interruptcounter}.idcode, $detected.{$interruptcounter}.knownname, $detected.{$interruptcounter}, $hostiletargets.count]" chance="$debugchance"/>
          </do_if>
        </do_all>
      </actions>
    </handler>
    <handler comment="conditions governing Cover loss">
      <!-- MAINTENANCE: keep in sync with conditions in md.Cover.LoseCover -->
      <conditions>
        <check_any>
          <check_all>
            <check_any>
              <!-- if we either:
                          attack something belonging to our cover faction,
                          or are attacked by something belonging to our cover faction. -->
              <event_object_attacked_object object="this.assignedcontrolled"/>
              <event_object_attacked object="this.assignedcontrolled"/>
            </check_any>
            <check_value value="event.param.owner == @this.assignedcontrolled.coverowner"/>
          </check_all>
          <event_scan_finished scanned="this.assignedcontrolled"/>
          <event_object_signalled object="this.assignedcontrolled" param="'LoseCover'" comment="event.param2 = was discovered"/>

          <!--Object lost-->
          <event_object_destroyed object="this.assignedcontrolled"/>
          <check_all>
            <event_object_changed_owner object="this.assignedcontrolled"/>
            <check_value value="event.param != @this.assignedcontrolled.coverowner"/>
          </check_all>
        </check_any>
        <check_value value="@this.assignedcontrolled.coverowner"/>
      </conditions>
      <actions>
        <debug_text text="'%s %s %s losing cover due to %s. cover owner: %s, true owner: %s'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, event.name, this.assignedcontrolled.coverowner, this.assignedcontrolled.trueowner]" chance="$debugchance"/>
        <get_control_entities groupname="$entities" object="this.assignedcontrolled"/>
        <do_if value="$entities?">
          <do_all exact="$entities.count" counter="$i">
            <set_cover_owner object="$entities.{$i}"/>
          </do_all>
        </do_if>
        <set_cover_owner object="this.assignedcontrolled"/>

        <clear_group group="$hostiletargets"/>

        <abort_called_scripts resume="scan"/>
      </actions>
    </handler>
    <handler comment="respond to signal to deactivate">
      <conditions>
        <event_object_signalled object="this.assignedcontrolled" param="'lasertower_deactivate'"/>
        <debug_text text="'deactivation signal received. isactive: %s (should be 0)'.[this.assignedcontrolled.isactive]" debugchance="$debugchance"/>
        <!-- NB: by the time that the signal is received, lasertower is already inactive. make sure to keep the script and the active state in sync. -->
        <check_value value="not this.assignedcontrolled.isactive"/>
      </conditions>
      <actions>
        <debug_text text="'deactivation signal is valid.'" chance="$debugchance"/>
        <abort_called_scripts resume="inactive"/>
      </actions>
    </handler>
    <handler ref="TargetInvalidHandler"/>
  </interrupts>
  <init>
    <create_group groupname="$hostiletargets"/>
    <create_group groupname="$detected"/>
    <set_value name="$maxcombatrange" exact="this.assignedcontrolled.maxcombatrange.all + this.assignedcontrolled.length / 2.0"/>

    <!-- this laser tower will self-destruct in one hour. -->
    <set_value name="$starttime" exact="player.age"/>

    <create_ai_unit object="this.assignedcontrolled"/>

    <set_order_syncpoint_reached order="this.assignedcontrolled.order"/>
  </init>
  <patch sinceversion="1">
    <do_if value="@$target and not $target.canbeattacked">
      <debug_text text="'PATCH: target: %s %s %s cannot be attacked. re-evaluating targets'.[$target.idcode, $target.knownname, $target]" filter="savegame"/>
      <set_value name="$target" exact="null"/>
    </do_if>
  </patch>
  <patch sinceversion="2">
    <do_if value="this.zone.isclass.highway or @$target.zone.isclass.highway">
      <debug_text text="'PATCH: we or %s %s %s, target of %s %s %s, was in a highway. clearing target.'.[@$target.idcode, @$target.knownname, $target, this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" filter="savegame"/>
      <set_value name="$target" exact="null"/>
    </do_if>
  </patch>
  <patch sinceversion="3">
    <do_if value="@$target and (not $target.canbeattacked or $target.zone.isclass.highway or this.zone.isclass.highway or (@$target.sector != this.sector) or @$target.dock or ($target.isclass.ship and not $target.pilot) or $target.isclass.collectable or $target.isclass.buildstorage)">
      <debug_text text="'PATCH: target: %s %s %s %s is no longer valid.\n cannot be attacked: %s\n target has no pilot: %s\n target in a highway: %s\n i am in a highway: %s\n not in same sector: %s\n target is docked: %s\n target is collectable: %s\n target is build storage: %s'.[@$target.class, @$target.idcode, @$target.knownname, $target, not $target.canbeattacked, $target.isclass.ship and not $target.pilot, @$target.zone.isclass.highway, this.zone.isclass.highway, (@$target.sector != this.sector), @$target.dock, $target.isclass.collectable, $target.isclass.buildstorage]" filter="savegame"/>
      <stop_moving object="this.assignedcontrolled"/>
      <set_value name="$target" exact="null"/>
    </do_if>
  </patch>
  <patch sinceversion="6">
    <do_if value="@$detected.count">
      <do_for_each name="$_obj" in="$detected" reverse="true">
        <do_if value="not $_obj.canbeattacked or $_obj.zone.isclass.highway or not $_obj.hascontext.{this.sector} or (this.assignedcontrolled.distanceto.{$_obj} gt this.assignedcontrolled.maxradarrange)">
          <remove_from_group group="$detected" object="$_obj"/>
        </do_if>
      </do_for_each>
    </do_if>
    <do_else>
      <create_group groupname="$detected"/>
    </do_else>
  </patch>
  <attention min="visible">
    <actions>

      <!-- wait before activation to allow the lasertower to finish launching. -->
      <wait exact="3s" sinceversion="5"/>

      <label name="scan"/>

      <!-- TODO: add "searching for targets" command? -->
      <set_command_action commandaction="commandaction.standingby"/>

      <debug_text text="'scanning for targets'" chance="$debugchance"/>

      <stop_moving object="this.assignedcontrolled"/>

      <set_value name="$scanning"/>
      <wait>
        <interrupt>
          <conditions>
            <check_any>
              <event_gravidar_has_scanned object="this.assignedcontrolled"/>
              <event_object_changed_zone object="this.assignedcontrolled"/>
            </check_any>
            <check_value value="this.sector and not this.zone.isclass.highway"/>
            <count_gravidar_contacts groupname="$newdetected" object="this.assignedcontrolled" class="class.defensible" docked="false" checkoperational="false" sortbydistanceto="this.assignedcontrolled" sortdescending="true" min="1">
              <match_context macro="this.sector.macro"/>
              <match_parent class="class.object" negate="true"/>
              <match class="[class.collectable, class.buildstorage]" negate="true"/>
              <match state="componentstate.wreck" negate="true"/>
              <match_relation_of object="this.assignedcontrolled" comparison="lt" relation="friend"/>
            </count_gravidar_contacts>
          </conditions>
          <actions>
            <do_if value="@$newdetected.count">
              <clear_group group="$detected"/>
              <add_to_group groupname="$detected" group="$newdetected"/>
            </do_if>
            <remove_value name="$newdetected"/>
          </actions>
        </interrupt>
      </wait>
      <remove_value name="$scanning"/>

      <label name="evaluate_targets"/>

      <!-- any non-friendly objects within gravidar range are considered valid and will be tracked even if they will not or cannot be fired upon. hostile targets within combat range have highest priority. -->
      <debug_text text="'evaluating targets size %1'.[$detected.count]" chance="$debugchance"/>

      <stop_shooting object="this.assignedcontrolled"/>

      <!-- take the last ship, which should be the closest one -->
      <set_value name="$target" exact="@$detected.{$detected.count}"/>
      <!-- Iterate through all the sorted ships, starting from the closest (in reverse, so can remove elements) -->
      <do_all exact="$detected.count" counter="$i" reverse="true">
        <debug_text text="'target acquired: %s %s %s, %sm away. max combat range: %s hostile? %s, can be attacked: %s, is wreck: %s'.[$detected.{$i}.idcode, $detected.{$i}.knownname, $detected.{$i}, this.ship.bboxdistanceto.{$detected.{$i}}, $maxcombatrange, this.hasrelation.enemy.{$detected.{$i}}, $detected.{$i}.canbeattacked, $detected.{$i}.iswreck]" chance="$debugchance"/>
        <!-- ignore targets that are:
                in highways,
                not in this sector,
                or are no longer operational (NB: boarding pods that are attached to objects are not operational but are not removed from groups) -->
        <do_if value="not $detected.{$i}.canbeattacked or $detected.{$i}.zone.isclass.highway or not $detected.{$i}.hascontext.{this.sector}">
          <do_if value="$hostiletargets.indexof.{$detected.{$i}}">
            <remove_from_group group="$hostiletargets" object="$detected.{$i}"/>
          </do_if>
          <remove_from_group group="$detected" object="$detected.{$i}"/>
        </do_if>
        <do_else>
          <do_if value="not $hostiletargets.indexof.{$detected.{$i}} and this.hasrelation.enemy.{$detected.{$i}}">
            <add_to_group groupname="$hostiletargets" object="$detected.{$i}"/>
          </do_if>
          <!-- take the first enemy (is the closest one too) and override the current target -->           
          <do_if value="this.hasrelation.enemy.{$detected.{$i}}">
            <set_value name="$target" exact="$detected.{$i}"/>
            <debug_text text="'new target is hostile. switching targets'" chance="$debugchance"/>
            <break />
          </do_if>        
        </do_else>
      </do_all>

      <do_if value="not $target">
        <debug_text text="'no valid targets in gravidar. standing by to acquire targets.'" chance="$debugchance"/>
        <resume label="scan"/>
      </do_if>
      <debug_text text="'valid target found. tracking.'" chance="$debugchance"/>

      <label name="track"/>

      <!-- NB: handling for cases where target is not operational when going into the move_to, possibly on attention change. -->
      <do_if value="not $target.canbeattacked">
        <debug_text text="'high. target: %s %s %s cannot be attacked. re-evaluating targets'.[@$target.idcode, @$target.knownname, $target]" chance="$debugchance"/>
        <resume label="evaluate_targets"/>
      </do_if>

      <debug_text text="'target acquired. tracking %s %s %s, %sm away. hostile? %s'.[$target.knownname, $target, $target.idcode, this.assignedcontrolled.bboxdistanceto.{$target}, this.hasrelation.enemy.{$target}]" chance="$debugchance"/>

      <do_if value="this.hasrelation.enemy.{$target}">
        <set_command_action commandaction="commandaction.attackingto" param="$target"/>
        <!-- if attacking a station, we must attack that station's modules. switch targets as appropriate. -->
        <set_value name="$evaltarget" exact="$target"/>
        <include_interrupt_actions ref="SelectTargets"/>
        <do_all exact="$resulttargets.count" counter="$i">
          <do_if value="not $evaldist? or (this.assignedcontrolled.distanceto.{$resulttargets.{$i}} lt $evaldist)">
            <set_value name="$loctarget" exact="$resulttargets.{$i}"/>
            <set_value name="$evaldist" exact="this.assignedcontrolled.distanceto.{$resulttargets.{$i}}"/>
          </do_if>
        </do_all>
        <do_if value="@$loctarget.canbeattacked and ($target != $loctarget)">
          <debug_text text="'switching targets from %s %s %s to %s %s %s.'.[@$target.idcode, @$target.knownname, $target, @$loctarget.idcode, @$loctarget.knownname, $loctarget]" chance="$debugchance"/>
          <set_value name="$target" exact="$loctarget"/>
        </do_if>
        <remove_value name="$loctarget"/>
        <remove_value name="$evaldist"/>
        <remove_value name="$evaltarget"/>
        <remove_value name="$resulttargets"/>
        <debug_text text="'target is hostile. opening fire.'" chance="$debugchance"/>
        <shoot_at target="$target" object="this.assignedcontrolled" largetarget="@$target.iscapitalship or $target.isrealclass.station" additional_targets="$hostiletargets.list" tolerance="30deg"/>
      </do_if>

      <!-- only way this move_to can finish is if the target collides with us.
        NB: this move_to only serves to orient us to the target. 
        Note: use a non-generic flight behaviour so it does not use special conditions (like aim to predicted positions) from flightbehaviour.generic -->
      <set_value name="$trackduration" min="11s" max="31s"/>
      <move_to destination="$target" object="this.assignedcontrolled" abortpath="true" commandaction="false" forcesteering="true" forcerotation="true" flightbehaviour="flightbehaviour.guidedmissile" >
        <interrupt>
          <conditions>
            <!-- disengage and re-evaluate targets if: -->
            <check_any>
              <!-- target is destroyed, -->
              <event_object_destroyed object="$target" check="false"/>
              <!-- target is abandoned, -->
              <event_object_abandoned object="$target" check="false"/>
              <check_all>
                <!-- target changes ownership and is no longer hostile, -->
                <event_object_changed_true_owner object="$target" check="false"/>
                <!-- this will break if a ship is subordinate to
                        a ship belonging to a different faction,
                          and that ship uncovers. -->
                <check_value value="event.param != this.assignedcontrolled.trueowner"/>
              </check_all>
              <check_all>
                <check_any>
                  <event_object_changed_zone object="$target" check="false"/>
                  <event_object_changed_zone object="this.assignedcontrolled" check="false"/>
                </check_any>
                <check_any>
                  <!-- target enters a highway, -->
                  <check_value value="@$target.zone.isclass.highway"/>
                  <!-- we enter a highway, -->
                  <check_value value="this.zone.isclass.highway"/>
                  <!-- target changes sectors, -->
                  <check_value value="@$target.sector != @this.sector"/>
                </check_any>
              </check_all>
              <check_all>
                <!-- this belongs to the player faction and target is no longer visible to any player-owned objects, -->
                <event_object_left_live_view object="$target" check="false"/>
                <check_value value="this.isplayerowned"/>
                <check_value value="this.assignedcontrolled.bboxdistanceto.{$target} gt $maxcombatrange"/>
              </check_all>
              <!-- or target has docked. -->
              <event_object_docked object="$target" check="false"/>
            </check_any>
          </conditions>
        </interrupt>
        <interrupt_after_time time="$trackduration"/>
      </move_to>

      <do_if value="not this.zone.isclass.highway">
        <resume label="evaluate_targets"/>
      </do_if>
      <do_else>
        <resume label="scan"/>
      </do_else>

      <label name="inactive"/>

      <debug_text text="'HIGH: deactivating.'" chance="$debugchance"/>

      <stop_moving object="this.assignedcontrolled"/>
      <stop_shooting object="this.assignedcontrolled"/>
      <stop_shooting object="this.assignedcontrolled" missiles="true"/>

      <wait sinceversion="4">
        <interrupt>
          <conditions>
            <event_object_signalled object="this.assignedcontrolled" param="'lasertower_activate'"/>
            <!-- NB: by the time that the signal is received, lasertower is already active. -->
            <debug_text text="'activation signal received. isactive: %s (should be 1)'.[this.assignedcontrolled.isactive]" debugchance="$debugchance"/>
            <check_value value="this.assignedcontrolled.isactive"/>
          </conditions>
          <actions>
            <debug_text text="'HIGH: activation signal is valid. activating.'" chance="$debugchance"/>
            <resume label="scan"/>
          </actions>
        </interrupt>
      </wait>

      <debug_text text="'script is ending. this is not supposed to happen.'" filter="error"/>

    </actions>
  </attention>
  <attention min="unknown">
    <actions>

      <!-- wait before activation to allow the lasertower to finish launching. -->
      <wait exact="3s" sinceversion="5"/>

      <label name="scan"/>

      <!-- TODO: add "searching for targets" command? -->
      <set_command_action commandaction="commandaction.standingby"/>

      <debug_text text="'scanning for targets'" chance="$debugchance"/>

      <stop_moving object="this.assignedcontrolled"/>

      <set_value name="$scanning"/>
      <wait>
        <interrupt>
          <conditions>
            <check_any>
              <event_gravidar_has_scanned object="this.assignedcontrolled"/>
              <event_object_changed_zone object="this.assignedcontrolled"/>
            </check_any>
            <check_value value="this.sector and not this.zone.isclass.highway"/>
            <count_gravidar_contacts groupname="$newdetected" object="this.assignedcontrolled" class="class.defensible" docked="false" checkoperational="false" sortbydistanceto="this.assignedcontrolled" sortdescending="true" min="1">
              <match_context macro="this.sector.macro"/>
              <match_parent class="class.object" negate="true"/>
              <match class="[class.collectable, class.buildstorage]" negate="true"/>
              <match state="componentstate.wreck" negate="true"/>
              <match_relation_of object="this.assignedcontrolled" comparison="lt" relation="friend"/>
            </count_gravidar_contacts>
          </conditions>
          <actions>
            <do_if value="@$newdetected.count">
              <clear_group group="$detected"/>
              <add_to_group groupname="$detected" group="$newdetected"/>
            </do_if>
            <remove_value name="$newdetected"/>
          </actions>
        </interrupt>
      </wait>
      <remove_value name="$scanning"/>

      <label name="evaluate_targets"/>

      <!-- any non-friendly objects within gravidar range are considered valid and will be tracked even if they will not or cannot be fired upon. hostile targets within combat range have highest priority. -->
      <debug_text text="'evaluating targets'" chance="$debugchance"/>

      <cease_fire object="this.assignedcontrolled"/>

      <!-- take the last ship, which should be the closest one -->
      <set_value name="$target" exact="@$detected.{$detected.count}"/>
      <!-- Iterate through all the sorted ships, starting from the closest (in reverse, so can remove elements) -->
      <do_all exact="$detected.count" counter="$i" reverse="true">
        <debug_text text="'target acquired: %s %s %s, %sm away. max combat range: %s hostile? %s, can be attacked: %s, is wreck: %s'.[$detected.{$i}.idcode, $detected.{$i}.knownname, $detected.{$i}, this.ship.bboxdistanceto.{$detected.{$i}}, $maxcombatrange, this.hasrelation.enemy.{$detected.{$i}}, $detected.{$i}.canbeattacked, $detected.{$i}.iswreck]" chance="$debugchance"/>
        <!-- ignore targets that are:
                in highways,
                not in this sector,
                or are no longer operational (NB: boarding pods that are attached to objects are not operational but are not removed from groups) -->
        <do_if value="not $detected.{$i}.canbeattacked or $detected.{$i}.zone.isclass.highway or not $detected.{$i}.hascontext.{this.sector}">
          <do_if value="$hostiletargets.indexof.{$detected.{$i}}">
            <remove_from_group group="$hostiletargets" object="$detected.{$i}"/>
          </do_if>
          <remove_from_group group="$detected" object="$detected.{$i}"/>
        </do_if>
        <do_else>
          <do_if value="not $hostiletargets.indexof.{$detected.{$i}} and this.hasrelation.enemy.{$detected.{$i}}">
            <add_to_group groupname="$hostiletargets" object="$detected.{$i}"/>
          </do_if>
          <!-- take the first enemy (is the closest one too) and override the current target -->
          <do_if value="this.hasrelation.enemy.{$detected.{$i}}">
            <set_value name="$target" exact="$detected.{$i}"/>
            <debug_text text="'new target is hostile. switching targets'" chance="$debugchance"/>
            <break />
          </do_if>
        </do_else>
      </do_all>

      <do_if value="not $target">
        <debug_text text="'no valid targets in gravidar. standing by to acquire targets.'" chance="$debugchance"/>
        <resume label="scan"/>
      </do_if>
      <debug_text text="'valid target found. tracking.'" chance="$debugchance"/>

      <label name="track"/>

      <do_if value="not $target.canbeattacked">
        <debug_text text="'low. target: %s %s %s cannot be attacked. re-evaluating targets'.[@$target.idcode, @$target.knownname, $target]" chance="$debugchance"/>
        <resume label="evaluate_targets"/>
      </do_if>

      <debug_text text="'target acquired. tracking %s %s %s, %sm away. hostile? %s'.[$target.idcode, $target.knownname, $target, this.assignedcontrolled.bboxdistanceto.{$target}, this.hasrelation.enemy.{$target}]" chance="$debugchance"/>

      <set_value name="$trackduration" min="11s" max="31s"/>

      <do_if value="this.hasrelation.enemy.{$target} and this.assignedcontrolled.distanceto.{$target} le $maxcombatrange">
        <do_while value="not $target.isclass.defensible and $target.container">
          <set_value name="$target" exact="$target.container"/>
        </do_while>
        <set_command_action commandaction="commandaction.attackingto" param="$target"/>
        <debug_text text="'target is hostile. opening fire.'" chance="$debugchance"/>
        <get_attackstrength object="this.assignedcontrolled" target="$target">
          <result hullshield="$result_hullshield" hullonly="$result_hullonly" shieldonly="$result_shieldonly" hullnoshield="$result_hullnoshield"/>
        </get_attackstrength>
        <do_if value="not @$module.canbeattacked">
          <find_object_component name="$module" class="class.module" object="$target" checkoperational="false">
            <match state="componentstate.wreck" negate="true"/>
          </find_object_component>
        </do_if>
        <apply_attackstrength object="$target" attacker="this.assignedcontrolled" hullshield="$result_hullshield * ($trackduration)f" hullonly="$result_hullonly * ($trackduration)f" shieldonly="$result_shieldonly * ($trackduration)f" hullnoshield="$result_hullnoshield * ($trackduration)f" module="@$module">
          <result killed="$isdead" module="$module"/>
        </apply_attackstrength>
      </do_if>

      <!-- only way this move_to can finish is if the target collides with us.
        NB: this move_to only serves to orient us to the target. -->
      <wait exact="$trackduration">
        <interrupt>
          <conditions>
            <!-- disengage and re-evaluate targets if: -->
            <check_any>
              <!-- target is destroyed, -->
              <event_object_destroyed object="$target" check="false"/>
              <!-- target is abandoned, -->
              <event_object_abandoned object="$target" check="false"/>
              <check_all>
                <!-- target changes ownership and is no longer hostile, -->
                <event_object_changed_true_owner object="$target" check="false"/>
                <!-- this will break if a ship is subordinate to
                        a ship belonging to a different faction,
                          and that ship uncovers. -->
                <check_value value="event.param != this.assignedcontrolled.trueowner"/>
              </check_all>
              <check_all>
                <check_any>
                  <event_object_changed_zone object="$target" check="false"/>
                  <event_object_changed_zone object="this.assignedcontrolled" check="false"/>
                </check_any>
                <check_any>
                  <!-- target enters a highway, -->
                  <check_value value="@$target.zone.isclass.highway"/>
                  <!-- we enter a highway, -->
                  <check_value value="this.zone.isclass.highway"/>
                  <!-- target changes sectors, -->
                  <check_value value="@$target.sector != @this.sector"/>
                </check_any>
              </check_all>
              <check_all>
                <!-- this belongs to the player faction and target is no longer visible to any player-owned objects, -->
                <event_object_left_live_view object="$target" check="false"/>
                <check_value value="this.isplayerowned"/>
                <check_value value="this.assignedcontrolled.bboxdistanceto.{$target} gt $maxcombatrange"/>
              </check_all>
              <!-- or target has docked. -->
              <event_object_docked object="$target" check="false"/>
            </check_any>
          </conditions>
        </interrupt>
      </wait>

      <do_if value="not this.isplayerowned and player.age gt $starttime + 1h">
        <debug_text text="'laser tower is not player-owned, we are in low attention, and it is now one hour since we deployed. self-destructing.'" chance="$debugchance"/>
        <destroy_object object="this.assignedcontrolled" explosion="false"/>
      </do_if>

      <do_if value="not this.zone.isclass.highway">
        <resume label="evaluate_targets"/>
      </do_if>
      <do_else>
        <resume label="scan"/>
      </do_else>

      <label name="inactive"/>

      <!-- check in case a non-player-owned lasertower is deactivated then changes to low attention. -->
      <do_if value="not this.isplayerowned and player.age gt $starttime + 1h">
        <debug_text text="'laser tower is not player-owned, we are in low attention, and it is now one hour since we deployed. self-destructing.'" chance="$debugchance"/>
        <destroy_object object="this.assignedcontrolled" explosion="false"/>
      </do_if>

      <debug_text text="'LOW: deactivating.'" chance="$debugchance"/>

      <stop_moving object="this.assignedcontrolled"/>

      <wait sinceversion="4">
        <interrupt>
          <conditions>
            <event_object_signalled object="this.assignedcontrolled" param="'lasertower_activate'"/>
            <debug_text text="'activation signal received. isactive: %s (should be 1)'.[this.assignedcontrolled.isactive]" debugchance="$debugchance"/>
            <!-- NB: by the time that the signal is received, lasertower is already active. -->
            <check_value value="this.assignedcontrolled.isactive"/>
          </conditions>
          <actions>
            <debug_text text="'LOW: activation signal is valid. activating.'" chance="$debugchance"/>
            <resume label="scan"/>
          </actions>
        </interrupt>
      </wait>

      <debug_text text="'script is ending. this is not supposed to happen.'" filter="error"/>

    </actions>
  </attention>
</aiscript>