<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="lib.target.selection" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <params>
    <param name="primarytarget" comment="Object to attack" />
    <param name="secondarytargets" comment="List/Group of objects to attack" />
    <param name="escort" comment="A friendly object to stay in pursuedistance range to it and prefer targets near him" />
    <param name="pursuedistance" comment="Distance to pursue/escort (if pursuetargets false or 'escort' provided)" />
    <param name="pursuetargets" comment="Pursue the target no matter what" />
    <param name="list_objectstoignore" default="[]" comment="List of objects to ignore. Only used from move.seekenemies at the moment."/>
    <param name="allowothertargets" comment="Whether the script shall keep running when all primary targets have been destroyed"/>
    <param name="checkrelation" comment="Check may attack (faction enemy relation)" />
    <param name="targetpurposes" default="[]" />
    <param name="targetclasses" default="[]"/>

    <param name="radius" default="null" comment="disengage if target goes beyond this distance relative to radiusanchorpos in radiusanchorspace"/>
    <param name="radiusanchorpos" default="null"/>
    <param name="radiusanchorspace" default="null"/>

    <param name="debugchance" default="0" />
  </params>
  <attention min="unknown">
    <actions>
      <!-- if primary target is a station:
              * if this is a small fighter:
                 - go for surface elements
              * if this is a capship
                 - go to big modules
      -->

      <create_group groupname="$targets" />

      <!-- if primary/secondary targets set, set them as the target list -->
      <do_if value="$primarytarget.canbeattacked">
        <debug_text text="'Primary target found, choosing it'" chance="$debugchance" />
        <add_to_group groupname="$targets" object="$primarytarget" />
      </do_if>
      <do_elseif value="@$secondarytargets.count">
        <debug_text text="'Secondary targets found, choosing one of them'" chance="$debugchance" />
        <!-- Supports group or list -->
        <do_if value="typeof $secondarytargets == datatype.group">
          <add_to_group groupname="$targets" group="$secondarytargets" />
        </do_if>
        <do_elseif value="typeof $secondarytargets == datatype.list">
          <add_to_group groupname="$targets" list="$secondarytargets" />
        </do_elseif>
      </do_elseif>
      <do_elseif value="$allowothertargets">
        <do_if value="$targets.count == 0">
          <debug_text text="'Checking blackboard for a target object'" chance="$debugchance" />
          <do_if value="@this.commander.defensible.$attacktarget.canbeattacked">
            <add_to_group groupname="$targets" object="this.commander.defensible.$attacktarget" />
          </do_if>
        </do_if>
        <!-- else, use enemy gravidar contacts as the target list -->
        <do_if value="$targets.count == 0 and this.sector">
          <debug_text text="'Checking gravidar for enemies'" chance="$debugchance" />
          <find_gravidar_contact groupname="$targets" multiple="true" docked="false" object="this.ship" class="class.defensible" checkoperational="false" maybeattackedby="this.ship">
            <match_context macro="this.sector.macro"/>
            <match class="[class.collectable, class.buildstorage]" negate="true"/>
            <match state="componentstate.wreck" negate="true"/>
          </find_gravidar_contact>
        </do_if>
        <!-- if we *still* have no enemies, and are escorting something, see if there are enemies of any of them around -->
        <do_if value="$targets.count == 0 and @$escort.exists and this.sector">
          <debug_text text="'Checking gravidar for enemies of escort ' + $escort.knownname" chance="$debugchance" />
          <find_gravidar_contact groupname="$targets" multiple="true" docked="false" object="this.ship" class="class.defensible" checkoperational="false" maybeattackedby="$escort">
            <match_context macro="this.sector.macro"/>
            <match class="[class.collectable, class.buildstorage]" negate="true"/>
            <match state="componentstate.wreck" negate="true"/>
          </find_gravidar_contact>
        </do_if>
      </do_elseif>

      <label name="selection" />

      <set_value name="$selected" exact="0" />
      <set_value name="$highest" exact="-1" />
      <do_all exact="$targets.count" counter="$i">
        <!-- Skip conditions -->
        <do_if value="(not $targets.{$i}.canbeattacked) or ($checkrelation and not this.mayattack.{$targets.{$i}}) or (this.trueowner == $targets.{$i}.trueowner) or (@$targets.{$i}.dock)">
          <debug_text text="'cannot attack %1 (%2) because it is not operational: %3, it is friendly: %4, or it is docked: %5.'.[$targets.{$i}.knownname, $targets.{$i}, not $targets.{$i}.isoperational, not this.mayattack.{$targets.{$i}}, @$targets.{$i}.dock]" chance="$debugchance"/>
          <continue />
        </do_if>
        <do_elseif value="$targets.{$i}.zone.isclass.highway">
          <debug_text text="'%1 (%2) cannot attack %3 (%4) right now because it is in a highway.'.[this.ship.knownname, this.ship, $targets.{$i}.knownname, $targets.{$i}]" chance="$debugchance"/>
          <continue/>
        </do_elseif>
        <do_elseif value="$targets.{$i}.isclass.buildstorage">
          <debug_text text="'%s %s %s cannot attack %s %s %s because it is a build storage module. ignoring.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $targets.{$i}.idcode, $targets.{$i}.knownname, $targets.{$i}]" chance="$debugchance"/>
          <continue/>
        </do_elseif>
        <do_elseif value="$list_objectstoignore.indexof.{$targets.{$i}}">
          <debug_text text="'%1 (%2) cannot attack %3 (%4) right now because we were told to ignore it.'.[this.ship.knownname, this.ship, $targets.{$i}.knownname, $targets.{$i}]" chance="$debugchance"/>
          <continue/>
        </do_elseif>
        <do_elseif value="$radius and $radiusanchorpos and $radiusanchorspace and not $pursuetargets and this.isplayerowned and ($targets.{$i}.distanceto.[$radiusanchorspace, $radiusanchorpos] gt $radius)">
          <debug_text text="'%1 (%2) cannot attack %3 (%4) right now because target is outside our engagement area.\n target distance to anchor: %sm\n radius: %sm'.[this.ship.knownname, this.ship, $targets.{$i}.knownname, $targets.{$i}, $targets.{$i}.distanceto.[$radiusanchorspace, $radiusanchorpos], $radius]" chance="$debugchance"/>
          <continue/>
        </do_elseif>
        <do_elseif value="not $targets.{$i}.isclass.defensible and not $targets.{$i}.container and not $targets.{$i}.isrealclass.station">
          <debug_text text="'%s %s %s cannot attack %s %s which is neither a ship, a station, nor something connected to anything.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $targets.{$i}.knownname, $targets.{$i}]" chance="$debugchance"/>
          <continue/>
        </do_elseif>

        <do_if value="$escort.exists">
          <set_value name="$refobject" exact="$escort"/>
        </do_if>
        <do_else>
          <set_value name="$refobject" exact="this.ship"/>
        </do_else>

        <!-- distance to this ship -->
        <set_value name="$distance" exact="$targets.{$i}.distanceto.{$refobject}"/>

        <!-- skip if too far away -->
        <do_if value="not $pursuetargets and (this.sector != $targets.{$i}.sector)">
          <debug_text text="'%s (%s) is in a different sector. skipping target.'.[$targets.{$i}.knownname, $targets.{$i}]" chance="$debugchance"/>
          <continue/>
        </do_if>
        <debug_text text="'%s %s checking distance to target.\n distance to target: %s\n pursue distance: %s'.[this.ship.knownname, this.ship, $distance, $pursuedistance]" chance="0"/>
        <do_if value="not $pursuetargets and $pursuedistance and ($distance gt $pursuedistance)">
          <debug_text text="'%1 (%2) is too far away. skipping target.\n target: %1 (%2) \n distance: %3 \n temp_pursuedistance: %4'.[$targets.{$i}.knownname, $targets.{$i}, $distance, $pursuedistance]" chance="$debugchance"/>
          <continue/>
        </do_if>

        <!-- Set initial priority -->
        <set_value name="$priority" exact="0" />

        <!-- prioritize targets by certain conditions -->
        <do_if value="$targets.{$i} == $primarytarget or $targets.{$i}.container == $primarytarget">
          <!-- is the current target (prioritize higher to prevent frequent switching) -->
          <set_value name="$priority" exact="$priority + 10" />
        </do_if>
        <do_else>
          <do_if value="$targetpurposes.count and not $targetpurposes.indexof.{@$targets.{$i}.primarypurpose}">
            <debug_text text="'%1 (%2) is not of the type that i am looking for. \n target: %1 (%2) \n target purpose: %3 \n target container purpose: %4'.[$targets.{$i}.knownname, $targets.{$i}, @$targets.{$i}.primarypurpose, @$targets.{$i}.container.primarypurpose]" chance="$debugchance"/>
            <continue />
          </do_if>
          <do_elseif value="$targetclasses.count">
            <do_for_each name="$locclass" in="$targetclasses">
              <do_if value="$targets.{$i}.isclass.{$locclass}">
                <set_value name="$locvalid"/>
                <break/>
              </do_if>
            </do_for_each>
            <do_if value="not $locvalid?">
              <debug_text text="'%s %s %s is not of a class that i am looking for.'.[$targets.{$i}.class, @$targets.{$i}.knownname, $targets.{$i}]" chance="$debugchance"/>
              <continue/>
            </do_if>
            <remove_value name="$locvalid"/>
          </do_elseif>
        </do_else>

        <!-- add priority linearly between min and max distance -->
        <do_if value="$distance lt 5500">
          <do_if value="$distance gt 500">
            <set_value name="$priority" exact="$priority + (10 - ($distance - 500) / 500)" />
          </do_if>
          <do_else>
            <set_value name="$priority" exact="$priority + 10" />
          </do_else>
        </do_if>

        <!-- faction relation to this ship and escort (the lower the combined relation, the higher the priority) -->
        <set_value name="$priority" exact="$priority - ($targets.{$i}.relationto.{this.ship}) * 5" />

        <!-- closest distance to any escort, if there are any -->
        <do_if value="@$escort.exists">
          <!-- (the lower the combined relation, the higher the priority) -->
          <set_value name="$priority" exact="$priority - ($targets.{$i}.relationto.{$escort}) * 3" />
        </do_if>

        <!-- damage potential vs. time to destroy -->
        <do_if value="($targets.{$i}.hull + $targets.{$i}.shield) gt 0">
          <do_if value="@$targets.{$i}.dps.all">
            <set_value name="$priority" exact="$priority + 10 * ($targets.{$i}.dps.all)f / ($targets.{$i}.hull + $targets.{$i}.shield)f" />
          </do_if>
        </do_if>

        <!-- TODO: recent damage against this ship, an escort or allies -->
        <!-- TODO: evaluate fight/flight by comparing combined enemy strength to combined allied strength? -->

        <do_if value="$priority gt $highest">
          <set_value name="$highest" exact="$priority" />
          <set_value name="$selected" exact="$i" />
        </do_if>
      </do_all>

      <!-- Set the target (if there is a valid one) -->
      <do_if value="$selected == 0">
        <!-- no valid targets left -->
        <debug_text text="'No valid targets left'" chance="$debugchance" />
        <set_value name="$target" exact="null" />
      </do_if>
      <do_elseif value="$targets.{$selected} != $primarytarget">
        <set_value name="$target" exact="$targets.{$selected}" />
        <debug_text text="'%1 (%2) changed target to: %3 (%4)'.[this.ship.knownname, this.ship, $target.knownname, $target]" chance="$debugchance" />
      </do_elseif>
      <do_else>
        <set_value name="$target" exact="$primarytarget" />
        <debug_text text="'%1 (%2) stays with primary target: %3 (%4)'.[this.ship.knownname, this.ship, $target.knownname, $target]" chance="$debugchance" />
      </do_else>

      <!-- after the main target is selected, if it is big (station or capital ship) -->
      <do_if value="$target.isrealclass.station or (not this.assignedcontrolled.iscapitalship and @$target.iscapitalship)">
        <!-- clear targets, and reselect again -->
        <clear_group group="$targets" />

        <!-- Capital ship vs station, we must acquire a station module. Otherwise, move against the target. -->
        <do_if value="this.ship.iscapitalship">
          <find_object_component groupname="$targets" object="$target" checkoperational="false" integrated="false" indestructible="false" invulnerable="false">
            <match module="$target.isrealclass.station"/>
            <match state="componentstate.wreck" negate="true"/>
          </find_object_component>
          <debug_text text="'bigship found %s subtargets'.[$targets.count]" chance="$debugchance"/>
        </do_if>
        <!-- small ship vs big target -->
        <do_else>
          <find_object_component name="$component" object="$target" class="[class.shieldgenerator, class.weapon, class.engine]" surfaceelement="true" integrated="false" indestructible="false" invulnerable="false" />
          <do_if value="not $component">
            <!-- No components. find anything and move to it.
              If target is a station, move against a module or a surface element.
              If target is a capital ship, move against a surface element. -->
            <debug_text text="'no component found. Find anything else'" chance="$debugchance" />
            <find_object_component name="$component" object="$target" checkoperational="false" integrated="false" indestructible="false" invulnerable="false">
              <match_any>
                <match surfaceelement="true"/>
                <match module="$target.isrealclass.station"/>
              </match_any>
              <match state="componentstate.wreck" negate="true"/>
            </find_object_component>
          </do_if>
          <!-- add it to the targets group -->
          <do_if value="$component">
            <debug_text text="'component found. %1 (%2) of class %3'.[$component.knownname, $component, $component.class]" chance="$debugchance" />
            <add_to_group groupname="$targets" object="$component" />
            <do_if value="$target.isrealclass.station">
              <debug_text text="'removing %s %s %s %s from list of potential targets.'.[$target.class, $target.idcode, $target.knownname, $target]" chance="$debugchance"/>
              <remove_from_group group="$targets" object="$target" comment="pointless to attack the station itself. station is destroyed when all modules are destroyed."/>
            </do_if>
          </do_if>
          <do_else>
            <debug_text text="'no component found.'" chance="$debugchance" />
          </do_else>
          <remove_value name="$component" />
        </do_else>
        <!-- If there are any subcomponents of target, re-select logic with those -->
        <do_if value="$targets.count">
          <!-- reselection -->
          <resume label="selection" />
        </do_if>
        <do_else>
          <debug_text text="'%1 (%2) stays with the selected target: %3 (%4)'.[this.ship.knownname, this.ship, $target.knownname, $target]" chance="$debugchance" />
        </do_else>
      </do_if>

      <return >
        <retval name="target" value="$target" />
      </return>

    </actions>
  </attention>
</aiscript>
