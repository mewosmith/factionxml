<?xml version="1.0" encoding="utf-8"?>
<aiscript name="order.trade.crewexchange" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <!--
    case 1: both parties already docked at common context.
              transfer immediately
    case 2: one party can dock at exchange partner.
              dock then transfer
    case 3: one party can dock at a common context. (not implemented. risky since passive party can undock after active party starts moving to dock. can lock them down, but that would make the orders uninterruptible for a potentially long period of time.)
    case 4: neither party can dock at the other.
              if docked, passive undocks, active moves to passive's zone, transfer via shuttles
  -->
  <order id="CrewExchange" name="{1041, 681}" description="{1041, 682}" category="internal">
    <params>
      <param name="tradedeal" type="trade" text="{1041, 10130}" comment="Trade"/>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
    </requires>
    <location object="$tradedeal.exchangepartner.{this.object}" condition="$tradedeal.exists" />
  </order>
  <interrupts>
    <library>
      <!-- set variable $donotcheckdocked to transfer from and clean up all pods regardless of whether or not they are docked. -->
      <actions name="TransferCrewFromPods">
        <set_value name="$intr_locgroup" exact="$pods_active"/>
        <set_value name="$intr_locdest" exact="$targetobject"/>
        <set_value name="$intr_locrecord_transferred" exact="$crewtransferred_passive"/>
        <set_value name="$intr_locrecord_totransfer" exact="$crewtotransfer_passive"/>
        <do_all exact="2">
          <do_all exact="$intr_locgroup.count" counter="$intr_i" reverse="true">
            <do_if value="$intr_locdest.isoperational">
              <set_value name="$intr_locpod" exact="$intr_locgroup.{$intr_i}"/>
              <do_if value="$donotcheckdocked? or (@$intr_locpod.dock.container == $intr_locdest)">
                <debug_text text="'%s %s %s with %s people already docked at %s %s %s.'.[@$intr_locpod.idcode, @$intr_locpod.knownname, $intr_locpod, $intr_locpod.people.count, @$intr_locdest.idcode, @$intr_locdest.knownname, $intr_locdest]" chance="(not $donotcheckdocked?) * $debugchance"/>
                <transfer_people object="$intr_locdest" otherobject="$intr_locpod" result="$intr_loccrewtransferred">
                  <existing_people people="$intr_locpod.people.list"/>
                </transfer_people>
                <do_all exact="$intr_loccrewtransferred.count" counter="$intr_j">
                  <append_to_list name="$intr_locrecord_transferred" exact="$intr_loccrewtransferred.{$intr_j}"/>
                </do_all>
                <debug_text text="'transferred %s people to %s %s %s. %s people pending.'.[$intr_loccrewtransferred.count, @$intr_locdest.idcode, @$intr_locdest.knownname, $intr_locdest, $intr_locrecord_totransfer.count - $intr_locrecord_transferred.count]" chance="$debugchance"/>
                <!-- manually remove pod from its group so we can immediately check for the group still being populated in case there is a delay to pod being destroyed. -->
                <remove_from_group group="$intr_locgroup" object="$intr_locpod"/>
                <destroy_object object="$intr_locpod" explosion="false"/>
                <remove_value name="$intr_loccrewtransferred"/>
              </do_if>
              <remove_value name="$intr_locpod"/>
            </do_if>
          </do_all>
          <set_value name="$intr_locgroup" exact="$pods_passive"/>
          <set_value name="$intr_locdest" exact="this.assignedcontrolled"/>
          <set_value name="$intr_locrecord_transferred" exact="$crewtransferred_active"/>
          <set_value name="$intr_locrecord_totransfer" exact="$crewtotransfer_active"/>
        </do_all>
        <remove_value name="$intr_locrecord_totransfer"/>
        <remove_value name="$intr_locrecord_transferred"/>
        <remove_value name="$intr_locdest"/>
        <remove_value name="$intr_locgroup"/>
      </actions>
    </library>
    <handler>
      <conditions>
        <event_object_signalled object="this.assignedcontrolled" param="'crewexchange_abort'" param2="$tradedeal"/>
      </conditions>
      <actions>
        <debug_text text="'%s %s %s got abort signal.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
        <abort_called_scripts resume="finish"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_control_entity_added object="this.assignedcontrolled" check="false"/>
      </conditions>
      <actions>
        <!-- NB: without this, process can stall if the player takes over the pilot chair of the passive ship before the first signal is received by the active ship. -->
        <do_if value="$currentpilot.$readyexchange">
          <set_value name="this.$readyexchange" exact="$currentpilot.$readyexchange"/>
          <remove_value name="$currentpilot.$readyexchange"/>
        </do_if>
        <set_value name="$currentpilot" exact="this"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_object_signalled object="this.assignedcontrolled" param="'crewexchange_restart'" param2="$tradedeal"/>
      </conditions>
      <actions>
        <do_if value="not $ispassive">
          <debug_text text="'restart signal received. moving to target object.'" chance="$debugchance"/>
          <abort_called_scripts resume="move_to_targetobject"/>
        </do_if>
        <debug_text text="'restart signal received. resuming at passive_trade.'" chance="$debugchance"/>
        <abort_called_scripts resume="passive_trade"/>
      </actions>
    </handler>
    <handler ref="TargetInvalidHandler"/>
  </interrupts>
  <init>
    <!-- Initialize variables -->
    <set_value name="$targetobject" exact="$tradedeal.exchangepartner.{this.object}" comment="Partner" />
    <set_value name="$ispassive" exact="$tradedeal.ispassive.{this.object}" comment="Is passive" />
    <set_value name="$currentpilot" exact="this"/>
    <set_value name="$targetoffset" exact="[(this.ship.size + $targetobject.size) * 2, 400m].max"/>
    <!-- info -->
    <set_command_action commandaction="commandaction.searchingtrades" />
    <set_command command="command.trade" param="$targetobject" />
    <!-- debugging -->
    <set_value name="$failreason" exact="''" />
  </init>
  <attention min="unknown">
    <actions>

      <do_if value="not $tradedeal.exists or not $tradedeal.iscrewexchange">
        <set_value name="$failreason" exact="'ERR_TRADEDEAL_INVALID'"/>
        <signal_objects object="this.assignedcontrolled" param="'crewexchange_abort'" param2="$tradedeal"/>
        <signal_objects object="$targetobject" param="'crewexchange_abort'" param2="$tradedeal"/>
        <wait exact="1ms"/>
      </do_if>

      <do_if value="$ispassive">
        <debug_text text="'\n\nSTART PASSIVE trade: %1. docked at: %2\n'.[$tradedeal, @this.assignedcontrolled.dock.container]" chance="$debugchance"/>
      </do_if>
      <do_else>
        <debug_text text="'\n\nSTART ACTIVE trade: %1. docked at: %2\n'.[$tradedeal, @this.assignedcontrolled.dock.container]" chance="$debugchance"/>
      </do_else>

      <!-- Ware Exchange cases -->
      <do_if value="$targetobject.isclass.ship">
        <do_if value="@this.assignedcontrolled.commoncontext.{$targetobject}.container or @this.assignedcontrolled.commoncontext.{$targetobject}.isclass.container or this.assignedcontrolled.hascontext.{$targetobject} or $targetobject.hascontext.{this.assignedcontrolled}">
          <debug_text text="'%s %s %s in the same context as trade partner %s %s %s'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $targetobject.idcode, $targetobject.knownname, $targetobject]" chance="$debugchance"/>
          <do_if value="$ispassive">
            <!-- add a flag to skip the movement -->
            <set_value name="$alreadythere"/>
            <resume label="passive_trade"/>
          </do_if>
          <set_value name="$dockcontainer" exact="this.assignedcontrolled.container"/>
          <resume label="move_to_targetobject"/>
        </do_if>

        <!-- NB: this assumes that two ships can never both dock with each other. -->
        <find_dockingbay name="$dock" object="$targetobject">
          <match_any>
            <match_dock storage="true" size="this.assignedcontrolled.docksize" free="true"/>
            <match_dock storage="false" size="this.assignedcontrolled.docksize" free="true"/>
          </match_any>
        </find_dockingbay>
        <do_if value="not $dock">
          <find_dockingbay name="$dock" object="this.assignedcontrolled">
            <match_any>
              <match_dock storage="true" size="$targetobject.docksize" free="true"/>
              <match_dock storage="false" size="$targetobject.docksize" free="true"/>
            </match_any>
          </find_dockingbay>
        </do_if>

        <do_if value="$dock">
          <set_value name="$dockcontainer" exact="$dock.container"/>
          <debug_text text="'%s %s %s can dock with %s %s %s. passive? %s'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $dockcontainer.idcode, $dockcontainer.knownname, $dockcontainer, $ispassive]" chance="$debugchance"/>
          <!-- overriding tradedeal.ispassive here. this will only apply to this script. anything else checking tradedeal.ispassive will still get the prior value. -->
          <do_if value="($dockcontainer == this.assignedcontrolled) or this.assignedcontrolled.hascontext.{$dockcontainer}">
            <set_value name="$ispassive"/>
            <resume label="passive_trade"/>
          </do_if>
          <set_value name="$ispassive" exact="false"/>
        </do_if>
        <!-- if this is a ware exchange trade where we are the passive party, go be passive -->
        <do_elseif value="$ispassive">
          <resume label="passive_trade" />
        </do_elseif>
      </do_if>

      <!-- move to the object that sells/buys our stuff -->
      <label name="move_to_targetobject" />

      <do_if value="not @$dockcontainer.isoperational">
        <do_if value="this.assignedcontrolled.dock">
          <debug_text text="'ACTIVE: %s %s %s undocking'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
          <create_order id="'Undock'" object="this.assignedcontrolled" immediate="true"/>
        </do_if>

        <!-- Ware Exchange Case: Active Partner -->
        <do_if value="$targetobject.isclass.ship">
          <debug_text text="'Me %1 (%2), target %3 (%4)'.[this, this.assignedcontrolled.knownname, $targetobject.pilot, $targetobject.knownname]" chance="$debugchance"/>
          <!-- Wait for the passive trade to be ready  -->
          <debug_text text="'$targetobject.pilot.$readyexchange ' + @$targetobject.pilot.$readyexchange" chance="$debugchance"/>
          <do_if value="(@$targetobject.pilot.$readyexchange.{1} == $tradedeal) and ($targetobject.pilot.$readyexchange.{2} ge 1)">
            <debug_text text="'passive trader was already ready! trade: ' + $tradedeal" chance="$debugchance"/>
          </do_if>
          <do_else>
            <debug_text text="'wait for passive trader to be ready.'" chance="$debugchance"/>
            <stop_moving object="this.assignedcontrolled" />
            <set_command_action commandaction="commandaction.standingby" />
            <do_if value="not $targetobject.isoperational">
              <debug_text text="'exchange partner was destroyed.'" chance="$debugchance"/>
              <set_value name="$failreason" exact="'ERR_TRADEPARTNER_DESTROYED'"/>
              <resume label="finish"/>
            </do_if>

            <debug_text text="'waiting for signal: crewexchange_ready. trade: ' + $tradedeal" chance="$debugchance"/>
            <wait>
              <interrupt>
                <conditions>
                  <check_any>
                    <event_object_destroyed object="$targetobject"/>
                    <event_object_signalled object="this.assignedcontrolled" param="'crewexchange_ready'" param2="$tradedeal" />
                  </check_any>
                </conditions>
                <actions>
                  <do_if value="event.name == 'event_object_destroyed'">
                    <debug_text text="'exchange partner was destroyed.'" chance="$debugchance"/>
                    <set_value name="$failreason" exact="'ERR_TRADEPARTNER_DESTROYED'"/>
                    <resume label="finish"/>
                  </do_if>
                  <debug_text text="'passive trader is ready! He finished the movement'" chance="$debugchance" />
                </actions>
              </interrupt>
            </wait>
            <debug_text text="'received signal: crewexchange_ready. trade: ' + $tradedeal" chance="$debugchance"/>              
          </do_else>
          <set_value name="this.$readyexchange" exact="[$tradedeal, 1]"/>
        </do_if>

        <!-- move to correct zone -->
        <!-- NB: movement done here to make sure the passive partner is done moving and will not change sector contexts after this move. -->
        <do_if value="(this.zone != $targetobject.zone) or (this.assignedcontrolled.distanceto.{$targetobject} gt $targetoffset)">
          <get_safe_pos result="$targetpos" sector="$targetobject.sector" object="$targetobject" max="$targetoffset" radius="this.assignedcontrolled.size" ignored="this.assignedcontrolled" allowyaxis="false"/>
          <run_script name="'move.generic'">
            <param name="destination" value="$targetobject.sector"/>
            <param name="position" value="$targetpos"/>
          </run_script>
          <remove_value name="$targetpos"/>
          <debug_text text="'distance to target: %sm. targetoffset: %sm, within target: %s'.[@this.assignedcontrolled.distanceto.{$targetobject}, $targetoffset, @this.assignedcontrolled.distanceto.{$targetobject} le $targetoffset]" chance="0"/>
        </do_if>
      </do_if>
      <do_else>
        <!-- skip the movement step if we are already there -->
        <do_if value="this.assignedcontrolled.dock and (this.assignedcontrolled.hascontext.{$targetobject} or @this.assignedcontrolled.commoncontext.{$targetobject}.container or @this.assignedcontrolled.commoncontext.{$targetobject}.isclass.container)">
          <debug_text text="player.age + ' docked at ' + $targetobject.knownname" chance="$debugchance"/>

          <do_if value="(@$targetobject.pilot.$readyexchange.{1} == $tradedeal) and ($targetobject.pilot.$readyexchange.{2} ge 1)">
            <debug_text text="'passive trader was already ready! trade: ' + $tradedeal" chance="$debugchance"/>
          </do_if>
          <do_else>
            <!-- NB: signal handling necessary in this case to make sure that $targetobject is running the matching ware exchange order. -->
            <debug_text text="'waiting for signal: crewexchange_ready. trade: ' + $tradedeal" chance="$debugchance"/>
            <wait>
              <interrupt>
                <conditions>
                  <check_any>
                    <event_object_destroyed object="$targetobject"/>
                    <event_object_signalled object="this.assignedcontrolled" param="'crewexchange_ready'" param2="$tradedeal" />
                  </check_any>
                </conditions>
                <actions>
                  <do_if value="event.name == 'event_object_destroyed'">
                    <debug_text text="'exchange partner was destroyed.'" chance="$debugchance"/>
                    <set_value name="$failreason" exact="'ERR_TRADEPARTNER_DESTROYED'"/>
                    <resume label="finish"/>
                  </do_if>
                  <debug_text text="'passive trader is ready!'" chance="$debugchance" />
                </actions>
              </interrupt>
            </wait>
            <debug_text text="'received signal: crewexchange_ready. trade: ' + $tradedeal" chance="$debugchance"/>
          </do_else>
          <set_value name="this.$readyexchange" exact="[$tradedeal, 1]"/>

          <resume label="check_trade" />
        </do_if>
        <do_else>
          <debug_text text="player.age + ' moving to dock at ' + $targetobject.knownname" chance="$debugchance"/>
          <create_order object="this.assignedcontrolled" id="'DockAt'" immediate="true">
            <param name="destination" value="$dockcontainer"/>
            <param name="debugchance" value="$debugchance"/>
          </create_order>
          <wait min="2ms" max="5ms" comment="short wait to allow DockAt order to begin"/>
        </do_else>
      </do_else>

      <!-- we have arrived, check amount limits -->
      <label name="check_trade" />

      <set_value name="$tradepartner" exact="this.assignedcontrolled"/>
      <do_if value="$tradedeal.ispassive.{this.assignedcontrolled}">
        <set_value name="$tradepartner" exact="$targetobject"/>
      </do_if>

      <get_crew_exchange_lists object="this.assignedcontrolled" trade="$tradedeal">
        <result trader="$crewtotransfer_active" tradepartner="$crewtotransfer_passive"/>
      </get_crew_exchange_lists>
      <debug_text text="'LEAVING CREW: %s crew transferring from %s %s %s to %s %s %s:'.[$crewtotransfer_active.count, @this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, @$targetobject.idcode, @$targetobject.knownname, $targetobject]" chance="$debugchance"/>
      <do_all exact="$crewtotransfer_active.count" counter="$i">
        <set_value name="$locperson" exact="$crewtotransfer_active.{$i}"/>
        <debug_text text="'%s %s, exists: %s, role: %s'.[@this.assignedcontrolled.people.{$locperson}.name, $locperson, this.assignedcontrolled.people.{$locperson}.exists, this.assignedcontrolled.people.{$locperson}.role.name]" chance="$debugchance"/>
      </do_all>
      <debug_text text="'ARRIVING CREW: %s crew transferring to %s %s %s from %s %s %s:'.[$crewtotransfer_passive.count, @this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, @$targetobject.idcode, @$targetobject.knownname, $targetobject]" chance="$debugchance"/>
      <do_all exact="$crewtotransfer_passive.count" counter="$i">
        <set_value name="$locperson" exact="$crewtotransfer_passive.{$i}"/>
        <debug_text text="'%s %s, exists: %s, role: %s'.[@$targetobject.people.{$locperson}.name, $locperson, $targetobject.people.{$locperson}.exists, $targetobject.people.{$locperson}.role.name]" chance="$debugchance"/>
      </do_all>
      <remove_value name="$locperson"/>

      <do_if value="not @$crewtotransfer_active.count and not @$crewtotransfer_passive.count">
        <debug_text text="'no crew set to transfer. aborting.'" chance="$debugchance"/>
        <set_value name="$failreason" exact="'ERR_NOCREWTOTRANSFER'"/>
        <signal_objects object="this.assignedcontrolled" param="'crewexchange_abort'" param2="$tradedeal"/>
        <signal_objects object="$targetobject" param="'crewexchange_abort'" param2="$tradedeal"/>
        <wait exact="1ms"/>
      </do_if>

      <do_all exact="$crewtotransfer_active.count" counter="$i" reverse="true">
        <set_value name="$locperson" exact="$crewtotransfer_active.{$i}"/>
        <do_if value="not this.assignedcontrolled.people.{$locperson}.exists">
          <debug_text text="'person %s is no longer aboard %s %s %s. removing from transfer manifest.'.[$locperson, @this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
          <remove_from_list name="$crewtotransfer_active" exact="$locperson"/>
        </do_if>
      </do_all>
      <do_all exact="$crewtotransfer_passive.count" counter="$i" reverse="true">
        <set_value name="$locperson" exact="$crewtotransfer_passive.{$i}"/>
        <do_if value="not $targetobject.people.{$locperson}.exists">
          <debug_text text="'person %s is no longer aboard %s %s %s. removing from transfer manifest.'.[$locperson, @$targetobject.idcode, @$targetobject.knownname, $targetobject]" chance="$debugchance"/>
          <remove_from_list name="$crewtotransfer_passive" exact="$locperson"/>
        </do_if>
      </do_all>
      <remove_value name="$locperson"/>

      <set_value name="$locship" exact="this.assignedcontrolled"/>
      <set_value name="$loclist1" exact="$crewtotransfer_active"/>
      <set_value name="$loclist2" exact="$crewtotransfer_passive"/>
      <do_all exact="2">
        <do_if value="$locship.people.capacity lt ($locship.people.count - $loclist1.count + $loclist2.count)">
          <debug_text text="'transfer will result in too many people in %s %s %s. trimming transfer manifest.'.[@$locship.idcode, @$locship.knownname, $locship]" filter="error"/>
          <set_value name="$locnumtoremove" exact="($locship.people.count - $loclist1.count + $loclist2.count) - $locship.people.capacity"/>
          <do_all exact="$loclist2.count" counter="$i" reverse="true">
            <do_if value="$locnumtoremove">
              <remove_value name="$loclist2.{$i}"/>
              <set_value name="$locnumtoremove" exact="$locnumtoremove - 1"/>
            </do_if>
            <do_else>
              <break/>
            </do_else>
          </do_all>

          <do_if value="$locnumtoremove">
            <debug_text text="'crew to transfer trimmed to %s, but transfer will still result in too many people on board.'.[$loclist2.count]" filter="error"/>
          </do_if>
          <do_else>
            <debug_text text="'crew to transfer to %s %s %s trimmed to %s and we are now safe. proceeding to transfer'.[@$locship.idcode, @$locship.knownname, $locship, $loclist2.count]" chance="$debugchance"/>
          </do_else>
          <remove_value name="$locnumtoremove"/>
        </do_if>
        <set_value name="$locship" exact="$targetobject"/>
        <set_value name="$loclist1" exact="$crewtotransfer_passive"/>
        <set_value name="$loclist2" exact="$crewtotransfer_active"/>
      </do_all>
      <remove_value name="$loclist2"/>
      <remove_value name="$loclist1"/>
      <remove_value name="$locship"/>

      <!-- transfer crew -->
      <label name="perform_trade"/>

      <do_if value="$targetobject.isoperational">
        <do_if value="this.assignedcontrolled.order.id == 'CrewExchange' or (not $ispassive and this.assignedcontrolled.order.id == 'CrewExchangePassive')">
          <debug_text text="'ACTIVE: executing trade. setting order to critical.'" chance="$debugchance"/>
          <set_order_state order="this.assignedcontrolled.order" state="orderstate.critical"/>
          <do_if value="(@$targetobject.order.id == 'CrewExchangePassive' or ($ispassive and @$targetobject.order.id == 'CrewExchange')) and ($targetobject.order.$tradedeal == $tradedeal)">
            <!-- both orders must be set to critical at the same time because cancelling one cancels the other AS LONG AS they are both not critical.
                if $targetobject is not currently running the order, but we got in a position where we could now execute the trade, we can still proceed.
                  in that case, the trade will already have gotten cleaned up when the passive partner restarts the order, handled on start, will fail $tradedeal.exists. -->
            <set_order_state order="$targetobject.order" state="orderstate.critical"/>
          </do_if>
          <do_else>
            <debug_text text="'CrewExchange order of partner: %s %s %s cannot be set to critical. aborting.'.[@$targetobject.idcode, @$targetobject.knownname, $targetobject]" filter="error"/>
            <set_value name="$failreason" exact="'ERR_TRADEPARTNER_WRONGORDER'"/>
            <signal_objects object="this.assignedcontrolled" param="'crewexchange_abort'" param2="$tradedeal"/>
            <signal_objects object="$targetobject" param="'crewexchange_abort'" param2="$tradedeal"/>
            <wait exact="1ms"/>
          </do_else>
        </do_if>
        <do_else>
          <debug_text text="'CrewExchange order of: %s %s %s cannot be set to critical. aborting.'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled]" filter="error"/>
          <set_value name="$failreason" exact="'ERR_WRONGORDER'"/>
          <signal_objects object="this.assignedcontrolled" param="'crewexchange_abort'" param2="$tradedeal"/>
          <signal_objects object="$targetobject" param="'crewexchange_abort'" param2="$tradedeal"/>
          <wait exact="1ms"/>
        </do_else>

        <debug_text text="'transferring people. %s people leaving, %s people arriving.'.[$crewtotransfer_active.count, $crewtotransfer_passive.count]" chance="$debugchance"/>
        <set_value name="$crewtransferred_active" exact="[]"/>
        <set_value name="$crewtransferred_passive" exact="[]"/>
        <do_if value="@this.assignedcontrolled.commoncontext.{$targetobject}.container or @this.assignedcontrolled.commoncontext.{$targetobject}.isclass.container or this.assignedcontrolled.hascontext.{$targetobject} or $targetobject.hascontext.{this.assignedcontrolled}">
          <debug_text text="'%s %s %s and %s %s %s have common context. transferring people.'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, @$targetobject.idcode, @$targetobject.knownname, $targetobject]" chance="$debugchance"/>

          <transfer_people object="$targetobject" otherobject="this.assignedcontrolled" result="$loccrewtransferred_active" force="true">
            <existing_people people="$crewtotransfer_active"/>
          </transfer_people>
          <do_all exact="$loccrewtransferred_active.count" counter="$i">
            <append_to_list name="$crewtransferred_active" exact="$loccrewtransferred_active.{$i}"/>
          </do_all>
          <remove_value name="$loccrewtransferred_active"/>

          <transfer_people object="this.assignedcontrolled" otherobject="$targetobject" result="$loccrewtransferred_passive" force="true">
            <existing_people people="$crewtotransfer_passive"/>
          </transfer_people>
          <do_all exact="$loccrewtransferred_passive.count" counter="$i">
            <append_to_list name="$crewtransferred_passive" exact="$loccrewtransferred_passive.{$i}"/>
          </do_all>
          <remove_value name="$loccrewtransferred_passive"/>
        </do_if>
        <do_else>
          <debug_text text="'they are not making it easy. sending shuttle pods between %s %s %s and %s %s %s.'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, @$targetobject.idcode, @$targetobject.knownname, $targetobject]" chance="$debugchance"/>

          <create_group groupname="$pods_active"/>
          <create_group groupname="$pods_passive"/>
          <set_value name="$transferredtopods_active" exact="[]"/>
          <set_value name="$transferredtopods_passive" exact="[]"/>
          <find_dockingbay name="$poddock_active" object="this.assignedcontrolled">
            <match_dock size="tag.dock_xs" storage="true"/>
          </find_dockingbay>
          <find_dockingbay name="$poddock_passive" object="$targetobject">
            <match_dock size="tag.dock_xs" storage="true"/>
          </find_dockingbay>

          <do_while value="$poddock_active.isoperational and $poddock_passive.isoperational and (($crewtotransfer_active.count and ($transferredtopods_active.count lt $crewtotransfer_active.count)) or ($crewtotransfer_passive.count and ($transferredtopods_passive.count lt $crewtotransfer_passive.count)))">
            <do_if value="$crewtotransfer_active.count and ($transferredtopods_active.count lt $crewtotransfer_active.count)">
              <create_ship name="$pod" macro="ship_gen_xs_escapepod_01_a_macro" dock="$poddock_active">
                <owner exact="this.owner" overridenpc="true"/>
                <pilot>
                  <select race="race.drone" tags="tag.aipilot"/>
                </pilot>
              </create_ship>
              <set_value name="$loccrewtotransfer" exact="$crewtotransfer_active.clone"/>
              <remove_from_list name="$loccrewtotransfer" list="$transferredtopods_active" multiple="true"/>
              <transfer_people object="$pod" otherobject="this.assignedcontrolled" result="$loctransferred">
                <existing_people people="$loccrewtotransfer"/>
              </transfer_people>
              <debug_text text="'launching %s %s %s from %s %s %s with %s people.'.[@$pod.idcode, @$pod.knownname, $pod, @$pod.container.idcode, @$pod.container.knownname, $pod.container, $loctransferred.count]" chance="$debugchance"/>
              <do_all exact="$loctransferred.count" counter="$i">
                <append_to_list name="$transferredtopods_active" exact="$loctransferred.{$i}"/>
              </do_all>
              <start_script name="'order.dock'" object="$pod.pilot">
                <param name="destination" value="$targetobject"/>
                <param name="abouttofinish" value="true"/>
                <param name="debugchance" value="$debugchance"/>
              </start_script>
              <add_to_group groupname="$pods_active" object="$pod"/>
              <remove_value name="$loccrewtotransfer"/>
              <remove_value name="$loctransferred"/>
            </do_if>
            <do_if value="$crewtotransfer_passive.count and ($transferredtopods_passive.count lt $crewtotransfer_passive.count)">
              <create_ship name="$pod" macro="ship_gen_xs_escapepod_01_a_macro" dock="$poddock_passive">
                <owner exact="this.owner" overridenpc="true"/>
                <pilot>
                  <select race="race.drone" tags="tag.aipilot"/>
                </pilot>
              </create_ship>
              <set_value name="$loccrewtotransfer" exact="$crewtotransfer_passive.clone"/>
              <remove_from_list name="$loccrewtotransfer" list="$transferredtopods_passive" multiple="true"/>
              <transfer_people object="$pod" otherobject="$targetobject" result="$loctransferred">
                <existing_people people="$loccrewtotransfer"/>
              </transfer_people>
              <debug_text text="'launching %s %s %s from %s %s %s with %s people.'.[@$pod.idcode, @$pod.knownname, $pod, @$pod.container.idcode, @$pod.container.knownname, $pod.container, $loctransferred.count]" chance="$debugchance"/>
              <do_all exact="$loctransferred.count" counter="$i">
                <append_to_list name="$transferredtopods_passive" exact="$loctransferred.{$i}"/>
              </do_all>
              <start_script name="'order.dock'" object="$pod.pilot">
                <param name="destination" value="this.assignedcontrolled"/>
                <param name="abouttofinish" value="true"/>
                <param name="debugchance" value="$debugchance"/>
              </start_script>
              <add_to_group groupname="$pods_passive" object="$pod"/>
              <remove_value name="$loccrewtotransfer"/>
              <remove_value name="$loctransferred"/>
            </do_if>
            <remove_value name="$pod"/>
            <!-- adjust wait duration to adjust spacing of pods launched -->
            <wait exact="223ms"/>
          </do_while>
          <remove_value name="$transferredtopods_passive"/>
          <remove_value name="$transferredtopods_active"/>

          <do_if value="$pods_active.count or $pods_passive.count">
            <!-- NB: this is to handle any number of random things that might have gone wrong, preventing the transfer from finishing. -->
            <set_value name="$time_endwhile" exact="player.age + 20min"/>

            <do_while value="($pods_active.count or $pods_passive.count) and (player.age le $time_endwhile)">
              <debug_text text="'%s shuttles away. waiting for people to arrive.'.[$pods_active.count + $pods_passive.count]" chance="$debugchance"/>
              <wait exact="1min">
                <interrupt>
                  <conditions>
                    <check_any>
                      <check_all>
                        <event_object_docked_at container="this.assignedcontrolled"/>
                        <check_value value="$pods_passive.indexof.{event.param}"/>
                      </check_all>
                      <check_all>
                        <event_object_docked_at container="$targetobject"/>
                        <check_value value="$pods_active.indexof.{event.param}"/>
                      </check_all>
                      <event_object_destroyed group="$pods_active"/>
                      <event_object_destroyed group="$pods_passive"/>
                      <event_object_destroyed object="$targetobject"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="(event.name == 'event_object_destroyed') and (event.object == $targetobject)">
                      <destroy_group group="$pods_active"/>
                      <set_value name="$break"/>
                    </do_if>
                    <do_elseif value="not $pods_active.count and not $pods_passive.count">
                      <debug_text text="'all pods docked or destroyed.'" chance="$debugchance"/>
                      <set_value name="$break"/>
                    </do_elseif>
                  </actions>
                </interrupt>
              </wait>

              <do_if value="$break?">
                <remove_value name="$break"/>
                <break/>
              </do_if>

              <!-- NB: more than one shuttle might dock at the same frame, in which case, only one event would be handled.
                      if any pods dock at their container, check all of them. -->
              <include_interrupt_actions ref="TransferCrewFromPods"/>
            </do_while>
            <remove_value name="$time_endwhile"/>

            <do_if value="$pods_active.count or $pods_passive.count">
              <debug_text text="'not all shuttles were able to dock. %s shuttles unaccounted for. recovering.'.[$pods_active.count + $pods_passive.count]" filter="error"/>
              <set_value name="$donotcheckdocked"/>
              <include_interrupt_actions ref="TransferCrewFromPods"/>
              <remove_value name="$donotcheckdocked"/>
            </do_if>
          </do_if>
          <do_else>
            <debug_text text="'We should be waiting for shuttles, but none were launched.'" filter="error"/>
          </do_else>
        </do_else>

        <debug_text text="'people transferred.\ncrew left: %s out of %s\ncrew arrived: %s out of %s'.[$crewtransferred_active.count, $crewtotransfer_active.count, $crewtransferred_passive.count, $crewtotransfer_passive.count]" chance="$debugchance"/>

      </do_if>
      <do_else>
        <set_value name="$failreason" exact="'ERR_TRADEPARTNER_DESTROYED'" />
        <resume label="finish" />
      </do_else>

      <debug_text text="'ACTIVE: trade was successful'" chance="$debugchance"/>

      <resume label="finish" />

      <!-- Ware Exchange Case: Passive Partner -->
      <label name="passive_trade" />

      <!-- Fly to a safe position -->
      <do_if value="not $alreadythere?">
        <debug_text text="'PASSIVE: moving to parking position.'" chance="$debugchance"/>
        <get_safe_pos result="$passivepos" object="this.assignedcontrolled" zone="this.zone" radius="this.size/2.0" ignored="this.assignedcontrolled" />
        <move_to object="this.assignedcontrolled" destination="this.zone" >
          <position value="$passivepos" />
          <rotation value="this.assignedcontrolled.rotation" />
        </move_to>
        <remove_value name="$passivepos" />
      </do_if>
      <do_else>
        <debug_text text="'PASSIVE: already there. going straight to trade.'" chance="$debugchance"/>
      </do_else>

      <wait min="10ms" max="100ms" comment="avoid timing issues reading/writing the blackboard" />

      <debug_text text="'Me %1 (%2), waiting for %3 (%4)'.[this, this.assignedcontrolled.knownname, $targetobject.pilot, $targetobject.knownname]" chance="$debugchance" />
      <debug_text text="'sending signal: crewexchange_ready. trade: ' + $tradedeal" chance="$debugchance"/>
      <signal_objects object="$targetobject" param="'crewexchange_ready'" param2="$tradedeal"/>
      <set_value name="this.$readyexchange" exact="[$tradedeal, 1]"/>

      <do_if value="not $targetobject.isoperational">
        <debug_text text="'exchange partner was destroyed.'" chance="$debugchance"/>
        <set_value name="$failreason" exact="'ERR_TRADEPARTNER_DESTROYED'"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="(@$targetobject.pilot.$readyexchange.{1} == $tradedeal) and ($targetobject.pilot.$readyexchange.{2} ge 2)">
        <debug_text text="'active trader was already done! trade: ' + $tradedeal" chance="$debugchance"/>
      </do_if>
      <do_else>
        <debug_text text="'waiting for signal: crewexchange_done. trade: ' + $tradedeal" chance="$debugchance"/>
        <wait comment="Wait until is done">
          <interrupt>
            <conditions>
              <check_any>
                <event_object_destroyed object="$targetobject"/>
                <event_object_signalled object="this.object" param="'crewexchange_done'" param2="$tradedeal"/>
              </check_any>
            </conditions>
            <actions>
              <do_if value="event.name == 'event_object_destroyed'">
                <debug_text text="'exchange partner was destroyed.'" chance="$debugchance"/>
                <set_value name="$failreason" exact="'ERR_TRADEPARTNER_DESTROYED'"/>
                <resume label="finish"/>
              </do_if>
            </actions>
          </interrupt>
        </wait>
        <debug_text text="'received signal: crewexchange_done. trade: ' + $tradedeal" chance="$debugchance"/>
      </do_else>
      <debug_text text="'PASSIVE: I %1 (%2) am done exchanging with %3 (%4)'.[this, this.assignedcontrolled.knownname, $targetobject.pilot, $targetobject.knownname]" chance="$debugchance" />

      <wait min="1s" max="5s" />

      <label name="finish" />

      <!-- Finish the passive waiting -->
      <do_if value="not $ispassive">
        <debug_text text="'ACTIVE: I %1 (%2) am done exchanging with %3 (%4)'.[this, this.assignedcontrolled.knownname, $targetobject.pilot, $targetobject.knownname]" chance="$debugchance" />
        <!-- Send the done signal to the trade partner -->
        <debug_text text="'sending signal: crewexchange_done. trade: ' + $tradedeal" chance="$debugchance"/>
        <signal_objects object="$targetobject" param="'crewexchange_done'" param2="$tradedeal"/>
        <set_value name="this.$readyexchange" exact="[$tradedeal, 2]"/>
      </do_if>
      <do_else>
        <set_value name="this.$readyexchange" exact="[$tradedeal, 2]"/>
        <debug_text text="'PASSIVE: signal was bypassed. ispassive? %1'.[$ispassive]" chance="$debugchance"/>
      </do_else>

      <!-- Handle the success and fail cases -->
      <do_if value="$failreason != ''">
        <debug_text text="player.age + ' \'%1\' QUEUED TRADE RUN FAILED! Error: %2'.[this.assignedcontrolled.knownname, $failreason]" filter="error" />

        <do_if value="not $ispassive">
          <do_if value="this.isplayerowned">
            <!-- TODO: use the return value and decide what to do next -->
            <!-- TODO: ask player for help -->
            <do_if value="this.shouldwarnplayer and notification.npc_order_not_complete.active">
              <run_script name="'player.interaction'">
                <param name="Line" value="10303" comment="Last order could not be completed."/>
                <param name="MaxQueueDelay" value="10s"/>
                <param name="caption" value="'%s (%s)'.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]"/>
                <param name="interactive" value="false"/>
                <param name="debugchance" value="$debugchance"/>
              </run_script>
            </do_if>
          </do_if>
        </do_if>

      </do_if>
      <do_else>
        <debug_text text="player.age + ' CONGRATULATIONS, TRADE RUN COMPLETE!'" chance="$debugchance" />

        <!-- All trades done: If there is only this trade in the queue (only for active partner) -->
        <do_if value="not $ispassive and this.isplayerowned and not this.isclass.computer and not this.assignedcontrolled.tradeorders.count and not this.assignedcontrolled.nextorder and (not this.assignedcontrolled.commander or (this.assignedcontrolled.commander == player.occupiedship)) and notification.npc_await_orders.active">
          <!--<show_notification text="[{1015,31}, '', this.name, '', this.assignedcontrolled.name, '', {1015,32}]" sound="notification_achievement" comment="All trade operations completed." />-->
          <set_value name="$speakline" exact="10304" comment="Awaiting orders."/>
          <run_script name="'player.interaction'">
            <param name="Line" value="$speakline"/>
            <param name="MaxQueueDelay" value="10s"/>
            <param name="caption" value="'%s (%s)'.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]"/>
            <param name="interactive" value="false"/>
            <param name="debugchance" value="$debugchance"/>
          </run_script>
        </do_if>
      </do_else>

      <remove_value name="this.$readyexchange"/>

    </actions>
  </attention>
  <on_abort>
    <debug_text text="'on_abort'" chance="$debugchance"/>
    <!-- clean-up -->
    <remove_value name="this.$readyexchange" />
  </on_abort>
</aiscript>
