<?xml version="1.0" encoding="UTF-8" ?>
<aiscript name="order.supply" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" priority="2" version="3">
  <!--
    Used as an assignment to a ship or a station.
    If assigned to a ship, the ship or other ships in that ship's command hierarchy can get supplies at this.ship.
    If assigned to a station, other subordinates of the station can get supplies at this.ship.

    Resources to manufacture supplies are acquired passively via trade offers.
    We can also actively acquire resources via order GetSupplies.

    NB: Correct method to set this order is to assign a ship to a ship or a station with assignment.supplyfleet.
      Simply creating or otherwise running this script will work as well, but beware handling checks identifying these ships by their assignment.
  -->
  <order id="SupplyFleet" name="{1041, 641}" description="{1041, 642}" category="trade">
    <params>
      <param name="target" default="this.ship.commander" type="object" text="{1041, 10024}" comment="Commander. The escortee (null for jobs, so they will use the commander). Optional. Overrides destination if both are set.">
        <input_param name="class" value="[class.ship, class.station]"/>
        <input_param name="canbecommanderof" value="this.ship"/>
      </param>
      <param name="destination" default="null" type="position" text="{1041, 10027}" comment="Destination. Position in a Sector. Not used if target is provided.">
        <input_param name="class" value="class.sector"/>
      </param>

      <!-- formation-related parameters are not used if this.ship.iscapitalship and not $target.iscapitalship. -->
      <param name="formation" default="if @$target.isclass.ship then (if @$target.formationshape then $target.formationshape else param.formation.shape) else null" type="formationshape" text="{1041, 10042}" advanced="true" comment="Formation shape. the formation to escort"/>
      <param name="formationparam" default="if @$target.isclass.ship then [[@$target.formationradius, @this.ship.defaultformationradius.{$target}].max, 5km].min else null" type="length" text="{1041, 10040}" advanced="true" comment="Formation distance. First parameter for formation">
        <input_param name="min" value="if @$target.isclass.ship then (this.ship.size + @$target.size) else null"/>
        <input_param name="max" value="if @$target.isclass.ship then [[@$target.formationradius * 2, @this.ship.defaultformationradius.{$target} * 2, 2km].max, 5km].min else null"/>
        <input_param name="step" value="100m"/>
      </param>
      <param name="rollmembers" default="if @$target.isclass.ship then (if @$target.formationshape then $target.isformationrollmembers else param.formation.rollmembers) else null" type="bool" text="{1041, 10107}" advanced="true" comment="Roll with formation">
        <patch value="null" condition="not @$target.isclass.ship" sinceversion="3"/>
      </param>
      <param name="rollformation" default="if @$target.isclass.ship then (if @$target.formationshape then $target.isformationrolling else param.formation.rollformation) else null" type="bool" text="{1041, 10106}" advanced="true" comment="Roll the formation">
        <patch value="null" condition="not @$target.isclass.ship" sinceversion="3"/>
      </param>
      <param name="maxshipsperline" default="if @$target.isclass.ship then (if @$target.formationshape then $target.formationmaxshipsperline else param.formation.maxshipsperline) else null" type="number" text="{1041, 10060}" advanced="true" comment="Max ships per line. Maximum ships per line, parameter for formation">
        <input_param name="min" value="3" />
        <input_param name="max" value="50" />
        <input_param name="step" value="1" />
        <patch value="null" condition="not @$target.isclass.ship" sinceversion="3"/>
      </param>

      <param name="timeout" type="time" default="0s" infinitevalue="0s" text="{1041, 10034}" advanced="true" comment="Duration">
        <input_param name="min" value="0s" />
        <input_param name="max" value="10h" />
        <input_param name="step" value="30s" />
      </param>
      <param name="overrideformationskill" type="internal" default="false" comment="overrides skill check so currentformation is always the same as the formation parameter."/>
      <param name="cannotdock" type="internal" default="false" text="{1041, 10133}" comment="Unable to dock. used for error handling in case of inability to dock. Currently unused. Only useful if we have smaller resupply ships that can dock at carriers and implement supplying our container."/>
      <param name="releasesignal" type="internal" default="null" comment="Release signal. List: [param, param2]. This order will complete if a signal with $releasesignal.{1} as event.param and $releasesignal.{2} as event.param2 is sent to $target. While event.param MUST be non-null, event.param2 may be null."/>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires>
      <match shiptype="shiptype.resupplier"/>
    </requires>
    <location object="$target" condition="@$target.exists"/>
    <location object="$destination.{1}" position="$destination.{2}" condition="not $target.exists and @$destination.{1} and @$destination.{2}"/>
  </order>
  <interrupts>
    <handler ref="SectorChangeHandler"/>
    <handler ref="ScannedHandler"/>
    <handler ref="InspectedHandler"/>
    <handler ref="TargetInvalidHandler"/>
    <handler ref="ResupplyHandler"/>
    <handler>
      <conditions>
        <check_any>
          <event_object_signalled object="$target" param="@$releasesignal.{1}" param2="@$releasesignal.{2}" check="false"/>
          <event_object_destroyed object="$target" check="false"/>
          <event_object_abandoned object="$target" check="false"/>
          <event_object_docked object="$target" check="false"/>
          <check_all>
            <event_object_changed_true_owner object="$target" check="false"/>
            <check_value value="event.param != this.ship.trueowner"/>
          </check_all>
        </check_any>
        <!-- bullet-proofing. to make sure that this handler does not respond to signals with null parameters. -->
        <check_value value="@$releasesignal.{1}"/>
      </conditions>
      <actions>
        <debug_text text="'%s %s %s released. event: %s'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, event.name]" chance="$debugchance"/>
        <set_value name="$validfinish"/>
        <abort_called_scripts resume="finish"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <!-- enable or disable passive gathering of supplies if: -->
        <check_any>
          <check_all>
            <!-- the fleet starts attacking a target, -->
            <event_object_order_ready object="$target" check="false"/>
            <check_value value="(@event.param.id == 'Attack') or (@event.param.id == 'AttackInRange') or (@event.param.id == 'PlayerAttack')"/>
            <debug_text text="'Fleet shifting to attack. current order: %s, next order: %s'.[@event.object.order.id, @event.object.nextorder.id]" debugchance="$debugchance"/>
            <set_value name="$attacking"/>
          </check_all>
          <check_all>
            <!-- or the fleet stops attacking a target, -->
            <check_any>
              <!-- NB: event.param not reliable because order may no longer exist at this point. -->
              <event_object_order_cancelled object="$target" check="false"/>
              <event_object_order_finished object="$target" check="false"/>
            </check_any>
            <check_value value="$attacking?"/>
            <!-- we need both these sets of checks because there are cases where orders are cancelled but are not immediately finished. -->
            <check_value value="not @event.object.order or ((event.object.order.id != 'Attack') and (event.object.order.id != 'AttackInRange') and (event.object.order.id != 'PlayerAttack'))"/>
            <check_value value="not @event.object.nextorder or ((event.object.nextorder.id != 'Attack') and (event.object.nextorder.id != 'AttackInRange') and (event.object.nextorder.id != 'PlayerAttack'))"/>
            <debug_text text="'Attack finished. current order: %s, next order: %s'.[@event.object.order.id, @event.object.nextorder.id]" debugchance="$debugchance"/>
            <remove_value name="$attacking"/>
          </check_all>
        </check_any>
        <check_value value="@$target.isoperational"/>
      </conditions>
      <actions>
        <!-- NB: change in trade offer handling will be done at label start -->
        <abort_called_scripts resume="start"/>
      </actions>
    </handler>
  </interrupts>
  <init>
    <do_if value="@$target.isoperational">
      <set_command command="command.support" param="$target"/>
    </do_if>
    <do_else>
      <set_command command="command.resupply"/>
    </do_else>

    <set_value name="$time_end" exact="null"/>
    <do_if value="$timeout">
      <set_value name="$time_end" exact="player.age + $timeout"/>
    </do_if>

    <do_if value="not $target and (not @$destination.{1} or not @$destination.{2})">
      <do_if value="not this.zone.isclass.highway">
        <set_value name="$locsector" exact="this.sector"/>
        <create_position name="$locpos" space="$locsector" value="this.ship.position" object="this.zone"/>
      </do_if>
      <do_else>
        <set_value name="$locsector" exact="this.zone.destination.sector"/>
        <create_position name="$locpos" space="$locsector" object="this.zone.destination"/>
      </do_else>
      <!-- if neither target nor destination is supplied, simply set destination at init to allow it to shift. -->
      <set_value name="$destination" exact="[$locsector, $locpos]"/>
      <remove_value name="$locpos"/>
      <remove_value name="$locsector"/>
    </do_if>
  </init>
  <patch sinceversion="1">
    <do_if value="$target.isoperational and $target.order and ($target.order.id != 'Attack') and ($target.order.id != 'AttackInRange') and ($target.order.id != 'PlayerAttack')">
      <!-- matches patchcode disabling trade offers for all resupply ships and carriers. they should start disabled and should be enabled for ships running this order. -->
      <set_tradeoffers_enabled object="this.assignedcontrolled" enabled="true"/>
    </do_if>
  </patch>
  <patch sinceversion="2">
    <do_if value="$target.isoperational and not $target.order">
      <!-- NB: enabling/disbaling trade offers is done to adjust to fleets changing stances to combat and out of combat. objects with no orders such as stations are assumed to be incapable of such stance changes, so we can always have trade offers active. -->
      <set_tradeoffers_enabled object="this.assignedcontrolled" enabled="true"/>
      <debug_text text="'PATCH: %s %s %s assigned to supply ships attached to %s %s %s which does not use orders. enabling trade offers.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, @$target.idcode, @$target.knownname, $target]" filter="savegame"/>
    </do_if>
  </patch>
  <patch sinceversion="3">
    <do_if value="not $target.isoperational and $destination.{1} and $destination.{2}">
      <set_tradeoffers_enabled object="this.assignedcontrolled" enabled="true"/>
      <debug_text text="'PATCH: %s %s %s assigned to supply ships in a space. enabling trade offers.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" filter="savegame"/>
    </do_if>
  </patch>
  <attention min="unknown">
    <actions>
      <label name="start"/>

      <do_if value="$target and not $target.isoperational">
        <do_if value="@this.assignedcontrolled.commander.isoperational">
          <debug_text text="'commander is no longer operational but we have a new commander. setting new commander.'" chance="$debugchance"/>
          <edit_order_param order="this.assignedcontrolled.order" param="'target'" value="this.assignedcontrolled.commander"/>
        </do_if>
        <do_else>
          <debug_text text="'commander is no longer operational. providing supplies at current position.'" chance="$debugchance"/>
          <edit_order_param order="this.assignedcontrolled.order" param="'target'" value="null"/>
        </do_else>
      </do_if>

      <do_if value="not this.isplayerowned and (this.assignedcontrolled.cargo.free.container gt (this.assignedcontrolled.cargo.capacity.container * 0.2))" chance="[(this.assignedcontrolled.combinedskill - 10), 10].max">
        <!-- restrict this automation to NPC ships since this could cost a lot of money and we don't know if the player is willing to spend that money right now. single-click option to do the same thing is available to the player. -->
        <debug_text text="'%s %s %s running out of supplies. moving to get some.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
        <create_order id="'GetSupplies'" object="this.assignedcontrolled">
          <param name="internalorder" value="true"/>
          <param name="debugchance" value="$debugchance"/>
        </create_order>
      </do_if>

      <!-- this wait should catch quick shifts in orders caught by the interrupt handler above, mitigating unnecessary deactivation trade orders. -->
      <wait exact="[((100 - this.assignedcontrolled.combinedskill) / 20)s, 1ms].max" comment="1ms-5s"/>

      <do_if value="@$target.isoperational">
        <do_if value="not $target.order or (($target.order.id != 'Attack') and ($target.order.id != 'AttackInRange') and ($target.order.id != 'PlayerAttack'))">
          <debug_text text="'we are not in a combat situation. enabling trade offers.'" chance="$debugchance"/>
          <set_tradeoffers_enabled object="this.assignedcontrolled" enabled="true"/>
        </do_if>
        <do_else>
          <debug_text text="'we are in a combat situation. disabling trade offers.'" chance="$debugchance"/>
          <set_tradeoffers_enabled object="this.assignedcontrolled" enabled="false"/>
        </do_else>
      </do_if>
      <do_elseif value="$destination.{1} and $destination.{2}">
        <debug_text text="'we are assigned to resupply ships in a space. enabling trade offers.'" chance="$debugchance"/>
        <set_tradeoffers_enabled object="this.assignedcontrolled" enabled="true"/>
      </do_elseif>

      <do_if value="$target">
        <do_if value="$target.isclass.ship">
          <do_if value="$target.iscapitalship or not this.assignedcontrolled.iscapitalship">
            <debug_text text="'%s %s %s supplying fleet attached to %s %s %s. moving to formation.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $target.idcode, $target.knownname, $target]" chance="$debugchance"/>
            <run_script name="'order.fight.escort'">
              <param name="target" value="$target"/>
              <param name="formation" value="$formation"/>
              <param name="formationparam" value="$formationparam"/>
              <param name="rollmembers" value="$rollmembers"/>
              <param name="rollformation" value="$rollformation"/>
              <param name="maxshipsperline" value="$maxshipsperline"/>
              <param name="timeout" value="$timeout"/>
              <param name="overrideformationskill" value="$overrideformationskill"/>
              <param name="cannotdock" value="$cannotdock"/>
              <param name="releasesignal" value="$releasesignal"/>
              <param name="debugchance" value="$debugchance"/>
            </run_script>
          </do_if>
          <do_else>
            <debug_text text="'%s %s %s supplying fleet attached to %s %s %s. moving to follow.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $target.idcode, $target.knownname, $target]" chance="$debugchance"/>
            <run_script name="'order.move.follow'">
              <param name="target" value="$target"/>
              <param name="debugchance" value="$debugchance"/>
            </run_script>
          </do_else>
        </do_if>
        <do_elseif value="$target.isclass.station">
          <debug_text text="'%s %s %s supplying fleet attached to %s %s %s. moving to station.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $target.idcode, $target.knownname, $target]" chance="$debugchance"/>
          <run_script name="'order.move.wait.object'">
            <param name="destination" value="$target"/>
            <param name="timeout" value="$timeout"/>
            <param name="debugchance" value="$debugchance"/>
          </run_script>
        </do_elseif>
        <do_else>
          <debug_text text="'Unhandled case. Target %s %s %s %s is neither a ship nor a station.'.[$target.class, @$target.idcode, @$target.knownname, $target]" chance="$debugchance"/>
          <resume label="finish"/>
        </do_else>
      </do_if>
      <do_elseif value="@$destination.{1} and @$destination.{2}">
        <debug_text text="'%s %s %s supplying in place at %s %s'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $destination.{1}.class, $destination.{1}.knownname]" chance="$debugchance"/>
        <run_script name="'order.move.wait'">
          <param name="destination" value="$destination"/>
          <param name="debugchance" value="$debugchance"/>
        </run_script>
      </do_elseif>
      <do_else>
        <debug_text text="'Unhandled case. Neither target nor destination is provided, or both are invalid.'" filter="error"/>
        <resume label="finish"/>
      </do_else>

      <do_if value="not $time_end or (player.age lt $time_end)">
        <resume label="start"/>
      </do_if>

      <label name="finish"/>

      <debug_text text="'supply order finishing. disabling trade offers'" chance="$debugchance"/>
      <set_tradeoffers_enabled object="this.assignedcontrolled" enabled="false"/>
      <stop_moving object="this.assignedcontrolled" immediate="false"/>
      <cease_fire object="this.assignedcontrolled"/>
      <leave_formation object="this.assignedcontrolled"/>
      <do_if value="@this.assignedcontrolled.defaultorder.id == 'SupplyFleet'">
        <!-- reset $cannotdock so we try to dock the next time we restart the order. only necessary if this is the default order. -->
        <edit_order_param order="this.assignedcontrolled.defaultorder" param="'cannotdock'" value="false"/>
      </do_if>

    </actions>
  </attention>
  <on_abort>
    <debug_text text="'supply order aborted. disabling trade offers'" chance="$debugchance"/>
    <do_if value="@this.assignedcontrolled.isoperational">
      <do_if value="(@this.assignedcontrolled.order.id != 'WaitForSignal')">
        <!-- ships parking at this.assignedcontrolled to trade or restock create a WaitForSignal order. trade offers should stay enabled in this case to prevent long-term deadlocks if we run out of resources. -->
        <!-- WaitForSignal also used when the ship is stopped for inspection by police. no reason to disable trade offers in that case. -->
        <set_tradeoffers_enabled object="this.assignedcontrolled" enabled="false"/>
      </do_if>
      <stop_moving object="this.assignedcontrolled" immediate="false"/>
      <cease_fire object="this.assignedcontrolled"/>
      <leave_formation object="this.assignedcontrolled"/>
    </do_if>
    <do_if value="@this.assignedcontrolled.defaultorder.id == 'SupplyFleet'">
      <!-- reset $cannotdock so we try to dock the next time we restart the order. only necessary if this is the default order. -->
      <edit_order_param order="this.assignedcontrolled.defaultorder" param="'cannotdock'" value="false"/>
    </do_if>
  </on_abort>
</aiscript>
