<?xml version="1.0" encoding="utf-8"?>
<aiscript name="interrupt.npc.usecases" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <!-- Library of helper actions to trigger NPC usecases in MD from AI scripts, to be used via <include_interrupt_actions>. These are no real interrupts. -->
  <interrupts>
    <library>

      <actions name="NPCUseCase_NavOrder">
        <do_if value="this.attention == attention.inroom and this.controlled.isclass.[class.ship_m, class.ship_l, class.ship_xl]">
          <!-- Set a variable to prevent the usecase being repeated in the same AI script -->
          <!-- TODO: Check if this actually works, or find better solution -->
          <do_if value="not $usecase_navorder?">
            <set_value name="$usecase_navorder" />
            <signal_objects object="player.entity" param="'npc_usecase'" param2="table[ $name = '$BridgeNavOrder', $actors = table[ $Captain = this ] ]" />
          </do_if>
        </do_if>
      </actions>

      <actions name="NPCUseCase_NavApproachJumpGate">
        <do_if value="this.attention == attention.inroom and this.controlled.isclass.[class.ship_m, class.ship_l, class.ship_xl]">
          <do_if value="$gate.isaccelerator">
            <signal_objects object="player.entity" param="'npc_usecase'" param2="table[ $name = '$BridgeNavApproachAccelerator', $actors = table[ $Captain = this ] ]" />
          </do_if>
          <do_else>
            <signal_objects object="player.entity" param="'npc_usecase'" param2="table[ $name = '$BridgeNavApproachJumpGate', $actors = table[ $Captain = this ] ]" />
          </do_else>
        </do_if>
      </actions>

      <actions name="NPCUseCase_NavApproachSuperHWGate">
        <do_if value="this.attention == attention.inroom and this.controlled.isclass.[class.ship_m, class.ship_l, class.ship_xl]">
          <signal_objects object="player.entity" param="'npc_usecase'" param2="table[ $name = '$BridgeNavApproachSuperHWGate', $actors = table[ $Captain = this ] ]" />
        </do_if>
      </actions>

      <actions name="NPCUseCase_StartDocking">
        <do_if value="this.attention ge attention.visible and this.controlled.isclass.[class.ship_m, class.ship_l, class.ship_xl] and player.room.isclass.cockpit">
          <do_if value="this.distanceto.{player.entity}" max="param.voice.chatter_range_docking">
            <!-- requires $destination -->
            <signal_objects object="player.entity" param="'npc_usecase'" param2="table[ $name = '$BridgeStartDocking', $actors = table[ $Captain = this ], $locations = table[ $Station = @$destination ] ]" />
          </do_if>
        </do_if>
      </actions>

      <!-- Combat -->

      <actions name="NPCUseCase_AttackRun_Small">
        <do_if value="this.attention ge attention.visible and this.page and this.controlled.isclass.[class.ship_xs, class.ship_s, class.ship_m] and player.room.isclass.cockpit">
          <do_if value="this.distanceto.{player.entity}" max="if player.activity == activity.scan then param.voice.chatter_range_extended else param.voice.chatter_range_normal">
            <!-- requires $bigtarget or $target -->
            <signal_objects object="player.entity" param="'npc_usecase'" param2="table[ $name = '$Combat_Small_Attacker_Taunt', $actors = table[ $Attacker = this, $Attacked = (if @$bigtarget then @$bigtarget.controlentity.default else @$target.controlentity.default) ] ]" />
          </do_if>
        </do_if>
      </actions>

      <!-- Catch all attacks on this ship that are possibly relevant for NPC usecases (can be overridden by AttackHandler, which does actual AI stuff) -->
      <handler name="UseCaseAttackHandler">
        <conditions>
          <event_object_attacked object="this.assignedcontrolled"/>
          <check_value value="this.attention" min="attention.visible" />
          <check_value value="this.controlled" comment="Pilot is at the ship controls" />
          <check_value value="event.param.isclass.defensible and event.param.controlentity.default" comment="Attacker is a valid object with a control entity" />
          <check_value value="player.room.isclass.cockpit" comment="Player can't hear comm chatter outside cockpits" />
          <check_value value="this.distanceto.{player.entity}" max="if player.activity == activity.scan then param.voice.chatter_range_extended else param.voice.chatter_range_normal" />
        </conditions>
        <actions>
          <do_if value="this.isclass.npc and this.page">

            <!-- <debug_text text="'UseCaseAttackHandler: %s [%s] attacked by %s [%s], method=%s'.[event.object.knownname, event.object, event.param.knownname, event.param, event.param2]" /> -->
            <set_value name="$usecase_willRetaliate" exact="(event.param == @this.$attacktarget) or (event.param == @this.$attacktarget.container)
                     or (@this.ship.order.id == 'Attack' and
                         (event.param == this.ship.order.$primarytarget
                         or event.param == @this.ship.order.$primarytarget.container
                         or @this.ship.order.$secondarytargets.indexof.{event.param}
                         or (this.ship.order.$allowothertargets and this.ship.mayattack.{event.param})))" />
            <set_value name="$usecase_attackerIsEnemy" exact="$usecase_willRetaliate or this.ship.hasrelation.enemy.{event.param}" />
            <set_value name="$usecase_attackerIsSmall" exact="event.param.isclass.[class.ship_m, class.ship_s, class.ship_xs]" />
            <set_value name="$usecase_attackerIsPerson" exact="event.param.controlentity.default.isclass.[class.npc, class.player]" />

            <set_value name="$usecase_name" exact="null" />
            <do_if value="this.ship.iscapitalship">
              <!-- Larger ship cases -->
              <!-- TODO: Change definition of "larger ship" later, to include M ships? -->
              <do_if value="not $usecase_attackerIsEnemy and $usecase_attackerIsPerson and not this.isplayerowned and (event.param == player.controlled or (this.attention == attention.inroom and event.param.isplayerowned))">
                <!-- Friendly fire: Send warning (only triggered for non-player-owned ships if attacker is player, or if attacker is player-owned and player is on bridge of attacked ship) -->
                <set_value name="$usecase_name" exact="'$Combat_Large_Attacked_Warning'" />
              </do_if>
              <do_elseif value="$usecase_attackerIsEnemy and $usecase_attackerIsPerson and not $usecase_willRetaliate and not this.isplayerowned and this.ship.hullpercentage lt (10 - this.skill.morale) and this.ship.shieldpercentage lt 15" chance="50">
                <!-- We are not fighting against attacker, we are in critical danger and attacker pilot is not a computer: Plead for life (50% chance, requires captain's morale being lower than 10) -->
                <set_value name="$usecase_name" exact="'$Combat_Large_Attacked_PleadForLife'" />
              </do_elseif>
              <do_elseif value="this.ship.shieldpercentage lt 25">
                <!-- Ship taking serious damage -->
                <!-- TODO: Generalise/improve hull/shield calculation, take shield-bypassing weapons into account (check attacker's weapon properties?) -->
                <set_value name="$usecase_name" exact="'$Combat_Large_Attacked_ReportDanger'" />
              </do_elseif>
              <do_else>
                <!-- No danger -->
                <set_value name="$usecase_name" exact="'$Combat_Large_Attacked_ReportNormalDamage'" />
              </do_else>
            </do_if>
            <do_else>
              <!-- Smaller ship cases -->
              <do_if value="$usecase_attackerIsEnemy and $usecase_attackerIsPerson and not $usecase_willRetaliate and not this.isplayerowned and this.ship.hullpercentage lt (25 - this.skill.morale) and this.ship.shieldpercentage lt 25" chance="50">
                <!-- We are not fighting, we are in critical danger and attacker pilot is not a computer: Plead for life (50% chance) -->
                <set_value name="$usecase_name" exact="'$Combat_Small_Attacked_PleadForLife'" />
              </do_if>
              <do_elseif value="not $usecase_attackerIsEnemy and $usecase_attackerIsPerson and (this.attention == attention.inroom or event.param == player.ship)">
                <!-- Friendly fire complaint and apology (only triggered if player is in cockpit of either attacker or attacked - otherwise it would happen too often in comm chatter) -->
                <set_value name="$usecase_name" exact="'$Combat_Small_Attacked_FriendlyFire'" />
              </do_elseif>
              <do_elseif value="$usecase_attackerIsEnemy and $usecase_attackerIsSmall
                       and ((this.ship.hullpercentage * 2 + this.ship.shieldpercentage) ge (280 - this.skill.morale)
                       or (this.ship.hullpercentage * 2 + this.ship.shieldpercentage) - (event.param.hullpercentage * 2 + event.param.shieldpercentage) gt (200 - this.skill.morale))" chance="70">
                <!-- Ship is attacking and in good condition, or at least in much better condition than the attacker (70% chance) -->
                <!-- TODO: Generalise/improve hull/shield calculation, take shield-bypassing weapons into account (check attacker's weapon properties?) -->
                <set_value name="$usecase_name" exact="'$Combat_Small_Attacked_Confident'" />
              </do_elseif>
              <do_elseif value="$usecase_willRetaliate and $usecase_attackerIsSmall
                              and ((this.ship.hullpercentage * 2 + this.ship.shieldpercentage) gt (event.param.hullpercentage * 2 + event.param.shieldpercentage) * 0.5)
                              and (this.ship.dps.all gt event.param.dps.all * 0.5)">
                <!-- No danger, we are in a dogfight scenario (attacker is my primary target and it's not a capital ship, and we are capable of fighting back) -->
                <!-- TODO: Generalise/improve hull/shield calculation, take shield-bypassing weapons into account (check attacker's weapon properties?) -->
                <do_any>
                  <set_value name="$usecase_name" exact="'$Combat_Small_Attacked_Normal'"
                             weight="70" />
                  <!-- With low chance, use attacker usecase with switched roles (mock the attacker, not the other way around) -->
                  <signal_objects object="player.entity" param="'npc_usecase'" param2="table[ $name = '$Combat_Small_Attacker_Taunt', $actors = table[ $Attacker = this, $Attacked = event.param.controlentity.default ] ]"
                                  weight="30" />
                </do_any>
              </do_elseif>
              <do_elseif value="this.ship.hullpercentage lt (40 - this.skill.morale) and this.ship.shieldpercentage lt 25">
                <!-- Ship is in danger -->
                <!-- TODO: Generalise/improve hull/shield calculation, take shield-bypassing weapons into account (check attacker's weapon properties?) -->
                <set_value name="$usecase_name" exact="'$Combat_Small_Attacked_Danger'" />
              </do_elseif>
              <do_elseif value="$usecase_attackerIsEnemy">
                <!-- No danger, other cases -->
                <set_value name="$usecase_name" exact="'$Combat_Small_Attacked_Normal'" />
              </do_elseif>
            </do_else>

            <!-- <debug_text text="'  UseCase: ' + $usecase_name" /> -->
            <do_if value="$usecase_name">
              <signal_objects object="player.entity" param="'npc_usecase'" param2="table[ $name = $usecase_name, $locations = table[ $AttackedLocation = this.room.slotcontext, $AttackerLocation = event.param.controlentity.default.room.slotcontext ] ]" />
            </do_if>
            <remove_value name="$usecase_willRetaliate" />
            <remove_value name="$usecase_attackerIsEnemy" />
            <remove_value name="$usecase_attackerIsSmall" />
            <remove_value name="$usecase_attackerIsPerson" />
            <remove_value name="$usecase_name" />

          </do_if>
          <do_elseif value="this.isclass.computer and this.race == race.xenon">

            <!-- TODO: Xenon noise usecase -->

          </do_elseif>

        </actions>
      </handler>

    </library>
  </interrupts>
</aiscript>
