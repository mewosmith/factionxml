<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="order.fight.protect.ship" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="1">
  <!--

  Escort Capital ship
  
  Movement of a ship escorting a smaller size ship.
  This will stay near by the target, on a safe position
  target to escort is operational.
    
  Movement:
	1 - Stay in close to the target until:
		2.1 - Leader send a signal
		2.2 - Leader under attack
		2.3 - Escort group under attack

	Will return to the target if:
	- enemy destroyed
	- far away from escortee (if exists)

  -->
  <order id="ProtectShip" name="{1041, 371}" description="{1041, 372}" category="combat">
    <params>
      <param name="target" default="this.ship.commander" type="object" text="{1041, 10113}" required="true" comment="Ship to protect. Mandatory for UI" >
        <input_param name="class" value="[class.ship]" />
        <input_param name="attackcapacity" value="true" />
      </param>
      <param name="radius" default="if this.ship.isclass.[class.ship_l, class.ship_xl] then (((this.ship.size + $target.size) / 2) + ([this.ship.maxspeed, 0.01m].max / ([this.ship.maxyawspeed, 0.01].max)m) * 2) 
                                              else [
                                                [
                                                  (
                                                    ((this.ship.size + $target.size) / 2) + 
                                                    ([this.ship.maxspeed, 0.01m].max / ([[this.ship.maxyawspeed, this.ship.maxpitchspeed].min, 0.01].max)m) * 2
                                                  ), 
                                                  (
                                                    ((this.ship.size + $target.size) / 2) + 
                                                    (
                                                      (pi / [this.ship.maxrollspeed, 0.01].max) + (pi / [this.ship.maxpitchspeed, 0.01].max)
                                                    )m * ([this.ship.maxspeed, 0.01m].max / 2)
                                                  )].min, 150m].max" type="length" text="{1041, 10093}" advanced="true" comment="Radius. First parameter for formation" >
        <input_param name="min" value="this.ship.size + $target.size"/>
        <input_param name="max" value="this.ship.maxradarrange"/>
        <input_param name="step" value="500m" />
      </param>
      <param name="timeout" default="0s" type="time" infinitevalue="0s" text="{1041, 10034}" advanced="true" comment="Duration">
        <input_param name="min" value="0s" />
        <input_param name="max" value="10h" />
        <input_param name="step" value="30s" />
      </param>
      <param name="pursuedistance" default="[@$target.maxradarrange, this.ship.maxradarrange, 1km].max" type="internal" text="{1041, 10090}" comment="Pursue distance. Distance to pursue/escort. Default: max radar range">
        <input_param name="min" value="1km"/>
        <input_param name="max" value="[@$target.maxradarrange, this.ship.maxradarrange, 1km].max"/>
        <input_param name="step" value="1km"/>
      </param>
      <param name="untilclaimed" type="internal" default="false" text="{1041, 10136}" comment="Until claimed. stop protecting ship when it is claimed. only set from lib.respond.foundabandonedship"/>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
    </requires>
    <location object="$target" condition="$target.exists" />
  </order>
  <interrupts>
    <handler ref="SectorChangeHandler"/>
    <handler ref="ScannedHandler" />
    <handler ref="InspectedHandler"/>
    <handler ref="TargetInvalidHandler" />
    <handler ref="ResupplyHandler" />
    <!-- putting this in a global interrupt because there are blocking actions between $leaderpilot getting initialized and the wait where it could otherwise be handled.
          in order.fight.escort, there are no such blocking actions, so it's fine in the wait interrupt. -->
    <handler>
      <conditions>
        <!-- if the pilot of the squadron leader is replaced, -->
        <event_control_entity_added object="$target" check="false"/>
        <check_value value="not $untilclaimed"/>
      </conditions>
      <actions>
        <do_if value="@$leaderpilot.$escortgroup">
          <!-- copy the squadron variables from the original leader pilot's blackboard to that of the new leader pilot, -->
          <set_value name="event.param.$escortgroup" exact="$leaderpilot.$escortgroup"/>
          <!-- and delete them from the old leader pilot's blackboard. -->
          <remove_value name="$leaderpilot.$escortgroup"/>
        </do_if>

        <!-- then set the new leader pilot as $leaderpilot. -->
        <set_value name="$leaderpilot" exact="event.param"/>
        <do_if value="@$leaderpilot.$escortgroup">
          <remove_from_group group="$leaderpilot.$escortgroup" object="this.ship"/>
        </do_if>

        <abort_called_scripts resume="start"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_object_changed_true_owner object="$target"/>
        <check_value value="$untilclaimed"/>
        <check_value value="event.param != faction.ownerless"/>
      </conditions>
      <actions>
        <debug_text text="'target: %s %s %s was claimed. mission accomplished.'.[$target.idcode, $target.knownname, $target]" chance="$debugchance"/>
        <abort_called_scripts resume="finish"/>
      </actions>
    </handler>
  </interrupts>
  <init>
    <set_command command="command.protect" param="$target" />
    <set_command_action commandaction="commandaction.flying" />
    <!-- distance to check and abort attacks -->
    <set_value name="$pursuedistance" exact="5km + @$target.size" />
    <set_value name="$starttime" exact="player.age" />
  </init>
  <patch sinceversion="1">
    <set_value name="$newtarget" exact="$target"/>
    <do_if value="$target.mayattack.{this.assignedcontrolled}">
      <debug_text text="'PATCH: %s %s %s set to protect %s %s %s which is hostile. aborting.'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, @$target.idcode, @$target.knownname, $target]" filter="savegame"/>
      <set_value name="$newtarget" exact="null"/>
    </do_if>

    <do_if value="$newtarget != $target">
      <set_value name="$target" exact="$newtarget"/>
      <do_if value="this.assignedcontrolled.order.id == 'ProtectShip'">
        <edit_order_param order="this.assignedcontrolled.order" param="'target'" value="$target"/>
      </do_if>
    </do_if>
    <remove_value name="$newtarget"/>
  </patch>
  <attention min="visible">
    <actions>

      <label name="start" />

      <!-- Start -->
      <wait min="200ms" />

      <stop_moving object="this.ship" immediate="false" />

      <do_if value="not this.zone.isclass.highway and not this.assignedcontrolled.dock">
        <!-- this will align this ship to the ecliptic plane -->
        <move_to object="this.assignedcontrolled" destination="this.zone" forceposition="false" forcerotation="true">
          <position object="this.assignedcontrolled" z="5m"/>
          <rotation pitch="0deg" yaw="this.assignedcontrolled.rotation.yaw" roll="0deg"/>
          <interrupt_after_time time="0s"/>
        </move_to>
      </do_if>

      <do_if value="not $target.isoperational">
        <debug_text text="'No valid escortee specified, and no commander found - exiting script'" chance="$debugchance" />
        <resume label="finish" />
      </do_if>

      <do_if value="$target.mayattack.{this.assignedcontrolled}">
        <debug_text text="'%s %s %s set to protect %s %s %s which is hostile. aborting.'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, @$target.idcode, @$target.knownname, $target]" filter="error"/>
        <resume label="finish"/>
      </do_if>

      <set_value name="$enemy" exact="null" />

      <!-- If far away -->
      <do_if value="this.sector != @$target.sector or (this.zone != $target.zone and this.ship.distanceto.{$target} gt $radius)">
        <debug_text text="'leader in different zone'" chance="$debugchance" />
        <run_script name="'move.generic'" >
          <param name="destination" value="$target" />
          <param name="endintargetzone" value="true"/>
          <param name="activepatrol" value="false"/>
          <param name="debugchance" value="$debugchance"/>
        </run_script>
      </do_if>

      <!-- Create / add to escort group -->
      <do_if value="$target.isoperational">
        <do_if value="@$target.pilot">
          <set_value name="$leaderpilot" exact="$target.pilot"/>
          <do_if value="not $leaderpilot.$escortgroup?">
            <debug_text text="'creating escort list'" chance="$debugchance" />
            <create_group groupname="$leaderpilot.$escortgroup"/>
          </do_if>
          <add_to_group groupname="$leaderpilot.$escortgroup" object="this.ship"/>
        </do_if>
        <!-- protecting a ship with no pilot is now supported. -->
      </do_if>

      <!-- Flag attack -->
      <set_value name="this.$goattack" exact="false" />

      <do_if value="this.ship.order" comment="Safety check in case the script is called from non-order script">
        <set_order_syncpoint_reached order="this.ship.order" />
      </do_if>

      <!-- Loop: exit when there is no pilot for a non-player faction -->
      <do_while value="$target.isoperational">
        <!-- Get a safe position and the closest distance from target to it -->
        <get_safe_pos object="$target" zone="$target.zone" radius="this.ship.size/2" allowyaxis="false" result="$pos" ignored="this.ship" />
        <set_value name="$closestdist" exact="$target.distanceto.[$target.zone, $pos]" />

        <!-- Close enough to stop -->
        <do_if value="this.ship.distanceto.{$target}" max="$closestdist + $radius">
          <!-- Is moving -->
          <do_if value="@$moving ">
            <set_value name="$moving" exact="false"/>
            <!-- Stop with a move action to rotate and align -->
            <!-- In a max of 4 tries -->
            <do_all exact="4" counter="$i">
              <!-- check this place is free -->
              <get_safe_pos zone="this.zone" radius="this.ship.size/2.0" result="$safepos" ignored="this.ship" object="this.ship" />
              <move_to object="this.ship" destination="this.ship.zone" forceposition="false" forcerotation="true" commandaction="false">
                <position value="$safepos" z="1m" />
                <rotation pitch="0deg" yaw="this.ship.rotation.yaw" roll="0deg" />
              </move_to>
              <!-- If is free, end -->
              <do_if value="this.ship.distanceto.{$safepos}" max="this.ship.size">
                <break />
              </do_if>
            </do_all>
            <stop_moving object="this.ship" />
          </do_if>
          <!-- If is not moving and close enought, do not do anything -->
        </do_if>
        <!-- Far away, so move -->
        <do_else>
          <!-- Already moving -->
          <do_if value="@$moving">
            <!-- Update target destination, because target moved from the last position -->
            <do_if value="$target.distanceto.[$target.zone, $destination]" min="$closestdist + 2km + this.ship.size*2">
              <set_value name="$moving" exact="false" comment="to restart the movement" />
            </do_if>
            <!-- Update target destination, because we arrive to destination -->
            <do_elseif value="this.ship.distanceto.[this.zone, $destination]" max="this.ship.size">
              <set_value name="$moving" exact="false" comment="to restart the movement" />
            </do_elseif>
          </do_if>
          <!-- Not moving, so move -->
          <do_else>
            <set_value name="$moving" exact="true"/>
            <set_value name="$destination" exact="$pos" />
            <!-- Move and interrupt, to continue with distance checks -->
            <move_to object="this.ship" destination="$target.zone" uselocalhighways="false" forceposition="false" finishonapproach="true" commandaction="false" >
              <position value="$destination" max="1km"/>
              <interrupt_after_time time="0s"/>
            </move_to>
          </do_else>
        </do_else>

        <do_if value="this.ship.mayattack.{$target}">
          <resume label="finish"/>
        </do_if>

        <!-- in case the ship is docked, there could be no pilot, so use a temp group
              NB: this won't work when this.ship requests someone else in the squadron to attack
                    because that ship will be removed from this' copy of the escortgroup, but not in the copies of other ships in the squadron. -->
        <!--<do_if value="@$target.pilot.$escortgroup">
          <set_value name="$escortgroup" exact="@$target.pilot.$escortgroup" />
        </do_if>
        <do_else>
          <create_group groupname="$escortgroup" />
        </do_else>-->
        <!-- Get the attack events -->
        <wait min="10s" max="20s" >
          <interrupt>
            <conditions>
              <check_any>
                <check_all>
                  <!-- 'break and attack' sent from this script by ships requesting reinforcements.
                          event.param is the hostile. -->
                  <event_object_signalled object="this.ship" param2="'break and attack'"/>
                  <check_value value="$target.isoperational and $target.pilot and event.param.isoperational and $target.mayattack.{event.param}"/>
                </check_all>
                <check_all>
                  <check_any>
                    <event_object_attacked object="this.ship"/>
                    <event_object_attacked object="$target"/>
                    <check_all>
                      <event_object_enemy_found object="this.ship"/>
                      <check_value value="not $target.pilot or (@$target.pilot.command.value == command.attackenemies) or (@$target.pilot.command.value == command.attackobject) or (@$target.pilot.command.value == command.patrol) or (@$target.pilot.command.value == command.protect) or ($target.primarypurpose != purpose.fight)"/>
                      <check_value value="event.param.primarypurpose == purpose.fight"/>
                    </check_all>
                  </check_any>
                  <check_value value="event.param.isoperational"/>
                  <check_value value="$target.isoperational" />
                  <check_value value="$target != event.param" comment="special check for attack (or not) the target" />
                  <check_value value="this.mayattack.{event.param} or $target.mayattack.{event.param}" />
                  <check_value value="($target.distanceto.{event.param} le $pursuedistance) and (this.ship.distanceto.{event.param} le $pursuedistance)" />
                </check_all>
                <event_object_changed_zone object="$target" />
                <event_object_destroyed object="$target" />
                <event_object_abandoned object="$target" />
                <!-- cover is not relevant in this case since we will be protecting something, whatever or whoever that may be. -->
                <event_object_changed_true_owner object="$target"/>
              </check_any>
            </conditions>
            <actions>
              <!-- Reset enemy -->
              <set_value name="$enemy" exact="null" />

              <!--<set_value name="$debugchance" exact="100"/>-->
              <debug_text text="'squadron movement interrupted by: %1 event.param: %2 (%3)'.[event.name, @event.param.knownname, event.param]" chance="$debugchance"/>

              <do_if value="(event.name == 'event_object_destroyed') or (event.name == 'event_object_abandoned') or (event.name == 'event_object_changed_true_owner')">
                <!--<set_value name="$debugchance" exact="0"/>-->
                <resume label="finish" />
              </do_if>
              <do_elseif value="event.name == 'event_object_changed_zone'">
                <!--<set_value name="$debugchance" exact="0"/>-->
                <remove_from_group group="$leaderpilot.$escortgroup" object="this.ship"/>
                <resume label="start" />
              </do_elseif>
              <do_else>
                <!-- operational checks-->
                <do_if value="event.param.isoperational">

                  <!-- enemy -->
                  <set_value name="$enemy" exact="event.param" />

                  <!-- if this.ship received break and attack, simply set $enemy and attack without calling reinforcements. -->
                  <do_if value="(event.name == 'event_object_signalled') and (event.param2 == 'break and attack')">
                    <set_value name="this.$goattack" exact="true"/>
                    <do_if value="@$leaderpilot.$escortgroup">
                      <remove_from_group group="$leaderpilot.$escortgroup" object="this.ship" />
                    </do_if>
                    <debug_text text="'This ship, %1 (%2), escorting %3, attacking %4 (%5). CONDITION 4.2.2: Squadron reinforcing (response to condition 4.1)'.[this.ship.knownname, this.ship, $target.knownname, $enemy.knownname, $enemy]" chance="$debugchance"/>
                  </do_if>
                  <do_elseif value="@$leaderpilot.$escortgroup.count and ((event.name == 'event_object_attacked') or (event.name == 'event_object_enemy_found'))">
                    <!-- Default Send 20% of escort ships -->
                    <set_value name="$nsupportships" exact="$leaderpilot.$escortgroup.count * 0.2" />

                    <do_if value="event.name" exact="'event_object_attacked'">
                      <!--  Me under attack, so attack him -->
                      <do_if value="event.param3" exact="this.ship">
                        <set_value name="this.ship.pilot.$goattack" exact="true" />
                        <remove_from_group group="$leaderpilot.$escortgroup" object="this.ship" />
                        <debug_text text="'This ship, %1 (%2), escorting %3, attacking %4 (%5). CONDITION 2: Squadron was attacked'.[this.ship.knownname, this.ship, $target.knownname, $enemy.knownname, $enemy]" chance="$debugchance"/>
                        <set_value name="$nsupportships" exact="$leaderpilot.$escortgroup.count * 0.3" />
                      </do_if>
                      <!-- Target under attack. Send 60% of ships -->
                      <!-- this won't work. if $target is attacked, squad movement of all subordinates is interrupted. - FIXED.
                            all of them will send a signal, and none of them will attack unless they fulfill an attack condition other than this.
                            so they will all signal some of their squadmates, but no one would be listening. -->
                      <do_elseif value="event.param3" exact="$target">
                        <!--<set_value name="$nsupportships" exact="$leaderpilot.$escortgroup.count * 0.6" />-->
                        <do_all chance="60">
                          <set_value name="this.ship.pilot.$goattack" exact="true"/>
                          <remove_from_group group="$leaderpilot.$escortgroup" object="this.ship" />
                          <debug_text text="'This ship, %1 (%2), escorting %3, attacking %4 (%5). CONDITION 3: Leader under attack'.[this.ship.knownname, this.ship, $target.knownname, $enemy.knownname, $enemy]" chance="$debugchance"/>
                        </do_all>
                      </do_elseif>
                    </do_if>

                    <!-- Call support ships -->
                    <do_if value="$leaderpilot.$escortgroup.count" min="1">
                      <do_all exact="[1, $nsupportships].max" counter="$i">
                        <!-- won't this fail if a ship processed later sets a ship processed sooner to goattack? -->
                        <signal_objects object="$leaderpilot.$escortgroup.{$i}" param="$enemy" param2="'break and attack'"/>
                        <set_value name="$leaderpilot.$escortgroup.{$i}.pilot.$goattack" exact="true" />
                        <debug_text text="'Requesting %1 (%2), escorting %3, to attack %4 (%5). CONDITION 4.1: Requesting reinforcements'.[$leaderpilot.$escortgroup.{$i}.knownname, $leaderpilot.$escortgroup.{$i}, $target.knownname, $enemy.knownname, $enemy]" chance="$debugchance"/>
                        <do_if value="$leaderpilot.$escortgroup.{$i} == this.ship">
                          <remove_from_group group="$leaderpilot.$escortgroup" object="this.ship" />
                          <debug_text text="'This ship, %1 (%2), escorting %3, attacking %4 (%5). CONDITION 4.2.1'.[this.ship.knownname, this.ship, $target.knownname, $enemy.knownname, $enemy]" chance="$debugchance"/>
                        </do_if>
                      </do_all>
                    </do_if>
                  </do_elseif>
                  <do_elseif value="not @$leaderpilot.$escortgroup">
                    <debug_text text="'no coordination. attacking %s %s %s'.[$enemy.idcode, $enemy.knownname, $enemy]" chance="$debugchance"/>
                    <!-- when defending a ship with no pilot or has not registered an escort group, there is no coordination between this and other members of the protecting group. simply attack hostiles as they come. -->
                    <set_value name="this.$goattack" exact="true"/>
                  </do_elseif>
                  <do_else>
                    <debug_text text="'squadron attack case unaccounted for. this ship will just stay in formation. event.name: ' + event.name" filter="error"/>
                  </do_else>
                </do_if>
                <remove_value name="$nsupportships" />
              </do_else>
              <!--<set_value name="$debugchance" exact="0"/>-->
            </actions>
          </interrupt>
        </wait>

        <!-- Timeout or job expired -->
        <do_if value="this.ship.jobexpired or ($timeout and (player.age gt $starttime + $timeout))">
          <resume label="finish" />
        </do_if>

        <!-- Go into attack mode-->
        <do_if value="this.$goattack">
          <resume label="fight" />
        </do_if>

      </do_while>

      <label name="fight" />

      <do_if value="this.$goattack">
        <do_if value="$target.isoperational and $enemy.isoperational">
          <do_if value="not this.mayattack.{$enemy}">
            <do_if value="this.isplayerowned">
              <add_relation_boost object="$enemy" otherobject="this" value="this.owner.relation.kill.max" decay="1" delay="10min" silent="true" />
            </do_if>
            <do_else>
              <add_relation_boost object="this" otherobject="$enemy" value="this.owner.relation.kill.max" decay="1" delay="10min" silent="true" />
            </do_else>
          </do_if>

          <do_if value="@$leaderpilot.$escortgroup">
            <remove_from_group group="$leaderpilot.$escortgroup" object="this.ship" />
          </do_if>
          <debug_text text="' I will attack you. Index: ' +$myindex " chance="$debugchance" />

          <create_order id="'Attack'" object="this.ship" immediate="true">
            <param name="primarytarget" value="$enemy" />
            <param name="escort" value="$target" />
            <param name="pursuedistance" value="$pursuedistance" comment="make sure to be the same distance as max attack range" />
            <param name="allowothertargets" value="true" />
            <param name="internalorder" value="true"/>
            <param name="debugchance" value="$debugchance" />
          </create_order>

          <do_if value="player.age gt @$next_resupply_check">
            <debug_text text="'%1 (%2) ready to resupply.'.[this.ship.knownname, this.ship]" chance="$debugchance"/>
            <signal_objects object="this.ship" param="'resupply'" param2="[false]" param3="$debugchance" comment="param2 = urgent?, param3 = $debugchance"/>
            <set_value name="$next_resupply_check" exact="player.age + 30min"/>
          </do_if>

          <remove_value name="this.$goattack" />
        </do_if>
      </do_if>

      <resume label="start" />

      <label name="finish" />

      <remove_value name="this.$goattack"/>
      <stop_moving object="this.ship" immediate="false" />
      <wait max="200ms" comment="delay to wait for a possible commander promotion" />

      <debug_text text="'target dead or timeout'" chance="$debugchance" />

      <!-- If target is dead and this is a default order, cancel it -->
      <do_if value="not $target.isoperational and (this.ship.order == this.ship.defaultorder)">
        <cancel_order order="this.ship.defaultorder" />
      </do_if>

      <!-- check if this is a jobship at the end of its lifetime -->
      <do_if value="this.ship.jobexpired">
        <debug_text text="'%1 doing job %2 has expired, die!'.[this.ship.knownname, this.ship.job]" chance="$debugchance" />
        <create_order object="this.ship" id="'MoveDie'" immediate="true">
          <param name="byhighway" value="not this.ship.isclass.[class.ship_l, class.ship_xl]" />
          <param name="byhostile" value="true" />
        </create_order>
      </do_if>

    </actions>
  </attention>
  <attention min="unknown">
    <actions>

      <do_if value="$target == this.ship">
        <debug_text text="'Ship is trying to protect itself.'" filter="error"/>
      </do_if>

      <label name="fight" />
      <label name="start" />

      <do_if value="not $target.isoperational">
        <debug_text text="'No valid escortee specified, and no commander found - exiting script'" chance="$debugchance" />
        <resume label="finish" />
      </do_if>

      <!-- Timeout or job expired -->
      <do_if value="this.ship.jobexpired or ($timeout and (player.age gt $starttime + $timeout))">
        <resume label="finish" />
      </do_if>

      <!-- If far away -->
      <do_if value="this.sector != @$target.sector or (this.zone != $target.zone and this.ship.distanceto.{$target} gt $radius)">
        <debug_text text="'leader in different zone'" chance="$debugchance" />
        <run_script name="'move.generic'" >
          <param name="destination" value="$target" />
          <param name="endintargetzone" value="true"/>
          <param name="activepatrol" value="false"/>
          <param name="debugchance" value="$debugchance"/>
        </run_script>
      </do_if>

      <do_if value="this.ship.mayattack.{$target}">
        <resume label="finish"/>
      </do_if>

      <do_if value="this.ship.order" comment="Safety check in case the script is called from non-order script">
        <set_order_syncpoint_reached order="this.ship.order" />
      </do_if>

      <!-- Keep up -->
      <do_if value="@$target.isoperational">
        <do_if value="this.ship.distanceto.{$target} ge $radius">
          <do_if value="$target.zone.isclass.highway">
            <get_safe_pos result="$safepos" zone="$target.zone.destination" radius="this.ship.size"/>
            <move_to object="this.ship" destination="$target.zone.destination" uselocalhighways="not this.ship.isclass.[class.ship_xl, class.ship_l]">
              <position value="$safepos"/>
            </move_to>
            <remove_value name="$safepos"/>
          </do_if>
          <do_else>
            <move_to object="this.ship" destination="$target.zone" uselocalhighways="false">
              <position object="$target" min="this.ship.size + $target.size" max="$radius"/>
              <interrupt>
                <conditions>
                  <event_object_changed_zone object="$target"/>
                  <check_value value="event.param.isclass.highway"/>
                </conditions>
              </interrupt>
            </move_to>
          </do_else>
        </do_if>
        <do_else>
          <wait min="10s" max="30s" />
        </do_else>
      </do_if>

      <do_if value="player.age gt @$next_resupply_check" chance="30">
        <debug_text text="'%1 (%2) ready to resupply.'.[this.ship.knownname, this.ship]" chance="$debugchance"/>
        <signal_objects object="this.ship" param="'resupply'" param2="[false]" param3="$debugchance" comment="param2 = urgent?, param3 = $debugchance"/>
        <set_value name="$next_resupply_check" exact="player.age + 30min"/>
      </do_if>

      <resume label="start" />

      <label name="finish" />

      <stop_moving object="this.ship" immediate="false" />
      <cease_fire object="this.ship" />
      <leave_formation object="this.ship" />
      <wait max="200ms" comment="delay to wait for a possible commander promotion" />

      <debug_text text="'target dead or timeout'" chance="$debugchance" />

      <!-- If target is dead and this is a default order, cancel it -->
      <do_if value="not $target.isoperational and (this.ship.order == this.ship.defaultorder)">
        <cancel_order order="this.ship.defaultorder" />
      </do_if>

      <!-- check if this is a jobship at the end of its lifetime -->
      <do_if value="this.ship.jobexpired">
        <debug_text text="'%1 doing job %2 has expired, die!'.[this.ship.knownname, this.ship.job]" chance="$debugchance" />
        <create_order object="this.ship" id="'MoveDie'" immediate="true">
          <param name="byhighway" value="not this.ship.isclass.[class.ship_l, class.ship_xl]" />
          <param name="byhostile" value="true" />
        </create_order>
      </do_if>

    </actions>
  </attention>
  <on_abort>
    <do_if value="$target.pilot.$escortgroup?">
      <remove_from_group group="$target.pilot.$escortgroup" object="this.ship"/>
    </do_if>
    <remove_value name="this.$goattack"/>
    <stop_moving object="this.ship" immediate="false" />
    <cease_fire object="this.ship" />
    <leave_formation object="this.ship" />
  </on_abort>
</aiscript>
