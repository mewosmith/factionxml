<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="engineer.ai" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <params>
    <param name="debugchance" default="0"/>
    <param name="debugchance2" default="0"/>
  </params>
  <interrupts>
    <handler comment="Engineer hacked">
      <conditions>
        <event_object_signalled object="this.object" param="'engineer_hacked'" />
      </conditions>
      <actions>
        <debug_text text="'engineer_hacked'" chance="$debugchance" />
        <set_value name="this.$hacked" exact="player.age + event.param2" />
      </actions>
    </handler>
    <handler comment="Station under attack">
      <conditions>
        <event_object_attacked object="this.object"/>
        <check_value value="this.object.isclass.station and not event.param3.iswreck"/>
        <check_value value="player.age gt ($nextelementcheck - 1min)"/>
      </conditions>
      <actions>
        <set_value name="$nextelementcheck" min="player.age + 5min" max="player.age + 10min"/>
        <debug_text text="'%s %s %s attacked. resetting time for next element check to %ss from now.'.[this.object.idcode, this.object.knownname, this.object, ($nextelementcheck - player.age)]" chance="$debugchance"/>
      </actions>
    </handler>
  </interrupts>
  <init>
    <set_command command="command.repair" />
    <set_command_action commandaction="commandaction.repairchecking" />

    <set_value name="$nextelementcheck" exact="0" />
  </init>
  <attention min="unknown">
    <actions>

      <!-- init -->
      <set_value name="$repairfrequency" exact="10s" />
      <set_value name="$baserepairrate" exact="50" />
      <set_value name="$CurrentElement" exact="null"/>
      <set_value name="$PossibleElements" exact="[]"/>

      <label name="checkforrepair" />

      <!-- the variable $controlentity exists in any case, but may be null. -->
      <do_if value="this.defensible.isclass.ship">
        <do_if value="this.defensible.pilot == player.entity">
          <set_value name="$controlentity" exact="this.defensible.assignedcontrolentity.{controlpost.aipilot}"/>
        </do_if>
        <do_else>
          <set_value name="$controlentity" exact="this.defensible.assignedpilot"/>
        </do_else>
      </do_if>
      <do_else>
        <set_value name="$controlentity" exact="this.defensible.tradenpc"/>
      </do_else>

      <!-- the engineer computer continues operating at a level defined by the engineering skill of the main control entity of this object at the time the process starts.
            if the main control entity leaves while the process has begun, the repair process continues at that level.
            if there is no main control entity at the time the repair process cycles over again, the process continues at a base level. -->
      <do_if value="not $controlentity">
        <set_value name="$repairmodifier" exact="0"/>
        <!--<wait min="5min" max="10min"/>
        <resume label="checkforrepair"/>-->
      </do_if>
      <do_else>
        <set_value name="$repairmodifier" exact="[this.defensible.combinedskill, 90].min + 10"/>
      </do_else>

      <do_if value="this.defensible.isclass.station">
        <set_value name="$hulldamagelimit" exact="100" comment="below what percentage hull is a component considered damaged"/>
      </do_if>
      <do_else>
        <set_value name="$hulldamagelimit" exact="60 + (40 * $repairmodifier / 100)" comment="below what percentage hull is a component considered damaged (ship engineer repairs up to a value between 60% and 100%, dependent on skill)"/>
      </do_else>

      <do_if value="player.age le @this.$hacked">
        <wait exact="@this.$hacked - player.age" />
      </do_if>

      <!-- If no elements or main hull to repair -->
      <do_if value="not $CurrentElement.exists and (this.defensible.isclass.station or this.defensible.hullpercentage ge $hulldamagelimit)">
        <wait min="2min" max="3min" />
      </do_if>

      <debug_text text="'Begin wait'" chance="$debugchance2"/>
      <wait min="$repairfrequency" max="$repairfrequency + 1s" />

      <set_value name="$Defensible" exact="this.defensible"/>

      <do_if value="$CurrentElement.exists">
        <do_if value="$CurrentElement.iswreck">
          <!--Do not fix wrecked components where the parent is also a wreck-->
          <do_if value="not $CurrentElement.parent.iswreck">
            <resume label="startrepair"/>
          </do_if>
        </do_if>

        <do_if value="$CurrentElement.hullpercentage lt $hulldamagelimit">
          <!--Have a chance to break out if the component is already functional again-->
          <do_if value="$CurrentElement.isfunctional">
            <resume label="startrepair" chance="100 - $repairmodifier"/>
          </do_if>
          <do_else>
            <resume label="startrepair"/>
          </do_else>
        </do_if>
      </do_if>
      <set_value name="$CurrentElement" exact="null"/>

      <!--Find surface elements and put them in the correct lists/groups-->
      <!--This can be quite expensive so only do it once finished with the $CurrentElement-->
      <do_if value="player.age" min="$nextelementcheck">
        <set_value name="$nextelementcheck" min="player.age + 1min" max="player.age + 2min"/>

        <set_value name="$FindChance" exact="100"/>
        <clear_list list="$PossibleElements"/>

        <!--If ship, find engines - High priority-->
        <do_if value="$Defensible.isclass.ship">
          <find_object_component chance="$FindChance" name="$PossibleElements" object="$Defensible" class="class.engine" checkoperational="false" multiple="true" append="true">
            <match_any>
              <match restorable="true" comment="wrecked"/>
              <match repairable="true" invulnerable="false">
                <match_hull min="$hulldamagelimit" negate="true" />
              </match>
            </match_any>
          </find_object_component>
          <!--find large, non surface element destructibles on ships. (stations deal with these separatly)-->
          <find_object_component chance="$FindChance" name="$PossibleElements" object="$Defensible" class="class.destructible" surfaceelement="false" checkoperational="false" multiple="true" append="true">
            <match class="class.adsign" negate="true"/>
            <match_child min="1" comment="Does this component have children"/>
            <match_any>
              <match restorable="true" comment="wrecked"/>
              <match repairable="true" invulnerable="false">
                <match_hull min="$hulldamagelimit" negate="true" />
              </match>
            </match_any>
          </find_object_component>
          <debug_text text="$PossibleElements.count + ' priority things to repair found'" chance="$debugchance2"/>
          <do_all exact="$PossibleElements.count" counter="$Counter" chance="$debugchance2">
            <debug_text text="'Priority Destructible: ' + $PossibleElements.{$Counter} + ' ' + $PossibleElements.{$Counter}.macro.id"/>
          </do_all>
          <do_if value="$PossibleElements.count" min="1">
            <!--If something important was found there is only a small chance of finding something small to fix instead-->
            <!--TODO: Could be based on Engineer skill-->
            <set_value name="$FindChance" exact="5"/>
          </do_if>
        </do_if>
        <do_elseif value="$Defensible.isclass.station">
          <!--Find destroyed modules and queue a build to recycle and replace them-->
          <find_object_component name="$DestroyedModules" object="$Defensible" class="class.module" state="componentstate.wreck" multiple="true"/>
          <do_all exact="$DestroyedModules.count" counter="$Counter" chance="$debugchance2">
            <debug_text text="'Wrecked modules: ' + $DestroyedModules.{$Counter} + ' ' + $DestroyedModules.{$Counter}.macro.id"/>
          </do_all>
          <do_if value="$DestroyedModules.count and @$Defensible.buildstorage.buildmodule and not $Defensible.buildstorage.buildmodule.isbusy">
            <do_if value="$Defensible.plannedconstruction.sequence">
              <debug_text text="'attempting to add build to recycle'" chance="$debugchance"/>
              <add_build_to_expand_station object="$Defensible.buildstorage" buildobject="$Defensible" constructionplan="$Defensible.plannedconstruction.sequence" />
            </do_if>
            <do_else>
              <debug_text text="'%s %s %s does not have a construction sequence.'.[$Defensible.idcode, $Defensible.knownname, $Defensible]" filter="error"/>
            </do_else>
          </do_if>
          <!--Find damaged modules-->
          <find_object_component chance="$FindChance" name="$DamagedModules" object="$Defensible" class="class.module" repairable="true" invulnerable="false" multiple="true">
            <match_parent state="componentstate.operational"/>
            <match_hull min="$hulldamagelimit" negate="true" />
          </find_object_component>
          <do_if value="$DamagedModules.count">
            <set_value name="$NeedRepairModules" exact="[]"/>
            <do_all exact="$DamagedModules.count" counter="$i">
              <do_if value="not $DamagedModules.{$i}.isfunctional">
                <append_to_list name="$NeedRepairModules" exact="$DamagedModules.{$i}"/>
              </do_if>
            </do_all>
            <do_if value="$NeedRepairModules.count">
              <set_value name="$CurrentElement" exact="$NeedRepairModules.random"/>
            </do_if>
            <do_else>
              <set_value name="$CurrentElement" exact="$DamagedModules.random"/>
            </do_else>
            <set_value name="$MassTrafficTargets" exact="[$CurrentElement]"/>
            <set_value name="$nextelementcheck" exact="0"/>
            <set_value name="$FindChance" exact="0"/>
            <remove_value name="$NeedRepairModules"/>
          </do_if>
          <remove_value name="$DamagedModules"/>
        </do_elseif>
        
        <!--A chance to find something small to fix. (100% if nothing important was found)-->
        <find_object_component chance="$FindChance" name="$PossibleElements" object="$Defensible" class="class.destructible" checkoperational="false" multiple="true" append="true">
          <match class="class.module" negate="true"/>
          <match_parent state="componentstate.operational"/>
          <match_any>
            <match restorable="true" comment="wrecked"/>
            <match repairable="true" invulnerable="false">
              <match_hull min="$hulldamagelimit" negate="true" />
            </match>
          </match_any>
        </find_object_component>
        <debug_text text="$PossibleElements.count + ' potential things to repair found'" chance="$debugchance2"/>

        <do_if value="$PossibleElements.count" min="1">
          <set_value name="$MassTrafficTargets" exact="$PossibleElements.clone"/>
          <set_value name="$CurrentElement" exact="$PossibleElements.random"/>
          <set_value name="$nextelementcheck" exact="0"/>
          <do_if value="$CurrentElement.iswreck">
            <debug_text text="'CurrentElement is now the wreck of ' + $CurrentElement + ' ' + $CurrentElement.knownname" chance="$debugchance"/>
            <set_value name="$BaseRestoreTime" exact="($CurrentElement.size)s"/>
            <do_if value="$BaseRestoreTime" min="20min">
              <set_value name="$BaseRestoreTime" exact="20min" comment="cap time for large components"/>
            </do_if>
            <do_elseif value="$BaseRestoreTime" max="1min">
              <set_value name="$BaseRestoreTime" exact="1min" comment="cap time for small components"/>
            </do_elseif>
            <debug_text text="'BaseRestoreTime is ' + $BaseRestoreTime" chance="$debugchance"/>
            <set_value name="$RestoreTime" min="player.age + $BaseRestoreTime" max="player.age + $BaseRestoreTime + 1s"/>
          </do_if>
          <do_else>
            <debug_text text="'CurrentElement is now the damaged ' + $CurrentElement + ' ' + $CurrentElement.knownname" chance="$debugchance"/>
          </do_else>
        </do_if>
        <clear_list list="$PossibleElements"/>
      </do_if>

      <!--Check if there is nothing to fix-->
      <do_if value="not $CurrentElement.exists">
        <do_if value="$Defensible.isclass.station or $Defensible.hullpercentage ge $hulldamagelimit">
          <!--Remove mass traffic.-->
          <debug_text text="$Defensible.knownname + ' is ending mass traffic (nothing left to repair)'" chance="$debugchance" />
          <end_repair_mass_traffic object="$Defensible" />
          <remove_value name="$networkid" />

          <!-- set command action to repair checking -->
          <set_command_action commandaction="commandaction.repairchecking" />

          <resume label="checkforrepair"/>
        </do_if>
      </do_if>

      <label name="startrepair" />

      <!-- send out the repair drones -->
      <do_if value="not @$networkid">
        <do_if value="not $MassTrafficTargets?">
          <set_value name="$MassTrafficTargets" exact="[$Defensible]" />
        </do_if>
        <launch_repair_drones object="$Defensible" target="$Defensible" components="$MassTrafficTargets" result="$networkid" />
        <debug_text text="$Defensible.knownname + ' launched mass traffic - network id: ' + $networkid" chance="$debugchance" />
        <set_value name="$MassTrafficTargets" exact="[]"/>
      </do_if>

      <!-- calculate repair speed -->
      <set_value name="$repairratefactor" exact="0" />

      <do_if value="@$networkid">
        <find_active_repair_mass_traffic object="$Defensible" result="$networkid" />
        <get_units_in_mass_traffic masstraffic="$networkid" category="unitcategory.repair" amounts="$unitamounts" />

        <do_if value="$unitamounts">
          <do_all exact="unitcategory.repair.maxmk" counter="$i">
            <debug_text text="$unitamounts.{$i} + ' builders mk ' + $i" chance="$debugchance" />
            <set_value name="$repairratefactor" operation="add" exact="$unitamounts.{$i} * $i" />
          </do_all>
          <remove_value name="$unitamounts" />
        </do_if>
      </do_if>

      <do_if value="$repairratefactor == 0">
        <do_if value="@$networkid">
          <debug_text text="$Defensible.knownname + ' is ending mass traffic (no more units are flying)'" chance="$debugchance" />
          <end_repair_mass_traffic object="$Defensible" />
          <remove_value name="$networkid" />
        </do_if>

        <!-- NB: note that any xenon ships that are somehow owned by someone else will repair at the slower rate below. -->
        <do_if value="this.defensible.trueowner == faction.xenon">
          <set_value name="$repairratefactor" exact="0.3"/>
        </do_if>
        <do_else>
          <!-- if no builds are underway, repair 10 times more slowly than with just one mk1 drone -->
          <set_value name="$repairratefactor" exact="0.1"/>
        </do_else>
      </do_if>
      <set_value name="$repairratefactor" operation="add" exact="$repairratefactor * $repairmodifier / 25" comment="crew speeds up repair by up to 400% (meaning a fifth of the normal repair time)" />

      <set_value name="$repairrate" exact="$baserepairrate * $repairratefactor" />
      <debug_text text="'Repairrate: ' + $repairrate" chance="$debugchance" />

      <!--Repair Defensible Hull-->
      <do_if value="not $Defensible.isclass.station and $Defensible.maxhull ge 1">
        <do_if value="$Defensible.hullpercentage lt $hulldamagelimit">
          <set_value name="$addedhullpercentage" exact="100f * $repairrate / $Defensible.maxhull" />
          <!-- handle the case of the percentage being < 0 -->
          <do_if value="$addedhullpercentage lt 1">
            <set_value name="$addedhullpercentage" exact="1"/>
          </do_if>
          <do_if value="$addedhullpercentage" min="1">
            <!-- set the repair command action -->
            <set_command_action commandaction="commandaction.repairingto" param="$Defensible" />
            <!-- repair the hull -->
            <set_object_hull object="$Defensible" exact="$Defensible.hullpercentage + $addedhullpercentage" />

            <set_value name="$crewlist" exact="$Defensible.people.service.list" chance="$debugchance"/>
            <set_value name="$precrewskills" exact="table[]" chance="$debugchance"/>
            <do_all exact="@$crewlist.count" counter="$i">
              <set_value name="$precrewskills.{$i}" exact="table[$piloting = $Defensible.people.{$crewlist.{$i}}.skill.piloting, $management = $Defensible.people.{$crewlist.{$i}}.skill.management, $engineering = $Defensible.people.{$crewlist.{$i}}.skill.engineering, $boarding = $Defensible.people.{$crewlist.{$i}}.skill.boarding, $morale = $Defensible.people.{$crewlist.{$i}}.skill.morale]"/>
            </do_all>
            <do_if value="$controlentity">
              <apply_experience entity="$controlentity" experience="'ship_repair'" factor="$addedhullpercentage / 100f"/>
            </do_if>
            <apply_experience object="$Defensible" role="entityrole.service" experience="'ship_repair'" factor="$addedhullpercentage / 100f"/>
            <do_all exact="@$crewlist.count" counter="$i" chance="$debugchance">
              <do_if value="($Defensible.people.{$crewlist.{$i}}.skill.piloting != $precrewskills.{$i}.$piloting and $precrewskills.{$i}.$piloting == 100) or ($Defensible.people.{$crewlist.{$i}}.skill.management != $precrewskills.{$i}.$management and $precrewskills.{$i}.$management == 100) or ($Defensible.people.{$crewlist.{$i}}.skill.engineering != $precrewskills.{$i}.$engineering and $precrewskills.{$i}.$engineering == 100) or ($Defensible.people.{$crewlist.{$i}}.skill.boarding != $precrewskills.{$i}.$boarding and $precrewskills.{$i}.$boarding == 100) or ($Defensible.people.{$crewlist.{$i}}.skill.morale != $precrewskills.{$i}.$morale and $precrewskills.{$i}.$morale == 100)">
                <debug_text text="'PRE: crew member %s %s. factor: %s, skills:\npiloting: %s\nmanagement: %s\nengineering: %s\nboarding: %s\nmorale: %s'.[$Defensible.people.{$crewlist.{$i}}.name, $Defensible.people.{$crewlist.{$i}}.seed, $addedhullpercentage / 100f, $precrewskills.{$i}.$piloting, $precrewskills.{$i}.$management, $precrewskills.{$i}.$engineering, $precrewskills.{$i}.$boarding, $precrewskills.{$i}.$morale]"/>
                <debug_text text="'POST: crew member %s %s skills:\npiloting: %s\nmanagement: %s\nengineering: %s\nboarding: %s\nmorale: %s'.[$Defensible.people.{$crewlist.{$i}}.name, $Defensible.people.{$crewlist.{$i}}.seed, $Defensible.people.{$crewlist.{$i}}.skill.piloting, $Defensible.people.{$crewlist.{$i}}.skill.management, $Defensible.people.{$crewlist.{$i}}.skill.engineering, $Defensible.people.{$crewlist.{$i}}.skill.boarding, $Defensible.people.{$crewlist.{$i}}.skill.morale]"/>
              </do_if>
            </do_all>
            <!--<do_if value="$Defensible.hullpercentage ge 50">
              <debug_text text="'resetting hull'"/>
              <set_object_hull object="$Defensible" exact="10"/>
            </do_if>-->

            <debug_text text="'repaired main object ' + $Defensible + ' ' + $Defensible.knownname + ' to hull value ' + $Defensible.hull + ' (' + $Defensible.hullpercentage + '%)'" chance="$debugchance" />
            <do_if value="$Defensible.hullpercentage ge $hulldamagelimit">
              <debug_text text="$Defensible + ' ' + $Defensible.knownname + ' was repaired as much as possible.'" chance="$debugchance"/>
            </do_if>
          </do_if>
        </do_if>
      </do_if>

      <do_if value="$CurrentElement">
        <do_if value="$CurrentElement.iswreck">
          <do_if value="$CurrentElement.isclass.module">
            <debug_text text="'Current element ' + $CurrentElement + ' ' + $CurrentElement.knownname + ' is a module which is now wrecked. Do not restore. It must be recycled.'" chance="$debugchance"/>
            <set_value name="$CurrentElement" exact="null"/>
          </do_if>
          <do_elseif value="@$RestoreTime" min="1">
            <do_if value="player.age" min="$RestoreTime">
              <!--Restore the $CurrentElement and all of its contained components to 1% hull-->
              <restore_object object="$CurrentElement" hull="1" recursive="true" />
              <set_value name="$RestoreTime" exact="0"/>
              <debug_text text="'Restoring ' + $CurrentElement + ' ' + $CurrentElement.knownname" chance="$debugchance"/>
            </do_if>
          </do_elseif>
          <do_else>
            <!--Component is wrecked but no restore time is defined. It may have been recently wrecked.-->
            <set_value name="$CurrentElement" exact="null"/>
          </do_else>
        </do_if>
        <do_elseif value="$CurrentElement.isoperational">
          <do_if value="$CurrentElement.maxhull" min="1">
            <do_if value="$CurrentElement.hullpercentage ge $hulldamagelimit">
              <!--Component is as repaired as possible-->
              <debug_text text="$CurrentElement + ' ' + $CurrentElement.knownname + ' was repaired as much as possible.'" chance="$debugchance"/>
            </do_if>
            <do_else>
              <!--Repair Damaged Component-->
              <set_value name="$addedhullpercentage" exact="100f * $repairrate / $CurrentElement.maxhull" />
              <!-- handle the case of the percentage being < 0 -->
              <do_if value="$addedhullpercentage lt 1">
                <set_value name="$addedhullpercentage" exact="1"/>
              </do_if>
              
              <do_if value="$addedhullpercentage" min="1">
                <!-- set the repair command action -->
                <set_command_action commandaction="commandaction.repairingto" param="$CurrentElement" />
                <!-- repair the hull -->
                <set_object_hull object="$CurrentElement" exact="$CurrentElement.hullpercentage + $addedhullpercentage" />

                <set_value name="$crewlist" exact="$Defensible.people.service.list" chance="$debugchance"/>
                <set_value name="$precrewskills" exact="table[]" chance="$debugchance"/>
                <do_all exact="@$crewlist.count" counter="$i">
                  <set_value name="$precrewskills.{$i}" exact="table[$piloting = $Defensible.people.{$crewlist.{$i}}.skill.piloting, $management = $Defensible.people.{$crewlist.{$i}}.skill.management, $engineering = $Defensible.people.{$crewlist.{$i}}.skill.engineering, $boarding = $Defensible.people.{$crewlist.{$i}}.skill.boarding, $morale = $Defensible.people.{$crewlist.{$i}}.skill.morale]"/>
                </do_all>
                <do_if value="$controlentity">
                  <apply_experience entity="$controlentity" experience="'ship_repair'" factor="$addedhullpercentage / 100f"/>
                </do_if>
                <apply_experience object="$Defensible" role="entityrole.service" experience="'ship_repair'" factor="$addedhullpercentage / 100f"/>
                <do_all exact="@$crewlist.count" counter="$i" chance="$debugchance">
                  <do_if value="($Defensible.people.{$crewlist.{$i}}.skill.piloting != $precrewskills.{$i}.$piloting and $precrewskills.{$i}.$piloting == 100) or ($Defensible.people.{$crewlist.{$i}}.skill.management != $precrewskills.{$i}.$management and $precrewskills.{$i}.$management == 100) or ($Defensible.people.{$crewlist.{$i}}.skill.engineering != $precrewskills.{$i}.$engineering and $precrewskills.{$i}.$engineering == 100) or ($Defensible.people.{$crewlist.{$i}}.skill.boarding != $precrewskills.{$i}.$boarding and $precrewskills.{$i}.$boarding == 100) or ($Defensible.people.{$crewlist.{$i}}.skill.morale != $precrewskills.{$i}.$morale and $precrewskills.{$i}.$morale == 100)">
                    <debug_text text="'PRE: crew member %s %s. factor: %s, skills:\npiloting: %s\nmanagement: %s\nengineering: %s\nboarding: %s\nmorale: %s'.[$Defensible.people.{$crewlist.{$i}}.name, $Defensible.people.{$crewlist.{$i}}.seed, $addedhullpercentage / 100f, $precrewskills.{$i}.$piloting, $precrewskills.{$i}.$management, $precrewskills.{$i}.$engineering, $precrewskills.{$i}.$boarding, $precrewskills.{$i}.$morale]"/>
                    <debug_text text="'POST: crew member %s %s skills:\npiloting: %s\nmanagement: %s\nengineering: %s\nboarding: %s\nmorale: %s'.[$Defensible.people.{$crewlist.{$i}}.name, $Defensible.people.{$crewlist.{$i}}.seed, $Defensible.people.{$crewlist.{$i}}.skill.piloting, $Defensible.people.{$crewlist.{$i}}.skill.management, $Defensible.people.{$crewlist.{$i}}.skill.engineering, $Defensible.people.{$crewlist.{$i}}.skill.boarding, $Defensible.people.{$crewlist.{$i}}.skill.morale]"/>
                  </do_if>
                </do_all>
                <!--<do_if value="$Defensible.hullpercentage ge 50">
                  <debug_text text="'resetting hull'"/>
                  <set_object_hull object="$Defensible" exact="10"/>
                </do_if>-->

                <debug_text text="player.age + ' repaired ' + $CurrentElement + ' ' + $CurrentElement.knownname + ' to hull value ' + $CurrentElement.hull + ' (' + $CurrentElement.hullpercentage + '%)'" chance="$debugchance" />
                <do_if value="$CurrentElement.hullpercentage ge $hulldamagelimit">
                  <debug_text text="$CurrentElement + ' ' + $CurrentElement.knownname + ' was repaired as much as possible.'" chance="$debugchance"/>
                </do_if>
              </do_if>
            </do_else>
          </do_if>
        </do_elseif>
        <do_else>
          <debug_text text="$CurrentElement + ' ' + $CurrentElement.knownname + ' is neither wreck nor operational. Leaving it in its current state.'" chance="$debugchance"/>
          <set_value name="$CurrentElement" exact="null"/>
        </do_else>
      </do_if>

      <resume label="checkforrepair" />
    </actions>
  </attention>
</aiscript>
