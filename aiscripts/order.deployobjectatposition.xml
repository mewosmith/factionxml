<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="order.deployobjectatposition" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="1">
  <!-- NB: this should be available in the order queue, but needs macros as parameters. only triggered from UI or from other scripts at the moment. -->
  <order id="DeployObjectAtPosition" name="{1041, 471}" description="{1041, 472}" category="internal">
    <params>
      <param name="destination" type="position" text="{1041, 10085}" comment="Position. Position in a Sector">
        <input_param name="class" value="class.sector"/>
      </param>
      <param name="objectstodeploy" default="[]" type="list" text="{1041, 10080}" comment="Objects to deploy. list of macros to deploy. format: [macro, macro, etc]. currently supports mines, satellites, navigation beacons, resource probes, and laser towers.">
        <input_param name="type" value="'macro'"/>
      </param>
      <param name="amountstodeploy" default="[]" type="list" text="{1041, 10004}" comment="Amounts to deploy. optional. list of amounts to deploy. format: [amount, amount, etc]. if present, number of elements has to coincide with number of elements of $objectstodeploy. indices correspond between the two lists. if not defined, amounts are assumed to be 1 for each entry in $objectstodeploy.">
        <input_param name="type" value="'number'"/>
      </param>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
    </requires>
    <location object="$destination.{1}" position="$destination.{2}" condition="$destination.{1} and $destination.{2} and this.ship.ammostorage.deployable.count"/>
  </order>
  <interrupts>
    <handler ref="SectorChangeHandler"/>
    <handler ref="TargetInvalidHandler"/>
    <handler ref="AttackHandler"/>
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler"/>
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="ResupplyHandler"/>
  </interrupts>
  <init>
    <do_if value="not $destination">
      <debug_text text="'No input destination.'" filter="error"/>
      <return/>
    </do_if>
    <do_elseif value="not $destination.{1}">
      <debug_text text="'No input destination space.'" filter="error"/>
      <return/>
    </do_elseif>
    <do_elseif value="not $destination.{2}">
      <debug_text text="'No input destination position.'" filter="error"/>
      <return/>
    </do_elseif>
    <do_elseif value="not $destination.{1}.isclass.sector">
      <do_if value="$destination.{1}.isclass.highway">
        <debug_text text="'Input destination is in a highway.'" filter="error"/>
        <return/>
      </do_if>
      <debug_text text="'Input position is relative to %1. Should be relative to a sector. Trying anyway.'.[$destination.{1}.class]" filter="error"/>
    </do_elseif>

    <set_value name="$targetsector" exact="$destination.{1}"/>
    <set_value name="$pos" exact="$destination.{2}"/>

    <set_value name="$minetypeamounts" exact="table[]"/>
    <set_value name="$navbeacontypeamounts" exact="table[]"/>
    <set_value name="$resourceprobetypeamounts" exact="table[]"/>
    <set_value name="$satellitetypeamounts" exact="table[]"/>
    <set_value name="$lasertowertypeamounts" exact="table[]"/>

    <do_all exact="$objectstodeploy.count" counter="$i" reverse="true">
      <do_if value="typeof $objectstodeploy.{$i} == datatype.macro">
        <do_if value="($objectstodeploy.{$i}.class != class.mine) and ($objectstodeploy.{$i}.class != class.navbeacon) and ($objectstodeploy.{$i}.class != class.resourceprobe) and ($objectstodeploy.{$i}.class != class.satellite) and ($objectstodeploy.{$i}.deployablecategory != deployablecategory.lasertower)">
          <debug_text text="'object designated for deployment is of unsupported class: %s, supported are satellite, mine, navbeacon, resourceprobe, and lasertower.'.[$objectstodeploy.{$i}.class]"/>
          <remove_value name="$objectstodeploy.{$i}"/>
        </do_if>
        <do_else>
          <set_value name="$amount" exact="1"/>
          <do_if value="@$amountstodeploy.{$i}">
            <set_value name="$amount" exact="$amountstodeploy.{$i}"/>
          </do_if>

          <debug_text text="'adding 1 %s'.[$objectstodeploy.{$i}]" chance="$debugchance"/>
          <do_if value="$objectstodeploy.{$i}.isclass.mine">
            <set_value name="$minetypeamounts.{$objectstodeploy.{$i}}" exact="@$minetypeamounts.{$objectstodeploy.{$i}} + $amount"/>
          </do_if>
          <do_elseif value="$objectstodeploy.{$i}.isclass.navbeacon">
            <set_value name="$navbeacontypeamounts.{$objectstodeploy.{$i}}" exact="@$navbeacontypeamounts.{$objectstodeploy.{$i}} + $amount"/>
          </do_elseif>
          <do_elseif value="$objectstodeploy.{$i}.isclass.resourceprobe">
            <set_value name="$resourceprobetypeamounts.{$objectstodeploy.{$i}}" exact="@$resourceprobetypeamounts.{$objectstodeploy.{$i}} + $amount"/>
          </do_elseif>
          <do_elseif value="$objectstodeploy.{$i}.isclass.satellite">
            <set_value name="$satellitetypeamounts.{$objectstodeploy.{$i}}" exact="@$satellitetypeamounts.{$objectstodeploy.{$i}} + $amount"/>
          </do_elseif>
          <!-- NB: $objectstodeploy.{$i} is a macro -->
          <do_elseif value="$objectstodeploy.{$i}.islasertower">
            <set_value name="$lasertowertypeamounts.{$objectstodeploy.{$i}}" exact="@$lasertowertypeamounts.{$objectstodeploy.{$i}} + $amount"/>
          </do_elseif>
          <remove_value name="$amount"/>
        </do_else>
      </do_if>
      <do_else>
        <debug_text text="'objectstodeploy %s is not a macro. skipping.'.[$i]" filter="error"/>
        <remove_value name="$objectstodeploy.{$i}"/>
      </do_else>
    </do_all>

    <do_if value="not $objectstodeploy.count">
      <debug_text text="'No objects designated for deployment. exiting script.'" filter="error"/>
      <return/>
    </do_if>

    <do_all exact="$minetypeamounts.keys.count" counter="$i" reverse="true">
      <do_if value="this.assignedcontrolled.ammostorage.{$minetypeamounts.keys.{$i}}.count lt $minetypeamounts.{$minetypeamounts.keys.{$i}}">
        <do_if value="this.assignedcontrolled.ammostorage.{$minetypeamounts.keys.{$i}}.count lt 1">
          <debug_text text="'Ship was ordered to deploy %s mines of macro %s but has none. Removing entry.'.[$minetypeamounts.{$minetypeamounts.keys.{$i}}, $minetypeamounts.keys.{$i}]" filter="error"/>
          <remove_value name="$minetypeamounts.{$minetypeamounts.keys.{$i}}"/>
        </do_if>
        <do_else>
          <debug_text text="'Ship was ordered to deploy %s mines of macro %s but only has %s. Capping to stored number.'.[$minetypeamounts.{$minetypeamounts.keys.{$i}}, $minetypeamounts.keys.{$i}, this.assignedcontrolled.ammostorage.{$minetypeamounts.keys.{$i}}.count]" filter="error"/>
          <set_value name="$minetypeamounts.{$minetypeamounts.keys.{$i}}" exact="this.assignedcontrolled.ammostorage.{$minetypeamounts.keys.{$i}}.count"/>
        </do_else>
      </do_if>
    </do_all>
    <do_all exact="$navbeacontypeamounts.keys.count" counter="$i" reverse="true">
      <do_if value="this.assignedcontrolled.ammostorage.{$navbeacontypeamounts.keys.{$i}}.count lt $navbeacontypeamounts.{$navbeacontypeamounts.keys.{$i}}">
        <do_if value="this.assignedcontrolled.ammostorage.{$navbeacontypeamounts.keys.{$i}}.count lt 1">
          <debug_text text="'Ship was ordered to deploy %s nav beacons of macro %s but has none. Removing entry.'.[$navbeacontypeamounts.{$navbeacontypeamounts.keys.{$i}}, $navbeacontypeamounts.keys.{$i}]" filter="error"/>
          <remove_value name="$navbeacontypeamounts.{$navbeacontypeamounts.keys.{$i}}"/>
        </do_if>
        <do_else>
          <debug_text text="'Ship was ordered to deploy %s nav beacons of macro %s but only has %s. Capping to stored number.'.[$navbeacontypeamounts.{$navbeacontypeamounts.keys.{$i}}, $navbeacontypeamounts.keys.{$i}, this.assignedcontrolled.ammostorage.{$navbeacontypeamounts.keys.{$i}}.count]" filter="error"/>
          <set_value name="$navbeacontypeamounts.{$navbeacontypeamounts.keys.{$i}}" exact="this.assignedcontrolled.ammostorage.{$navbeacontypeamounts.keys.{$i}}.count"/>
        </do_else>
      </do_if>
    </do_all>
    <do_all exact="$resourceprobetypeamounts.keys.count" counter="$i" reverse="true">
      <do_if value="this.assignedcontrolled.ammostorage.{$resourceprobetypeamounts.keys.{$i}}.count lt $resourceprobetypeamounts.{$resourceprobetypeamounts.keys.{$i}}">
        <do_if value="this.assignedcontrolled.ammostorage.{$resourceprobetypeamounts.keys.{$i}}.count lt 1">
          <debug_text text="'Ship was ordered to deploy %s resource probes of macro %s but has none. Removing entry.'.[$resourceprobetypeamounts.{$resourceprobetypeamounts.keys.{$i}}, $resourceprobetypeamounts.keys.{$i}]" filter="error"/>
          <remove_value name="$resourceprobetypeamounts.{$resourceprobetypeamounts.keys.{$i}}"/>
        </do_if>
        <do_else>
          <debug_text text="'Ship was ordered to deploy %s resource probes of macro %s but only has %s. Capping to stored number.'.[$resourceprobetypeamounts.{$resourceprobetypeamounts.keys.{$i}}, $resourceprobetypeamounts.keys.{$i}, this.assignedcontrolled.ammostorage.{$resourceprobetypeamounts.keys.{$i}}.count]" filter="error"/>
          <set_value name="$resourceprobetypeamounts.{$resourceprobetypeamounts.keys.{$i}}" exact="this.assignedcontrolled.ammostorage.{$resourceprobetypeamounts.keys.{$i}}.count"/>
        </do_else>
      </do_if>
    </do_all>
    <do_all exact="$satellitetypeamounts.keys.count" counter="$i" reverse="true">
      <do_if value="this.assignedcontrolled.ammostorage.{$satellitetypeamounts.keys.{$i}}.count lt $satellitetypeamounts.{$satellitetypeamounts.keys.{$i}}">
        <do_if value="this.assignedcontrolled.ammostorage.{$satellitetypeamounts.keys.{$i}}.count lt 1">
          <debug_text text="'Ship was ordered to deploy %s satellites of macro %s but has none. Removing entry.'.[$satellitetypeamounts.{$satellitetypeamounts.keys.{$i}}, $satellitetypeamounts.keys.{$i}]" filter="error"/>
          <remove_value name="$satellitetypeamounts.{$satellitetypeamounts.keys.{$i}}"/>
        </do_if>
        <do_else>
          <debug_text text="'Ship was ordered to deploy %s satellites of macro %s but only has %s. Capping to stored number.'.[$satellitetypeamounts.{$satellitetypeamounts.keys.{$i}}, $satellitetypeamounts.keys.{$i}, this.assignedcontrolled.ammostorage.{$satellitetypeamounts.keys.{$i}}.count]" filter="error"/>
          <set_value name="$satellitetypeamounts.{$satellitetypeamounts.keys.{$i}}" exact="this.assignedcontrolled.ammostorage.{$satellitetypeamounts.keys.{$i}}.count"/>
        </do_else>
      </do_if>
    </do_all>
    <do_all exact="$lasertowertypeamounts.keys.count" counter="$i" reverse="true">
      <do_if value="this.assignedcontrolled.ammostorage.{$lasertowertypeamounts.keys.{$i}}.count lt $lasertowertypeamounts.{$lasertowertypeamounts.keys.{$i}}">
        <do_if value="this.assignedcontrolled.ammostorage.{$lasertowertypeamounts.keys.{$i}}.count lt 1">
          <debug_text text="'Ship was ordered to deploy %s laser towers of macro %s but has none. Removing entry.'.[$lasertowertypeamounts.{$lasertowertypeamounts.keys.{$i}}, $lasertowertypeamounts.keys.{$i}]" filter="error"/>
          <remove_value name="$lasertowertypeamounts.{$lasertowertypeamounts.keys.{$i}}"/>
        </do_if>
        <do_else>
          <debug_text text="'Ship was ordered to deploy %s laser towers of macro %s but only has %s. Capping to stored number.'.[$lasertowertypeamounts.{$lasertowertypeamounts.keys.{$i}}, $lasertowertypeamounts.keys.{$i}, this.assignedcontrolled.ammostorage.{$lasertowertypeamounts.keys.{$i}}.count]" filter="error"/>
          <set_value name="$lasertowertypeamounts.{$lasertowertypeamounts.keys.{$i}}" exact="this.assignedcontrolled.ammostorage.{$lasertowertypeamounts.keys.{$i}}.count"/>
        </do_else>
      </do_if>
    </do_all>
  </init>
  <attention min="unknown">
    <actions>

      <do_if value="not $minetypeamounts.keys.count and not $navbeacontypeamounts.keys.count and not $resourceprobetypeamounts.keys.count and not $satellitetypeamounts.keys.count and not $lasertowertypeamounts.keys.count">
        <do_if value="this.assignedcontrolled.isplayerowned and this.shouldwarnplayer and notification.npc_order_not_complete.active">
          <run_script name="'player.interaction'">
            <param name="Line" value="10303" comment="Last order could not be completed."/>
            <param name="MaxQueueDelay" value="10s"/>
            <param name="caption" value="'%s (%s)'.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]"/>
            <param name="interactive" value="false"/>
            <param name="debugchance" value="$debugchance"/>
          </run_script>
        </do_if>
        <debug_text text="'No satellites, mines, nav beacons, resource probes, or laser towers designated or available for deployment.'" filter="error"/>
        <return/>
      </do_if>

      <!-- Initial checks -->
      <label name="start" />

      <!-- deploy at a safepos in case pos is not safe. otherwise, we will keep circling the input pos. get_safe_pos will return pos if safe. -->
      <get_safe_pos result="$sectorsafepos" sector="$targetsector" value="$pos" radius="this.assignedcontrolled.size" ignored="this.assignedcontrolled"/>

      <debug_text text="'%s %s moving to %s relative to %s %s %s.'.[this.assignedcontrolled.knownname, this.assignedcontrolled, $sectorsafepos, $targetsector.class, $targetsector.knownname, $targetsector]" chance="$debugchance"/>

      <set_command command="command.movetozone" param="$targetsector"/>
      <run_script name="'move.generic'">
        <param name="destination" value="$targetsector" />
        <param name="position" value="$sectorsafepos" />
        <param name="debugchance" value="$debugchance"/>
      </run_script>

      <do_if value="this.assignedcontrolled.distanceto.[$targetsector, $sectorsafepos] gt (1km + this.assignedcontrolled.size / 2)">
        <wait min="2s" max="5s"/>
        <debug_text text="'more than 1km away from position (%sm). looping back to move again.'.[this.assignedcontrolled.distanceto.[$targetsector, $pos]]" chance="$debugchance"/>
        <resume label="start"/>
      </do_if>

      <label name="deploy"/>

      <debug_text text="'deploying.'" chance="$debugchance"/>

      <do_if value="not this.assignedcontrolled.zone.isclass.highway">
        <do_all exact="$minetypeamounts.keys.count" counter="$i">
          <do_all exact="$minetypeamounts.{$minetypeamounts.keys.{$i}}">
            <launch_mine object="this.assignedcontrolled" macro="$minetypeamounts.keys.{$i}"/>
            <!-- wait a bit before launching the next one to space out the launched deployables. -->
            <wait exact="1ms" sinceversion="1"/>
          </do_all>
        </do_all>
        <do_all exact="$navbeacontypeamounts.keys.count" counter="$i">
          <do_all exact="$navbeacontypeamounts.{$navbeacontypeamounts.keys.{$i}}">
            <launch_navbeacon object="this.assignedcontrolled" macro="$navbeacontypeamounts.keys.{$i}"/>
            <wait exact="1ms" sinceversion="1"/>
          </do_all>
        </do_all>
        <do_all exact="$resourceprobetypeamounts.keys.count" counter="$i">
          <do_all exact="$resourceprobetypeamounts.{$resourceprobetypeamounts.keys.{$i}}">
            <launch_resourceprobe object="this.assignedcontrolled" macro="$resourceprobetypeamounts.keys.{$i}"/>
            <wait exact="1ms" sinceversion="1"/>
          </do_all>
        </do_all>
        <do_all exact="$satellitetypeamounts.keys.count" counter="$i">
          <do_all exact="$satellitetypeamounts.{$satellitetypeamounts.keys.{$i}}">
            <launch_satellite object="this.assignedcontrolled" macro="$satellitetypeamounts.keys.{$i}"/>
            <wait exact="1ms" sinceversion="1"/>
          </do_all>
        </do_all>
        <do_all exact="$lasertowertypeamounts.keys.count" counter="$i">
          <do_all exact="$lasertowertypeamounts.{$lasertowertypeamounts.keys.{$i}}">
            <launch_lasertower name="$lasertower" object="this.assignedcontrolled" macro="$lasertowertypeamounts.keys.{$i}"/>
            <create_order object="$lasertower" id="'Lasertower'" default="true"/>
            <remove_value name="$lasertower"/>
            <wait exact="1ms" sinceversion="1"/>
          </do_all>
        </do_all>
      </do_if>
      <do_else>
        <debug_text text="'%s %s %s attempted to launch deployables while in a highway. not deploying deployables. destination 1: %s %s %s, destination 2: %s'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, @$destination.{1}.class, @$destination.{1}.knownname, @$destination.{1}, @$destination.{2}]" filter="error"/>
      </do_else>

    </actions>
  </attention>
  <on_abort>
    <stop_moving object="this.assignedcontrolled"/>
    <stop_boost object="this.assignedcontrolled"/>
  </on_abort>
</aiscript>