<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet href="scriptproperties.xsl" type="text/xsl" ?>
<scriptproperties xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="scriptproperties.xsd">

  <textdb source="../t/0001-l044.xml" />

  <!-- All component types -->

  <datatype name="component">
    <property name="exists"         result="true iff the component exists in the game graph" type="boolean" />
    <property name="isoperational"  result="true iff the component exists in the game graph and is operational" type="boolean" />
    <property name="iswreck"        result="true iff the component exists in the game graph and is wrecked" type="boolean" />
    <property name="isconstruction" result="true iff the component exists in the game graph and is in construction state" type="boolean" />
    <property name="issurfaceelement" result="true iff the component is a surface element" type="boolean" />
    <property name="isclass.{$class}" result="true iff the component exists and is of the given class" type="boolean" />
    <property name="isclass.&lt;classname&gt;" result="Shortcut for isclass.{class.&lt;classname&gt;}" type="boolean" />
    <property name="isclass.{$list}" result="true iff the component exists and is of one of the classes in the list" type="boolean" />
    <property name="isrealclass.{$class}" result="true iff the component exists and is really of the given class, regardless of current state" type="boolean" />
    <property name="isrealclass.&lt;classname&gt;" result="Shortcut for isrealclass.{class.&lt;classname&gt;}" type="boolean" />
    <property name="isrealclass.{$list}" result="true iff the component exists and is really of one of the classes in the list, regardless of current state" type="boolean" />
    <property name="canbeattacked"  result="true iff the component exists in the game graph, is not a wreck, and is either operational, is of real class station, or is a child of a station" type="boolean" />
    <property name="extension" result="Source extension id" type="string" />
    <property name="isextensionpersonal" result="true iff the source extension is personal" type="boolean" />
    <property name="class" result="Component class" type="class" />
    <property name="realclass" result="Real component class, regardless of current state" type="class" />
    <property name="state" result="Component state" type="componentstate" />
    <property name="macro" result="Component macro" type="macro" />
    <property name="grouptag" result="Parent group tag" type="tag" />
    <property name="parent" result="Parent component" type="component" />
    <property name="container" result="Container context" type="container" />
    <property name="controllable" result="Controllable context" type="controllable" />
    <property name="defensible" result="Defensible context" type="defensible" />
    <property name="object" result="Object context" type="object" />
    <property name="ship" result="Ship context" type="ship" />
    <property name="station" result="Station context" type="station" />
    <property name="cluster" result="Cluster context" type="cluster" />
    <property name="sector" result="Sector context" type="sector" />
    <property name="zone" result="Zone context" type="zone" />
    <property name="room" result="Room context" type="room" />
    <property name="module" result="Module context" type="module" />
    <property name="hascontext.{$component}" result="true iff this is in the context of the other component" type="boolean" />
    <property name="commoncontext.{$component}" result="The common context between two components" type="component" />
    <property name="seed" result="Persistent pseudo-random seed (highest level of randomness supported for classes npc and dockingbay)" type="largeint" />
    <property name="name" result="Display name" type="string" />
    <property name="rawname" result="Raw display name, as text entry reference unless renamed manually" type="string" />
    <property name="knownname" result="Display name, ignoring the unknown-status" type="string" />
    <property name="position" result="Position relative to parent" type="position" />
    <property name="relativeposition.{$component}" result="Position relative to $component" type="position" />
    <property name="rotation" result="Rotation relative to parent" type="rotation" />
    <property name="relativerotation.{$component}" result="Rotation relative to $component" type="rotation" />
    <property name="velocity" result="Linear velocity relative to the cluster, but relative to the component's rotation (in m/s)" type="vector" />
    <property name="speed" result="Speed relative to the cluster (in m/s)" type="length" />
    <property name="relvelocity" result="Linear velocity relative to the component's parent, but relative to the component's rotation (in m/s)" type="vector" />
    <property name="relspeed" result="Speed relative to the component's parent (in m/s)" type="length" />
    <property name="attention" result="Attention level" type="attention" />
    <property name="size" result="Size (based on bounding box)" type="length" />
    <property name="length" result="Length (size in Z dimension, based on bounding box)" type="length" />
    <property name="height" result="Height (size in Y dimension, based on bounding box)" type="length" />
    <property name="width" result="Width (size in X dimension, based on bounding box)" type="length" />
    <property name="owner" result="Owner faction (cover owner if set, otherwise true owner)" type="faction" />
    <property name="coverowner" result="Cover Owner faction" type="faction" />
    <property name="trueowner" result="True Owner faction" type="faction" />
    <property name="isplayerowned" result="true iff owned by player (true owner)" type="boolean" />
    <property name="isownerless" result="true iff ownerless (faction Ownerless)" type="boolean" />
    <property name="distanceto.{$component}" result="Distance to other component" type="length" />
    <property name="distanceto.{$position}" result="Distance to $position relative to parent" type="length" />
    <property name="distanceto.{$componentslot}" result="Distance to component and connection offset of $componentslot" type="length" />
    <property name="distanceto.[$component, $position]" result="Distance to $position relative to other component (space)" type="length" />
    <property name="bboxdistanceto.{$component}" result="Distance from this component's bounding box to other component's bounding box" type="length" />
    <property name="bboxdistanceto.{$position}" result="Distance from this component's bounding box to $position relative to parent" type="length" />
    <property name="bboxdistanceto.{$componentslot}" result="Distance from this component's bounding box to component and connection offset of $componentslot" type="length" />
    <property name="bboxdistanceto.[$component, $position]" result="Distance from this component's bounding box to $position relative to other component (space)" type="length" />
    <property name="bboxdistanceto.[$component, $position, $sizeobject]" result="Distance from this component's bounding box to bounding box of $sizeobject at $position relative to other component (space) ($sizeobject may be identical to $component)" type="length" />
    <property name="gatedistance.{$component}" result="Number of gates to other component. Providing cluster leads to using a random sector" type="integer" />
    <property name="gatedistance.{$component}.{$blacklistgroup}.{$component}" result="Number of gates to other component using sector travel blacklist for reference object, defaulting to specified group blacklist if object doesn't have one. Providing cluster leads to using a random sector" type="integer" />
    <property name="isblacklisted.{$blacklisttype}.{$blacklistgroup}.{$component}" result="true if this component is included in specified blacklist for reference object, defaulting to specified group blacklist if object doesn't have one" type="boolean" />
    <property name="isknown" result="true iff the component is known to the player" type="boolean" />
    <property name="isrelationchangedisabled" result="true iff the component has been flagged to not change its relation to others" type="boolean"/>
    <property name="hasrelation.&lt;relationrange&gt;.{$component}" result="true iff the relation to owner of other component is in specified range" type="boolean" />
    <property name="hasrelation.&lt;relationrange&gt;.{$faction}" result="true iff the relation to $faction is in specified range" type="boolean" />
    <property name="relationto.{$component}" result="Relation to owner of other component" type="float" />
    <property name="relationto.{$faction}" result="Relation to $faction" type="float" />
    <property name="relationchange.attacktolerance.threshold" result="Threshold until attacks are no longer considered friendly fire" type="float" />
    <property name="relationchange.attacktolerance.absolute" result="Absolute tolerance value to be set on attack" type="float" />
    <property name="relationchange.attacktolerance.change" result="Change to tolerance value per attack" type="float" />
    <property name="relationchange.attacktolerance.decay" result="Rate at which tolerance decays back to 0" type="float" />
    <property name="relationchange.attacktolerance.delay" result="Delay until tolerance begins to decay back to 0" type="time" />
    <property name="relationchange.attackboost.absolute" result="Absolute relation boost value to be set on hostile attack against component" type="float" />
    <property name="relationchange.attackboost.change" result="Change to relation boost value per attack against component" type="float" />
    <property name="relationchange.attackboost.decay" result="Rate at which relation boost decays back to default (faction) relation" type="float" />
    <property name="relationchange.attackboost.delay" result="Delay until relation boost begins to decay" type="time" />
    <property name="relationchange.attackfaction.scan" result="Change to faction relation per detected illegal scan of a station" type="float" />
    <property name="relationchange.attackfaction.hack" result="Change to faction relation per detected hack of a station" type="float" />
    <property name="relationchange.killboost.absolute" result="Absolute relation boost value to be set on kill of component" type="float" />
    <property name="relationchange.killboost.change" result="Change to relation boost value per kill of component" type="float" />
    <property name="relationchange.killboost.decay" result="Rate at which relation boost decays back to default (faction) relation" type="float" />
    <property name="relationchange.killboost.delay" result="Delay until relation boost begins to decay" type="time" />
    <property name="relationchange.killfaction.change" result="Change to faction relation per kill of component" type="float" />
    <property name="relationchange.killfaction.bonus" result="Change to faction relation per kill of nearby enemy object" type="float" />
    <property name="relationchange.policefaction.change" result="Change to police faction relation when player is reported for attack on object" type="float" />
    <property name="relationchange.policefaction.scan" result="Change to police faction relation when player is reported for illegal scanning of an object" type="float" />
    <property name="relationchange.policefaction.hack" result="Change to police faction relation when player is reported for hacking an object" type="float" />
    <property name="relationchange.policefaction.bounty" result="Bounty money that the player gets for killing an enemy while playing police" type="money" />
    <property name="relationchange.repairboost.absolute" result="Absolute relation boost value to be set on repair of component (NYI)" type="float" />
    <property name="relationchange.repairboost.change" result="Change to relation boost value per repair of component (NYI)" type="float" />
    <property name="relationchange.repairfaction.change" result="Change to faction relation per repair of component (NYI)" type="float" />
    <property name="mayattack.{$component}" result="true if this component has a kill relation towards other component or has a killmilitary relation and the other component has the purpose 'fight'" type="boolean"/>
    <property name="mayattack.{$faction}" result="true if this component has a kill relation towards the faction"/>
    <property name="wares" result="Wares" type="wareamountlist" />
    <property name="haslicence.&lt;licencetype&gt;.{$faction}" result="true iff the component has the specified licence" type="boolean" />
    <property name="signal.&lt;signalid&gt;.name" result="name for specified signal" type="string" />
    <property name="signal.&lt;signalid&gt;.rawname" result="rawname for specified signal" type="string" />
    <property name="signal.&lt;signalid&gt;.description" result="description for specified signal" type="string" />
    <property name="signal.&lt;signalid&gt;.response.id" result="default response id for specified signal" type="string" />
    <property name="signal.&lt;signalid&gt;.response.name" result="default response name for specified signal" type="string" />
    <property name="signal.&lt;signalid&gt;.response.rawname" result="default raw response name for specified signal" type="string" />
    <property name="signal.&lt;signalid&gt;.response.description" result="default response description for specified signal" type="string" />
    <property name="signal.&lt;signalid&gt;.shouldaskplayer" result="whether to ask player before responding to especified signal" type="boolean" />
    <property name="revealedpercentage" result="Revealed percentage (average revealed percentage of all info points if applicable)" type="integer" />
    <property name="revealedlevelpercentage.{$level}" result="Revealed percentage of the provided level (average revealed percentage of all info points if applicable)" type="integer" />
    <property name="isinfounlocked.&lt;infotype&gt;" result="true iff info is unlocked for the player" type="boolean" />
    <property name="scannedlevel" result="Scanned level of component (-1 if not scanned by player)" type="integer" />
    <property name="maxlegalscanlevel.{$component}" result="Max legal scan level when component scans other component (takes licences into account)" type="integer" />
    <property name="maxlegalscanlevel.{$faction}" result="Max legal scan level when scanning object of faction (takes licences into account)" type="integer" />
    <property name="secrecylevel" result="Secrecy level of component" type="integer" />
    <property name="haswaypoint.{$list}" result="true iff this component has at least one waypoint matching all tags (also checks child components, stopping when it reaches an Object)" type="boolean" />
    <property name="haswaypointpath.{$list}" result="true iff this component has at least one waypoint matching all tags (also checks child components, stopping when it reaches a component that has its own waypoint paths)" type="boolean" />
    <property name="haswaypointpath.{$grouptag}.{$list}" result="true iff this component has at least one waypoint matching the group and all tags ($grouptag is allowed to be null; also checks child components, stopping when it reaches a component that has its own waypoint paths)" type="boolean" />
    <property name="isactive" result="Is active" type="boolean" />
  </datatype>

  <datatype name="destructible" type="component">
    <property name="isfunctional" result="true iff the object exists in the game graph and is functional" type="boolean" />
    <property name="hull" result="Hull value" type="hitpoints" />
    <property name="maxhull" result="Max hull value" type="hitpoints" />
    <property name="hullpercentage" result="Hull value percentage" type="float" />
    <property name="shield" result="Shield value" type="hitpoints" />
    <property name="maxshield" result="Max shield value" type="hitpoints" />
    <property name="shieldpercentage" result="Shield value percentage" type="float" />
    <property name="drop" result="Drop ID"/>
    <property name="hasstorage" result="true iff there is a functional storage module" type="boolean" />
    <property name="canclaimownership" result="true iff this object can claim ownership of a sector" type="boolean" />
    <property name="productions" result="List of production modules" type="list" />
    <property name="modulesets" result="List of module set strings" type="list" />
    <property name="primarypurpose" result="The object's primary purpose" type="purpose" />
  </datatype>

  <datatype name="object" type="destructible">
    <property name="formationleader" result="The leader of the objects formation" type="object" />
    <property name="idcode" result="The ID Code of the object as a string (format: AAA-123)" type="string" />
    <property name="isformationleader" result="true if is a formation leader" type="boolean" />
    <property name="isformationwingman" result="true if is formation wingman" type="boolean" />
    <property name="iscommandeerable" result="true if object is commandeerable" type="boolean"/>
    <property name="iscommandeered" result="true if object is currently commandeered" type="boolean"/>
    <property name="isgodobject" result="true if object is a god created object" type="boolean"/>
    <property name="ismasstraffic" result="true if this is a mass-traffic object" type="boolean" />
    <property name="ishighwaytraffic" result="true if this is a highway-traffic object" type="boolean" />
    <property name="istemptraffic" result="true if this is a temp-traffic object (e.g. mass or highway traffic)" type="boolean" />
    <property name="iszonechangepending" result="true if the remaining waypoints will result in at least one more zone-change" type="boolean" />
    <property name="numwaypoints" result="Number of remaining waypoints in path" type="integer" />
    <property name="maxradarrange" result="Maximal radar range" type="length" />
    <property name="region" result="Associated region" type="region" />
    <property name="ismission" result="true iff object was spawned with the mission flag" type="boolean" />
    <property name="suspicious" result="true iff suspicious" type="boolean" />
    <property name="isradarvisible" result="true iff visible to radar and UI" type="boolean" />
    <property name="canbepickedup" result="true iff object can be picked up" type="boolean" />
    <property name="canbepickedupby.{$ship}" result="true iff object can be picked up by the specified $ship" type="boolean" />
    <property name="boost.available" result="true iff the object has a booster which can be activated right now" type="boolean" />
    <property name="boost.active" result="true iff the object is currently boosting" type="boolean" />
    <property name="boost.maxspeed" result="Maximum boost speed with present engine set up and conditions (in m/s)" type="length" />
    <property name="boost.maxduration" result="Maximum boost duration with present engine set up and conditions (in s)" type="time" />
    <property name="travel.available" result="true iff the object's travel mode can be activated right now" type="boolean" />
    <property name="travel.active" result="true iff the object is currently traveling" type="boolean" />
    <property name="travel.chargetime" result="The time in seconds until travel mode actually starts" type="time" />
    <property name="travel.charging" result="true iff the object is currently charging travel mode" type="boolean" />
    <property name="travel.maxspeed" result="Maximum travel speed with present engine set up and conditions (in m/s)" type="length" />
    <property name="travel.iscoasting" result="true iff the ship is currently coasting after turning off travel mode" type="boolean" />
    <property name="value" result="The current value of this object, including value of units and upgrades" type="money"/>
    <property name="repairprice" result="The current repair cost of object, using average prices" type="money"/>
    <property name="adsigns.&lt;state&gt;.count" result="Number of ad signs of this object, filtered by component state: all, construction, operational or wreck" type="integer"/>
    <property name="adsigns.&lt;state&gt;.list" result="List of ad signs of this object, filtered by component state: all, construction, operational or wreck" type="list"/>
    <property name="adsigns.&lt;state&gt;.random" result="Random ad sign of this object, filtered by component state: all, construction, operational or wreck" type="adsign"/>
    <property name="efficiencyupgrades.&lt;state&gt;.count" result="Number of efficiency upgrades of this object, filtered by component state: all, construction, operational or wreck" type="integer"/>
    <property name="efficiencyupgrades.&lt;state&gt;.list" result="List of efficiency upgrades of this object, filtered by component state: all, construction, operational or wreck" type="list"/>
    <property name="efficiencyupgrades.&lt;state&gt;.random" result="Random efficiency upgrade of this object, filtered by component state: all, construction, operational or wreck" type="destructible"/>
    <property name="engines.&lt;state&gt;.count" result="Number of engines of this object, filtered by component state: all, construction, operational or wreck" type="integer"/>
    <property name="engines.&lt;state&gt;.list" result="List of engines of this object, filtered by component state: all, construction, operational or wreck" type="list"/>
    <property name="engines.&lt;state&gt;.random" result="Random engine of this object, filtered by component state: all, construction, operational or wreck" type="engine"/>
    <property name="numsignalleakslots" result="Number of signal leak slots on the object" type="integer"/>
    <property name="scuttleeffect" result="The name of the effect used to represent the object being scuttled (default: blank)" type="string" />
    <property name="isonlineobject" result="true if this is an object that originates in a different universe or has been sent on an online mission" type="boolean" />
    <property name="masstrafficstartobject" result="The start waypoint's object context if this is a mass traffic object" type="object" />
    <property name="masstrafficendobject" result="The end waypoint's object context if this is a mass traffic object" type="object" />
    <property name="hasenginemod" result="Whether the object has any engine mod installed" type="boolean" />
    <property name="hasenginemod.{$ware}" result="Whether the object has a engine mod based on the specified engine mod ware installed" type="boolean" />
    <property name="haspaintmod" result="Whether the object has any paint mod installed" type="boolean" />
    <property name="haspaintmod.{$ware}" result="Whether the object has a paint mod based on the specified paint mod ware installed" type="boolean" />
    <property name="spawnsourceseed" result="Pseudo-random seed of a seedobject (generated station or job ship), mainly useful for debugging. 0 indicates no stored seed in object." type="largeint" />
    <property name="isunit" result="true iff the object is a unit" type="boolean" />
    <property name="isdeployable" result="true iff the object is a deployable" type="boolean" />
    <property name="unitcategory" result="Unit category this object belongs to (null if none)" type="unitcategory" />
    <property name="deployablecategory" result="Deployable category this object belongs to (null if none)" type="deployablecategory" />
    <property name="formationshape" result="The current formation shape of the object" type="formationshape" />
    <property name="formationradius" result="The current formation radius of the object" type="length" />
    <property name="isformationrolling" result="Whether current formation rolls (see create_formation)" type="boolean" />
    <property name="isformationrollmembers" result="Whether current formation members roll (see create_formation)" type="boolean" />
    <property name="formationmaxshipsperline" result="The current formation shape of the object" type="formationshape" />
    <property name="isinhazardousregion" result="Whether the object's current position is inside a hazardous region" type="boolean" />
  </datatype>

  <datatype name="mine" type="object">
    <property name="isfriendfoe" result="Whether the mine has a friend/foe feature" type="boolean" />
    <property name="friendlist" result="Friend list for mine (only for mines friend/foe feature)" type="list" />
    <property name="foelist" result="Foe list for mine (only for mines friend/foe feature)" type="list" />
    <property name="target" result="Mine target" type="destructible" />
  </datatype>

  <datatype name="controllable" type="object">
    <property name="pilot" result="Pilot entity" type="entity" />
    <property name="assignedpilot" result="Assigned pilot entity which may not currently be piloting" type="entity" />
    <property name="aipilot" result="AI pilot entity" type="entity" />
    <property name="assignedaipilot" result="Assigned ai pilot entity which may not currently be piloting" type="entity" />
    <property name="defencenpc" result="Defence control entity" type="entity" />
    <property name="tradenpc" result="Trade control entity" type="entity" />
    <property name="engineer" result="Engineer" type="entity" />
    <property name="shiptrader" result="Shiptrader" type="entity" />
    <property name="shadyguy" result="Shady guy" type="entity" />
    <property name="controlentity.default" result="Main control entity" type="entity" />
    <property name="controlentity.{$controlpost}" result="Control entity of specified control post" type="entity" />
    <property name="assignedcontrolentity.default" result="Assigned main control entity which may not currently be controlling" type="entity" />
    <property name="assignedcontrolentity.{$controlpost}" result="Assigned control entity of specified control post which may not currently be controlling" type="entity" />
    <property name="canhavecontrolentity.{$controlpost}" result="Can this object have a control entity of specified control post" type="boolean" />
    <property name="controlpostslot.{$controlpost}" result="Slot for the entity to enhabit when controlling this object" type="componentslot" />
    <property name="order" result="Current order (which is the current order in the queue if it's enabled, otherwise the default order if it's enabled, otherwise null)" type="order" />
    <property name="nextorder" result="Next order in queue if the current order is in the queue and if the next order exists and is enabled, otherwise null (NOTE: In case of a user-created loop, the next order can be the current order)" type="order" />
    <property name="defaultorder" result="Default order if present, otherwise null" type="order" />
    <property name="orders" result="List of all orders in order queue (NOTE: in case of user-created order loops, the first order in the queue is not necessarily the current order)" type="list" />
    <property name="buildorders" result="List of all build orders in order queue (orders that are associated with an equip or repair task)" type="list" />
    <property name="tradeorders" result="List of all trade orders in order queue (orders that are associated with a trade)" type="list" />
    <property name="commander" result="Commander object (if this is a subordinate)" type="controllable" />
    <property name="assignment" result="Assignment of this subordinate under the commanding object" type="assignment" />
    <property name="canuseassignment.{$assignment}.{$controllable}" result="Can this object use the specified assignment when subordinate to the specified commander. $assignment can be null." type="boolean"/>
    <property name="commanderentity" result="Commander entity (if this is a subordinate)" type="entity" />
    <property name="subordinates" result="List of subordinates" type="list" />
    <property name="subordinates.{$assignment}" result="List of subordinates of the commander with the specified assignment" type="list" />
    <property name="subordinategroupdockoverride" result="Whether subordinate group of controllable is set to always dock at commander" type="boolean"/>
    <property name="subordinategroupid" result="Subordinate group ID that controllable currently belongs to" type="integer"/>
    <property name="allsubordinates" result="List of all subordinates, including those not directly commanded by this" type="list" />
    <property name="allcommanders" result="List of all commanders, including those not directly commanding this" type="list" />
    <property name="canhavecommander.{$component}" result="true iff the $component (or its controllable context) can be a commander for this" type="boolean" />
    <property name="fleet.name" result="Name of fleet (empty string if not a fleet commander)" type="string" />
    <property name="fleet.iscommander" result="True if object is commander of its own fleet" type="boolean"/>
    <property name="fleet.commander" result="Fleet commander object (top level fleet, null if that commander is not a fleet commader, e.g. is a unit or not player owned)" type="controllable"/>
    <property name="toplevelcommander" result="Top-level commander object. May be a station or the ship that the player is flying." type="controllable"/>
    <property name="controlposts.all" result="All control posts for this object" type="list" />
    <property name="controlposts.free" result="All free control posts for this object" type="list" />
    <property name="controlposts.{$entity}" result="All control posts which the provided entity can take on for this object" type="list" />
    <property name="controlroom" result="The control room of the controllable or null" type="room" />
    <property name="hasscanner" result="Does controllable have scanner software" type="boolean" />
    <property name="longrange" result="Does controllable have scanner software capable of a long-range scan" type="boolean" />
    <property name="maxscanlevel" result="The maximum scan level of this controllable's scanner" type="integer" />
    <property name="software.compatible" result="Software that is compatible" type="warelist" />
    <property name="software.default" result="Software that is installed by default" type="warelist" />
    <property name="software.installed" result="Software that is currently installed (including default software)" type="warelist" />
    <property name="people.{$npctemplate}" result="NPC template entry of a person on board the object (raw npctemplates can not provide information without the object as context - see npctemplateentry)" type="npctemplateentry"/>
    <property name="people.count" result="Number of people on board the object as NPC templates (not actual NPCs)" type="integer"/>
    <property name="people.free" result="Amount of free space on board the object for additional people as NPC templates" type="integer"/>
    <property name="people.capacity" result="Maximum amount of potential space on board the object for people as NPC templates" type="integer"/>
    <property name="people.list" result="List of people on board the object as NPC templates (raw templates can't provide information without the object as context e.g. see $controllable.people.{$npctemplate})" type="list"/>
    <property name="people.{$entityrole}.list" result="List of a people on board the object, by entityroll, as NPC templates" type="list"/>
    <property name="people.{$entityrole}.count" result="Number of people on board the object, by entityroll" type="integer"/>
    <property name="people.{$entityrole}.combinedskill" result="Combined skill value (between 0 and 100 per individual) of all people of this role, based on weighted skills that are relevant for the role" type="integer" />
    <property name="people.{$entityrole}.potentialskill.{$entityrole}" result="Potential combined skill value (between 0 and 100 per individual) of all people of this role, based on weighted skills that are relevant for the specified other role" type="integer" />
    <property name="people.{$entityrole}.{$level}.list" result="List of a people on board the object, by entityroll and the tier of skill value $level, as NPC templates" type="list"/>
    <property name="people.{$entityrole}.{$level}.count" result="Number of people on board the object, by entityroll and the tier of skill value $level" type="integer"/>
    <property name="people.{$entityrole}.{$level}.combinedskill" result="Combined skill value (between 0 and 100 per individual) of all people of this role and the tier of skill value $level, based on weighted skills that are relevant for the role" type="integer" />
    <property name="people.{$entityrole}.{$level}.potentialskill.{$entityrole}" result="Potential combined skill value (between 0 and 100 per individual) of all people of this role and the tier of skill value $level, based on weighted skills that are relevant for the specified other role" type="integer" />
    <property name="people.&lt;entityrole&gt;.list" result="List of people of specified role on board the object as NPC templates" type="list"/>
    <property name="people.&lt;entityrole&gt;.count" result="Number of people of specified role  on board the object" type="integer"/>
    <property name="people.&lt;entityrole&gt;.combinedskill" result="Combined skill value (between 0 and 100 per individual) of all people of specified role, based on weighted skills that are relevant for their role" type="integer" />
    <property name="people.&lt;entityrole&gt;.potentialskill.{$entityrole}" result="Potential combined skill value (between 0 and 100 per individual) of all people of specified role, based on weighted skills that are relevant for the specified other role" type="integer" />
    <property name="people.&lt;entityrole&gt;.{$level}.list" result="List of people of specified role of the tier of skill value $level on board the object as NPC templates" type="list"/>
    <property name="people.&lt;entityrole&gt;.{$level}.count" result="Number of people of specified role of the tier of skill value $level on board the object" type="integer"/>
    <property name="people.&lt;entityrole&gt;.{$level}.combinedskill" result="Combined skill value (between 0 and 100 per individual) of all people of specified role of the tier of skill value $level, based on weighted skills that are relevant for the role" type="integer" />
    <property name="people.&lt;entityrole&gt;.{$level}.potentialskill.{$entityrole}" result="Potential combined skill value (between 0 and 100 per individual) of all people of specified role of the tier of skill value $level, based on weighted skills that are relevant for the specified role" type="integer" />
    <property name="ischairslot.{$componentslot}" result="True if $componentslot is a NPC position slot aboard this object and related to a chair" type="boolean"/>
    <property name="chairapproachslot.{$componentslot}" result="The approach slot of a NPC position slot related to a chair on this object" type="componentslot"/>
    <property name="chairbaseslot.{$componentslot}" result="The base chair slot of a NPC position slot related to a chair in this object. Used as a static anchor slot for the chair and can be used as a NPC waypoint." type="componentslot"/>
    <property name="controlposition.{$controlposition}.exists" result="True if a control position of the specified type exists on the controllable (where the room is virtual and does not have control positions)" type="boolean"/>
    <property name="controlposition.{$controlposition}.roomslot" result="Slot which entities inhabit when working at the specified control position (where the room is virtual and does not have control positions)" type="componentslot"/>
    <property name="controlposition.{$controlposition}.entity" result="Entity currently working at the specified control position (where the room is virtual and does not have control positions)" type="entity"/>
    <property name="controlpositions.list" result="List of component slots which are control positions" type="list"/>
    <property name="tradecomputer" result="The trade computer assigned to this controllable for processing trade operations on the player-controlled ship" type="entity" />
    <property name="combinedskill" result="Effective combined skill value (from 0 to 100) of this controllable, taking entity and crew skill, where applicable, into account." type="integer" />
  </datatype>

  <datatype name="defensible" type="controllable">
    <property name="iscapturable" result="Can this defensible be captured (=will pilot eject)" type="boolean" />
    <property name="isalertlevel.&lt;alertlevel&gt;" result="Is the defensible at the specfied alert level: red, yellow or green" type="boolean" />
    <property name="boardingoperation" result="The boarding operation this object is currently taking part in" type="operation" />
    <property name="boardingoperations" result="List of the inbound boarding operations that this object is currently defending against" type="list" />
    <property name="boardingbehaviour" result="The boarding behaviour this object is assigned for its current operation" type="boardingbehaviour" />
    <property name="boardingmarines.count" result="The total number of marines assigned from this ship for the boarding operation" type="integer"/>
    <property name="boardingmarines.combinedskill" result="The total marine related skill of all marines assigned from this ship for the boarding operation (between 0 and 100 per individual)" type="integer"/>
    <property name="boardingmarines.{$level}.count" result="The number of marines assigned from this ship for the boarding operation. Level is the marine tier skill value" type="integer"/>
    <property name="allmarinesdispatched" result="Have all marines set to join this this boarding operation been dispatched? (true if no marines have been assigned from this object)" type="boolean"/>
    <property name="boardingresistance" result="Value of boarding resistance based on current state of the object" type="integer"/>
    <property name="boardingstrength" result="Value of boarding strength based on marines and marine officer" type="integer"/>
    <property name="constructionsequence" result="the current construction sequence of this object (or null if one doesn't exist)" type="constructionsequence"/>
    <property name="planmodule.{$constructionplanentryid}" result="Contained module related to the provied construction plan entry" type="module"/>
    <property name="requiresconstructionvessel.{constructionsequence}" result="true if the provided construction sequence will require a construction vessel" type="boolean"/>
    <property name="defencedronemode" result="the current drone mode of defence drones of this defensible" type="dronemode"/>
    <property name="dps.all" result="Combined damage/second of all weapons and turrets" type="hitpoints" />
    <property name="dps.primary" result="Combined damage/second of primary weapons" type="hitpoints" />
    <property name="dps.secondary" result="Combined damage/second of secondary weapons" type="hitpoints" />
    <property name="dps.lasers.all" result="Combined damage/second of primary and secondary laser weapons" type="hitpoints" />
    <property name="dps.lasers.primary" result="Combined damage/second of primary laser weapons" type="hitpoints" />
    <property name="dps.lasers.secondary" result="Combined damage/second of secondary laser weapons" type="hitpoints" />
    <property name="dps.missiles.all" result="Combined damage/second of primary and secondary missile weapons" type="hitpoints" />
    <property name="dps.missiles.primary" result="Combined damage/second of primary missile weapons" type="hitpoints" />
    <property name="dps.missiles.secondary" result="Combined damage/second of secondary missile weapons" type="hitpoints" />
    <property name="dps.turrets.all" result="Combined damage/second of all turrets" type="hitpoints" />
    <property name="dps.turrets.{$quadrant}" result="Combined damage/second of turrets in given quadrant" type="hitpoints" />
    <property name="dps.turrets.&lt;quadrantname&gt;" result="Shortcut for dps.turrets.{quadrant.&lt;quadrantname&gt;}" type="hitpoints" />
    <property name="dps.turrets.fortarget.{$object}.all" result="Combined damage/second of turrets suitable for given target" type="hitpoints" />
    <property name="dps.turrets.fortarget.{$object}.{$quadrant}" result="Combined damage/second of turrets in given quadrant suitable for given target" type="hitpoints" />
    <property name="dps.turrets.fortarget.{$object}.&lt;quadrantname&gt;" result="Shortcut for dps.turrets.fortarget.{$object}.{quadrant.&lt;quadrantname&gt;}" type="hitpoints" />
    <property name="hasarmeddefencedrones" result="true if the defensible has defence drones and is authorized to use them" type="boolean" />
    <property name="hasarmedminingdrones" result="true if the defensible has mining drones and is authorized to use them" type="boolean" />
    <property name="hasarmedtransportdrones" result="true if the defensible has transport drones and is authorized to use them" type="boolean" />
    <property name="maxcombatrange.all" result="Maximum combat range of all weapons/turrets" type="length" />
    <property name="maxcombatrange.primary" result="Maximum weapon range of primary weapons" type="length" />
    <property name="maxcombatrange.secondary" result="Maximum weapon range of secondary weapons" type="length" />
    <property name="maxcombatrange.lasers.all" result="Maximum weapon range of primary and secondary laser weapons" type="length" />
    <property name="maxcombatrange.lasers.primary" result="Maximum weapon range of primary laser weapons" type="length" />
    <property name="maxcombatrange.lasers.secondary" result="Maximum weapon range of secondary laser weapons" type="length" />
    <property name="maxcombatrange.missiles.all" result="Maximum weapon range of primary and secondary missile weapons" type="length" />
    <property name="maxcombatrange.missiles.primary" result="Maximum weapon range of primary missile weapons" type="length" />
    <property name="maxcombatrange.missiles.secondary" result="Maximum weapon range of secondary missile weapons" type="length" />
    <property name="maxcombatrange.turrets" result="Maximum range of all turrets" type="length" />
    <property name="maxcombatrange.{$weaponmode}.all" result="Maximum combat range of all weapons/turrets with the specified weapon mode" type="length" />
    <property name="maxcombatrange.{$weaponmode}.primary" result="Maximum combat range of primary weapons with the specified weapon mode" type="length" />
    <property name="maxcombatrange.{$weaponmode}.secondary" result="Maximum combat range of secondary weapons with the specified weapon mode" type="length" />
    <property name="maxcombatrange.{$weaponmode}.lasers.all" result="Maximum combat range of all weapons laser weapons with the specified weapon mode" type="length" />
    <property name="maxcombatrange.{$weaponmode}.lasers.primary" result="Maximum combat range of primary laser weapons with the specified weapon mode" type="length" />
    <property name="maxcombatrange.{$weaponmode}.lasers.secondary" result="Maximum combat range of secondary weapons with the specified weapon mode" type="length" />
    <property name="maxcombatrange.{$weaponmode}.missiles.all" result="Maximum combat range of all missile weapons with the specified weapon mode" type="length" />
    <property name="maxcombatrange.{$weaponmode}.missiles.primary" result="Maximum combat range of primary missile weapons with the specified weapon mode" type="length" />
    <property name="maxcombatrange.{$weaponmode}.missiles.secondary" result="Maximum combat range of secondary missile weapons with the specified weapon mode" type="length" />
    <property name="maxcombatrange.{$weaponmode}.turrets" result="Maximum range of all turrets with the specified weapon mode" type="length" />
    <property name="shortestmaxcombatrange.all" result="Shortest maximum combat range of all weapons/turrets" type="length" />
    <property name="shortestmaxcombatrange.primary" result="Shortest maximum weapon range of primary weapons" type="length" />
    <property name="shortestmaxcombatrange.secondary" result="Shortest maximum weapon range of secondary weapons" type="length" />
    <property name="shortestmaxcombatrange.lasers.all" result="Shortest maximum weapon range of primary and secondary laser weapons" type="length" />
    <property name="shortestmaxcombatrange.lasers.primary" result="Shortest maximum weapon range of primary laser weapons" type="length" />
    <property name="shortestmaxcombatrange.lasers.secondary" result="Shortest maximum weapon range of secondary laser weapons" type="length" />
    <property name="shortestmaxcombatrange.missiles.all" result="Shortest maximum weapon range of primary and secondary missile weapons" type="length" />
    <property name="shortestmaxcombatrange.missiles.primary" result="Shortest maximum weapon range of primary missile weapons" type="length" />
    <property name="shortestmaxcombatrange.missiles.secondary" result="Shortest maximum weapon range of secondary missile weapons" type="length" />
    <property name="shortestmaxcombatrange.turrets" result="Shortest maximum range of all turrets" type="length" />
    <property name="shortestmaxcombatrange.{$weaponmode}.all" result="Shortest maximum combat range of all weapons/turrets with the specified weapon mode" type="length" />
    <property name="shortestmaxcombatrange.{$weaponmode}.primary" result="Shortest maximum combat range of primary weapons with the specified weapon mode" type="length" />
    <property name="shortestmaxcombatrange.{$weaponmode}.secondary" result="Shortest maximum combat range of secondary weapons with the specified weapon mode" type="length" />
    <property name="shortestmaxcombatrange.{$weaponmode}.lasers.all" result="Shortest maximum combat range of all weapons laser weapons with the specified weapon mode" type="length" />
    <property name="shortestmaxcombatrange.{$weaponmode}.lasers.primary" result="Shortest maximum combat range of primary laser weapons with the specified weapon mode" type="length" />
    <property name="shortestmaxcombatrange.{$weaponmode}.lasers.secondary" result="Shortest maximum combat range of secondary weapons with the specified weapon mode" type="length" />
    <property name="shortestmaxcombatrange.{$weaponmode}.missiles.all" result="Shortest maximum combat range of all missile weapons with the specified weapon mode" type="length" />
    <property name="shortestmaxcombatrange.{$weaponmode}.missiles.primary" result="Shortest maximum combat range of primary missile weapons with the specified weapon mode" type="length" />
    <property name="shortestmaxcombatrange.{$weaponmode}.missiles.secondary" result="Shortest maximum combat range of secondary missile weapons with the specified weapon mode" type="length" />
    <property name="shortestmaxcombatrange.{$weaponmode}.turrets" result="Shortest maximum range of all turrets with the specified weapon mode" type="length" />
    <property name="miningdronemode" result="the current drone mode of mining drones of this defensible" type="dronemode"/>
    <property name="shields.&lt;state&gt;.count" result="Number of shield generators of this object, filtered by component state: all, construction, operational or wreck" type="integer"/>
    <property name="shields.&lt;state&gt;.list" result="List of shield generators of this object, filtered by component state: all, construction, operational or wreck" type="list"/>
    <property name="shields.&lt;state&gt;.random" result="Random shield generator of this object, filtered by component state: all, construction, operational or wreck" type="shieldgenerator"/>
    <property name="transportdronemode" result="the current drone mode of transport drones of this defensible" type="dronemode"/>
    <property name="turrets.&lt;state&gt;.count" result="Number of turrets of this object, filtered by component state: all, construction, operational or wreck" type="integer"/>
    <property name="turrets.&lt;state&gt;.list" result="List of turrets of this object, filtered by component state: all, construction, operational or wreck" type="list"/>
    <property name="turrets.&lt;state&gt;.random" result="Random turret of this object, filtered by component state: all, construction, operational or wreck" type="turret"/>
    <property name="weapons.&lt;state&gt;.count" result="Number of weapons of this object, filtered by component state: all, construction, operational or wreck" type="integer"/>
    <property name="weapons.&lt;state&gt;.list" result="List of weapons of this object, filtered by component state: all, construction, operational or wreck" type="list"/>
    <property name="weapons.&lt;state&gt;.random" result="Random weapon of this object, filtered by component state: all, construction, operational or wreck" type="weapon"/>
    <property name="units.count" result="Number of stored units" type="integer" />
    <property name="units.maxcount" result="Max number of stored units" type="integer" />
    <property name="units.free" result="Amount of units that can still be stored" type="integer" />
    <property name="units.collect.count" result="Number of stored collector units" type="integer" />
    <property name="units.collect.{$ware}.count" result="Number of stored collector units suitable for given ware" type="integer" />
    <property name="units.collect.{$ware}.list" result="List of stored collector unit macros suitable for given ware" type="list" />
    <property name="units.collect.{$ware}.mk.{$i}.count" result="Number of stored collector units of given version suitable for given ware" type="integer" />
    <property name="units.collect.{$ware}.mk.{$i}.list" result="List of stored collector unit macros of given version suitable for given ware" type="list" />
    <property name="units.{$macro}.count" result="Number of stored units of given macro" type="integer" />
    <property name="units.{$unitcategory}.count" result="Number of stored units of given category" type="integer" />
    <property name="units.{$unitcategory}.list" result="List of macros of stored units of given category" type="list" />
    <property name="units.{$unitcategory}.mk.{$i}.count" result="Number of stored units of given category and version" type="integer" />
    <property name="units.{$unitcategory}.mk.{$i}.list" result="List of macros of stored units of given category and version" type="list" />
    <property name="availableunits.count" result="Number of available units" type="integer" />
    <property name="availableunits.collect.count" result="Number of available collector units" type="integer" />
    <property name="availableunits.collect.{$ware}.count" result="Number of available collector units suitable for given ware" type="integer" />
    <property name="availableunits.collect.{$ware}.list" result="List of available collector unit macros suitable for given ware" type="list" />
    <property name="availableunits.collect.{$ware}.mk.{$i}.count" result="Number of available collector units of given version suitable for given ware" type="integer" />
    <property name="availableunits.collect.{$ware}.mk.{$i}.list" result="List of available collector unit macros of given version suitable for given ware" type="list" />
    <property name="availableunits.{$macro}.count" result="Number of available units of given macro" type="integer" />
    <property name="availableunits.{$unitcategory}.count" result="Number of available units of given category" type="integer" />
    <property name="availableunits.{$unitcategory}.list" result="List of macros of available units of given category" type="list" />
    <property name="availableunits.{$unitcategory}.mk.{$i}.count" result="Number of available units of given category and version" type="integer" />
    <property name="availableunits.{$unitcategory}.mk.{$i}.list" result="List of macros of available units of given category and version" type="list" />
    <property name="ammostorage.missile.basecapacity" result="Base capacity of the defensible for this ammotype" type="integer" />
    <property name="ammostorage.missile.capacity" result="Total capacity of the defensible for this ammotype" type="integer" />
    <property name="ammostorage.missile.count" result="Amount of this ammotype currently stored for the defensible" type="integer" />
    <property name="ammostorage.missile.free" result="Amount of this ammotype that can still be stored for the defensible" type="integer" />
    <property name="ammostorage.countermeasure.basecapacity" result="Base capacity of the defensible for this ammotype" type="integer" />
    <property name="ammostorage.countermeasure.capacity" result="Total capacity of the defensible for this ammotype" type="integer" />
    <property name="ammostorage.countermeasure.count" result="Amount of this ammotype currently stored for the defensible" type="integer" />
    <property name="ammostorage.countermeasure.free" result="Amount of this ammotype that can still be stored for the defensible" type="integer" />
    <property name="ammostorage.deployable.basecapacity" result="Base capacity of the defensible for this ammotype (includes lasertowers, mines, satellites, navbeacons and resourceprobes)" type="integer" />
    <property name="ammostorage.deployable.capacity" result="Total capacity of the defensible for this ammotype (includes lasertowers, mines, satellites, navbeacons and resourceprobes)" type="integer" />
    <property name="ammostorage.deployable.count" result="Amount of this ammotype (includes lasertowers, mines, satellites, navbeacons and resourceprobes) currently stored for the defensible" type="integer" />
    <property name="ammostorage.deployable.free" result="Amount of this ammotype (includes lasertowers, mines, satellites, navbeacons and resourceprobes) that can still be stored for the defensible" type="integer" />
    <property name="ammostorage.{$deployablecategory}.count" result="Number of available deployable of given category" type="integer" />
    <property name="ammostorage.{$deployablecategory}.list" result="List of macros of available deployables of given category" type="list" />
    <property name="ammostorage.{$deployablecategory}.mk.{$i}.count" result="Number of available deployables of given category and version" type="integer" />
    <property name="ammostorage.{$deployablecategory}.mk.{$i}.list" result="List of macros of available deployables of given category and version" type="list" />
    <property name="ammostorage.{$macro}.count" result="Amount of this ammo macro currently stored for the defensible" type="integer" />
    <property name="ammostorage.{$ware}.free" result="Amount of this ammo ware that can still be stored in the defensible" type="integer" />
    <property name="isenemylockingon" result="Whether an enemy is currently locking or locked on to this object" type="boolean" />
    <property name="ismissileincoming" result="Whether a missile is currently homing in on this object" type="boolean" />
    <property name="hasweaponmod" result="Whether the object has any weapon mod installed" type="boolean" />
    <property name="hasweaponmod.{$ware}" result="Whether the object has a weapon mod based on the specified weapon mod ware installed" type="boolean" />
    <property name="hasweaponmod.{$macro}" result="Whether the object has a weapon mod installed on a weapon of the specified macro" type="boolean" />
    <property name="hasweaponmod.{$macro}.{$ware}" result="Whether the object has a weapon mod based on the specified weapon mod ware installed on a weapon of the specified macro" type="boolean" />
    <property name="hasweaponmod.{$groupcontext}.{$grouptag}" result="Whether the object has a weapon mod installed on the specified weapon group (identified by macro path or component, and group tag)" type="boolean" />
    <property name="hasweaponmod.{$groupcontext}.{$grouptag}.{$ware}" result="Whether the object has a weapon mod based on the specified weapon mod ware installed on the specified weapon group (identified by macro path or component, and group tag)" type="boolean" />
    <property name="hasshieldmod" result="Whether the object has any shield mod installed on the object's main hull shield group" type="boolean" />
    <property name="hasshieldmod.{$ware}" result="Whether the object has a shield mod based on the specified shield mod ware installed on the object's main hull shield group" type="boolean" />
    <property name="hasshieldmod.{$groupcontext}.{$grouptag}" result="Whether the object has a shield mod installed on the specified shield group (identified by macro path or component, and group tag)" type="boolean" />
    <property name="hasshieldmod.{$groupcontext}.{$grouptag}.{$ware}" result="Whether the object has a shield mod based on the specified shield mod ware installed on the specified shield group (identified by macro path or component, and group tag)" type="boolean" />
    <property name="buildmodule" result="A contained build module" type="buildmodule" />
    <property name="buildmodules" result="List of all the contained build modules" type="list" />
    <property name="buildprocessor" result="A contained build processor" type="buildprocessor" />
    <property name="buildprocessors" result="List of all the contained build processors" type="list" />
    <property name="freebuildprocessor" result="A contained free build processor" type="buildprocessor" />
    <property name="freebuildprocessors" result="List of all the contained free build processors" type="list" />
  </datatype>

  <datatype name="container" type="defensible">
    <property name="hasmasstraffic" result="true iff the container is involved in the zone's mass-traffic network" type="boolean" />
    <property name="hasunitdrone.{$ship}" result="true if the container has the provided ship as drone unit" type="boolean" />
    <property name="istrafficlevel.&lt;trafficlevel&gt;" result="Is the container at the specified docking traffic level: normal, heavy or gridlock" type="boolean" />
    <property name="buildingmodule" result="The build module building this container" type="buildmodule" />
    <property name="buildingprocessor" result="The build processor building this container" type="buildprocessor" />
    <property name="build" result="Build task constructing this object" type="build" />
    <property name="builds.queued" result="List of all the queued build tasks" type="list" />
    <property name="builds.inprogress" result="List of all build tasks in progress" type="list" />
    <property name="builds.todelete" result="List of all build tasks queued for deletion" type="list" />
    <property name="buildanchor" result="Build anchor" type="component" />
    <property name="buildequipment.wares" result="All equipment wares this object can build (= default items + included items - excluded items)" type="warelist" />
    <property name="buildequipment.excluded" result="Equipment wares that have been excluded from the default items this object can build (see &lt;set_equipment_wares_excluded /&gt;)" type="warelist" />
    <property name="buildequipment.included" result="Equipment wares that have been included on top of the default items this object can build (see &lt;set_equipment_wares_included /&gt;)" type="warelist" />
    <property name="buildequipment.&lt;type&gt;" result="Equipment wares of the specified type which this object can build (respecting included/excluded wares of that type), see buildequipment types in buildmodule" type="warelist" />
    <property name="buildships.wares" result="All ship wares this object can build (= default items + included items - excluded items)" type="warelist" />
    <property name="buildships.excluded" result="Ship wares that have been excluded from the default items this object can build (see &lt;set_ship_wares_excluded /&gt;)" type="warelist" />
    <property name="buildships.included" result="Ship wares that have been included on top of the default items this object can build (see &lt;set_ship_wares_included /&gt;)" type="warelist" />
    <property name="canbuildclass.{$class}" result="true iff this container has a build module capable of building objects of this class" type="boolean" />
    <property name="canequipclass.{$class}" result="true iff this container has a build module capable of equipping objects of this class" type="boolean" />
    <property name="cansupplyclass.{$class}" result="true iff this container has a build module capable of supplying objects of this class" type="boolean" />
    <property name="canbuildequipment.{$ware}" result="true iff this container has a build module capable of building this equipment" type="boolean" />
    <property name="canbuildequipment.{$list}" result="true iff this container has a build modules capable of building the equipment from this list (may be across multiple build modules)" type="boolean" />
    <property name="canbuildmacro.{$macro}" result="true iff this container has a build module capable of building this macro" type="boolean" />
    <property name="canbuildships" result="true iff this container can build ships (see also .isshipyard, .iswharf)" type="boolean" />
    <property name="canequipships" result="true iff this container can equip ships (see also .isequipmentdock)" type="boolean" />
    <property name="cansupplyships" result="true iff this container can supply ships (see also .issupplyship)" type="boolean" />
    <property name="canabortbuild.{$build}" result="true if the specified build can currently be aborted" type="boolean"/>
    <property name="buildresources.{$build}" result="Total resources for the specified build if built by this object (or the current remaining resources if the build is being processed by this object)" type="wareamountlist" />
    <property name="buildresources.{$ship}" result="Total resources to build the specified ship if built by this object (or the current remaining resources if the ship is already under construction by this object)" type="wareamountlist" />
    <property name="neededbuildresources.{$build}" result="Total missing resources for the specified build if built by this object (or the current missing remaining resources if the build is being processed by this object)" type="wareamountlist" />
    <property name="neededbuildresources.{$ship}" result="Total missing resources for the specified ship if built by this object (or the current missing remaining resources if the ship is being processed by this object)" type="wareamountlist" />
    <property name="plannedconstruction.sequence" result="the planned construction sequence of this object (or current construction sequence is there is no queued build)" type="constructionsequence"/>
    <property name="plannedconstruction.boundingbox.exists" result="Whether the planned construction's bounding box has non-zero dimensions" type="boolean"/>
    <property name="plannedconstruction.boundingbox.max" result="Maximum bounds of the planned construction's bounding box" type="vector"/>
    <property name="plannedconstruction.boundingbox.center" result="Center position of the planned construction's bounding box" type="vector"/>
    <property name="cargo" result="Wares in cargo" type="cargolist" />
    <property name="cargo.{$ware}.target" result="Target amount for a traded commodity (product, resource or trade ware)" type="integer" />
    <property name="products" result="All produced wares (including intermediate wares)" type="warelist" />
    <property name="research" result="All research wares currently being worked on by this container" type="warelist" />
    <property name="dockingenabled" result="Is docking at the container enabled" type="boolean" />
    <property name="dockingallowed.{$ship}" result="Is ship allowed to dock at the container" type="boolean" />
    <property name="products.{$ware}.intermediate" result="true iff $ware is an intermediate ware" type="boolean" />
    <property name="resources" result="All resource wares (including intermediate wares)" type="warelist" />
    <property name="resources.{$ware}.intermediate" result="true iff $ware is an intermediate ware" type="boolean" />
    <property name="resources.{$ware}.primary" result="true iff $ware is a primary resource" type="boolean" />
    <property name="resources.{$ware}.secondary" result="true iff $ware is a secondary resource" type="boolean" />
    <property name="supplyresources" result="All resource wares required for supplying units and ammunition of $container. Note that this does not include production resources. Includes inbound reserved wares." type="warelist" />
    <property name="tradewares" result="All trade wares (wares that are bought/sold at the container but are neither product nor resource)" type="warelist" />
    <property name="buyprices" result="Table of the current buy prices for all wares relevent to this container" type="table"/>
    <property name="sellprices" result="Table of the current sell prices for all wares relevent to this container" type="table"/>
    <property name="buildbuyprices" result="Table of the current buy prices for all wares relevent to this container, accounting for 'buildpricefactor'" type="table"/>
    <property name="buildsellprices" result="Table of the current sell prices for all wares relevent to this container, accounting for 'buildpricefactor'" type="table"/>
    <property name="buyprice.{$ware}" result="Current buy price for the specified ware" type="money"/>
    <property name="sellprice.{$ware}" result="Current sell price for the specified ware" type="money"/>
    <property name="buildprice.{$ware}" result="Current cost of resources to build the specified ware" type="money"/>
    <property name="waretransport" result="List of waretransport types which can be carried by this object" type="list"/>
    <property name="productionmoney" result="amount of money wanted to maintain a minimum stocklevel of resources for production (not subtracting current account)" type="money" />
    <property name="wantedmoney" result="amount of money wanted to buy all remaining resources for construction (not subtracting current account)" type="money" />
    <property name="istraderestricted" result="true iff container can only trade with its owner faction (global setting)" type="boolean" />
    <property name="istraderestricted.{$ware}" result="true iff container can only trade this ware with its owner faction" type="boolean" />
    <property name="hastradesubscription" result="true iff player is currently getting trade offer updates of this object, no matter how these updates are unlocked" type="boolean" />
    <property name="haspermanenttradesubscription" result="true iff player has a permanent subscription to trade offer updates of this object" type="boolean" />
    <property name="supplies" result="List of all wares in supply storage" type="wareamountlist" />
    <property name="supplyorders" result="List of all items (ammo/drones) that have been ordered" type="wareamountlist" />
    <property name="workforce.{$race}.amount" result="Amount of workforce of the specified race (may be null)" type="integer" />
    <property name="workforce.{$race}.capacity" result="Capacity for workforce of the specified race (may be null)" type="integer" />
    <property name="workforce.races" result="List of workforce races which this container can currently have" type="list" />
    <property name="workforce.amount" result="Amount of workforce not tied to a specific race" type="integer" />
    <property name="workforce.amounts" result="Table mapping race to current amount of workforce for that race (only races for which there are habitation modules are listed)" type="table" />
    <property name="workforce.capacity" result="Capacity for workforce not tied to a specific race" type="integer" />
    <property name="workforce.capacities" result="Table mapping race to capacity of workforce for that race (only races for which there are habitation modules are listed)" type="table" />
    <property name="workforce.bonus" result="Bonus gained from workforce" type="float" />
    <property name="workforce.optimal" result="Number of workers required for object to operate at peak efficiency" type="integer" />
    <property name="workforce.min" result="Number of workers required for object to operate" type="integer" />
    <property name="money" result="Money in the container's account" type="money" />
    <property name="hasownaccount" result="true iff container has its own account" type="boolean" />
    <property name="minbudget" result="Min budget defined for the container" type="money" />
    <property name="maxbudget" result="Max budget defined for the container" type="money" />
    <property name="loadoutlevel" result="Loadout level used to generate this container (valid for job ships and generated stations)" type="float" />
    <property name="rawloadoutlevel" result="Loadout level used to generate this container without fallback to parameters.xml. You need to check against -1 before using this." type="float" />
    <property name="buildpricefactor" result="Additional factor applied to price for building ships (based on build queue size)" type="float" />
    <property name="isbuildrestricted.{$faction}" result="true iff container cannot build for this faction" type="boolean" />
    <property name="hasresourcesfor.{$ware}" result="true iff container can produce or build, and has enough resources to produce or build the ware" type="boolean" />
    <property name="hasresourcesfor.{$table}" result="true iff container can produce or build, and has enough resources to produce or build all of the wares in the amounts specified. $table is a table that maps wares to corresponding amounts." type="boolean" />
  </datatype>

  <datatype name="ship" type="container">
    <property name="type" result="Ship type" type="shiptype"/>
    <property name="typename" result="Ship type name" type="string"/>
    <property name="numfreeactorslots" result="Number of free actor slots" type="integer" />
    <property name="actors" result="List of actors on the ship" type="list" />
    <property name="assigneddock" result="Dock currently assigned to this ship" type="dockingbay" />
    <property name="docksize" result="Tag of required dock size" type="tag" />
    <property name="dock" result="Dock where this ship is docked" type="dockingbay" />
    <property name="dockslot" result="Slot on the ship to which docking bay connects when ship is docked" type="componentslot" />
    <property name="maxspeed" result="Maximum speed with present engine set up and conditions (in m/s)" type="length" />
    <property name="maxyawspeed" result="Maximum rate of change in yaw with present engine set up and conditions (in rad/s)" type="angle" />
    <property name="maxpitchspeed" result="Maximum rate of change in pitch with present engine set up and conditions (in rad/s)" type="angle" />
    <property name="maxrollspeed" result="Maximum rate of change in roll with present engine set up and conditions (in rad/s)" type="angle" />
    <property name="speedlimit" result="The speed limit currently imposed by the ship's environment (in m/s, -1 if there is none)" type="length" />
    <property name="canenterhighway" result="True iff this ship is capable of entering highways" type="boolean"/>
    <property name="parkedat" result="Tradeoffer component that this ship is parked at (= has parking connection to)" type="destructible" />
    <property name="pickedupobject" result="The object which is currently being carried by this ship" type="object" />
    <property name="job" result="Job ID" type="string" />
    <property name="isjobship" result="true if this is a job ship" type="boolean" />
    <property name="isrequestedjobship" result="true if this is a requested job ship" type="boolean" />
    <property name="jobexpired" result="true if this is a non-commandeered job ship which has passed its expiration time" type="boolean" />
    <property name="jobcommander" result="the original ship which this ship was set to call commander (may have changed)" type="ship" />
    <property name="jobmainzone" result="the zone this ship is set to perform in or start from" type="zone" />
    <property name="jobsubordinates.valid" result="List of subordinates who's place in the hierarchy is valid according to the job definition of this ship" type="list" />
    <property name="jobsubordinates.invalid" result="List of subordinates who's place in the hierarchy is not valid according to the job definition of this ship" type="list" />
    <property name="encounterid" result="Encounter type ID defined by this ship's job" type="string" />
    <property name="isencountership" result="true if this is a ship for encounters" type="boolean" />
    <property name="warebasket" result="Wares in job ship basket" type="warelist" />
    <property name="constructionmodule" result="Build module which this construction vessel is assigned to be deployed at" type="buildmodule" />
    <property name="isdeployedconstructionvessel" result="true if this ship is a construction vessel currently deployed at their 'constructionmodule'" type="boolean" />
    <property name="iscapitalship" result="true if this is a capital ship (size L or XL)" type="boolean" />
    <property name="islasertower" result="true iff the ship is a lasertower" type="boolean" />
    <property name="hasshipmod" result="Whether the object has any ship mod installed" type="boolean" />
    <property name="hasshipmod.{$ware}" result="Whether the object has a ship mod based on the specified ship mod ware installed" type="boolean" />
    <property name="canbeclaimed" result="Whether the ship is currently in a claimable state" type="boolean" />
    <property name="defaultformationradius.{$ship}" result="The appropriate formation radius for this ship and its formation leader($ship)" type="length" />
    <property name="issupplyship" result="True if this ship is capable of re-supplying other ships, i.e. it can repair ships and equipment or produce ammo/units (see also .cansupplyships) but cannot build equipment or ships from scratch" type="boolean" />
    <property name="movementrefobject" result="The object this ship is currently moving relative to" type="object" />
    <property name="activeweapongroup.primary" result="The currently active primary weapon group" type="integer" />
    <property name="activeweapongroup.secondary" result="The currently active secondary weapon group" type="integer" />
  </datatype>

  <datatype name="spacesuit" type="ship">
    <property name="oxygenempty" result="Is the spacesuit empty of oxygen" type="boolean" />
    <property name="oxygenlow" result="Is the spacesuit low on oxygen" type="boolean" />
    <property name="oxygenpercentage" result="Percentage of remaining oxygen supply" type="float" />
    <property name="oxygentimeremaining" result="Remaining time until oxygen is depleted" type="time" />
  </datatype>

  <datatype name="station" type="container">
    <property name="buildplot.exists" result="Whether station's build plot has non-zero dimensions" type="boolean"/>
    <property name="buildplot.max" result="Maximum bounds of station's build plot" type="vector" />
    <property name="buildplot.center" result="Center position of station's build plot" type="vector" />
    <property name="buildplot.price" result="The licence price for this build plot at the station's location" type="money" />
    <property name="paidbuildplot.exists" result="Whether station's build plot licenced by the player has non-zero dimensions" type="boolean"/>
    <property name="paidbuildplot.max" result="Maximum bounds of station's build plot licenced by the player" type="vector" />
    <property name="paidbuildplot.center" result="Center position of station's build plot licenced by the player" type="vector" />
    <property name="paidbuildplot.payment" result="Amount the player paid for the current build plot licence" type="money" />
    <property name="paidbuildplot.haspositionchanged" result="Whether the station's position has changed since the build plot was licenced" type="boolean" />
    <property name="buildstorage" result="Build storage of the station" type="buildstorage" />
    <property name="istradestation" result="True if this station is a trade station" type="boolean" />
    <property name="isshipyard" result="True if this station is a shipyard, i.e. it can build capital ships (see also .canbuildships)" type="boolean" />
    <property name="iswharf" result="True if this station is a wharf, i.e. it can build non-capital ships (see also .canbuildships)" type="boolean" />
    <property name="isequipmentdock" result="True if this station is an equipment dock, i.e. it can change loadouts (see also .canequipships) but cannot build ships from scratch" type="boolean" />
    <property name="isdefencestation" result="True if this station is a defence station" type="boolean" />
    <property name="ispiratebase" result="True if this station is a pirate base" type="boolean" />
    <property name="isheadquarters" result="True if this station macro is tagged as a headquarters. Normally only true for the Player HQ." type="boolean" />
    <property name="isfactionheadquarters" result="True if this station is a faction headquarters" type="boolean" />
    <property name="isplannedshipyard" result="True if this station is set to be a shipyard when fully constructed, i.e. it can build capital ships (see also .canbuildships)" type="boolean" />
    <property name="isplannedwharf" result="True if this station is set to be a wharf when fully constructed, i.e. it can build non-capital ships (see also .canbuildships)" type="boolean" />
    <property name="isplannedequipmentdock" result="True if this station is set to be an equipment dock, when fully constructed, i.e. it can change loadouts (see also .canequipships) but cannot build ships from scratch" type="boolean" />
    <property name="isplanneddefencestation" result="True if this station is set to be a defence station, when fully constructed" type="boolean" />
  </datatype>

  <datatype name="explosive" type="object" />

  <datatype name="bullet" type="component">
    <property name="launcher" result="Weapon that fired this bullet" type="weapon"/>
  </datatype>

  <datatype name="missile" type="explosive">
    <property name="target" result="Missile target" type="destructible" />
    <property name="launcher" result="Object that launched this missile" type="destructible"/>
  </datatype>

  <datatype name="gate" type="object">
    <property name="destination" result="Destination zone" type="zone" />
    <property name="exit" result="Destination gate" type="gate" />
    <property name="isaccelerator" result="Is gate a trans-orbital accelerator" type="boolean" />
    <property name="entryhighway" result="Highway which leads into this gate" type="highway" />
    <property name="exithighway" result="Highway which this gate leads into" type="highway" />
  </datatype>

  <datatype name="highwayentrygate" type="object">
    <property name="highway" result="Associated highway" type="highway" />
    <property name="destination" result="Highway destination zone" type="zone" />
    <property name="exit" result="Highway exit gate" type="highwayexitgate" />
  </datatype>

  <datatype name="highwayexitgate" type="object">
    <property name="highway" result="Associated highway" type="highway" />
    <property name="entry" result="Highway entry gate" type="highwayentrygate" />
  </datatype>

  <datatype name="drop" type="object" />

  <datatype name="satellite" type="object">
    <property name="isadvanced" result="Is an advanced satellite" type="boolean" />
  </datatype>

  <datatype name="navbeacon" type="object" />

  <datatype name="resourceprobe" type="object">
    <property name="currentyield" result="The current yield detected by the resource probe (volume is a cube of space with a side length of 32km)" type="wareamountlist" />
    <property name="maxyield" result="The maximum undepleted yield detected by the resource probe (volume is a cube of space with a side length of 32km)" type="wareamountlist" />
  </datatype>

  <datatype name="lockbox" type="object">
    <property name="rarity" result="Rarity of the lockbox" type="integer" />
    <property name="locks.&lt;state&gt;.count" result="Number of locks on this lockbox, filtered by component state: all, construction, operational or wreck" type="integer"/>
    <property name="locks.&lt;state&gt;.list" result="List of locks on this lockbox, filtered by component state: all, construction, operational or wreck" type="list"/>
    <property name="locks.&lt;state&gt;.random" result="Random lock on this lockbox, filtered by component state: all, construction, operational or wreck" type="lock"/>
  </datatype>

  <datatype name="lock" type="destructible" />

  <datatype name="collectable" type="drop" />

  <datatype name="collectableammo" type="collectable">
    <property name="ammo.count" result="Amount of the contained ammo" type="integer" />
    <property name="ammo.macro" result="Macro of the contained ammo" type="macro" />
  </datatype>

  <datatype name="collectablewares" type="collectable">
    <property name="money" result="Contained money" type="money" />
    <property name="unbundle" result="true iff the crate is flagged for converting its wares into ammo/units on pickup" type="boolean" />
  </datatype>

  <datatype name="buildstorage" type="container">
    <property name="base" result="Base station of the build storage" type="station" />
  </datatype>

  <datatype name="adsign" type="destructible" />
  <datatype name="shieldgenerator" type="destructible" />

  <datatype name="navcontext" type="destructible">
    <property name="ispersistent" result="Is the navcontext is set to be persistent? If true, the interior can exist in low attentions." type="boolean" />
    <property name="isprivate" result="Is the navcontext is set to private? If true, contained NPC slots can only be found by directly querying the contained rooms" type="boolean" />
    <property name="rooms" result="Contained rooms of the navcontext" type="list"/>
  </datatype>

  <datatype name="module" type="destructible" />

  <datatype name="buildmodule" type="walkablemodule">
    <property name="buildprocessor" result="A contained build processor" type="buildprocessor" />
    <property name="buildprocessors" result="List of all the contained build processors" type="list" />
    <property name="freebuildprocessor" result="A contained free build processor" type="buildprocessor" />
    <property name="freebuildprocessors" result="List of all the contained free build processors" type="list" />
    <property name="isbusy" result="true iff all build processors are building" type="boolean" />
    <property name="isbuilding" result="true iff any build processor is building" type="boolean" />
    <property name="canbuildclass.{$class}" result="true iff this build module is capable of building objects of this class" type="boolean" />
    <property name="canequipclass.{$class}" result="true iff this build module is capable of equipping objects of this class" type="boolean" />
    <property name="cansupplyclass.{$class}" result="true iff this build module is capable of supplying objects of this class" type="boolean" />
    <property name="canbuildequipment.{$ware}" result="true iff this build module is capable of building this equipment" type="boolean" />
    <property name="canbuildequipment.{$list}" result="true iff this build modules is capable of building the equipment from this list" type="boolean" />
    <property name="canbuildmacro.{$macro}" result="true iff this build module is capable of building this macro" type="boolean" />
    <property name="buildequipment.wares" result="All equipment wares the build module's container can build (= default items + included items - excluded items)" type="warelist" />
    <property name="buildequipment.excluded" result="Equipment wares that have been excluded from the default items this build module's container can build (see &lt;set_equipment_wares_excluded /&gt;)" type="warelist" />
    <property name="buildequipment.included" result="Equipment wares that have been included on top of the default items this build module's container can build (see &lt;set_equipment_wares_included /&gt;)" type="warelist" />
    <property name="buildequipment.countermeasures" result="Countermeasure equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.drones" result="Drone equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.engines" result="Engine equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.lasertowers" result="Lasertower equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.mines" result="Mine equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.missiles" result="Missile equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.navbeacons" result="NavBeacon equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.resourceprobes" result="ResourceProbe equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.satellites" result="Satellite equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.shields" result="Shield equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.software" result="Software equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.thrusters" result="Thruster equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.turrets" result="Turret equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildequipment.weapons" result="Weapon equipment wares the build module's container can build (respecting included/excluded wares of that type)" type="warelist" />
    <property name="buildships.wares" result="All ship wares the build module's container can build, filtered by the allowed classes for this build module (= default items + included items - excluded items)" type="warelist" />
    <property name="buildships.excluded" result="Ship wares that have been excluded from the default items this build module's container can build (see &lt;set_equipment_wares_excluded /&gt;)" type="warelist" />
    <property name="buildships.included" result="Ship wares that have been included on top of the default items this build module's container can build (see &lt;set_equipment_wares_included /&gt;)" type="warelist" />
    <property name="buildmacros" result="List of macros the build module can build" type="list" />
    <property name="buildanchor" result="Build anchor" type="component" />
    <property name="constructingcomponents" result="List of all components under construction by build processors of this build module" type="list" />
    <property name="constructingmodule" result="Module currently under construction by this build module" type="component" />
    <property name="buildstorage" result="Build storage of the build module" type="buildstorage" />
    <property name="requiresconstructionvessel" result="true if any build processor build will require a construction vessel to begin once other requirements are made" type="boolean"/>
    <property name="iswaitingforconstructionvessel" result="true if any build processor is currently waiting for a construction vessel to start a build (usually meaning that it has enough resources/storage to start)" type="boolean"/>
    <property name="iswaitingforresources" result="true if any build processor is currently waiting for resources to start a build" type="boolean" />
    <property name="iswaitingforstorage" result="true if any build processor is currently waiting for storage to start recycling" type="boolean" />
    <property name="constructionvessel" result="Deployed construction vessel for this build module" type="ship" />
    <property name="constructionvesseldeployed" result="true iff the construction vessel is currently deployed at the build module" type="boolean" />
    <property name="dock.{$docksize}" result="Suitable dock for this docksize available to this build module (can be occupied)" type="dockingbay" />
    <property name="freedock.{$docksize}" result="Suitable free dock for this docksize available to this build module (can be occupied)" type="dockingbay" />
    <property name="buildresources.{$build}" result="Total resources for the specified build if built by this module (or the current remaining resources if the build is being processed by this build module)" type="wareamountlist" />
    <property name="neededbuildresources.{$build}" result="Total missing resources for the specified build if built by this module (or the current missing remaining resources if the build is being processed by this build module)" type="wareamountlist" />
  </datatype>

  <datatype name="buildprocessor" type="component">
    <property name="buildmodule" result="build module containing this build processor" type="buildmodule" />
    <property name="isbusy" result="true iff building" type="boolean" />
    <property name="isbuilding" result="true iff building" type="boolean" />
    <property name="elapsedtime" result="Elapsed time" type="time" />
    <property name="elapsedsteptime" result="Elapsed step time" type="time" />
    <property name="steptime" result="Step time" type="time" />
    <property name="totaltime" result="Total time" type="time" />
    <property name="canabortbuild" result="true if this build processor's current build is in an abortable state" type="boolean"/>
    <property name="canbuildclass.{$class}" result="true iff this build processor's build module is capable of building objects of this class" type="boolean" />
    <property name="canequipclass.{$class}" result="true iff this build processor's build module is capable of equipping objects of this class" type="boolean" />
    <property name="cansupplyclass.{$class}" result="true iff this build processor's build module is capable of supplying objects of this class" type="boolean" />
    <property name="canbuildequipment.{$ware}" result="true iff this build processor's build module is capable of building this equipment" type="boolean" />
    <property name="canbuildequipment.{$list}" result="true iff this build processor's build modules is capable of building the equipment from this list" type="boolean" />
    <property name="canbuildmacro.{$macro}" result="true iff this build processor's build module is capable of building this macro" type="boolean" />
    <property name="buildequipment.wares" result="All equipment wares the build processor's container can build (= default items + included items - excluded items)" type="warelist" />
    <property name="buildequipment.excluded" result="Equipment wares that have been excluded from the default items this build processor's container can build (see &lt;set_equipment_wares_excluded /&gt;)" type="warelist" />
    <property name="buildequipment.included" result="Equipment wares that have been included on top of the default items this build processor's container can build (see &lt;set_equipment_wares_included /&gt;)" type="warelist" />
    <property name="buildequipment.&lt;type&gt;" result="Equipment wares of the specified type which the build processor's container can build (respecting included/excluded wares of that type), see buildequipment types in buildmodule" type="warelist" />
    <property name="buildships.wares" result="All ship wares the build processor's container can build, filtered by the allowed classes for this build processor's build module (= default items + included items - excluded items)" type="warelist" />
    <property name="buildships.excluded" result="Ship wares that have been excluded from the default items this build processor's container can build (see &lt;set_equipment_wares_excluded /&gt;)" type="warelist" />
    <property name="buildships.included" result="Ship wares that have been included on top of the default items this build processor's container can build (see &lt;set_equipment_wares_included /&gt;)" type="warelist" />
    <property name="buildmacros" result="List of macros the build processor's build module can build" type="list" />
    <property name="buildanchor" result="Build anchor" type="component" />
    <property name="constructingcomponents" result="List of all components under construction by this build processor" type="list" />
    <property name="constructingmodule" result="Module currently under construction by this build processor" type="component" />
    <property name="build" result="Current build task of this build processor" type="build" />
    <property name="requiresconstructionvessel" result="true if the current build will require a construction vessel to begin once other requirements are made" type="boolean"/>
    <property name="iswaitingforconstructionvessel" result="true if the current build is currently waiting for a construction vessel to start a build (usually meaning that it has enough resources/storage to start)" type="boolean"/>
    <property name="iswaitingforresources" result="true if the build processor is currently waiting for resources to start a build" type="boolean" />
    <property name="iswaitingforstorage" result="true if the build processor is currently waiting for storage to start recycling" type="boolean" />
    <property name="currentslotresources" result="Total resources for the current build" type="wareamountlist" />
    <property name="stepresources" result="Resources needed per step of the build, excluding the final step which requires .laststepresources" type="wareamountlist" />
    <property name="laststepresources" result="Resources needed for the last step of the build (may differ from .stepresources due to rounding)" type="wareamountlist" />
    <property name="neededslotresources" result="Resources needed for the current build" type="wareamountlist" />
    <property name="neededsequenceresources" result="Resources needed for the whole sequence of builds" type="wareamountlist" />
    <property name="recycled" result="Resources recycled during this sequence of builds" type="wareamountlist" />
  </datatype>

  <datatype name="connectionmodule" type="module">
    <property name="isventuremodule" result="true if this module is for use with venture platforms" type="boolean" />
  </datatype>

  <datatype name="defencemodule" type="module" />

  <datatype name="ventureplatform" type="module">
    <property name="venturedocks" result="List of venture docks associated with this venture module" type="list" />
  </datatype>

  <datatype name="habitationmodule" type="module">
    <property name="workforce.capacity" result="Capacity for workforce" type="integer" />
    <property name="workforce.race" result="Race of the workforce" type="race" />
  </datatype>

  <datatype name="pier" type="module">
    <property name="numpierdocks" result="Number of connected capital ship dock locations" type="integer" />
  </datatype>

  <datatype name="production" type="module">
    <property name="isproducing" result="true iff producing" type="boolean" />
    <property name="ispaused" result="true iff paused for any reason (hacked, manually, damaged...)" type="boolean" />
    <property name="ispausedmanually" result="true iff paused manually (see also: &lt;set_production_paused /&gt;)" type="boolean" />
    <property name="iswaitingforresources" result="true if the production module is currently waiting for resources to start" type="boolean" />
    <property name="iswaitingforstorage" result="true if the production module is currently waiting for storage space for products" type="boolean" />
    <property name="products" result="All produced wares" type="warelist" />
    <property name="research" result="All research wares currently being worked on by this module" type="warelist" />
    <property name="resources" result="All resource wares" type="warelist" />
    <property name="resources.{$ware}.primary" result="true iff $ware is a primary resource" type="boolean" />
    <property name="resources.{$ware}.secondary" result="true iff $ware is a secondary resource" type="boolean" />
  </datatype>

  <datatype name="storagemodule" type="module">
    <property name="cargo" result="Wares in cargo" type="cargolist" />
    <property name="waretransport" result="List of waretransport types which can be carried by this module" type="list"/>
  </datatype>

  <datatype name="engine" type="destructible">
    <property name="boost.available" result="true iff the booster can be activated right now" type="boolean" />
    <property name="boost.active" result="true iff the booster is currently active" type="boolean" />
    <property name="boost.chargetime" result="Charge time until the boost starts" type="time" />
    <property name="boost.rechargetime" result="Time required to recharge after a boost" type="time" />
    <property name="boost.maxduration" result="The maximum boost duration possible" type="time" />
    <property name="boost.maxspeed" result="Maximum boost speed with present engine set up and conditions (in m/s)" type="length" />
    <property name="travel.available" result="true iff the engine's travel mode can be activated right now" type="boolean" />
    <property name="travel.active" result="true iff the engine is currently traveling" type="boolean" />
    <property name="travel.chargetime" result="The time in seconds until travel mode actually starts" type="time" />
    <property name="travel.maxspeed" result="Maximum travel speed with present engine set up and conditions (in m/s)" type="length" />
    <property name="travel.iscoasting" result="true iff the engine is currently coasting after turning off travel mode" type="boolean" />
  </datatype>

  <datatype name="scanner" type="destructible">
  </datatype>

  <datatype name="crate" type="destructible">
    <property name="money" result="Contained money" type="money" />
  </datatype>

  <datatype name="controlpanel" type="destructible">
    <property name="type" result="Control panel type" type="controlpaneltype" />
    <property name="requireditems" result="Required items for hacking" type="wareamountlist" />
  </datatype>

  <datatype name="signalleak" type="component">
    <property name="type" result="Signal leak type" type="signalleaktype" />
    <property name="islocked" result="Is the signal leak locked" type="boolean" />
  </datatype>

  <datatype name="room" type="component">
    <property name="type" result="Room type" type="roomtype"/>
    <property name="islocked" result="Is the room locked" type="boolean" />
    <property name="isprivate" result="Is the room in a dynamic interior which is set to be private. If true, contained NPC slots can only be found by directly querying the room" type="boolean" />
    <property name="iswalkable" result="Is the room walkable, i.e. accessible to the player and NPCs? This can be false e.g. for docking bays in space or in internal storage" type="boolean" />
    <property name="dockarea" result="The dock area this room is a part of" type="dockarea" />
    <property name="buildmodule" result="The build module this room is a part of" type="buildmodule" />
    <property name="walkablemodule" result="The walkable module (dock area or build module) this room is a part of" type="walkablemodule" />
    <property name="dynamicinterior" result="The dynamic interior this room is a part of" type="navcontext" />
    <property name="actors" result="List of actors in the room" type="list" />
    <property name="numfreeactorslots" result="Number of free actor slots in the room" type="integer" />
    <property name="freemissionactorslot" result="true iff there is a free mission actor slot in the room" type="boolean" />
    <property name="slotcontext" result="The component which contains entity slots related to this room. For virtual rooms, it will be the controllable otherwise the room itself" type="component" />
    <property name="ischairslot.{$componentslot}" result="True if $componentslot is a NPC position slot within this room and related to a chair" type="boolean"/>
    <property name="chairapproachslot.{$componentslot}" result="The approach slot of a NPC position slot related to a chair in this room" type="componentslot"/>
    <property name="chairbaseslot.{$componentslot}" result="The base chair slot of a NPC position slot related to a chair in this room. Used as a static anchor slot for the chair and can be used as a NPC waypoint." type="componentslot"/>
    <property name="controlposition.{$controlposition}.exists" result="True if the specified control position exists" type="boolean"/>
    <property name="controlposition.{$controlposition}.roomslot" result="Slot which entities inhabit when working at the specified control position" type="componentslot"/>
    <property name="controlposition.{$controlposition}.entity" result="Entity currently working at the specified control position" type="entity"/>
    <property name="controlpositions.list" result="List of component slots which are control positions" type="list"/>
    <property name="hascontrolpanel.{$controlpaneltype}" result="True if this room has a control panel of the specified type" type="boolean" />
  </datatype>

  <datatype name="dockingbay" type="room">
    <property name="assignedship" result="The ship currently assigned to this dock" type="ship" />
    <property name="pier" result="The pier module containing this dock" type="pier" />
    <property name="maxoffset.{$sizetag}.position" result="Position range away from the launchpos in which a ship must be to land" type="position" />
    <property name="maxoffset.{$sizetag}.rotation" result="Rotation range away from the launchpos in which a ship must be to land" type="rotation" />
    <property name="docksize" result="Tag list of supported dock sizes" type="list" />
    <property name="docked" result="List of docked ships" type="list" />
    <property name="external" result="true iff this is an external dockingbay (= ship visible while docked)" type="boolean" />
    <property name="shipstorage.capacity" result="Number of ships in total that can fit in this docking bay" type="integer"/>
    <property name="shipstorage.free" result="Number of ships that can currently fit in this docking bay" type="integer"/>
    <property name="isstorage" result="true if this is an internal storage bay" type="boolean"/>
    <property name="isdockingallowed" result="true if this is not exclusively for undocking" type="boolean"/>
    <property name="isundockingallowed" result="true if this is not exclusively for docking" type="boolean"/>
    <property name="dockslot" result="Slot on docking bay to which ship connects when docked" type="componentslot" />
    <property name="todockpos" result="Position on docking bay to which ship flys in order to dock" type="position" />
    <property name="launchpos" result="Position on docking bay from which ship can safely return to normal flight" type="position" />
    <property name="dockstate" result="The dock's current state" type="dockstate" />
    <property name="isbuildingallowed" result="true if building is allowed at this dock" type="boolean" />
    <property name="istradingallowed" result="true if trading is allowed at this dock" type="boolean" />
    <property name="isplayeronly" result="true if this dock is exclusively used for the player" type="boolean" />
    <property name="isventureronly" result="true if this dock is exclusively used for venturers" type="boolean" />
    <property name="ventureplatform" result="The venture platform with which this docking bay is associated" type="ventureplatform" />
  </datatype>

  <datatype name="walkablemodule" type="module">
    <property name="hasentrypos" result="true iff position for dock area entry is defined" type="boolean" />
    <property name="entrypos" result="Dock area entry position" type="position" />
    <property name="hasexitpos" result="true iff position for dock area exit is defined" type="boolean" />
    <property name="exitpos" result="Dock area exit position" type="position" />
    <property name="numdocks.{$docksize}" result="Number of connected dockingbays supporting the specified docksize" type="integer" />
  </datatype>

  <datatype name="dockarea" type="walkablemodule">
    <property name="isventuremodule" result="true if this module is for use with venture platforms" type="boolean" />
    <property name="ventureplatform" result="The venture platform with which this docking bay is associated" type="ventureplatform" />
  </datatype>

  <datatype name="space" type="component">
    <property name="economy" result="Economy value for this space" type="float" />
    <property name="security" result="Security value for this space" type="float" />
    <property name="sunlight" result="Sunlight value for this space" type="largefloat" />
    <property name="god" result="God entries allowed for this space" type="boolean" />
    <property name="jobs" result="Job entries allowed for this space" type="boolean" />
    <property name="factionlogic" result="Faction logic allowed for this space" type="boolean" />
  </datatype>

  <datatype name="galaxy" type="space" />

  <datatype name="cluster" type="space">
    <property name="isnormalcluster" result="true iff normal cluster (not presentation cluster, not venturer cluster)" type="boolean" />
    <property name="ispresentation" result="true iff cluster is used for presentation scenes e.g. cutscenes" type="boolean" />
    <property name="systemid" result="the system ID of the cluster, used to identify which star system the cluster belongs to. This property is 0 if the cluster is the only cluster in the system" type="integer" />
    <property name="hashazardousregionat.{$position}" result="Whether the given cluster position is inside a hazardous region" type="boolean" />
  </datatype>

  <datatype name="sector" type="space">
    <property name="averagedistancetolockbox" result="Average distance to a lockbox from any point in this sector. (-1m if not possible to get a lockbox in this sector)" type="length" />
    <property name="iscontested" result="True iff there are two or more factions currently vying for ownership of the sector" type="boolean" />
    <property name="iscontestedby.{$faction}" result="True iff sector is contested by specified faction" type="boolean" />
    <property name="contestingfactions" result="List of factions contesting this sector" type="list" />
    <property name="hashazardousregion" result="True if the sector has a hazardous region." type="boolean" />
    <property name="hashazardousregionat.{$position}" result="Whether the given sector position is inside a hazardous region" type="boolean" />
    <property name="policefaction" result="Police faction for this sector, which is the police faction of the sector owner (may be null)" type="faction" />
    <property name="typicallockboxmacro" result="Macro of a lockbox typically found in this sector" type="macro" />
    <property name="coreposition" result="The center position of the area considered the core of the sector, in sector coordinates" type="position"/>
    <property name="coresize" result="The diameter of the area considered the core of the sector" type="length"/>
  </datatype>

  <datatype name="zone" type="space">
    <property name="adjacentzones" result="List of adjacent zones" type="list" />
    <property name="haspriority" result="true iff zone has highest priority in its area. false for highways" type="boolean" />
    <property name="policefaction" result="Police faction for this zone, which is the police faction of the zone owner (may be null)" type="faction" />
    <property name="istempzone" result="true iff temporary zone" type="boolean" />
    <property name="isnormalzone" result="true iff normal zone (not temporary, not gate zone and not highway)" type="boolean" />
    <property name="size" result="Zone size (edge length)" type="length" />
    <property name="hashazardousregionat.{$position}" result="Whether the given zone position is inside a hazardous region" type="boolean" />
  </datatype>

  <datatype name="highway" type="zone">
    <property name="islocalhighway" result="true iff local highway" type="boolean" />
    <property name="issuperhighway" result="true iff super highway" type="boolean" />
    <property name="origin" result="Highway origin zone" type="zone" />
    <property name="destination" result="Highway destination zone" type="zone" />
    <property name="junctions" result="List of zones along a highway" type="list"/>
    <property name="entry" result="Highway entry gate" type="highwayentrygate" />
    <property name="exit" result="Highway exit gate" type="highwayexitgate" />
    <property name="entryjumpgate" result="Jumpgate which leads into this highway" type="gate" />
    <property name="exitjumpgate" result="Jumpgate which this highway leads into" type="gate" />
    <property name="closestpointtoplayer" result="Closest highway point to player in highway coordinates (x=y=0, z-coord range 0-1)" type="position" />
  </datatype>

  <datatype name="region" type="component" />

  <datatype name="entity" type="component">
    <property name="customhandler" result="true iff the entity has a custom conversation handler" type="boolean" />
    <property name="type" result="Entity type" type="entitytype" />
    <property name="typename" result="Entity type name" type="string" />
    <property name="controlpost" result="Entity's current control post" type="controlpost" />
    <property name="role" result="Entity's current role" type="entityrole" />
    <property name="titleoverride" result="Entity's title override" type="string" />
    <property name="iconoverride" result="Entity's icon override" type="string" />
    <property name="occupationname" result="Entity's occupation name" type="string" />
    <property name="icon" result="Entity's icon ID" type="string" />
    <property name="race" result="The entity's race" type="race" />
    <property name="page" result="Voice text page ID" type="integer" />
    <property name="isfemale" result="Is entity female" type="boolean" />
    <property name="isavatar" result="Is entity an avatar of another" type="boolean" />
    <property name="iscommable" result="Can communication be initiated with this entity" type="boolean" />
    <property name="ismissionactor" result="Is a mission actor" type="boolean" />
    <property name="isremotecommable" result="Is remote commable" type="boolean" />
    <property name="iscontrolentity" result="Is a control entity" type="boolean" />
    <property name="isintransit" result="Is the entity in transit to a location?" type="boolean" />
    <property name="isbusy" result="Is the entity flagged as busy?" type="boolean" />
    <property name="istransferscheduled" result="Is a crew transfer order scheduled for the entity?" type="boolean" />
    <property name="istemporary" result="Is the entity temporary?" type="boolean"/>
    <property name="ishidden" result="Is the entity hidden?" type="boolean"/>
    <property name="roomslot" result="The slot assigned for this entity. The entity may not be at this offset but in-transit to it. (component may be a room or object)" type="componentslot"/>
    <property name="iswalking" result="Is the NPC currently walking" type="boolean" />
    <property name="slowwalkspeed" result="Defined slow walk speed of this entity" type="float" />
    <property name="walkspeed" result="Defined walk speed of this entity" type="float" />
    <property name="runspeed" result="Defined run speed of this entity" type="float" />
    <property name="isspeaking" result="Is the entity currently speaking?" type="boolean" />
    <property name="isinspeakrange" result="Is the entity close enough to the player to speak directly without using comms?" type="boolean" />
    <property name="isinspeakrange.{$entity}" result="Is the entity close enough to the supplied recipient entity to speak directly without using comms?" type="boolean" />
    <property name="experienceprogress" result="Boarding experience progress" type="integer" />
    <property name="neededexperience" result="Needed boarding experience for next level" type="integer" />
    <property name="skill.{$skilltype}" result="Skill value between 0 and 15 of the supplied skill type" type="integer" />
    <property name="skill.&lt;skillname&gt;" result="Shortcut for skill.{skilltype.&lt;skillname&gt;}" type="integer" />
    <property name="combinedskill" result="Combined skill value between 0 and 100, based on weighted skills that are relevant for the entity's control post" type="integer" />
    <property name="potentialskill.{$entityrole}" result="Potential combined skill value between 0 and 100, based on weighted skills that are relevant for the role" type="integer" />
    <property name="potentialskill.{$controlpost}" result="Potential combined skill value between 0 and 100, based on weighted skills that are relevant for the control post" type="integer" />
    <property name="controlled" result="Object controlled by the entity" type="controllable" />
    <property name="assignedcontrolled" result="Object assigned to be controlled by the entity" type="controllable" />
    <property name="dockarea" result="The dock area this entity is currently on" type="dockarea" />
    <property name="buildmodule" result="The build module this entity is currently on" type="buildmodule" />
    <property name="walkablemodule" result="The walkable module (dock area or build module) this entity is currently on" type="walkablemodule" />
    <property name="inventory" result="Wares currently in entity's inventory" type="wareamountlist" />
    <property name="stock" result="Wares in entity's stock list" type="warelist" />
    <property name="cancraft.{$ware}" result="Can craft inventory ware" type="boolean" />
    <property name="command.value" result="Script command that the entity is executing" type="command" />
    <property name="command.param" result="Primary parameter of the current script command" />
    <property name="command.param2" result="Secondary parameter of the current script command" />
    <property name="commandaction.value" result="Script command action that the entity is executing" type="commandaction" />
    <property name="commandaction.param" result="Primary parameter of the current script command action" />
    <property name="$&lt;variable&gt;" result="Value of variable on entity's blackboard" />
    <property name="shouldinformplayer" result="true iff entity is on a player-owned ship that either has the player.occupiedship or a ship without a pilot as commander" type="boolean" />
    <property name="shouldwarnplayer" result="true iff entity is on a player-owned ship that either has the player.occupiedship or a ship without a pilot as commander or has no commander at all" type="boolean" />
    <property name="istradecomputer" result="Is this entity assigned as a trade computer to process trade operations on the player-controlled ship?" type="boolean" />
    <property name="isshadyguy" result="Is this entity assigned as a black marketeer to handle extralegal business?" type="boolean" />
    <property name="tradesvisible" result="true iff the entity's trades are visible to the player" type="boolean" />
  </datatype>

  <datatype name="nonplayer" type="entity"/>

  <datatype name="npc" type="nonplayer">
    <property name="npctemplate" result="The template for this NPC which can be used to check against the list of people on an object" type="npctemplate" />
    <property name="targetslot" result="The slot currently set as the next target for a moving NPC. The NPC may not be at this offset but in-transit to it. (component may be a room or object)" type="componentslot"/>
    <property name="currentchair" result="The chair slot the NPC is currently inhabiting. Not set when moving towards the chair. (component may be a room or object)" type="componentslot"/>
    <property name="hasclothingmod" result="Whether the NPC has any clothing mod installed" type="boolean" />
    <property name="hasclothingmod.{$ware}" result="Whether the NPC has a clothing mod based on the specified clothing mod ware installed" type="boolean" />
    <property name="hastool" result="Whether the NPC currently carries a tool" type="boolean" />
    <property name="isinconversation" result="Is the NPC currently involved in a player conversation?" type="boolean" />
  </datatype>

  <datatype name="weapon" type="destructible">
    <property name="ammo.capacity" result="Amount of ammostorage this weapon adds to its destructible" type="integer" />
    <property name="ammo.macro" result="Macro of the used ammo" type="macro" />
    <property name="ammo.ware" result="Ware that can provide the used ammomacro" type="ware" />
    <property name="ammo.iscompatible.{$macro}" result="true iff the supplied ammo macro (missile) is compatible with this weapon" type="boolean" />
    <property name="isreadytofire" result="Is ready to fire (weapon active, turret deployed)" type="boolean" />
    <property name="mode" result="mode this weapon/turret is operating in" type="weaponmode" />
    <property name="isrepairing" result="Whether the weapon is for repairing" type="boolean" />
    <property name="ismining" result="Whether the weapon is for mining" type="boolean" />
    <property name="iscombat" result="Whether the weapon is neither for repairing nor for mining" type="boolean" />
  </datatype>

  <datatype name="turret" type="weapon" />

  <!-- Universe-related types -->

  <datatype name="componentslot">
    <property name="component" result="The component part of the componentslot" type="component" />
    <property name="name" result="Slot connection name" type="string"/>
    <property name="tags" result="List of tags defined on the connection" type="list"/>
    <property name="floortags" result="List of walking relevant tags for the floor at this component slot (requires the component to have physics)" type="list"/>
    <property name="group" result="The group defined on the connection" type="tag" />
    <property name="offset" result="The offset position of the connection (relative to the slot's component)" type="position" />
    <property name="relativeposition.{$component}" result="The offset position of the connection relative to $component" type="position" />
    <property name="rotation" result="The rotation of the connection (relative to the slot's component)" type="rotation" />
    <property name="relativerotation.{$component}" result="The rotation of the connection relative to $component" type="rotation" />
    <property name="staticoffset" result="The static offset position of the connection (ignoring offset changes due to animation)" type="position" />
    <property name="staticrotation" result="The static rotation of the connection (ignoring offset changes due to animation)" type="rotation" />
    <property name="controlposition" result="Control position type if this slot is a control position for an entity, otherwise null" type="controlposition"/>
    <property name="distanceto.{$component}" result="Distance from this componentslot's offset to $component" type="length" />
    <property name="distanceto.{$componentslot}" result="Distance from this componentslot's offset to the component and connection offset of $componentslot" type="length" />
    <property name="distanceto.[$component, $position]" result="Distance from this componentslot's offset to the $position relative to $component" type="length" />
  </datatype>

  <datatype name="macroslot">
    <property name="macro" result="The macro part of the macroslot" type="macro" />
    <property name="name" result="Slot connection name" type="string"/>
    <property name="tags" result="List of tags defined on the connection" type="list"/>
    <property name="offset" result="The offset position of the connection relative to its parent connect" type="position" />
    <property name="rotation" result="The rotation of the connection relative to its parent connect" type="rotation" />
    <property name="staticoffset" result="The static offset position of the connection relative to the macro (taking into account parent connection offsets)" type="position" />
    <property name="staticrotation" result="The static rotation of the connection relative to the macro (taking into account parent connection offsets)" type="rotation" />
  </datatype>

  <datatype name="trade">
    <property name="exists" result="true iff trade exists" type="boolean" />
    <property name="available" result="true iff trade exists and is available" type="boolean" />
    <property name="buyer" result="The buyer container if defined" type="container" />
    <property name="seller" result="The seller container if defined" type="container" />
    <property name="owner" result="Owner container (seller or buyer)" type="container" />
    <property name="ware" result="Trade ware" type="ware" />
    <property name="ispricelocked.{$container}" result="True iff the price of the trade ware is locked on the trade partner of the given container" type="boolean" />
    <property name="amount" result="Trade amount" type="integer" />
    <property name="desiredamount" result="Trade desired amount (really wanted amount, which may exceed affordable amount)" type="integer" />
    <property name="offeramount" result="Trade amount plus all the reserved amounts" type="integer" />
    <property name="offeramount.{$object}" result="Trade amount plus the reserved amount for this object" type="integer" />
    <property name="minamount" result="Minimum trade amount" type="integer" />
    <property name="transferredamount" result="Amount of wares that has been transferred for this trade" type="integer" />
    <property name="destroyedamount" result="Amount of wares that has been destroyed for this trade" type="integer" />
    <property name="volume" result="Total volume of trade amount" type="integer" />
    <property name="minvolume" result="Total volume of minimum trade amount" type="integer" />
    <property name="price" result="Total price of trade amount" type="money" />
    <property name="unitprice" result="Price for a single unit" type="money" />
    <property name="minprice" result="Total price of minimum trade amount" type="money" />
    <property name="relativeprice" result="Current price between min and max as a value from -1.0 to +1.0" type="float" />
    <property name="quantityfactor" result="Current price/average price ratio" type="float" />
    <property name="hasdynamicprice" result="True if the trade does not have a fixed price (such as when the player sets a price at a player-owned station)" type="boolean" />
    <property name="stocklevel" result="Ratio trade amount / target amount ratio (target amount of seller or buyer - for selloffers/buyoffers respectively. (see container.cargo.{$ware}.target)" type="float" />
    <property name="bundle" result="true iff the trade is flagged for converting ammo/units into wares on transfer" type="boolean" />
    <property name="unbundle" result="true iff the trade is flagged for converting a ware into ammo/units on transfer" type="boolean" />
    <property name="ismission" result="true iff the trade is flagged as a mission trade" type="boolean" />
    <property name="buyfree" result="true iff the trade is flagged so that the buyer does not actually spend any money (seller would still receive money, unless $trade.sellfree is also true)" type="boolean" />
    <property name="buyfree.{$object}" result="true iff the trade will be free for this particular buyer-object (seller would still receive money, unless $trade.sellfree is also true)" type="boolean" />
    <property name="sellfree" result="true iff the trade is flagged so that the seller does not actually receive any money (buyer would still have to spend money, unless $trade.buyfree is also true)" type="boolean" />
    <property name="sellfree.{$object}" result="true iff this particular seller-object would not actually receive any money (buyer would still have to spend money, unless $trade.buyfree is also true)" type="boolean" />
    <property name="iswareexchange" result="true iff the trade is used to facilitate ware exchange or crew exchange" type="boolean" />
    <property name="isshiptoship" result="true iff both trade partners are ships with corresponding active/passive trade orders (only supported for ware/crew exchange trades)" type="boolean" />
    <property name="iscrewexchange" result="true iff the trade is used to facilitate ship-to-ship crew exchange" type="boolean" />
    <property name="isbuyerpassive" result="true iff the buyer of this ship-to-ship ware/crew exchange is flagged as being the passive party (stationary)" type="boolean" />
    <property name="issellerpassive" result="true iff the seller of this ship-to-ship ware/crew exchange is flagged as being the passive party (stationary)" type="boolean" />
    <property name="ispassive.{$container}" result="true iff the trade is used for ship-to-ship ware/crew exchange and the supplied container is the passive party (stationary)" type="boolean" />
    <property name="exchangepartner.{$container}" result="The exchange partner for this trade deal. Used for trade orders to specify who is trading with whom when the trade deal only has buyer OR seller defined. Will return the 'other' container if $container is part of the trade." type="container" />
    <property name="restriction.faction" result="Faction that a trade is restricted to (null if unrestricted)" type="faction" />
    <property name="restriction.inverted" result="true iff the faction restriction is inverted and the trade is available to everyone except the restriction.faction" type="boolean" />
  </datatype>

  <datatype name="build">
    <property name="exists" result="true iff build order exists" type="boolean" />
    <property name="isshipbuild" result="true if build task is to build a ship" type="boolean"/>
    <property name="isexpansion" result="true if build task is to expand an existing station" type="boolean"/>
    <property name="isupgrade" result="true if build task is to upgrade an existing ship" type="boolean"/>
    <property name="isrestock" result="true if build task is to restock an existing ship" type="boolean"/>
    <property name="isshipmodification" result="true if build task is either to restock or upgrade an existing ship" type="boolean"/>
    <property name="mayrequireconstructionvessel" result="true if build task may require a construction vessel at some stage, based on the type of build and the module set" type="boolean"/>
    <property name="object" result="the object assigned to build this task" type="container"/>
    <property name="buildmodule" result="the build module assigned to build this task" type="buildmodule"/>
    <property name="buildprocessor" result="the build processor assigned to build this task" type="buildprocessor"/>
    <property name="buildobject" result="the object being built. either 'base' or 'construction', whichever is valid" type="container"/>
    <property name="base" result="pre-existing object to be built via this build order (can not be valid alongside 'construction')" type="container"/>
    <property name="construction" result="newly created object, constructed by this build order (can not be valid alongside 'base')" type="container"/>
    <property name="macro" result="macro to be built" type="macro" />
    <property name="faction" result="faction of the built object" type="faction"/>
    <property name="loadout" result="loadout ID of the build order. null if custom or omitted" type="string"/>
    <property name="constructionsequence" result="construction sequence for the build (or null if none exists)" type="constructionsequence"/>
    <property name="consumables" result="table of consumable amounts. macro is the key of the table" type="table"/>
    <property name="price" result="set price of the build order when it was added" type="money"/>
    <property name="zone" result="space in which the build will take place" type="zone"/>
    <property name="position" result="position of the build in 'zone'" type="position" />
    <property name="rotation" result="rotation of the build in 'zone'" type="rotation" />
  </datatype>

  <datatype name="operation">
    <property name="exists" result="true iff the operation exists" type="boolean" />
    <property name="boardee" result="target of a boarding operation (only valid for boarding operations)" type="defensible"/>
    <property name="attackers" result="attackers of a boarding operation (only valid for boarding operations)" type="list"/>
    <property name="allmarinesdispatched" result="Have all marines set to join this this boarding operation been dispatched? (true if no marines have been assigned from any attacker)" type="boolean"/>
    <property name="marines.infiltrating.list" result="List of infiltrating marines taking part in the operation as NPC templates" type="list"/>
    <property name="marines.infiltrating.count" result="Number of infiltrating marines taking part in the operation" type="integer"/>
    <property name="marines.infiltrating.combinedskill" result="Combined skill value (between 0 and 100 per individual) of all infiltrating marines" type="integer" />
    <property name="marines.infiltrating.{$npctemplate}" result="NPC template entry of an infiltrating marine taking part in this operation (raw npctemplates can not provide information without the operation as context - see npctemplateentry)" type="npctemplateentry"/>
    <property name="marines.fighting.list" result="List of fighting marines taking part in the operation as NPC templates" type="list"/>
    <property name="marines.fighting.count" result="Number of fighting marines taking part in the operation" type="integer"/>
    <property name="marines.fighting.combinedskill" result="Combined skill value (between 0 and 100 per individual) of all fighting marines" type="integer" />
    <property name="marines.fighting.{$npctemplate}" result="NPC template entry of a fighting marine taking part in this operation (raw npctemplates can not provide information without the operation as context - see npctemplateentry)" type="npctemplateentry"/>
    <property name="marines.killed.list" result="List of killed marines which were taking part in the operation as NPC templates" type="list"/>
    <property name="marines.killed.count" result="Number of killed marines which were taking part in the operation" type="integer"/>
    <property name="marines.killed.combinedskill" result="Combined skill value (between 0 and 100 per individual) of all killed marines" type="integer" />
    <property name="marines.killed.{$npctemplate}" result="NPC template entry of a killed marine which was taking part in this operation (raw npctemplates can not provide information without the operation as context - see npctemplateentry)" type="npctemplateentry"/>
    <property name="boardingphase" result="current phase of the boarding operation (only valid for boarding operations)" type="boardingphase"/>
    <property name="boardingapproachthreshold" result="threshold value of the boarding operation in regards to having the boarding pods launch and approach the target (only valid for boarding operations)" type="integer"/>
    <property name="boardinginsertionthreshold" result="threshold value of the boarding operation in regards to attempting to insert marines into the target (only valid for boarding operations)" type="integer"/>
  </datatype>

  <datatype name="licence">
    <property name="exists" result="true iff licence exists" type="boolean" />
    <property name="name" result="Licence name" type="string" />
    <property name="rawname" result="Raw licence name, as text entry reference" type="string" />
    <property name="description" result="Licence description" type="string" />
    <property name="minrelation" result="Min relation to acquire this licence" type="float" />
    <property name="precursor" result="Licence type to acquire this licence" type="string" />
    <property name="price" result="Licence price" type="money" />
    <property name="issellable" result="true iff licence is sellable from traders" type="boolean" />
    <property name="faction" result="Faction" type="faction" />
    <property name="type" result="Licence type" type="string" />
  </datatype>

  <datatype name="group">
    <property name="count" result="Number of components in the group" type="integer" />
    <property name="list" result="List of all components in the group" type="list" />
    <property name="{$numeric}" result="The $numeric-th component in the group (1-based)" />
    <property name="random" result="A random component from the group (the group must be non-empty)" />
    <property name="indexof.{$component}" result="Index of $component in the group (1-based), or 0 if not present" type="integer" />
  </datatype>

  <datatype name="order">
    <property name="exists" result="true iff order exists" type="boolean" />
    <property name="id" result="ID" type="string" />
    <property name="name" result="Name" type="string" />
    <property name="rawname" result="Raw name, as text entry reference" type="string" />
    <property name="description" result="Description" type="string" />
    <property name="object" result="The object to which this order is given" type="object" />
    <property name="state" result="State" type="orderstate" />
    <property name="canplayercancel" result="true iff order can be cancelled by the player (order is either in a non-critical state or supports being cancelled by specific player actions while in the critical state)" type="boolean" />
    <property name="isinfinite" result="true iff order is infinite" type="boolean" />
    <property name="isoverride" result="true iff order is an override order" type="boolean"/>
    <property name="isrunning" result="true iff order is currently running (state is either started, critical or finish)" type="boolean" />
    <property name="isparameditable.&lt;param&gt;" result="true iff order parameter is currently editable (see &lt;edit_order_param&gt; for more information)" type="boolean" />
    <property name="istradecomputer" result="true iff order is a trade computer order (to be processed by a trade computer on player-controlled ship)" type="boolean" />
    <property name="trade" result="Trade that is associated with this order, or null" type="trade" />
    <property name="build" result="Build task that is associated with this order, or null" type="build" />
    <property name="operation" result="Operation that is associated with this order, or null" type="operation" />
    <property name="$&lt;param&gt;" result="Value of order parameter" />
  </datatype>

  <datatype name="constructionsequence">
    <property name="count" result="Number of entries in construction sequence" type="integer" />
    <property name="{$numeric}" result="The $numeric-th construction plan entry in this sequence" type="constructionplanentrydata" />
    <property name="{$constructionplanentryid}" result="The matching construction plan entry in this sequence" type="constructionplanentrydata" />
  </datatype>

  <datatype name="constructionplanentryid">
  </datatype>

  <datatype name="constructionplanentrydata" pseudo="true">
    <!-- constructionplanentrydata is not an actual datatype, but listed here like one for ease of use -->
    <property name="exists" result="true iff the construction plan entry exists in the construction sequence" type="boolean"/>
    <property name="id" result="The construction plan entry" type="constructionplanentryid" />
    <property name="macro" result="The macro of the construction plan entry" type="macro" />
    <property name="loadout" result="The upgrade loadout of the construction plan entry" type="loadout" />
  </datatype>

  <datatype name="loadout">
    <property name="wares" result="All equipment wares in the loadout" type="warelist" />
  </datatype>

  <!-- Basic reference types -->

  <datatype name="list">
    <property name="count" result="Number of elements in the list" type="integer" />
    <property name="clone" result="A shallow copy of the list" type="list" />
    <property name="{$numeric}" result="The $numeric-th element in the list (1-based)" />
    <property name="last" result="The last element in the list (the list must be non-empty)" />
    <property name="random" result="A random element from the list (the list must be non-empty)" />
    <property name="indexof.{$value}" result="Index of first occurrence of $value in the list (1-based), or 0 if not found" type="integer" />
    <property name="min" result="The minimum value in the list (all elements must be numeric), or null if the list is empty" type="numeric" />
    <property name="max" result="The maximum value in the list (all elements must be numeric), or null if the list is empty" type="numeric" />
    <property name="average" result="The average of all list elements (all elements must be numeric), or null if the list is empty" type="numeric" />
  </datatype>

  <datatype name="table">
    <property name="clone" result="A shallow copy of the table" type="table" />
    <property name="keys.count" result="Number of keys in the table" type="integer" />
    <property name="keys.list" result="List of all keys in the table (reliably sorted if all keys are numeric, otherwise order can change between savegames)" type="list" />
    <property name="keys.sorted" result="List of all keys in the table, sorted by their associated values (requires all values to be numeric)" type="list" />
    <property name="keys.random" result="A random key in the table (the table must be non-empty)" />
    <property name="keys.{$numeric}" result="The $numeric-th key in the table (1-based), note that this lookup can be inefficient and order can change between savegames" />
    <property name="{$key}" result="Value associated with the table key (type is ignored for numeric keys, e.g. 50s and 50m are treated as the same key)" />
    <property name="$&lt;keyname&gt;" result="Value associated with the table key (shortcut for {'$&lt;keyname&gt;'}, all string keys must begin with '$')" />
  </datatype>

  <datatype name="string">
    <property name="[$arg1, $arg2, ...]" result="Creates a new string by replacing %1, %2, ... in the string with corresponding list elements" type="string" />
  </datatype>

  <datatype name="position">
    <property name="x" result="X coordinate" type="length" />
    <property name="y" result="Y coordinate" type="length" />
    <property name="z" result="Z coordinate" type="length" />
    <property name="distanceto.{$position}" result="Distance to the provided position (assuming they are in the same space)" type="length" />
  </datatype>

  <datatype name="vector">
    <property name="x" result="X coordinate" type="length" />
    <property name="y" result="Y coordinate" type="length" />
    <property name="z" result="Z coordinate" type="length" />
    <property name="length" result="Estimated length of the vector" type="length" />
    <property name="distanceto.{$vector}" result="Distance to the provided vector" type="length" />
  </datatype>

  <datatype name="rotation">
    <property name="yaw" result="Yaw angle" type="angle" />
    <property name="pitch" result="Pitch angle" type="angle" />
    <property name="roll" result="Roll angle" type="angle" />
    <property name="inverse" result="Inverse rotation" type="rotation" />
  </datatype>

  <!-- DB datatypes -->

  <datatype name="faction" type="dbdata">
    <property name="id" result="ID" type="string" />
    <property name="name" result="Name" type="string" />
    <property name="rawname" result="Raw name, as text entry reference" type="string" />
    <property name="knownname" result="Name, ignoring the unknown-status" type="string" />
    <property name="description" result="Description" type="string" />
    <property name="primaryrace" result="Primary race of faction" type="race" />
    <property name="isactive" result="true if the faction is currently active" type="boolean" />
    <property name="knowntoplayer" result="true if the faction is known to the player" type="boolean" />
    <property name="policefaction" result="Police faction for this faction (possibly the same faction, can also be null)" type="faction" />
    <property name="relation.&lt;relationrange&gt;.min" result="lowest relation value in the specified range" type="float" />
    <property name="relation.&lt;relationrange&gt;.mid" result="middle relation value in the specified range" type="float" />
    <property name="relation.&lt;relationrange&gt;.max" result="highest relation value in the specified range" type="float" />
    <property name="relation.{$numeric}.uivalue" result="UI representation value (-30 to +30) of the specified relation value for this faction" type="integer" />
    <property name="hasrelation.&lt;relationrange&gt;.{$component}" result="true iff the relation to owner of $component is in specified range" type="boolean" />
    <property name="hasrelation.&lt;relationrange&gt;.{$faction}" result="true iff the relation to other faction is in specified range" type="boolean" />
    <property name="relationto.{$component}" result="Relation to owner of $component" type="float" />
    <property name="relationto.{$faction}" result="Relation to other faction" type="float" />
    <property name="mayattack.{$component}" result="true if this faction has a kill relation towards other component or has a killmilitary relation and the other component has the purpose 'fight'" type="boolean"/>
    <property name="mayattack.{$faction}" result="true if this faction has a kill relation towards the other faction"/>
    <property name="haslicence.{$licence}" result="true iff faction has $licence" type="boolean" />
    <property name="haslicence.&lt;licencetype&gt;.{$faction}" result="true iff faction has licence of specified type and faction" type="boolean" />
    <property name="canholdlicence.{$licence}" result="true iff faction is currently allowed to hold $licence, based on minrelation and precursor properties" type="boolean" />
    <property name="canholdlicence.&lt;licencetype&gt;.{$faction}" result="true iff faction is currently allowed to hold licence of specified type and faction, based on minrelation and precursor properties" type="boolean" />
    <property name="licences" result="List of own licences" type="list" />
    <property name="heldlicences" result="List of held licences" type="list" />
    <property name="licence.&lt;licencetype&gt;" result="Licence value of the specified type for the faction. (May result in licence which fails .exists)" type="licence"/>
    <property name="mood.&lt;moodtype&gt;" result="Current mood level of the specified mood type" type="moodlevel"/>
    <property name="defaultmood.&lt;moodtype&gt;" result="Default mood level of the specified mood type" type="moodlevel"/>
    <property name="isaggressive" result="true iff this faction is aggressive" type="boolean"/>
    <property name="iseconomic" result="true iff this faction has a focus on economics" type="boolean"/>
    <property name="ispolice" result="true iff this faction can act as a law enforcement faction" type="boolean"/>
    <property name="isprotective" result="true iff this faction will intervene if 3rd party units are attacked nearby" type="boolean"/>
    <property name="money" result="Money in the faction's account" type="money" />
    <property name="hasownaccount" result="true iff faction has its own account (uses dummy account with large random sum otherwise)" type="boolean" />
    <property name="willclaimspace" result="true iff this faction will claim/contest space if it owns a station which can grant ownership" type="boolean"/>
    <property name="representative" result="Given faction representative or null" type="entity" />
    <property name="headquarters" result="Given faction's headquarters station or null" type="station" />
  </datatype>

  <datatype name="race" type="dbdata">
    <property name="id" result="ID" type="string" />
    <property name="name" result="Name" type="string" />
    <property name="rawname" result="Raw name, as text entry reference" type="string" />
    <property name="description" result="Description" type="string" />
    <property name="workforce.resources" result="Resoures needed for the workforce of this race to prosper" type="wareamountlist" />
  </datatype>

  <datatype name="ware" type="dbdata">
    <property name="id" result="ID" type="string" />
    <property name="name" result="Name" type="string" />
    <property name="rawname" result="Raw name, as text entry reference" type="string" />
    <property name="description" result="Description" type="string" />
    <property name="icon" result="Icon ID" type="string" />
    <property name="minprice" result="Minimum price" type="money" />
    <property name="averageprice" result="Average price" type="money" />
    <property name="maxprice" result="Maximum price" type="money" />
    <property name="pricerange" result="Price range" type="money" />
    <property name="volume" result="Volume of this ware" type="integer" />
    <property name="waretransport" result="Transport type of this ware" type="waretransport"/>
    <property name="transporttag" result="Transport type tag of this ware" type="tag"/>
    <property name="buyrestriction.base" result="Base notoriety restriction to buy the ware" type="float" />
    <property name="buyrestriction.{$faction}" result="Notoriety restriction to buy the ware from a faction" type="float" />
    <property name="sellrestriction.base" result="Base notoriety restriction to sell the ware" type="float" />
    <property name="sellrestriction.{$faction}" result="Notoriety restriction to sell the ware to a faction" type="float" />
    <property name="tags" result="List of ware tags" type="list" />
    <property name="isinventory" result="true iff ware is inventory" type="boolean" />
    <property name="isammo" result="true iff ware is an ammo ware" type="boolean" />
    <property name="iscargo" result="true iff ware is normal cargo, i.e. not inventory or an ammo ware" type="boolean" />
    <property name="iscrafting" result="true iff ware is a crafting ware" type="boolean" />
    <property name="isdeployable" result="true iff ware is a deployable" type="boolean" />
    <property name="isvolatile" result="true iff ware is volatile" type="boolean" />
    <property name="isgift" result="true iff ware is a gift" type="boolean" />
    <property name="israre" result="true iff ware is rare" type="boolean" />
    <property name="isdropallowed" result="true iff dropping this ware is allowed" type="boolean" />
    <property name="isresearchable" result="true iff this ware can be researched" type="boolean" />
    <property name="container" result="Container macro for this ware" type="macro" />
    <property name="illegal" result="true iff ware is illegal to any faction" type="boolean" />
    <property name="illegalto.{$faction}.{null}" result="true iff ware is illegal to $faction" type="boolean" />
    <property name="illegalto.{$faction}.{$faction}" result="true iff ware is illegal to first $faction, taking into account licences held by second $faction" type="boolean" />
    <property name="objectmacro" result="Macro of Ware Object (if defined)" type="macro" />
    <property name="objectcount" result="Amount of ware object" type="integer" />
    <property name="products" result="All product wares (all production methods) that this ware is a resource for" type="warelist" />
    <property name="resources" result="All resource wares (default method)" type="wareamountlist" />
    <property name="raceresources.{$race}" result="All resource wares using the provided race' production method (defaults to the default method if the race does not have an overriding method)" type="wareamountlist" />
    <property name="issoftware" result="true iff ware is tagged as software" type="boolean" />
    <property name="softwareversion.base" result="Base version of a software type, e.g. base of software_scannerobjectmk3 is software_scannerobjectmk1" type="ware" />
    <property name="softwareversion.max" result="Highest version of a software type, e.g. software_scannerobjectmk3 is the latest version of software_scannerobjectmk1" type="ware" />
    <property name="softwareversion.next" result="Next higher version of a software type, e.g. software_dockmk1 is followed by software_dockmk2" type="ware" />
    <property name="softwareversion.previous" result="Previous version of a software type, e.g. software_dockmk2 is preceded by software_dockmk1" type="ware" />
    <property name="isweaponmod" result="true iff ware is primary ware for a weapon mod" type="boolean" />
    <property name="isenginemod" result="true iff ware is primary ware for an engine mod" type="boolean" />
    <property name="isshieldmod" result="true iff ware is primary ware for a shield mod" type="boolean" />
    <property name="isshipmod" result="true iff ware is primary ware for a ship mod" type="boolean" />
    <property name="isequipmentmod" result="true iff ware is primary ware for any type of equipment mod" type="boolean" />
    <property name="equipmentmodquality" result="quality level of equipment mod for which this is primary ware, if any" type="boolean" />
    <property name="ispaintmod" result="true iff ware is a paint mod" type="boolean" />
    <property name="paintmodquality" result="quality level of paint mod, if this is ware is a a paint mod" type="boolean" />
    <property name="isclothingmod" result="true iff ware is a clothing mod" type="boolean" />
    <property name="clothingmodquality" result="quality level of clothing mod, if this is ware is a a clothing mod" type="boolean" />
    <property name="research.unlocked" result="true iff this this ware has been researched by the player" type="boolean" />
    <property name="research.precursors" result="Research precursors to research this ware" type="warelist" />
    <property name="research.requiredprecursors" result="Research precursors required to unlock access to ware" type="warelist" />
  </datatype>

  <datatype name="lookuplist" pseudo="true">
    <!-- lookup is not an actual datatype, but listed here like one for ease of use -->
    <property name="count" result="Number of lookup entries" type="integer" />
    <property name="{$index}" result="Lookup entry at index position" />
    <property name="list" result="All lookup entries as a script list" type="list" />
    <property name="random" result="Random lookup entry" />
  </datatype>

  <datatype name="warelist" pseudo="true">
    <!-- wares is not an actual datatype, but listed here like one for ease of use -->
    <property name="list" result="All wares as a script list" type="list" />
    <property name="random" result="Random ware (at least one ware must be present)" type="ware" />
    <property name="count" result="Number of wares" type="integer" />
    <property name="{$numeric}" result="The $numeric-th ware in the ware list (1-based)" />
    <property name="{$ware}.exists" result="true iff $ware is in the ware list" type="boolean" />
  </datatype>

  <datatype name="wareamountlist" pseudo="true">
    <!-- wareamounts is not an actual datatype, but listed here like one for ease of use -->
    <property name="list" result="All wares with non-zero amount as a script list" type="list" />
    <property name="table" result="All wares and amounts with non-zero amount as a script table" type="table" />
    <property name="random" result="Random ware (at least one ware with non-zero amount must be present)" type="ware" />
    <property name="count" result="Number of different wares with non-zero amount" type="integer" />
    <property name="illegal" result="true iff there is an illegal ware" type="boolean" />
    <property name="illegalto.{$faction}" result="true iff there are wares illegal to $faction, taking into account licences held by the ware owner, if applicable" type="boolean" />
    <property name="{$numeric}" result="The $numeric-th ware in the ware-amount list (1-based)" />
    <property name="{$ware}.exists" result="true iff there is a non-zero amount of $ware" type="boolean" />
    <property name="{$ware}.count" result="Number of wares of type $ware" type="integer" />
  </datatype>

  <datatype name="cargolist" type="wareamountlist" pseudo="true">
    <property name="free.all" result="Total free cargo volume remaining, regardless of waretransport type" type="integer" />
    <property name="free.container" result="Total free cargo volume remaining for containers" type="integer" />
    <property name="free.liquid" result="Total free cargo volume remaining for liquids" type="integer" />
    <property name="free.solid" result="Total free cargo volume remaining for solids" type="integer" />
    <property name="free.universal" result="Total free universal cargo volume remaining" type="integer" />
    <property name="capacity.all" result="Total cargo volume available, regardless of waretransport type" type="integer" />
    <property name="capacity.container" result="Total container cargo volume available" type="integer" />
    <property name="capacity.liquid" result="Total liquid cargo volume available" type="integer" />
    <property name="capacity.solid" result="Total solid cargo volume available" type="integer" />
    <property name="capacity.universal" result="Total universal cargo volume available" type="integer" />
    <property name="{$ware}.free" result="Amount of $ware that can be added to the cargo" type="integer" />
    <property name="{$ware}.max" result="Maximum amount of $ware in the cargo (ignoring existing cargo)" type="integer" />
    <property name="tags" result="Compatible ware tags of the container" type="list" />
  </datatype>

  <datatype name="npctemplate">
  </datatype>

  <datatype name="npctemplateentry" pseudo="true">
    <property name="exists" result="true iff NPC template exists" type="boolean" />
    <property name="seed" result="Persistent pseudo-random seed used to generate and identify the NPC" type="largeint" />
    <property name="macro" result="Macro of the NPC" type="macro" />
    <property name="name" result="Name of the NPC" type="string" />
    <property name="race" result="The NPC's race" type="race" />
    <property name="page" result="Voice text page ID" type="integer" />
    <property name="isfemale" result="Is NPC female" type="boolean" />
    <property name="role" result="The NPC's role" type="entityrole"/>
    <property name="ismissionactor" result="Is a mission NPC" type="boolean" />
    <property name="isintransit" result="Is the entity in transit to a location?" type="boolean" />
    <property name="isbusy" result="Is the entity flagged as busy?" type="boolean" />
    <property name="istransferscheduled" result="Is a crew transfer order scheduled for the entity?" type="boolean" />
    <property name="istemporary" result="Is the entity temporary?" type="boolean" />
    <property name="isremotecommable" result="Is NPC remote commable" type="boolean" />
    <property name="customhandler" result="true iff the NPC has a custom conversation handler" type="boolean" />
    <property name="skill.{$skilltype}" result="Skill value between 0 and 15 of the supplied skill type" type="integer" />
    <property name="skill.&lt;skillname&gt;" result="Shortcut for skill.{skilltype.&lt;skillname&gt;}" type="integer" />
    <property name="combinedskill" result="Combined skill value between 0 and 100, based on weighted skills that are relevant for the NPC's role" type="integer" />
    <property name="potentialskill.{$entityrole}" result="Potential combined skill value between 0 and 100, based on weighted skills that are relevant for the role" type="integer" />
    <property name="potentialskill.{$controlpost}" result="Potential combined skill value between 0 and 100, based on weighted skills that are relevant for the control post" type="integer" />
    <property name="tradesvisible" result="true iff the NPC's trades are visible to the player" type="boolean" />
  </datatype>

  <datatype name="macro" type="dbdata">
    <property name="id" result="ID (internal macro name). But instead of comparing macro IDs, it is recommended to use ismacro.{$macro}" type="string" />
    <property name="name" result="Display name" type="string" />
    <property name="rawname" result="Raw display name, as text entry reference" type="string" />
    <property name="description" result="Description" type="string" />
    <property name="extension" result="Source extension id" type="string" />
    <property name="isextensionpersonal" result="true iff the source extension is personal" type="boolean" />
    <property name="class" result="Component class" type="class" />
    <property name="isclass.{$class}" result="true iff the macro is of the given class" type="boolean" />
    <property name="isclass.&lt;classname&gt;" result="Shortcut for isclass.{class.&lt;classname&gt;}" type="boolean" />
    <property name="isclass.{$list}" result="true iff the macro is of one of the classes from the list" type="boolean" />
    <property name="ismacro.{$macro}" result="true iff the macro is the specified macro or derived from it ($macro must originate from a macro.&lt;name&gt; lookup)" type="boolean" />
    <property name="ismacro.&lt;macroname&gt;" result="Shortcut for ismacro.{macro.&lt;macroname&gt;}" type="boolean" />
    <property name="ismacro.{$list}" result="true iff the macro is one of the specified macros or derived from one of them (macros in list must originate from a macro.&lt;name&gt; lookup)" type="boolean" />
    <property name="icon" result="Icon ID (e.g. of missile), or null if not applicable" type="string" />
    <property name="primarypurpose" result="The macro's primary purpose" type="purpose" />
    <property name="purposemacro" result="Contained macro which is considered to have the most important purpose" type="macro" />
    <property name="purposename" result="Suitable name for the macro considered to have the most important purpose" type="string" />
    <property name="docksize" result="Tag of required dock size (ship macros only)" type="tag" />
    <property name="docksizes" result="List of tags of supported dock sizes (dockingbay macros only)" type="list" />
    <property name="numdocks.{$docksize}" result="Number of connected dockingbays supporting the specified docksize (dockarea macros only)" type="integer" />
    <property name="numpierdocks" result="Number of connected capital ship dock locations (pier macros only)" type="integer" />
    <property name="isstorage" result="true iff this is an internal storage bay (dockingbay macros only)" type="boolean"/>
    <property name="ware" result="Ware linked to this macro" type="ware" />
    <property name="isunit" result="true iff the macro is a unit" type="boolean" />
    <property name="isdeployable" result="true iff the macro is a deployable" type="boolean" />
    <property name="islasertower" result="true iff the macro is a lasertower" type="boolean" />
    <property name="unitcategory" result="Unit category this macro belongs to (null if none, only valid for units defined in loadoutrules.xml)" type="unitcategory" />
    <property name="deployablecategory" result="Deployable category this macro belongs to (null if none, only valid for deployables defined in loadoutrules.xml)" type="deployablecategory" />
    <property name="boundingbox.exists" result="Whether this macro's bounding box has non-zero dimensions" type="boolean"/>
    <property name="boundingbox.max" result="Maximum bounds of this macro's bounding box" type="vector"/>
    <property name="boundingbox.center" result="Center position of this macro's bounding box" type="vector"/>
    <property name="workforce.capacity" result="Workforce capacity for given macro" type="integer" />
    <property name="workforce.race" result="Workforce race a given macro supports" type="race" />
    <property name="workforce.optimal" result="Number of workers required for given macro to operate at peak efficiency" type="integer" />
    <property name="workforce.min" result="Number of workers required for given macro to operate" type="integer" />
    <property name="products" result="All produced wares" type="warelist" />
    <property name="productionvolume" result="The volume of all wares produced by a production module in one hour" type="integer" />
    <property name="consumptionvolume" result="The volume of all wares consumed by a production module in one hour" type="integer" />
    <property name="cargocapacity" result="The storage capacity of a storage module macro (legacy - use $macro.cargo.capacity.all)" type="integer" />
    <property name="cargo.capacity.all" result="Total cargo volume available, regardless of waretransport type (storagemodule and container macros only)" type="integer" />
    <property name="cargo.capacity.container" result="Total container cargo volume available (storagemodule and container macros only)" type="integer" />
    <property name="cargo.capacity.liquid" result="Total liquid cargo volume available (storagemodule and container macros only)" type="integer" />
    <property name="cargo.capacity.solid" result="Total solid cargo volume available (storagemodule and container macros only)" type="integer" />
    <property name="cargo.capacity.universal" result="Total universal cargo volume available (storagemodule and container macros only)" type="integer" />
    <property name="cargo.capacity.{$tag}" result="Total cargo volume available for the specified ware transport tag (storagemodule and container macros only)" type="integer" />
    <property name="cargo.{$ware}.max" result="Maximum amount of $ware which can be contained (storagemodule and container macros only)" type="integer" />
    <property name="cargo.tags" result="Compatible ware tags of the macro (storagemodule macros only)" type="list" />
    <property name="isbuildingallowed" result="true if building is allowed at this dock (dockingbay macros only)" type="boolean" />
    <property name="istradingallowed" result="true if trading is allowed at this dock (dockingbay macros only)" type="boolean" />
    <property name="isplayeronly" result="true if this dock is exclusively used for the player (dockingbay macros only)" type="boolean" />
    <property name="isventureronly" result="true if this dock is exclusively used for venturers (dockingbay macros only)" type="boolean" />
    <property name="isventuremodule" result="true if this module is for use with venture platforms (dockarea and connection macros only)" type="boolean" />
    <property name="isheadquarters" result="True if this station is a headquarters (station macros only)" type="boolean" />
    <property name="ispiratebase" result="True if this station is a pirate base (station macros only)" type="boolean" />
    <property name="isfriendfoe" result="True if this mine has a friend/foe feature (mine macros only)" type="boolean" />
    <property name="canclaimownership" result="true iff this macro can claim ownership of a sector" type="boolean" />
    <property name="hascontrolpanel.{$controlpaneltype}" result="True if this room has a control panel of the specified type (room macros only)" type="boolean" />
    <property name="maxradarrange" result="Maximal radar range" type="length" />
    <property name="people.capacity" result="Maximum amount of potential space on board for people as NPC templates (controllable only)" type="integer"/>
  </datatype>

  <datatype name="unlock" type="dbdata">
    <property name="id" result="ID" type="string" />
    <property name="name" result="Name" type="string" />
    <property name="rawname" result="Raw name, as text entry reference" type="string" />
    <property name="description" result="Description" type="string" />
    <property name="allowedowners" result="List of allowed owner faction based on who owns the object where this unlock is triggered (empty list = all factions allowed)" type="list" />
    <property name="allowedwares" result="List of allowed wares for tradeoffer location unlocks (empty list = all wares allowed)" type="list" />
    <property name="minrelation" result="Minimum relation with owner for this unlock to be triggered" type="float" />
    <property name="maxrelation" result="Maximum relation with owner for this unlock to be triggered" type="float" />
    <property name="secrecylevel.min" result="Minimum secrecy level of component for this unlock to be triggered" type="integer" />
    <property name="secrecylevel.max" result="Maximum secrecy level of component for this unlock to be triggered" type="integer" />
  </datatype>

  <datatype name="missiongroup" type="dbdata">
    <property name="id" result="ID" type="string" />
    <property name="name" result="Name of the mission group" type="string" />
    <property name="rawname" result="Raw name of the mission group, as text entry reference" type="string" />
    <property name="description" result="Description of the mission group" type="string" />
    <property name="faction" result="Primary faction" type="faction" />
    <property name="enemy" result="Enemy faction" type="faction" />
  </datatype>

  <datatype name="notification" type="dbdata">
    <property name="id" result="ID" type="string" />
    <property name="name" result="Name of the notification type" type="string" />
    <property name="rawname" result="Raw name of the notification type, as text entry reference" type="string" />
    <property name="description" result="Description of the notification type" type="string" />
    <property name="active" result="Are notifications of this type enabled?" type="boolean" />
  </datatype>

  <datatype name="tag">
  </datatype>

  <!-- MD-specific types -->

  <datatype name="cue">
    <property name="exists" result="true iff cue exists" type="boolean" />
    <property name="name" result="Cue name (unqualified)" type="string" />
    <property name="version" result="Version" type="integer" />
    <property name="time" result="Time of cue activation (or time of last time actions were performed, if the active cue is waiting for a subsequent actions block" type="time" />
    <property name="state" result="Current cue state" type="cuestate" />
    <property name="parent" result="Parent cue, or null if this is a root cue" type="cue" />
    <property name="static" result="The instantiating cue if applicable, otherwise null" type="cue" />
    <property name="staticbase" result="The static cue used as base for this cue (same as this if this is not an instance)" type="cue" />
    <property name="namespace" result="Namespace cue" type="cue" />
    <property name="library" result="If cue is a library reference, the base library cue" type="cue" />
    <property name="isinstance" result="true iff cue is an instance" type="boolean" />
    <property name="hasmissionoffer" result="true iff cue has a mission offer" type="boolean" />
    <property name="hasmission" result="true iff cue has a mission" type="boolean" />
    <property name="hasguidance" result="true iff guidance is active for this cue's mission" type="boolean" />
    <property name="offerlocations" result="List of all component slots used as offer locations for this cue's mission offer" type="list" />
    <property name="canactivatesubmission.{$cue}" result="true iff a submission of this mission thread is allowed to be activated" type="boolean" />
    <property name="actor" result="Last associated actor, or null" type="nonplayer" />
    <property name="actors" result="List of all associated actors" type="list" />
    <property name="$&lt;variable&gt;" result="Value of cue variable" />
  </datatype>

  <!-- enum datatypes -->

  <datatype name="enum" />
  <datatype name="kwenum" />
  <datatype name="dbdata" />

  <datatype name="class" type="enum" />
  <datatype name="componentstate" type="enum" />
  <datatype name="killmethod" type="enum" />
  <datatype name="attention" type="enum" />
  <datatype name="flightbehaviour" type="enum" />
  <datatype name="flightcontrolmodel" type="enum" />
  <datatype name="formationshape" type="enum" />
  <datatype name="activity" type="enum" />
  <datatype name="objective" type="enum" />
  <datatype name="missiontype" type="enum" />
  <datatype name="level" type="enum" />
  <datatype name="alertlevel" type="enum" />

  <datatype name="command" type="enum" />
  <datatype name="commandaction" type="enum" />
  <datatype name="cuestate" type="kwenum" />
  <datatype name="dronemode" type="enum" />
  <datatype name="roompopulationtype" type="enum" />
  <datatype name="purpose" type="enum" />
  <datatype name="moodlevel" type="enum" />
  <datatype name="orderstate" type="enum" />
  <datatype name="weaponmode" type="enum" />
  <datatype name="dockstate" type="enum" />

  <datatype name="quadrant" type="kwenum">
    <property name="inverse" result="the opposite direction of the quadrant" type="quadrant" />
  </datatype>

  <datatype name="datatype" type="kwenum">
    <property name="isnumeric" result="true iff the data type is non-null and numeric - example: (typeof $value).isnumeric" type="boolean" />
    <property name="isstring" result="true iff the data type is a string - example: (typeof $value).isstring" type="boolean" />
  </datatype>

  <datatype name="entitytype" type="dbdata">
    <property name="name" result="Default name of the entity type" type="string" />
    <property name="rawname" result="Raw default name of the entity type, as text entry reference" type="string" />
    <property name="description" result="Description of the entity type" type="string" />
    <property name="icon" result="Icon ID of the entity type" type="string" />
  </datatype>

  <datatype name="entityrole" type="dbdata">
    <property name="name" result="Default name of the entity role" type="string" />
    <property name="rawname" result="Raw default name of the entity role, as text entry reference" type="string" />
    <property name="femalename" result="Female name of the entity role" type="string" />
    <property name="pluralname" result="Plural name of the entity role" type="string" />
    <property name="description" result="Description of the entity role" type="string" />
    <property name="tag" result="Defined tag for this role" type="tag" />
    <property name="type" result="Entity type for this role" type="entitytype" />
    <property name="hirable" result="Can this entity role be hired" type="boolean" />
    <property name="tiers" result="List of tier level values as integers" type="list"/>
    <property name="tier.{$level}.name" result="Name of the tier at this level" type="string"/>
    <property name="tier.{$level}.rawname" result="Raw name of the tier at this level, as text entry reference" type="string"/>
    <property name="tier.{$level}.level" result="Lowerbound level value of the tier at the provided level" type="integer"/>
    <property name="icon" result="Icon ID of the entity role" type="string" />
  </datatype>

  <datatype name="skilltype" type="enum">
    <property name="name" result="Skill name" type="string" />
    <property name="ware" result="Skill upgrade ware associated with this skill type" type="ware" />
  </datatype>

  <datatype name="controlpost" type="dbdata">
    <property name="name" result="Default name of the control post" type="string" />
    <property name="rawname" result="Raw default name of the control post, as text entry reference" type="string" />
    <property name="description" result="Description of the control post" type="string" />
    <property name="icon" result="Icon ID of the control post" type="string" />
    <property name="type" result="Entity type of the control post" type="entitytype" />
    <property name="tag" result="Defined tag for this control post" type="tag" />
    <property name="skilltypes" result="List of relevant skill types" type="list" />
    <property name="skillrelevance.{$skilltype}" result="Contribution of the supplied skill to the entity's combined skill in percent, see $entity.combinedskill" type="integer" />
    <property name="skillrelevance.&lt;skillname&gt;" result="Shortcut for skillrelevance.{skilltype.&lt;skillname&gt;}" type="integer" />
  </datatype>

  <datatype name="assignment" type="dbdata">
    <property name="name" result="Name of the assignment" type="string" />
    <property name="rawname" result="Raw name of the assignment, as text entry reference" type="string" />
    <property name="description" result="Description of the assignment" type="string" />
    <property name="icon" result="Icon ID of the assignment" type="string" />
  </datatype>

  <datatype name="controlposition" type="enum">
    <property name="tag" result="Defined tag used as the group for this control position" type="tag" />
  </datatype>

  <datatype name="unitcategory" type="enum">
    <property name="name" result="Name of the unit category" type="string"/>
    <property name="maxmk" result="Maximum mk for this unit category" type="integer" />
    <property name="mk.{$i}.list" result="List of unit macros of the category and mk" type="list" />
  </datatype>

  <datatype name="deployablecategory" type="enum">
    <property name="name" result="Name of the deployable category" type="string"/>
    <property name="maxmk" result="Maximum mk for this deployable category" type="integer" />
    <property name="mk.{$i}.list" result="List of deployable macros of the category and mk" type="list" />
  </datatype>

  <datatype name="controlpaneltype" type="enum">
    <property name="name" result="Name of control panel type" type="string" />
    <property name="requireditems" result="Required items for hacking" type="wareamountlist" />
  </datatype>

  <datatype name="signalleaktype" type="enum" />

  <datatype name="roomtype" type="enum" />

  <datatype name="boardingphase" type="enum" />

  <datatype name="boardingbehaviour" type="enum" />

  <datatype name="blacklisttype" type="enum" />
  <datatype name="blacklistgroup" type="enum" />

  <datatype name="waretransport" type="enum">
    <property name="name" result="Name of ware transport type" type="string" />
  </datatype>

  <datatype name="relationchangereason" type="enum">
    <property name="name" result="Name of the relation change reason" type="string" />
  </datatype>

  <datatype name="shiptype" type="enum">
    <property name="name" result="Name of the ship type" type="string" />
    <property name="description" result="Description of the ship type" type="string" />
  </datatype>

  <!-- Numeric data types -->
  <datatype name="numeric" />

  <datatype name="integer" type="numeric" suffix="i" />
  <datatype name="boolean" type="integer" />

  <datatype name="money" type="numeric" suffix="ct">
    <property name="formatted.{$string}" result="Formatted money string, expanding tags in format string into corresponding values - example: $money.formatted.{'%6cs %Cr'}" type="string" />
    <property name="formatted.default" result="Formatted money string in default format (%s), with full accuracy, without cents" type="string" />
  </datatype>

  <datatype name="largeint" type="numeric" suffix="L" />
  <datatype name="float" type="numeric" suffix="f" />
  <datatype name="length" type="numeric" suffix="m" />
  <datatype name="angle" type="numeric" suffix="rad" />
  <datatype name="hitpoints" type="numeric" suffix="hp" />

  <datatype name="time" type="numeric" suffix="s">
    <property name="formatted.{$string}" result="Formatted time string, expanding tags in format string into corresponding values - example: $time.formatted.{'%m:%S'}" type="string" />
    <property name="formatted.default" result="Formatted time string in default format (%T). Days are only displayed if the time is at least 1d." type="string" />
  </datatype>

  <datatype name="largefloat" type="numeric" suffix="F" />

  <!-- player keyword -->

  <keyword name="player" description="Access to player-specific data">
    <property name="exists" result="true iff player exists" type="boolean" />
    <property name="name" result="Player name" type="string" />
    <property name="rawname" result="Raw player name, as text entry reference unless renamed manually" type="string" />
    <property name="age" result="Current game time" type="time" />
    <property name="systemtime.{$string}" result="Current local system time formatted according to formatstring rules (%Y = 4-digit year, %m = 2-digit month, %d = 2-digit day of month... for more see C++ documentation of strftime)" type="string" />
    <property name="money" result="Money in player account" type="money" />
    <property name="container" result="Player container context (ship or station)" type="container" />
    <property name="ship" result="Player ship context (can be non-player-owned, or even null, e.g. when landed on station)" type="ship" />
    <property name="station" result="Player station context (can be non-player-owned, or even null, e.g. when on a ship in space)" type="station" />
    <property name="occupiedship" result="The ship the player is sitting in the pilot seat of, or null" type="ship" />
    <property name="spacesuit" result="The spacesuit the player is in, or null" type="spacesuit" />
    <property name="controlled" result="Current object controlled by player, or null" type="object" />
    <property name="platform" result="Landing platform the player is standing on, or null" type="dockingbay" />
    <property name="room" result="Player room" type="room" />
    <property name="entity" result="Player component" type="entity" />
    <property name="zone" result="Player zone context" type="zone" />
    <property name="sector" result="Player sector context (can be null if player is in super-highway)" type="sector" />
    <property name="cluster" result="Player cluster context" type="cluster" />
    <property name="galaxy" result="The galaxy" type="galaxy" />
    <property name="computer" result="Player's on-board computer (Betty)" type="entity" />
    <property name="headquarters" result="Player's headquarters station or null" type="station" />
    <property name="canteleportto.{$controllable}" result="true iff player can teleport to this object" type="boolean" />
    <property name="activity" result="Current player activity" type="activity" />
    <property name="target" result="Current player target" type="object" />
    <property name="autopilottarget" result="Current player autopilot target" type="object" />
    <property name="conversation" result="Current conversation ID" type="string" />
    <property name="isinconversation" result="true iff a conversation is active (not necessarily interactive)" type="boolean" />
    <property name="conversationactor" result="the current actor involved in a conversation" type="entity" />
    <property name="hasactivemission" result="true if the player has an active mission" type="boolean" />
    <property name="activemissiontype" result="true if the player has an active mission" type="missiontype" />
    <property name="hascommission.{$container}" result="true if player has a commission with this container" type="boolean" />
    <property name="hascommission.{$faction}" result="true if player has a commission with this faction" type="boolean" />
    <property name="hascommission.{$container}.{$id}" result="true if player has a commission with this container with a matching string id" type="boolean" />
    <property name="hascommission.{$faction}.{$id}" result="true if player has a commission with this faction with a matching string id" type="boolean" />
    <property name="hasdiscount.{$container}" result="true if player has a discount with this container" type="boolean" />
    <property name="hasdiscount.{$faction}" result="true if player has a discount with this faction" type="boolean" />
    <property name="hasdiscount.{$container}.{$id}" result="true if player has a discount with this container with a matching string id" type="boolean" />
    <property name="hasdiscount.{$faction}.{$id}" result="true if player has a discount with this faction with a matching string id" type="boolean" />
    <property name="encyclopedia.&lt;infolibrarytype&gt;.{$id}.exists" result="true if player has an encyclopedia entry for this item" type="boolean" />
    <property name="blueprints.{$ware}.any.exists" result="true if player has any blueprint for this ware" type="boolean" />
    <property name="blueprints.{$ware}.any.method" result="production method of first player blueprint for this ware" type="string" />
    <property name="blueprints.{$ware}.any.cycle.efficiency" result="cycle efficiency of first player blueprint for this ware" type="float" />
    <property name="blueprints.{$ware}.any.cycle.time" result="cycle time of first player blueprint for this ware" type="time" />
    <property name="blueprints.{$ware}.any.resource.efficiency" result="resource efficiency of first player blueprint for this ware" type="float" />
    <property name="blueprints.{$ware}.any.resource.wares" result="all resource wares of first player blueprint for this ware" type="wareamountlist" />
    <property name="blueprints.{$ware}.any.primary.efficiency" result="primary resource efficiency of first player blueprint for this ware" type="float" />
    <property name="blueprints.{$ware}.any.primary.wares" result="primary resource wares of first player blueprint for this ware" type="wareamountlist" />
    <property name="blueprints.{$ware}.any.secondary.efficiency" result="second resource efficiency of first player blueprint for this ware" type="float" />
    <property name="blueprints.{$ware}.any.secondary.wares" result="secondary resource wares of first player blueprint for this ware" type="wareamountlist" />
    <property name="blueprints.{$ware}.any.product.efficiency" result="product efficiency of first player blueprint for this ware" type="float" />
    <property name="blueprints.{$ware}.any.product.amount" result="product amount of first player blueprint for this ware" type="integer" />
    <property name="blueprints.{$ware}.&lt;productionmethod&gt;.exists" result="true if player has a blueprint for this ware and production method" type="boolean" />
    <property name="blueprints.{$ware}.&lt;productionmethod&gt;.cycle.efficiency" result="cycle efficiency of player blueprint for this ware and production method" type="float" />
    <property name="blueprints.{$ware}.&lt;productionmethod&gt;.cycle.time" result="cycle time of player blueprint for this ware and production method" type="time" />
    <property name="blueprints.{$ware}.&lt;productionmethod&gt;.resource.efficiency" result="resource efficiency of player blueprint for this ware and production method" type="float" />
    <property name="blueprints.{$ware}.&lt;productionmethod&gt;.resource.wares" result="all resource wares of player blueprint for this ware and production method" type="wareamountlist" />
    <property name="blueprints.{$ware}.&lt;productionmethod&gt;.primary.efficiency" result="primary resource efficiency of player blueprint for this ware and production method" type="float" />
    <property name="blueprints.{$ware}.&lt;productionmethod&gt;.primary.wares" result="primary resource wares of player blueprint for this ware and production method" type="wareamountlist" />
    <property name="blueprints.{$ware}.&lt;productionmethod&gt;.secondary.efficiency" result="second resource efficiency of player blueprint for this ware and production method" type="float" />
    <property name="blueprints.{$ware}.&lt;productionmethod&gt;.secondary.wares" result="secondary resource wares of player blueprint for this ware and production method" type="wareamountlist" />
    <property name="blueprints.{$ware}.&lt;productionmethod&gt;.product.efficiency" result="product efficiency of player blueprint for this ware and production method" type="float" />
    <property name="blueprints.{$ware}.&lt;productionmethod&gt;.product.amount" result="product amount of player blueprint for this ware and production method" type="integer" />
    <property name="hasscanner" result="Does the player's controllable have scanner software" type="boolean"/>
    <property name="scanlevel" result="The current scan level of the player's scanner" type="integer" />
    <property name="maxscanlevel" result="The maximum scan level of the player's scanner" type="integer" />
    <property name="longrange" result="true iff the player's scanner can perform a long-range scan" type="boolean" />
    <property name="debug" result="true iff debug options are available" type="boolean" />
    <property name="debugfilteractive.&lt;debugfilter&gt;" result="true iff the debug output filter is currently active" type="boolean" />
    <property name="isscreenshotmode" result="true iff game is set to screenshotmode" type="boolean" />
    <property name="screenshotmode" result="Current screenshot mode" type="string" />
    <property name="isinfullscreenmenu" result="true if any fullscreen menu is shown, false otherwise" type="boolean" />
    <property name="isvrversion" result="true iff the VR version of the game is running" type="boolean" />
    <property name="isvrmode" result="true iff game is currently in VR mode (always false in non-VR version)" type="boolean" />
    <property name="chardensity" result="Density of characters on platforms (between 0 and 1)" type="float" />
    <property name="module" result="The currently played module name" type="string" />
    <property name="speakpriority" result="Highest speak priority of all current speakers, if any, otherwise -1000" type="integer" />
    <property name="input.controller" result="true iff player is using the controller, false if using keyboard/mouse (this value can change!)" type="boolean" />
    <property name="input.joystick" result="true iff player is using a joystick (this value can change!)" type="boolean" />
    <property name="input.boosttoggle" result="true iff boost is set to toggle on and off instead of a key being required to be held" type="boolean" />
    <property name="input.mousesteering" result="true iff player is playing in mousesteering-mode, false otherwise (this value can change!)" type="boolean" />
    <property name="input.mousesteering.permanent" result="true iff player is playing in permanent mousesteering-mode, false otherwise (this value can change!)" type="boolean" />
    <property name="input.directmousesteering" result="true iff player is playing in direct mousesteering-mode, false otherwise (this value can change!)" type="boolean" />
    <property name="input.oculustouch" result="true iff player is playing with Oculus Touch controllers" type="boolean" />
    <property name="input.vivecontroller" result="true iff player is playing with Vive controllers" type="boolean" />
    <property name="input.vrcontroller" result="true iff player is using any VR controller" type="boolean" />
    <property name="input.shootatcursor" result="true iff player is shooting at the mouse cursor instead of straight ahead" type="boolean" />
    <property name="input.autoroll" result="true iff player's ship is automatically rolling to align with the ecliptic" type="boolean" />
    <property name="input.adaptivemousesteering" result="true iff the primary mouse steering axis (yaw or roll) is chosen based on the player's ship's steering capabilities" type="boolean" />
    <property name="input.adaptivesticksteering" result="true iff the primary stick steering axis (yaw or roll) is chosen based on the player's ship's steering capabilities" type="boolean" />
    <property name="input.flight.throttle" result="the relative forward speed set by the player, value is between -1 and 1" type="float" />
    <property name="input.flight.horizontal" result="the relative horizontal strafe speed set by the player, value is between -1 and 1" type="float" />
    <property name="input.flight.vertical" result="the relative vertical strafe speed set by the player, value is between -1 and 1" type="float" />
    <property name="input.flight.pitch" result="the relative pitch speed set by the player, value is between -1 and 1" type="float" />
    <property name="input.flight.yaw" result="the relative yaw speed set by the player, value is between -1 and 1" type="float" />
    <property name="input.flight.roll" result="the relative roll speed set by the player, value is between -1 and 1" type="float" />
    <property name="input.flight.matchspeed" result="whether the playership is currently matching the speed of the target" type="boolean" />
    <property name="input.firstperson.isrunning" result="whether the player is currently running" type="boolean" />
    <property name="input.firstperson.isjumping" result="whether the player is currently jumping" type="boolean" />
    <property name="input.firstperson.iscrouching" result="whether the player is currently crouching" type="boolean" />
    <property name="input.isinverted.firstperson.mouse.pitch" result="whether vertical mouse input is inverted in first person" type="boolean" />
    <property name="input.isinverted.firstperson.mouse.yaw" result="whether horizontal mouse input is inverted in first person" type="boolean" />
    <property name="input.isinverted.firstperson.joystick.pitch" result="whether vertical joystick or controller input is inverted in first person" type="boolean" />
    <property name="input.isinverted.firstperson.joystick.yaw" result="whether horizontal joystick or controller input is inverted in first person" type="boolean" />
    <property name="input.isinverted.flight.joystick.pitch" result="whether joystick or controller pitch input is inverted in flight" type="boolean" />
    <property name="input.isinverted.flight.joystick.yaw" result="whether joystick or controller yaw input is inverted in flight" type="boolean" />
    <property name="input.isinverted.flight.joystick.roll" result="whether joystick or controller roll input is inverted in flight" type="boolean" />
    <property name="input.isinverted.flight.joystick.throttle" result="whether joystick or controller throttle input is inverted in flight" type="boolean" />
    <property name="input.isinverted.flight.mouse.pitch" result="whether mouse pitch input is inverted in flight" type="boolean" />
    <property name="input.isinverted.flight.mouse.yaw" result="whether mouse yaw input is inverted in flight" type="boolean" />
    <property name="input.isinverted.flight.mouse.roll" result="whether mouse roll input is inverted in flight" type="boolean" />
    <property name="input.isinverted.flight.directmouse.pitch" result="whether direct mouse pitch input is inverted in flight" type="boolean" />
    <property name="input.isinverted.flight.directmouse.yaw" result="whether direct mouse yaw input is inverted in flight" type="boolean" />
    <property name="input.isinverted.flight.directmouse.roll" result="whether direct mouse roll input is inverted in flight" type="boolean" />
    <property name="input.ismapped.&lt;inputfunction&gt;" result="whether any button is bound to the provided INPUT_... action, state or range (ignoring mouse buttons if currently playing with controller/joystick)" type="boolean" />
    <property name="input.ismapped.keyboard.&lt;inputfunction&gt;" result="whether a keyboard button is bound to the provided INPUT_... action, state or range" type="boolean" />
    <property name="input.ismapped.mouse.&lt;inputfunction&gt;" result="whether a mouse button is bound to the provided INPUT_... action, state or range" type="boolean" />
    <property name="input.ismapped.controller.&lt;inputfunction&gt;" result="whether a controller/joystick button is bound to the provided INPUT_... action, state or range (considering only the first assigned non-VR controller/joystick)" type="boolean" />
    <property name="camera.yaw" result="the yaw angle of the player camera" type="angle" />
    <property name="camera.pitch" result="the pitch angle of the player camera" type="angle" />
    <property name="camera.roll" result="the pitch angle of the player camera" type="angle" />
    <property name="camera.zoom" result="the zoom of the player camera" type="float" />
    <property name="timewarp.active" result="true iff time warp (SETA) is currently enabled" type="boolean" />
    <property name="timewarp.available" result="true iff time warp can be enabled (i.e. SETA is installed and all activation conditions are met)" type="boolean" />
    <property name="timewarp.factor" result="Time warp factor (game time that passes during a real-time second, 1.0s if not in time warp)" type="time" />
    <property name="autosave.active" result="true iff autosaves are enabled" type="boolean" />
    <property name="autosave.available" result="true iff saving is currently possible" type="boolean" />
    <property name="autosave.factor" result="user-configurable factor to define the autosave interval" type="float" />
    <property name="flightassist" result="true iff flight assist is active, otherwise false" type="boolean" />
    <property name="hasclothingmod" result="Whether the player has any clothing mod installed" type="boolean" />
    <property name="hasclothingmod.{$ware}" result="Whether the player has a clothing mod based on the specified clothing mod ware installed" type="boolean" />
    <property name="loadoutlevel" result="The global loadout level for player-owned objects." type="float" />
    <property name="isdockuiactive" result="Whether the player's docking UI is currently active" type="boolean" />
  </keyword>

  <!-- Global variables -->

  <keyword name="global" description="Global variables">
    <property name="$&lt;variable&gt;" result="Value of global variable" />
  </keyword>

  <!-- Numeric constants -->

  <keyword name="true" description="Same as 1" type="boolean" />
  <keyword name="false" description="Same as 0" type="boolean" />

  <keyword name="pi" description="pi (same as 180deg)" type="angle" />

  <keyword name="null" description="The null value">
    <property name="exists"                    result="Always false" type="boolean" />
    <property name="isoperational"             result="Always false" type="boolean" />
    <property name="iswreck"                   result="Always false" type="boolean" />
    <property name="isconstruction"            result="Always false" type="boolean" />
    <property name="available"                 result="Always false" type="boolean" />
    <property name="isclass.{$class}"          result="Always false" type="boolean" />
    <property name="isclass.&lt;classname&gt;" result="Always false" type="boolean" />
    <property name="isclass.{$list}"          result="Always false" type="boolean" />
    <property name="isrealclass.{$class}"      result="Always false" type="boolean" />
    <property name="isrealclass.&lt;classname&gt;" result="Always false" type="boolean" />
    <property name="isrealclass.{$list}"      result="Always false" type="boolean" />
  </keyword>

  <!-- Lookup keywords -->

  <keyword name="position" description="Position generator">
    <property name="[$x, $y, $z]" result="Position value with given coordinates of type length" type="position" />
  </keyword>

  <keyword name="vector" description="Position generator">
    <property name="[$x, $y, $z]" result="3D vector value with given coordinates of type length" type="vector" />
  </keyword>

  <keyword name="rotation" description="Rotation generator">
    <property name="[$yaw, $pitch, $roll]" result="Rotation value with given angles of type angle" type="rotation" />
  </keyword>

  <keyword name="readtext" description="TextDB access">
    <property name="{$textpage}.{$textid}" result="Converted text string from TextDB (For constant IDs, use the short notation {123,456} instead of readtext)" type="string" />
  </keyword>

  <keyword name="stat" description="Statistics access">
    <import source="stats.xml" select="/stats/stat">
      <property name="@id" result="@name" type="numeric" />
    </import>
  </keyword>

  <keyword name="userdata" description="Access to user data values in userdata.xml">
    <property name="&lt;valuename&gt;" result="User data value" type="largefloat" />
  </keyword>

  <keyword name="param" description="Access to script parameters in parameters.xml">
    <property name="&lt;categoryname&gt;.&lt;paramname&gt;" result="Script parameter" />
  </keyword>

  <keyword name="loop" description="Access to iteration data of the current traversal loop (the most inner &lt;do_for_each&gt; action that the current action is in)">
    <property name="list" result="List that is being traversed (only valid if &lt;do_for_each&gt; is used with a list)" type="list" />
    <property name="group" result="Group that is being traversed (only valid if &lt;do_for_each&gt; is used with a group)" type="group" />
    <property name="index" result="Current iteration index in list/group (only valid if &lt;do_for_each&gt; is used with a list or group)" type="integer" />
    <property name="element" result="List/group element at current iteration index (only valid if &lt;do_for_each&gt; is used with a list or group)" />
    <property name="table" result="Table that is being traversed (only valid if &lt;do_for_each&gt; is used with a table)" type="table" />
    <property name="key" result="Current iteration table key (only valid if &lt;do_for_each&gt; is used with a table)" />
    <property name="value" result="Value assigned to the current iteration table key (only valid if &lt;do_for_each&gt; is used with a table)" />
  </keyword>

  <keyword name="datatype" description="Datatype lookup">
    <property name="null" result="" type="datatype" />
    <property name="integer" result="" type="datatype" />
    <property name="money" result="" type="datatype" />
    <property name="largeint" result="" type="datatype" />
    <property name="float" result="" type="datatype" />
    <property name="length" result="" type="datatype" />
    <property name="angle" result="" type="datatype" />
    <property name="hitpoints" result="" type="datatype" />
    <property name="time" result="" type="datatype" />
    <property name="largefloat" result="" type="datatype" />
    <property name="component" result="" type="datatype" />
    <property name="trade" result="" type="datatype" />
    <property name="build" result="" type="datatype" />
    <property name="operation" result="" type="datatype" />
    <property name="order" result="" type="datatype" />
    <property name="cue" result="" type="datatype" />
    <property name="keyword" result="" type="datatype" />
    <property name="xmlkeyword" result="" type="datatype" />
    <property name="class" result="" type="datatype" />
    <property name="componentstate" result="" type="datatype" />
    <property name="killmethod" result="" type="datatype" />
    <property name="relationchangereason" result="" type="datatype" />
    <property name="attention" result="" type="datatype" />
    <property name="flightbehaviour" result="" type="datatype" />
    <property name="flightcontrolmodel" result="" type="datatype" />
    <property name="formationshape" result="" type="datatype" />
    <property name="entitytype" result="" type="datatype" />
    <property name="entityrole" result="" type="datatype" />
    <property name="npctemplate" result="" type="datatype" />
    <property name="skilltype" result="" type="datatype" />
    <property name="controlpost" result="" type="datatype" />
    <property name="assignment" result="" type="datatype" />
    <property name="controlposition" result="" type="datatype" />
    <property name="activity" result="" type="datatype" />
    <property name="objective" result="" type="datatype" />
    <property name="missiontype" result="" type="datatype" />
    <property name="missiongroup" result="" type="datatype" />
    <property name="level" result="" type="datatype" />
    <property name="alertlevel" result="" type="datatype" />
    <property name="unitcategory" result="" type="datatype" />
    <property name="deployablecategory" result="" type="datatype" />
    <property name="command" result="" type="datatype" />
    <property name="commandaction" result="" type="datatype" />
    <property name="roompopulationtype" result="" type="datatype" />
    <property name="purpose" result="" type="datatype" />
    <property name="controlpaneltype" result="" type="datatype" />
    <property name="signalleaktype" result="" type="datatype" />
    <property name="boardingphase" result="" type="datatype" />
    <property name="boardingbehaviour" result="" type="datatype" />
    <property name="blacklisttype" result="" type="datatype" />
    <property name="blacklistgroup" result="" type="datatype" />
    <property name="moodlevel" result="" type="datatype" />
    <property name="waretransport" result="" type="datatype" />
    <property name="orderstate" result="" type="datatype" />
    <property name="datatype" result="" type="datatype" />
    <property name="cuestate" result="" type="datatype" />
    <property name="ware" result="" type="datatype" />
    <property name="race" result="" type="datatype" />
    <property name="faction" result="" type="datatype" />
    <property name="macro" result="" type="datatype" />
    <property name="notification" result="" type="datatype" />
    <property name="tag" result="" type="datatype" />
    <property name="string" result="" type="datatype" />
    <property name="list" result="" type="datatype" />
    <property name="table" result="" type="datatype" />
    <property name="group" result="" type="datatype" />
    <property name="componentslot" result="" type="datatype" />
    <property name="constructionsequence" result="" type="datatype" />
    <property name="loadout" result="" type="datatype" />
    <property name="licence" result="" type="datatype" />
    <property name="position" result="" type="datatype" />
    <property name="vector" result="" type="datatype" />
    <property name="rotation" result="" type="datatype" />
    <property name="quadrant" result="" type="datatype" />
    <property name="unlock" result="" type="datatype" />
    <property name="weaponmode" result="" type="datatype" />
    <property name="dronemode" result="" type="datatype" />
    <property name="dockstate" result="" type="datatype" />
    <property name="shiptype" result="" type="datatype" />
    <property name="roomtype" result="" type="datatype" />
  </keyword>

  <keyword name="quadrant" description="Quadrant flag lookup">
    <property name="none" result="no quadrant" type="quadrant" />
    <property name="up" result="up quadrant" type="quadrant" />
    <property name="down" result="down quadrant" type="quadrant" />
    <property name="left" result="left quadrant" type="quadrant" />
    <property name="right" result="right quadrant" type="quadrant" />
    <property name="front" result="front quadrant" type="quadrant" />
    <property name="back" result="back quadrant" type="quadrant" />
  </keyword>

  <keyword name="class" description="Class lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[substring(@name, string-length(@name) - string-length('classlookup') + 1) = 'classlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="class" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="componentstate" description="Component state lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='componentstatelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="componentstate" />
    </import>
  </keyword>

  <keyword name="ware" description="Ware lookup">
    <import source="wares.xml" select="/wares/ware">
      <property name="@id" result="@name" type="ware" />
    </import>
  </keyword>

  <keyword name="warebasket" description="Ware Basket lookup">
    <import source="baskets.xml" select="/baskets/basket">
      <property name="@id" result="@name" type="warelist" />
    </import>
  </keyword>

  <keyword name="waregroup" description="Ware Group lookup">
    <import source="waregroups.xml" select="/groups/group">
      <property name="@id" result="@name" type="warelist" />
    </import>
  </keyword>

  <keyword name="unlock" description="Unlock lookup">
    <import source="unlocks.xml" select="/unlocks/*">
      <property name="@id" result="@name" type="unlock" />
    </import>
  </keyword>

  <keyword name="race" description="Race lookup">
    <import source="races.xml" select="/races/race">
      <property name="@id" result="@name" type="race" />
    </import>
  </keyword>

  <keyword name="faction" description="Faction lookup">
    <import source="factions.xml" select="/factions/faction">
      <property name="@id" result="@name" type="faction" />
    </import>
  </keyword>

  <keyword name="macro" description="Macro lookup">
    <property name="&lt;macroname&gt;" result="Macro" type="macro" />
  </keyword>

  <keyword name="tag" description="Tag lookup">
    <property name="&lt;tagname&gt;" result="Tag of given name (tag is created if it doesn't exist)" type="tag" />
    <property name="{$enum}" result="Tag of name of given enum value, e.g. tag.{entitytype.pilot} is equivalent to tag.pilot (tag is created if it doesn't exist)" type="tag" />
  </keyword>

  <keyword name="lookup" description="Miscellaneous fixed lookups">
    <import source="scriptproperties.xml" select="/scriptproperties/datatype[@type='enum' or @type='dbdata']">
      <property name="@name" result="" type="lookuplist" />
    </import>
  </keyword>

  <keyword name="attention" description="Attention level lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='attentionlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="attention" />
    </import>
  </keyword>

  <keyword name="killmethod" description="Kill method lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='killmethodlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="killmethod" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="relationchangereason" description="Relation change method lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='relationchangereasonlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="relationchangereason" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="unitcategory" description="Unit category lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='unitcategorylookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="unitcategory" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="deployablecategory" description="Deployable category lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='deployablecategorylookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="deployablecategory" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="command" description="Command lookup">
    <import source="aiscripts.xsd" select="/xs:schema/xs:simpleType[@name='commandlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="command" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="commandaction" description="Command action lookup">
    <import source="aiscripts.xsd" select="/xs:schema/xs:simpleType[@name='commandactionlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="commandaction" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="activity" description="Player activity lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='activityexprlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="activity" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="entitytype" description="Entity type lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='entitytypeexprlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="entitytype" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="entityrole" description="Entity role lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='entityroleexprlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="entityrole" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="skilltype" description="Skill type lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='skilltypeexprlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="skilltype" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="controlpost" description="Control post lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='controlpostexprlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="controlpost" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="assignment" description="Subordinate assignment lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='assignmentexprlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="assignment" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="controlposition" description="Control position lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='controlpositionexprlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="controlposition" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="formationshape" description="Formation shape lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='formationshapelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="formationshape" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="level" description="Difficulty level lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='levellookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="level" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="alertlevel" description="Upkeep alert level lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='upkeepalertlevellookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="alertlevel" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="roompopulationtype" description="Dock population type lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='roompopulationtypelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="roompopulationtype" />
    </import>
  </keyword>

  <keyword name="purpose" description="Purpose lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='purposelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="purpose" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="controlpaneltype" description="Control panel type lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='controlpaneltypelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="controlpaneltype" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="signalleaktype" description="Signal leak type lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='signalleaktypelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="signalleaktype" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="boardingphase" description="Boarding phase lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='boardingphaselookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="boardingphase" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="boardingbehaviour" description="Boarding behaviour lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='boardingbehaviourlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="boardingbehaviour" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="blacklisttype" description="Blacklist type lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='blacklisttypelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="blacklisttype" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="blacklistgroup" description="Blacklist group lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='blacklistgrouplookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="blacklistgroup" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="waretransport" description="Types of ware transports">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='waretransportlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="waretransport" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="orderstate" description="Types of order states">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='orderstatelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="orderstate" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="moodlevel" description="Faction mood level lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='moodlevellookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="moodlevel" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="weaponmode" description="Weapon mode lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='weaponmodelookup' or @name='extendedweaponmodelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="weaponmode" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="dronemode" description="Drone mode lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='dronemodeexprlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="dronemode" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="dockstate" description="Dock state lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='dockstatelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="dockstate" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="shiptype" description="Ship type lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='shiptypeexprlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="shiptype" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="roomtype" description="Room type lookup">
    <import source="common.xsd" select="/xs:schema/xs:simpleType[@name='roomtypeexprlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="roomtype" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="notification" description="Notification type lookup">
    <import source="notificationtypes.xml" select="/notificationtypes/notification">
      <property name="@id" result="@name" type="notification" />
    </import>
  </keyword>

  <!-- AI-specific lookups -->

  <keyword name="flightbehaviour" description="Flight behaviour lookup" script="ai">
    <import source="aiscripts.xsd" select="/xs:schema/xs:simpleType[@name='fbehaviourlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="flightbehaviour" ignoreprefix="true" />
    </import>
  </keyword>

  <keyword name="flightcontrolmodel" description="Flight control model lookup" script="ai">
    <import source="aiscripts.xsd" select="/xs:schema/xs:simpleType[@name='fcmlookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="flightcontrolmodel" ignoreprefix="true" />
    </import>
  </keyword>

  <!-- MD-specific lookups -->

  <keyword name="objective" description="Mission objective lookup" script="md">
    <import source="md.xsd" select="/xs:schema/xs:simpleType[@name='objectivetypelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="objective" ignoreprefix="true" />
    </import>
  </keyword>
  <keyword name="missiontype" description="Mission type lookup" script="md">
    <import source="md.xsd" select="/xs:schema/xs:simpleType[@name='missiontypelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="missiontype" ignoreprefix="true" />
    </import>
  </keyword>
  <keyword name="missiongroup" description="Mission group lookup" script="md">
    <import source="md.xsd" select="/xs:schema/xs:simpleType[@name='missiongrouplookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="missiongroup" ignoreprefix="true" />
    </import>
  </keyword>
  <keyword name="cuestate" description="Cue state lookup" script="md">
    <import source="md.xsd" select="/xs:schema/xs:simpleType[@name='cuestatelookup']//xs:enumeration">
      <property name="@value" result="xs:annotation/xs:documentation/text()" type="cuestate" ignoreprefix="true" />
    </import>
  </keyword>

  <!-- Script- or mission-specific keywords -->

  <keyword name="this" description="The current MD cue" type="cue" script="md">
    <!-- TODO -->
  </keyword>

  <keyword name="this" description="The entity on which the AI script is running" type="entity" script="ai">
    <!-- TODO -->
  </keyword>

  <keyword name="event" description="Event data access">
    <property name="name" result="Name of event condition that was met" type="string" />
    <property name="object" result="object according to event documentation" />
    <property name="param" result="param according to event documentation" />
    <property name="param2" result="param2 according to event documentation" />
    <property name="param3" result="param3 according to event documentation" />
  </keyword>

  <keyword name="quota" description="Mission quota access" script="md">
    <property name="{$missiontype}" result="Quota for given mission type, based on current player zone" type="integer" />
    <property name="&lt;missiontypename&gt;" result="Shortcut for {missiontype.&lt;missiontypename&gt;}" type="integer" />
  </keyword>

  <keyword name="md" description="Access to all MD scripts and global variables" script="md">
    <property name="&lt;mdscriptname&gt;.&lt;cuename&gt;" result="Specified cue" type="cue" />
    <property name="$&lt;variable&gt;" result="Value of global MD variable" />
  </keyword>

  <keyword name="parent" description="Same as this.parent" script="md" type="cue" />
  <keyword name="static" description="Same as this.static" script="md" type="cue" />
  <keyword name="staticbase" description="Same as this.staticbase" script="md" type="cue" />
  <keyword name="namespace" description="Same as this.namespace" script="md" type="cue" />

</scriptproperties>
