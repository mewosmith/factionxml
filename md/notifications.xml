<?xml version="1.0" encoding="utf-8" ?>
<mdscript name="Notifications" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">

  <cues>

    <cue name="Init" version="2">
      <conditions>
        <event_cue_signalled cue="md.Setup.Start" />
      </conditions>
      <actions>
        <set_value name="stat.money_player" exact="player.money / 1Cr" />
      </actions>
      <patch sinceversion="1">
        <reset_cue cue="AutoSave" />
      </patch>
      <patch sinceversion="2">
        <remove_value name="md.$Player_EarlyWarningSatellites"/>
      </patch>
      <cues>

        <library name="TruncateTickerText">
          <actions>
            <!-- If $tickertext doesn't exist yet, use $logtext -->
            <do_if value="not $tickertext?">
              <do_if value="$logtext.count" min="2*4 + 1">
                <!-- We have to adjust $tickertext below, make copy of $logtext -->
                <set_value name="$tickertext" exact="$logtext.clone" />
              </do_if>
              <do_else>
                <!-- $logtext and $tickertext can reference the same list (note: if a copy is desired, caller has to do that!) -->
                <set_value name="$tickertext" exact="$logtext" />
              </do_else>
            </do_if>
            <do_if value="$tickertext.count" min="2*4 + 1">
              <resize_list list="$tickertext" count="2*4" />
              <set_value name="$tickertext.{2*4 - 1}" exact="{1015,60}" comment="..." />
              <set_value name="$tickertext.{2*4}" exact="''" />
            </do_if>
          </actions>
        </library>

        <cue name="Debug" instantiate="true" module="none">
          <conditions>
            <event_cue_signalled />
          </conditions>
          <actions>
            <show_notification text="['Test:', 'Out Of Ammo', 'Second line', ['Color Test', 255, 192, 126]]" sound="notification_generic" />
          </actions>
          <force name="Notification Test"/>
        </cue>

        <cue name="KilledObjects" instantiate="true" namespace="this">
          <conditions>
            <event_player_killed_object />
            <check_value value="not event.param.isplayerowned and event.param.owner and event.param.owner != faction.ownerless" />
          </conditions>
          <actions>
            <do_if value="event.param.isclass.ship">
              <set_value name="stat.ships_destroyed" operation="add"/>
              <do_if value="event.param.owner == faction.xenon">
                <set_value name="stat.xenon_ships_destroyed" operation="add"/>
              </do_if>
              <do_elseif value="event.param.owner == faction.khaak">
                <set_value name="stat.khaak_ships_destroyed" operation="add"/>
                <unlock_achievement name="DESTROY_KHAAK_SHIP" />
              </do_elseif>
              <do_elseif value="event.param.owner.isvisitor">
                <set_value name="stat.visitor_ships_destroyed" operation="add"/>
              </do_elseif>
              <do_if value="event.param.isclass.[class.ship_l, class.ship_xl]">
                <set_value name="stat.capships_destroyed" operation="add"/>
                <do_if value="event.param.owner == faction.xenon">
                  <unlock_achievement name="DESTROY_XENON_CAPSHIP" />
                </do_if>
              </do_if>
            </do_if>
            <do_elseif value="event.param.isclass.turret">
              <set_value name="stat.turrets_destroyed" operation="add"/>
            </do_elseif>
            <do_elseif value="event.param.isclass.engine">
              <set_value name="$ship" exact="event.param.ship" />
              <do_if value="$ship.isclass.[class.ship_l, class.ship_xl]">
                <find_object_component name="$engines" object="$ship" class="class.engine" multiple="true" />
                <do_if value="$engines.count == 0 or ($engines.count == 1 and $engines.{1} == event.param)">
                  <unlock_achievement name="DESTROY_ENGINES" />
                </do_if>
              </do_if>
            </do_elseif>
            <do_elseif value="event.param.isclass.adsign">
              <set_value name="stat.adsigns_destroyed" operation="add"/>
            </do_elseif>
            <do_if value="event.param.issurfaceelement">
              <set_value name="$ship" exact="event.param.ship" />
              <do_if value="$ship.isclass.[class.ship_l, class.ship_xl]">
                <find_object_component name="$surfaceelements" object="$ship" surfaceelement="true" multiple="true" />
                <do_if value="$surfaceelements.count == 0 or ($surfaceelements.count == 1 and $surfaceelements.{1} == event.param)">
                  <unlock_achievement name="DESTROY_SURFACE_ELEMENTS" />
                </do_if>
              </do_if>
            </do_if>
          </actions>
        </cue>

        <cue name="PlayerOwnedKilled" instantiate="true" namespace="this">
          <conditions>
            <event_player_owned_destroyed />
            <!-- Currently only ships, other objects may be added later if appropriate -->
            <check_value value="event.param.isclass.ship and not event.param.ismasstraffic" />
            <check_value value="event.param3 != killmethod.collected" />
            <check_value value="event.param3 != killmethod.removed" comment="spacesuit is removed"/>
          </conditions>
          <actions>
            <!-- Determine if killer name should be included in log message -->
            <set_value name="$includekiller" exact="(event.param3 == killmethod.hitbybullet or event.param3 == killmethod.hitbymissile or event.param3 == killmethod.lowattentionattack) and event.param2.isoperational and not @event.param2.isplayerowned" />
            <!-- Determine location string (zone/sector/highway, whatever is appropriate) -->
            <do_if value="event.param.sector">
              <substitute_text text="$location" source="{1016,1}" comment="in sector $SECTOR$">
                <replace string="'$SECTOR$'" with="event.param.sector.name" />
              </substitute_text>
            </do_if>
            <do_elseif value="event.param.zone.isclass.highway">
              <substitute_text text="$location" source="{1016,2}" comment="in superhighway to $CLUSTER$">
                <replace string="'$CLUSTER$'" with="event.param.zone.destination.cluster" />
              </substitute_text>
            </do_elseif>
            <do_else>
              <debug_text filter="error" text="'Killed object is not in a sector and not in a superhighway'" />
              <set_value name="$location" exact="''" />
            </do_else>
            <!-- Write logbook entry -->
            <do_if value="$includekiller">
              <substitute_text text="$text" source="{1016,31}" comment="$KILLED$ $LOCATION$ was destroyed by $KILLER$">
                <replace string="'$KILLED$'" with="event.param.name" />
                <replace string="'$KILLER$'" with="event.param2.name" />
                <replace string="'$LOCATION$'" with="$location" />
              </substitute_text>
            </do_if>
            <do_else>
              <substitute_text text="$text" source="{1016,30}" comment="$KILLED$ $LOCATION$ was destroyed">
                <replace string="'$KILLED$'" with="event.param.name" />
                <replace string="'$LOCATION$'" with="$location" />
              </substitute_text>
            </do_else>
            <do_if value="notification.ship_destroyed.active">
              <show_notification text="$text" priority="2" />
            </do_if>
            <debug_text text="'location: %s'.[if event.param.sector and not @event.param.zone.isnormalzone then event.param.sector else event.param.zone]" />
            <write_to_logbook category="upkeep" title="$text" interaction="showonmap" object="if event.param.sector and not @event.param.zone.isnormalzone then event.param.sector else event.param.zone" highlighted="true" />
          </actions>
        </cue>

        <cue name="OutOfAmmo" instantiate="true" namespace="static">
          <conditions>
            <event_player_out_of_ammo/>
            <check_any>
              <!-- don't show message more than once per second, unless missile macro was changed -->
              <check_value value="not $lastmissile?" />
              <check_value value="$lastmissile != event.param"/>
              <check_age min="$lasttime + 1s"/>
            </check_any>
          </conditions>
          <actions>
            <debug_text text="'Player ship out of ammo, macro=%1, display name=%2'.[event.param, event.param.name]"/>
            <show_notification text="{1015,43}.[event.param.name]" priority="2" sound="notification_warning" />
            <set_value name="$lastmissile" exact="event.param"/>
            <set_value name="$lasttime" exact="player.age"/>
          </actions>
        </cue>

        <library name="AddKnownCraftingWares">
          <actions>
            <!-- Input: $products (required crafting products), $tickertext -->
            <!-- Output: None -->
            <do_all exact="$products.count" counter="$i">
              <!-- TODO: Handle equipmentmod wares here if wanted -->
              <do_if value="$products.{$i}.iscrafting and not $products.{$i}.isequipmentmod">
                <debug_text text="'product: ' + $products.{$i}.name + ': ' + $products.{$i}.iscrafting + ', ' + $products.{$i}.isequipmentmod" />
                <add_encyclopedia_entry type="inventory_wares" item="$products.{$i}.id" />
                <set_value name="$resources" exact="$products.{$i}.resources.list" />
                <do_all exact="$resources.count" counter="$j">
                  <add_encyclopedia_entry type="inventory_wares" item="$resources.{$j}.id" />
                </do_all>
              </do_if>
            </do_all>
          </actions>
        </library>

        <library name="NotificationCraftingProgress">
          <actions>
            <!-- Input: $products (required crafting products), $tickertext -->
            <!-- Output: For each crafting product: added crafting progress row to $tickertext -->
            <do_all exact="$products.count" counter="$i">
              <do_if value="$products.{$i}.iscrafting and $tickertext.count le 4">
                <set_value name="$resources" exact="$products.{$i}.resources.list" />
                <set_value name="$progresscount" exact="0" />
                <set_value name="$totalcount" exact="0" />
                <set_value name="$singleitems" exact="true" />
                <do_all exact="$resources.count" counter="$j">
                  <set_value name="$inventorycount" exact="player.entity.inventory.{$resources.{$j}}.count" />
                  <set_value name="$requiredcount" exact="$products.{$i}.resources.{$resources.{$j}}.count" />
                  <!-- Minor hack because the collected ware is not in the inventory yet when opening a crate -->
                  <do_if value="event.name == 'event_player_opened_crate'">
                    <set_value name="$inventorycount" operation="add" exact="event.param.wares.{$resources.{$j}}.count" />
                  </do_if>
                  <!-- Product has only one resource, show amount progress (e.g. 500/1000 Scrap Metal ready for crafting Metal Alloys) -->
                  <set_value name="$progresscount" operation="add" exact="[$inventorycount, $requiredcount].min" />
                  <set_value name="$totalcount" operation="add" exact="$requiredcount" />
                  <do_if value="$requiredcount != 1">
                    <set_value name="$singleitems" exact="false" />
                  </do_if>
                </do_all>
                <do_if value="$singleitems or $resources.count == 1">
                  <!-- Show exact number of wares -->
                  <append_to_list name="$tickertext" exact="{1015,130}" />
                  <append_to_list name="$tickertext" exact="''" />
                  <append_to_list name="$tickertext" exact="$products.{$i}.name" />
                  <append_to_list name="$tickertext" exact="'%1 / %2'.[$progresscount, $totalcount]" />
                </do_if>
                <do_elseif value="$totalcount" min="1">
                  <!-- Show percentage -->
                  <append_to_list name="$tickertext" exact="{1015,130}" />
                  <append_to_list name="$tickertext" exact="''" />
                  <append_to_list name="$tickertext" exact="$products.{$i}.name" />
                  <append_to_list name="$tickertext" exact="'%1 %%'.[$progresscount * 100 / $totalcount]" />
                </do_elseif>
              </do_if>
            </do_all>
          </actions>
        </library>

        <cue name="DropCollected" instantiate="true" namespace="this" version="2">
          <conditions>
            <check_any>
              <event_player_collected_ammo />
              <event_player_collected_ware />
              <event_player_crafted_ammo />
            </check_any>
          </conditions>
          <actions>
            <set_value name="$duration" exact="5s" />
            <do_if value="event.name == 'event_player_collected_ammo'">
              <!-- <debug_text text="'Player ship collected ammo, macro=%1, display name=%2, amount=%3'.[event.param, event.param.name, event.param2]"/> -->
              <show_notification text="[{1015,42}, '', event.param.name, event.param2]" timeout="$duration" comment="Ammo collected" />
            </do_if>
            <do_elseif value="event.name == 'event_player_crafted_ammo'">
              <!-- <debug_text text="'Player crafted ammo, macro=%1, display name=%2, amount=%3'.[event.param, event.param.name, event.param2]"/> -->
              <show_notification text="[{1015,50}, '', event.param.name, event.param2]" timeout="$duration" comment="Ammo received" />
            </do_elseif>
            <do_else>
              <!-- <debug_text text="'Player ship collected ware container, ware=%1, display name=%2, amount=%3'.[event.param, event.param.name, event.param2]"/> -->
              <set_value name="$tickertext" exact="[{1015,44}, '', event.param.name, event.param2]" />
              <set_value name="$priority" exact="1" />
              <!-- Treat rare/important wares differently: Higher priority, longer duration, special notification sound -->
              <do_if value="event.param.iscrafting">
                <set_value name="$products" exact="event.param.products.list" />
                <do_if value="$products.count">
                  <include_actions ref="AddKnownCraftingWares" />
                  <include_actions ref="NotificationCraftingProgress" />
                  <set_value name="$duration" exact="4s + ($tickertext.count * 1s)" />
                  <set_value name="$important" />
                </do_if>
              </do_if>
              <do_elseif value="event.param.israre">
                <set_value name="$duration" exact="6s" />
                <set_value name="$important" />
              </do_elseif>
              <do_if value="event.param.illegal or @event.param.illegalto.{player.zone.owner}.{faction.player}">
                <set_value name="$priority" exact="2" comment="Critical priority, highlighted as red" />
                <set_value name="stat.illegal_drops_collected" operation="add" />
                <!-- TODO @Owen / Roger / Lorraine: add something back in here as necessary? This hint text has been removed for now -->
                <!--show_help line="380" log="true" comment="There are illegal items in your inventory. Either drop them or avoid being scanned by police." /-->
              </do_if>
              <do_if value="$important?">
                <show_notification text="$tickertext" priority="$priority" sound="notification_rareitemcollected" timeout="$duration" />
              </do_if>
              <do_else>
                <show_notification text="$tickertext" priority="$priority" timeout="3s" />
              </do_else>
            </do_else>
            <do_if value="event.param == ware.inv_crystal_05">
              <unlock_achievement name="MINE_CRYSTAL" />
            </do_if>
            <set_value name="stat.drops_collected" operation="add" />
          </actions>
        </cue>

        <cue name="VolatileInventoryRemoved" instantiate="true" namespace="this">
          <conditions>
            <event_player_lost_volatile_wares />
          </conditions>
          <actions>
            <set_value name="$logtext" exact="[]" />
            <set_value name="$wares" exact="event.param.keys.list" />
            <do_all exact="$wares.count" counter="$i">
              <append_to_list name="$logtext" exact="$wares.{$i}.name" />
              <append_to_list name="$logtext" exact="event.param.{$wares.{$i}}" />
            </do_all>
            <!-- Set up $tickertext from $logtext -->
            <set_value name="$tickertext" exact="$logtext.clone" />
            <set_value name="$tickertext.{1}" operation="insert" exact="{1015,102}" />
            <set_value name="$tickertext.{2}" operation="insert" exact="''" />
            <include_actions ref="TruncateTickerText" />
            <show_notification text="$tickertext" priority="2" sound="notification_warning" />
            <write_to_logbook category="general" title="{1015,102}" text="$logtext" />
          </actions>
        </cue>

        <cue name="PlayerWarning" instantiate="true" namespace="static">
          <conditions>
            <event_player_warning />
            <!-- Warning: We are using dynamic variable names here -->
            <!-- Check if either variable does not exist or its value is less than 3 -->
            <check_value value="@static.{'$count' + event.param2}" max="3" />
          </conditions>
          <actions>
            <set_value name="static.{'$count' + event.param2}" operation="add" />
            <debug_text text="'Copilot warning, component=%1, text line=%2, counter updated to %3'.[event.param.knownname, event.param2, static.{'$count' + event.param2}]"/>
            <do_if value="event.param2 == 3">
              <!-- Don't use 3 as text ID -->
              <speak actor="player.computer" line="60" priority="20" />
            </do_if>
            <do_else>
              <debug_text filter="error" text="'Unsupported copilot warning, ID=' + event.param2" />
            </do_else>
          </actions>
        </cue>

        <!-- Achievement for docking at a ship that is docked at a capital ship. -->
        <cue name="AchievementPiggyback">
          <conditions>
            <event_object_docked group="global.$PlayerOccupiedShipGroup" />
            <check_value value="event.param.isclass.ship and @event.param.dock.container.iscapitalship" />
          </conditions>
          <actions>
            <unlock_achievement name="PIGGYBACK" />
          </actions>
        </cue>

        <cue name="AchievementTeleport">
          <conditions>
            <event_player_teleport_successful shortcut="false" />
          </conditions>
          <actions>
            <unlock_achievement name="TELEPORT" />
          </actions>
        </cue>

        <cue name="AchievementResearchFinished">
          <conditions>
            <event_player_production_finished research="true" />
          </conditions>
          <actions>
            <unlock_achievement name="RESEARCH" />
          </actions>
        </cue>

        <cue name="CountPlayerOwnedObjects" version="3" namespace="static">
          <actions>
            <!-- <set_value name="$debugchance" exact="100" /> -->
            <find_ship name="$ships" space="player.galaxy" owner="faction.player" recursive="true" unit="false" multiple="true">
              <match class="class.spacesuit" negate="true" />
            </find_ship>
            <find_station name="$stations" space="player.galaxy" owner="faction.player" multiple="true" />
            <set_value name="stat.ships_owned" exact="$ships.count" />
            <set_value name="stat.stations_owned" exact="$stations.count" />
            <remove_value name="$ships" />
            <remove_value name="$stations" />
            <debug_text text="'Initial player property counters: ships_owned = %s, stations_owned = %s'.[stat.ships_owned, stat.stations_owned]" chance="@$debugchance" />
          </actions>
          <patch sinceversion="3">
            <!-- Find all ships and stations again to fix possibly incorrect counters -->
            <reset_cue cue="this" />
          </patch>
          <cues>
            <cue name="OnPlayerOwnedChanged" instantiate="true" namespace="this">
              <conditions>
                <!-- Collection of events that cause the number player-owned operational objects in the universe to change (may include false positives) -->
                <check_any>
                  <!-- Existing non-operational player-owned object becomes operational -->
                  <event_player_built_ship/>
                  <event_player_built_station/>
                  <!-- Existing player-owned object is removed or becomes non-operational (wreck) -->
                  <event_player_owned_destroyed />
                  <check_all>
                    <check_any>
                      <!-- Player-owned operational object is newly spawned -->
                      <event_object_entered space="player.galaxy" />
                      <!-- Existing operational object changes owner to or from player -->
                      <event_contained_object_changed_true_owner space="player.galaxy" owner="faction.player" />
                      <event_contained_object_changed_true_owner space="player.galaxy" previous="faction.player" />
                    </check_any>
                    <check_value value="(event.name == 'event_contained_object_changed_true_owner' or event.param.isplayerowned) and event.param.isoperational" />
                  </check_all>
                </check_any>
                <!-- Only process objects that we are interested in, skip everything else -->
                <check_value value="event.param.isrealclass.[class.ship, class.station] and not event.param.isunit and not event.param.isrealclass.spacesuit" />
              </conditions>
              <actions>
                <!-- In all event cases, event.param is the object that is added to/removed from the total. -->
                <!-- Let's just count number of ships/stations again, because incrementing/decrementing is error-prone -->
                <do_if value="event.param.isrealclass.ship">
                  <find_ship name="$ships" space="player.galaxy" owner="faction.player" recursive="true" unit="false" multiple="true">
                    <match class="class.spacesuit" negate="true" />
                  </find_ship>
                  <debug_text text="'stat.ships_owned = %s (was %s)'.[$ships.count, stat.ships_owned]" chance="($ships.count != stat.ships_owned) * @parent.$debugchance" />
                  <set_value name="stat.ships_owned" exact="$ships.count" />
                </do_if>
                <do_elseif value="event.param.isrealclass.station">
                  <find_station name="$stations" space="player.galaxy" owner="faction.player" multiple="true" />
                  <debug_text text="'stat.stations_owned = %s (was %s)'.[$stations.count, stat.stations_owned]" chance="($stations.count != stat.stations_owned) * @parent.$debugchance" />
                  <set_value name="stat.stations_owned" exact="$stations.count" />
                </do_elseif>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="OnDockingDenied" instantiate="true">
          <conditions>
            <event_object_docking_denied group="global.$PlayerOccupiedShipGroup" />
          </conditions>
          <actions>
            <speak actor="player.computer" line="556" priority="-30" comment="Docking denied." />
          </actions>
        </cue>

        <cue name="OnDockingImpossible" instantiate="true" namespace="this">
          <conditions>
            <event_object_docking_impossible group="global.$PlayerOccupiedShipGroup" />
          </conditions>
          <actions>
            <speak actor="player.computer" line="558" priority="-30" comment="Docking not possible." />

            <do_if value="not event.param.isplayerowned and not event.param.controlentity.default">
              <show_help position="1" line="1065" comment="The target has no one on board who could grant you docking permission."/>
            </do_if>
            <do_else>
              <find_dockingbay name="$DockingBays" multiple="true" object="event.param">
                <!--this should match the conditions in Player::RequestDockAt() - currently: ignore whether docks are currently free, disallow venture docks-->
                <match_dock allowplayeronly="true"/>
              </find_dockingbay>
              <create_list name="$DockSizes"/>
              <do_for_each name="$DockingBay" in="$DockingBays">
                <do_for_each name="$DockSize" in="$DockingBay.macro.docksizes">
                  <do_if value="not $DockSizes.indexof.{$DockSize}">
                    <append_to_list name="$DockSizes" exact="$DockSize"/>
                  </do_if>
                </do_for_each>
              </do_for_each>
              <do_if value="$DockSizes.indexof.{tag.dock_xs}">
                <do_if value="$DockSizesString?">
                  <set_value name="$DockSizesString" exact="$DockSizesString + readtext.{1012}.{1062} + readtext.{1001}.{52}"/>
                </do_if>
                <do_else>
                  <set_value name="$DockSizesString" exact="readtext.{1001}.{52}"/>
                </do_else>
              </do_if>
              <do_if value="$DockSizes.indexof.{tag.dock_s}">
                <do_if value="$DockSizesString?">
                  <set_value name="$DockSizesString" exact="$DockSizesString + readtext.{1012}.{1062} + readtext.{1001}.{51}"/>
                </do_if>
                <do_else>
                  <set_value name="$DockSizesString" exact="readtext.{1001}.{51}"/>
                </do_else>
              </do_if>
              <do_if value="$DockSizes.indexof.{tag.dock_m}">
                <do_if value="$DockSizesString?">
                  <set_value name="$DockSizesString" exact="$DockSizesString + readtext.{1012}.{1062} + readtext.{1001}.{50}"/>
                </do_if>
                <do_else>
                  <set_value name="$DockSizesString" exact="readtext.{1001}.{50}"/>
                </do_else>
              </do_if>
              <do_if value="$DockSizes.indexof.{tag.dock_l}">
                <do_if value="$DockSizesString?">
                  <set_value name="$DockSizesString" exact="$DockSizesString + readtext.{1012}.{1062} + readtext.{1001}.{49}"/>
                </do_if>
                <do_else>
                  <set_value name="$DockSizesString" exact="readtext.{1001}.{49}"/>
                </do_else>
              </do_if>
              <do_if value="$DockSizes.indexof.{tag.dock_xl}">
                <do_if value="$DockSizesString?">
                  <set_value name="$DockSizesString" exact="$DockSizesString + readtext.{1012}.{1062} + readtext.{1001}.{48}"/>
                </do_if>
                <do_else>
                  <set_value name="$DockSizesString" exact="readtext.{1001}.{48}"/>
                </do_else>
              </do_if>
              <do_if value="$DockSizesString?">
                <substitute_text text="$TransporterHintText" source="{1012,1064}" comment="The target has no docks fitting your ship size. Possible dock sizes are: %DOCKSIZELIST%. You can dock at the target using your spacesuit.">
                  <replace string="'%DOCKSIZELIST%'" with="$DockSizesString"/>
                </substitute_text>
                <show_help position="1" custom="$TransporterHintText"/>
              </do_if>
              <do_else>
                <!--this shouldn't be possible with properly set up assets, but better safe than sorry-->
                <show_help position="1" line="1060" comment="The target has no docks fitting your ship size."/>
              </do_else>
            </do_else>
          </actions>
        </cue>

        <cue name="OnDockTooFar" instantiate="true">
          <conditions>
            <event_object_dock_too_far group="global.$PlayerOccupiedShipGroup" />
          </conditions>
          <actions>
            <speak actor="player.computer" line="561" priority="-30" comment="Out of docking range." />
          </actions>
        </cue>

        <cue name="OnDockingQueued" instantiate="true">
          <conditions>
            <event_object_docking_queued group="global.$PlayerOccupiedShipGroup" />
          </conditions>
          <actions>
            <speak actor="player.computer" line="562" priority="-30" comment="Docking queued." />
          </actions>
        </cue>

        <cue name="OnDockingGranted" instantiate="true">
          <conditions>
            <event_object_dock_assigned group="global.$PlayerOccupiedShipGroup" />
          </conditions>
          <actions>
            <speak actor="player.computer" line="555" priority="-30" comment="Docking granted." />
          </actions>
        </cue>

        <cue name="OnDockingAborted" instantiate="true">
          <conditions>
            <event_object_docking_aborted group="global.$PlayerOccupiedShipGroup" />
          </conditions>
          <actions>
            <speak actor="player.computer" line="557" priority="-30" comment="Docking aborted." />
          </actions>
        </cue>

        <cue name="OnDocked" instantiate="true">
          <conditions>
            <event_object_docked group="global.$PlayerOccupiedShipGroup" />
          </conditions>
          <actions>
            <set_value name="$station" exact="event.param" />
            <speak actor="player.computer" line="559" priority="-30" comment="Successfully docked." />
            <!-- 4 second sample -->
            <play_sound object="player.ship" sound="'cuts_landing_ships_01'"/>
          </actions>
          <cues>
            <cue name="DockGreeting">
              <conditions>
                <event_speak_finished actor="player.computer" page="player.computer.page" line="559" />
                <check_value value="$station.tradenpc" />
              </conditions>
              <delay min="1.0s" max="4.0s" />
              <actions>
                <set_value name="$uivalue" exact="$station.owner.relation.{$station.relationto.{faction.player}}.uivalue" />
                <do_if value="$uivalue ge 20 or $station.owner == faction.player">
                  <speak actor="$station.tradenpc" line="10727" priority="50" comment="(welcome aboard - owned/allied)" />
                </do_if>
                <do_elseif value="$uivalue ge 10">
                  <speak actor="$station.tradenpc" line="10728" priority="50" comment="(welcome aboard - friendly)" />
                </do_elseif>
                <do_else>
                  <speak actor="$station.tradenpc" line="2012" priority="50" comment="(welcome aboard - neutra)" />
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="AutoSave" namespace="static">
          <actions>
            <set_value name="$debugautosave" exact="0" />
            <debug_text text="'AutoSave cue started'" chance="$debugautosave" />
          </actions>
          <cues>
            <cue name="AutoSave_OnGameSaved" instantiate="true">
              <conditions>
                <check_any>
                  <event_game_loaded />
                  <event_game_saved success="true" />
                </check_any>
              </conditions>
              <actions>
                <reset_cue cue="AutoSave" />
              </actions>
            </cue>
            <!-- Timer-based autosave: If maxtime is valid, request autosave after maxtime -->
            <cue name="AutoSave_AfterMaxTime" checktime="player.age + param.autosave.maxtime * player.autosave.factor" onfail="cancel">
              <conditions>
                <check_value value="param.autosave.maxtime * player.autosave.factor" min="1min" />
              </conditions>
              <actions>
                <debug_text text="'Requesting timed autosave after maxtime=%s, retrytimeout=%s'.[param.autosave.maxtime * player.autosave.factor, param.autosave.retrytimeout]" chance="$debugautosave" />
                <set_value name="$retrytimeout" exact="player.age + param.autosave.retrytimeout" />
                <signal_cue cue="AutoSave_Request" check="false" />
                <!-- Repeat Restart timer for next autosave already on request -->
                <reset_cue cue="this" />
              </actions>
            </cue>
            <!-- Event-based autosave: If mintime is valid, start listening for trigger events after mintime -->
            <cue name="AutoSave_AfterMinTime" checktime="player.age + param.autosave.mintime * player.autosave.factor" onfail="cancel">
              <conditions>
                <check_value value="param.autosave.mintime * player.autosave.factor" min="1min" />
              </conditions>
              <actions>
                <debug_text text="'Starting autosave triggers after mintime=%s'.[param.autosave.mintime * player.autosave.factor]" chance="$debugautosave" />
              </actions>
              <cues>
                <cue name="AutoSave_Triggers" instantiate="true">
                  <conditions>
                    <check_any>
                      <!-- Player is undocking as pilot -->
                      <event_object_undocked group="global.$PlayerOccupiedShipGroup" />
                      <!-- Player is docking as passenger -->
                      <check_all>
                        <event_object_docked group="global.$PlayerContainerGroup" />
                        <check_value value="not player.occupiedship" />
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Got trigger \'%s\', requesting autosave, retrytimeout=%s'.[event.name, param.autosave.retrytimeout]" chance="$debugautosave" />
                    <set_value name="$retrytimeout" exact="player.age + param.autosave.retrytimeout" />
                    <signal_cue cue="AutoSave_Request" check="false" />
                  </actions>
                </cue>
                <cue name="AutoSave_DelayedTriggers" instantiate="true">
                  <conditions>
                    <check_any>
                      <!-- Player leaves gate / anomaly / superhighway gate (note: Betty starts talking after 2 seconds) -->
                      <check_all>
                        <event_object_changed_sector object="player.entity" />
                        <check_value value="event.param != null" />
                      </check_all>
                      <!-- Player finishes conversation -->
                      <event_conversation_finished />
                    </check_any>
                  </conditions>
                  <delay exact="0.9s" />
                  <actions>
                    <debug_text text="'Got trigger \'%s\', requesting autosave, retrytimeout=%s'.[event.name, param.autosave.retrytimeout]" chance="$debugautosave" />
                    <set_value name="$retrytimeout" exact="player.age + param.autosave.retrytimeout" />
                    <signal_cue cue="AutoSave_Request" check="false" />
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="AutoSave_Request">
              <conditions>
                <!-- Not instantiating because only one request can be handled at a time. The cue is reset when the request succeeds/fails. -->
                <event_cue_signalled />
              </conditions>
              <cues>
                <!-- Attempt to save every second untile $retrytimeout is reached -->
                <cue name="AutoSave_Attempt" checkinterval="1s" instantiate="true">
                  <actions>
                    <do_if value="player.autosave.available">
                      <!-- Success: Perform autosave -->
                      <debug_text text="'Autosaving - last autosave/load was %1 minutes ago'.[(player.age - AutoSave.time) / 1min]" chance="$debugautosave" />
                      <trigger_autosave />
                      <reset_cue cue="AutoSave" />
                    </do_if>
                    <do_elseif value="player.age gt $retrytimeout">
                      <!-- Autosave request failed: Just ignore and wait for next autosave request -->
                      <debug_text text="'Autosave request failed'" chance="$debugautosave" />
                      <reset_cue cue="AutoSave_Request" />
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="StationAnnouncements" namespace="this">
          <conditions>
            <event_object_changed_room object="player.entity" />
            <check_value value="@player.platform.station and not player.ship" />
          </conditions>
          <actions>
            <set_value name="$nextspeaktime" min="player.age + 40s" max="player.age + 60s" />
            <set_value name="$convcounter" exact="0" comment="Non-zero when a conversation is active" />
          </actions>
          <cues>

            <!-- Reset if player undocks from landing platform, or enters a landed ship (which could take off, and detecting that is harder than excluding landed ships) -->
            <cue name="StationAnnouncements_OnUndock">
              <conditions>
                <event_object_changed_room object="player.entity" />
                <check_value value="@player.platform.station and not player.ship" negate="true" />
              </conditions>
              <actions>
                <reset_cue cue="StationAnnouncements" />
              </actions>
            </cue>
            <cue name="StationAnnouncements_CheckConversationState" instantiate="true">
              <conditions>
                <check_any>
                  <check_all>
                    <event_conversation_started />
                    <set_value name="$convcounter" operation="add" />
                  </check_all>
                  <check_all>
                    <event_conversation_finished />
                    <set_value name="$convcounter" operation="subtract" />
                  </check_all>
                </check_any>
              </conditions>
            </cue>
            <cue name="StationAnnouncements_PrepareSpeak" instantiate="true" checkinterval="5s">
              <conditions>
                <check_age min="$nextspeaktime" />
              </conditions>
              <actions>
                <set_value name="$textid" min="1001" max="1022" />
                <set_value name="$nextspeaktime" min="player.age + 60s" max="player.age + 120s" profile="bell" scale="2" />
                <!-- Skip station announcement if someone is already talking or a conversation is active. And use the line "spaceweed is illegal here" only if that's actually true ;) -->
                <do_if value="$convcounter == 0 and player.speakpriority lt -60 and ($textid != 1002 or (player.zone.policefaction and ware.spaceweed.illegalto.{player.zone.policefaction}.{null}))">
                  <play_sound object="player.room" sound="'station_announcement_jingle'" />
                </do_if>
                <do_else>
                  <cancel_cue cue="this" />
                </do_else>
              </actions>
              <cues>
                <cue name="StationAnnouncements_Speak">
                  <delay exact="2s" />
                  <actions>
                    <!-- Page 10099 has a special broadcast filter for station announcements -->
                    <speak actor="player.computer" page="10099" line="$textid" priority="-60" broadcast="true" />
                  </actions>
                </cue>
              </cues>
            </cue>

          </cues>
        </cue>

        <cue name="ChangedJurisdiction" instantiate="true" namespace="this">
          <conditions>
            <event_object_changed_sector object="player.entity"/>
            <debug_text text="'old police faction: %s,\nnew police faction: %s\nhas illegal cargo? %s'.[@event.param2.policefaction, @event.param.policefaction, @player.occupiedship.cargo.illegalto.{event.param.policefaction}]" debugchance="0"/>
            <check_value value="@event.param.policefaction and event.param2 and event.param.policefaction != @event.param2.policefaction"/>
          </conditions>
          <delay exact="1s"/>
          <actions>
            <set_value name="$policefaction" exact="event.param.policefaction"/>
            <do_if value="$policefaction and $policefaction != faction.player and (@player.occupiedship.cargo.illegalto.{$policefaction} or player.entity.inventory.illegalto.{$policefaction})">
              <do_if value="@player.occupiedship.cargo.illegalto.{$policefaction} and player.entity.inventory.illegalto.{$policefaction}">
                <show_notification text="{1015, 142}.[$policefaction.name]" timeout="10s" priority="1" comment="You have entered space protected by: %1.\nThere are items in your cargo hold and inventory that are illegal to: %1"/>
              </do_if>
              <do_elseif value="@player.occupiedship.cargo.illegalto.{$policefaction}">
                <show_notification text="{1015, 141}.[$policefaction.name]" timeout="10s" priority="1" comment="You have entered space protected by: %1.\nThere is cargo in your cargo hold that is illegal to: %1"/>
              </do_elseif>
              <do_else>
                <show_notification text="{1015, 140}.[$policefaction.name]" timeout="10s" priority="1" comment="You have entered space protected by: %1.\nThere are items in your inventory that are illegal to: %1"/>
              </do_else>
            </do_if>
            <cancel_cue cue="this"/>
          </actions>
          <cues>
            <!-- this is in case the player changes sectors again before the delay is over. -->
            <cue name="ChangedJurisdictionCancel">
              <conditions>
                <event_object_changed_sector object="player.entity"/>
                <check_value value="event.param.owner != event.param2.owner"/>
              </conditions>
              <actions>
                <cancel_cue cue="ChangedJurisdiction"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="ChangedSpace" instantiate="true" namespace="this">
          <conditions>
            <event_object_changed_sector object="player.entity" />
            <check_value value="event.param != null" />
            <set_value name="$lastchange" exact="player.age" comment="Stored in static cue!" />
          </conditions>
          <delay exact="2s"/>
          <actions>
            <do_if value="@md.$SuppressChangedSpace or not event.param.exists">
              <cancel_cue cue="this"/>
            </do_if>
            <do_else>
              <set_value name="$newsector" exact="event.param"/>
              <set_value name="$oldsector" exact="event.param2"/>

              <!-- If $oldsector != null (i.e. we did not just fly through a superhighway), the clusters do not match and the system IDs do not match, then we have changed star systems -->
              <do_if value="$oldsector != null and $newsector.cluster != $oldsector.cluster and ($newsector.cluster.systemid == 0 or $newsector.cluster.systemid != $oldsector.cluster.systemid)">
                <!-- star system has changed -->
                <speak actor="player.computer" priority="5">
                  <text line="600" />
                  <name value="$newsector.cluster" />
                </speak>
              </do_if>
              <!-- Otherwise we have just changed stellar region (effectively) -->
              <do_else>
                <!-- sector within a cluster or cluster within a system has changed -->
                <speak actor="player.computer" priority="5">
                  <text line="601" />
                  <name value="$newsector" />
                </speak>
              </do_else>

              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="ChangedSpaceCancel">
              <conditions>
                <event_object_changed_sector object="player.entity"/>
              </conditions>
              <actions>
                <cancel_cue cue="ChangedSpace"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="PlayerShipDamage" namespace="static">
          <actions>
            <set_value name="$severity" exact="0" comment="1: Shields critical, 2: Hull damaged, 3: Hull critical" />
            <set_value name="$nextspeaktime" exact="0s" />
          </actions>
          <cues>
            <cue name="PlayerShipDamageFeedback">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <!-- Only the first signal triggers the cue, further signals are ignored until after the short delay. -->
              <!-- In this time several damage events can happen, and Betty will report the most severe one. Afterwards, the cue is reset to wait for the next signal. -->
              <delay exact="200ms" />
              <actions>
                <do_if value="player.computer">
                  <do_if value="$severity" exact="1">
                    <speak actor="player.computer" line="50" priority="20" comment="Shields critical." />
                  </do_if>
                  <do_elseif value="$severity" exact="2">
                    <speak actor="player.computer" line="55" priority="20" comment="Hull damaged." />
                  </do_elseif>
                  <do_elseif value="$severity" exact="3">
                    <speak actor="player.computer" line="56" priority="20" comment="Hull critical." />
                  </do_elseif>
                </do_if>
                <set_value name="$severity" exact="0" />
                <set_value name="$nextspeaktime" exact="player.age + 2s" />
                <reset_cue cue="this" />
              </actions>
            </cue>

            <!-- 
            <cue name="PlayerShipShieldDamaged" instantiate="true">
              <conditions>
                <event_object_shield_damaged group="global.$PlayerContainerGroup" />
                <check_value value="event.object.isclass.ship and event.object.isplayerowned" />
                <check_age min="$nextspeaktime" />
              </conditions>
              <actions>
                <do_if value="event.object.shieldpercentage le 25 and (event.param2 + event.param3) gt event.object.maxshield * 25 / 100">
                  <set_value name="$severity" exact="[$severity, 1].max" />
                  <signal_cue cue="PlayerShipDamageFeedback" check="false" />
                </do_if>
              </actions>
            </cue>
 -->

            <cue name="PlayerShipHullDamaged" instantiate="true">
              <conditions>
                <event_object_hull_damaged group="global.$PlayerContainerGroup" />
                <check_value value="event.object.isclass.ship and event.object.isplayerowned" />
                <check_age min="$nextspeaktime" />
              </conditions>
              <actions>
                <do_if value="event.object.hullpercentage le 25 and (event.param2 + event.param3) gt event.object.maxhull * 25 / 100">
                  <set_value name="$severity" exact="[$severity, 3].max" />
                  <signal_cue cue="PlayerShipDamageFeedback" check="false" />
                </do_if>
                <do_elseif value="event.object.hullpercentage le 75 and (event.param2 + event.param3) gt event.object.maxhull * 75 / 100">
                  <set_value name="$severity" exact="[$severity, 2].max" />
                  <signal_cue cue="PlayerShipDamageFeedback" check="false" />
                </do_elseif>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="PlayerOwnedShipAttacks" instantiate="true" namespace="this">
          <conditions>
            <check_any>
              <event_player_owned_attacked_object/>
              <event_cue_signalled/>
            </check_any>
            <set_value name="$target" exact="if event.name == 'event_player_owned_attacked_object' then event.param2 else event.param"/>
            <check_value value="$target and $target.isoperational"/>
            <check_value value="$target.isclass.ship and $target.pilot.exists" />
            <check_value value="not $target.isclass.station" comment="TODO for stations?" />
            <check_value value="not $target.isplayerowned" />
            <check_value value="not $target.isunit"/>
            <check_value value="not $target.islasertower"/>
            <check_value value="@$target.order.state != orderstate.critical"/>
          </conditions>
          <actions>
            <do_if value="event.name == 'event_player_owned_attacked_object'">
              <set_value name="$target" exact="event.param2"/>
              <set_value name="$attacker" exact="event.param"/>
              <debug_text text="'param: %s %s %s, param2: %s, %s, %s, param3: %s'.[event.param.idcode, event.param.knownname, event.param, event.param2.idcode, event.param2.knownname, event.param2, event.param3]" chance="0"/>
            </do_if>
            <do_else>
              <set_value name="$target" exact="event.param"/>
              <set_value name="$attacker" exact="player.occupiedship"/>
            </do_else>

            <!-- MAINTENANCE: keep synced with surrender conditions in md.Conversations.DefaultComm -->
            <!-- chance that the pilot bails out-->
            <do_if value="$target.iscapturable">
              <do_if value="$target.pilot.owner != faction.player">
                <do_if value="event.name == 'event_cue_signalled'">
                  <set_value name="$Speak_Line" exact="5037" comment="(refusal to surrender - in danger)" />
                </do_if>
                <!-- Dismiss ship if it has shields which above 20%, hull above 75%, or is a capital ship with no service personnel on board. -->
                <do_if value="if not $testcheat? then (((not $target.maxshield) or ($target.shieldpercentage lt 20)) and ($target.hullpercentage lt 75) and not $target.assigneddock and (not $target.iscapitalship or $target.people.count)) else true">
                  <do_if value="not $target.pilot.$nextcapturechance?">
                    <set_value name="$target.pilot.$nextcapturechance" exact="player.age - 1s" />
                  </do_if>
                  <do_if value="if not $testcheat? then ($target.pilot.$nextcapturechance lt player.age) else true">
                    <!-- TODO: chance to reduce morale? -->
                    <!-- response to demand to surrender. reflects the nerve of the captain and his ability to hold the crew together. -->
                    <do_if value="event.name != 'event_cue_signalled' or (($target.people.count)f / ($target.people.capacity)f) lt ((16 - $target.pilot.skill.morale)f / 16.0)">
                      <!-- ejectchance range: 23-46%, inversely proportional to crew skill,
                        multiplied by (targetmaxhull)/(mymaxhull) capped to 1.0,
                        multiplied by (((myshieldperc+myhullperc)/(targetshieldperc+targethullperc))) capped to 1.0,
                        reduced to a quarter if attacker is not personally flown by the player. -->
                      <!-- crew just making a run for it. looks at crew state as a whole and rough state of the battle. -->
                      <set_value name="$ejectchance" exact="( (46 - $target.combinedskill / 5) * [(($target.maxhull)f / [($attacker.maxhull)f, 1.0].max), 1.0].min * [(($attacker.shieldpercentage + $attacker.hullpercentage) / [($target.shieldpercentage + $target.hullpercentage), 1.0].max), 1.0].min )i"/>
                      <do_if value="$attacker != @player.occupiedship">
                        <set_value name="$ejectchance" exact="$ejectchance / 4"/>
                      </do_if>
                      <do_if value="$target.iscapitalship">
                        <set_value name="$ejectchance" exact="$ejectchance / 2"/>
                      </do_if>
                      <debug_text text="player.age + ' %s %s %s attacking %s %s %s.\n eject chance %s. base: %s, hull class ratio: %s, current damage ratio: %s, attacker is player: %s'.[$attacker.idcode, $attacker.knownname, $attacker, $target.idcode, $target.knownname, $target, $ejectchance, 18 - $target.pilot.skill.morale, ($target.maxhull)f / ($attacker.maxhull)f, (($attacker.shieldpercentage + $attacker.hullpercentage) / ($target.shieldpercentage + $target.hullpercentage)), $attacker == @player.occupiedship]" chance="0"/>
                      <do_if value="true" chance="if not $testcheat? then $ejectchance else 100">
                        <do_if value="event.name == 'event_cue_signalled'">
                          <set_value name="$numcrewbailing" exact="$target.people.count"/>
                        </do_if>
                        <do_else>
                          <!-- number of crew members that bail is proportional to the pilot's (later, the entire crew's) morale with a minimum of 1 crew member. capped to 3 at a time so that a ship with a bigger crew complement would have to bail more times before the ship is abandoned. -->
                          <set_value name="$numcrewbailing" exact="[[[($target.people.capacity * ((15 - $target.pilot.skill.morale)f / 15.0))i, $target.people.count].min, 1].max, 3].min"/>
                        </do_else>

                        <do_if value="($numcrewbailing ge $target.people.count) and not $target.iscapitalship">
                          <!-- pilot and remaining crew all bail -->
                          <set_value name="$pilotbail"/>
                          <set_value name="$damageminpercent" exact="100 - $target.pilot.combinedskill"/>
                          <do_if value="$attacker == @player.occupiedship">
                            <set_value name="$Speak_Line" exact="10034" />
                          </do_if>
                        </do_if>

                        <set_value name="$eject"/>
                      </do_if>

                      <do_if value="not @$pilotbail">
                        <!-- increment nextcapturechance regardless of whether any crew bails unless the pilot is set to bail, but only if ejectchance is actually evaluated. -->
                        <set_value name="$target.pilot.$nextcapturechance" exact="player.age + 30s" />
                        <debug_text text="'next chance ' + $target.pilot.$nextcapturechance" chance="0" />
                      </do_if>
                    </do_if>
                  </do_if>
                </do_if>

                <do_if value="$Speak_Line? and $target.owner != faction.xenon">
                  <do_if value="event.name == 'event_cue_signalled' and player.isinconversation">
                    <!-- Add NPC response for 'g_surrender' conversation section -->
                    <add_npc_line line="$Speak_Line"/>
                  </do_if>
                  <do_else>
                    <speak actor="$target.pilot" line="$Speak_Line" />
                  </do_else>
                </do_if>

                <do_if value="$eject?">
                  <debug_text text="'%s crew are about to bail from %s %s %s %s'.[$numcrewbailing, $target.class, $target.idcode, $target.knownname, $target]" chance="0"/>
                  <eject_people object="$target" attacker="$attacker" max="$numcrewbailing"/>
                  <remove_value name="$numcrewbailing"/>

                  <do_if value="$pilotbail?">
                    <substitute_text text="$logtext" source="{1016,79}" comment="Forced pilot to leave ship $SHIP$ in sector $SECTOR$.">
                      <replace string="'$SHIP$'" with="$target.knownname" />
                      <replace string="'$SECTOR$'" with="$target.pilot.sector.knownname" />
                    </substitute_text>
                    <write_to_logbook category="upkeep" title="$logtext" interaction="showonmap" object="$target"/>
                    <debug_text text="'pilot about to bail from %s %s %s %s'.[$target.class, $target.idcode, $target.knownname, $target]" chance="0"/>

                    <create_order id="'Wait'" object="$target" default="true">
                      <param name="allowdocked" value="not $target.iscapitalship"/>
                    </create_order>
                    <cancel_all_orders object="$target"/>
                    <do_all exact="$target.cargo.count" counter="$i" reverse="true">
                      <set_value name="$removedware" exact="$target.cargo.list.{$i}"/>
                      <set_value name="$removedmaxamount" exact="($target.cargo.{$removedware}.count * ($target.pilot.combinedskill / 100.0))i"/>
                      <debug_text text="'removing from %s to %s out of %s %s. combinedskill: %s'.[($removedmaxamount * 0.8)i, $removedmaxamount, $target.cargo.{$removedware}.count, $removedware.name, $target.pilot.combinedskill]" chance="0"/>
                      <remove_cargo object="$target" ware="$removedware" min="($removedmaxamount * 0.8)i" max="$removedmaxamount"/>
                    </do_all>
                    <cease_fire object="$target"/>
                    <eject_npcs object="$target"/>

                    <do_if value="$damageminpercent gt 0">
                      <set_object_hull object="$target" min="[$target.hullpercentage, [$damageminpercent, 5].max].min" max="[$target.hullpercentage, [$damageminpercent, 10].max].min"/>
                    </do_if>
                    <do_else>
                      <destroy_object object="$target" explosion="true"/>
                    </do_else>

                    <!-- it's important that integrated subcomponents are destroyed with no explosion. otherwise, they will leave wrecks that the game will not recognize. -->
                    <do_if value="$target.exists">
                      <!-- NB: scuttleeffect defined in defaults.xml -->
                      <add_effect object="$target" effect="$target.scuttleeffect"/>
                      <find_object_component name="$subcomponents" object="$target" class="[class.weapon, class.turret, class.shieldgenerator]" multiple="true"/>
                      <shuffle_list list="$subcomponents"/>
                      <do_all exact="[$subcomponents.count, $target.pilot.combinedskill / 10].min" counter="$i" reverse="true">
                        <debug_text text="'destroying %s'.[$subcomponents.{$i}.knownname]" chance="0"/>
                        <destroy_object object="$subcomponents.{$i}" explosion="false"/>
                        <remove_value name="$subcomponents.{$i}"/>
                      </do_all>
                    </do_if>

                    <set_value name="stat.pilots_bailed" operation="add"/>

                    <remove_value name="$pilotbail"/>
                  </do_if>
                  <remove_value name="$eject"/>
                </do_if>
              </do_if>
            </do_if>

            <do_if value="$attacker == @player.occupiedship">
              <do_if value="not global.$last_npc_notification?">
                <set_value name="global.$last_npc_notification" exact="0s" />
              </do_if>

              <!-- Object speak (at least a few seconds of wait) -->
              <do_if value="global.$last_npc_notification le (player.age - 50s) and ($target.pilot.page != 0) and not player.isinconversation">
                <remove_value name="$Speak_Line" />

                <!-- Plead for life (escape pod) --> 
                <do_if value="$target.type == shiptype.escapepod">
                  <set_value name="$Speak_Line" exact="[10024, 10025].random" comment="(plea for life)" />
                </do_if>
                <!-- The object is attacking the player -->
                <do_elseif value="$target.pilot.command.value == command.attackobject and $target.pilot.command.param == player.controlled">
                  <!--Kill-relation case: Fight or flight-->
                  <do_if value="$target.pilot.mayattack.{player.controlled}">
                    <set_value name="$Speak_Line"  exact="10015" comment="(player attacks enemy object)" />
                  </do_if>
                  <!--Enemy (non-kill), Neutral or friendly case-->
                  <do_else>
                    <do_if value="$target.pilot.hasrelation.friend.{player.controlled}">
                      <set_value name="$Speak_Line" exact="[10047, 10048, 10049].random" comment="(player attacks friendly ship)" />
                    </do_if>
                    <!--Neutral and Enemy(non-kill) case-->
                    <do_else>
                      <set_value name="$Speak_Line" exact="[10047, 10048, 10049].random" comment="(player attacks neutral ship)" />
                    </do_else>
                  </do_else>
                </do_elseif>
                <!-- If not -->
                <do_else>
                  <!-- Depending on hull/shield, say something according to it -->
                  <do_if value="$target.shieldpercentage" min="50">
                    <do_if value="$target.people.count == 1">
                      <set_value name="$Speak_Line" exact="[10047, 10048, 10049].random" comment="(hit without taking serious damage)"/>
                    </do_if>
                    <do_else>
                      <set_value name="$Speak_Line" exact="[10004, 10005, 10006].random" comment="(hit without taking serious damage)"/>
                    </do_else>
                  </do_if>
                  <do_elseif value="$target.shieldpercentage" min="10">
                    <set_value name="$Speak_Line" exact="[10007, 10008].random" comment="(serious threat threshold reached)"/>
                  </do_elseif>
                  <do_elseif value="$target.hullpercentage" min="20">
                    <do_if value="$target.people.count == 1">
                      <set_value name="$Speak_Line" exact="[10024, 10025, 10028, 10029].random" comment="(generic life threat threshold reached)"/>
                    </do_if>
                    <do_else>
                      <set_value name="$Speak_Line" exact="[10024, 10025, 10026, 10027].random" comment="(generic life threat threshold reached)"/>
                    </do_else>
                  </do_elseif>
                  <do_elseif value="$target.hullpercentage" max="5">
                    <set_value name="$Speak_Line" exact="10035" comment="(deathrattle)"/>
                  </do_elseif>
                </do_else>

                <do_if value="$Speak_Line? and $target.owner != faction.xenon">
                  <speak actor="$target.pilot" line="$Speak_Line" />
                  <set_value name="global.$last_npc_notification" exact="player.age"/>
                </do_if>

              </do_if>
            </do_if>
          </actions>
        </cue>

        <cue name="IllegalActivity" version="2" namespace="static">
          <actions>
            <set_value name="$lastvictims" exact="[]" />
            <set_value name="$lastvictimdata" exact="[]" />
            <!-- entry = [
              object (1), event (2), killmethod (3), component (4),
              last_time_attacked (5), last_time_responded (6),
              object_was_attacked (7), object_protects_3rd_party (8), protector (9), response_state (10),
              oldrelation (11), newrelation (12), relchange (13), first_time_attacked (14),
              relationchangereason (15)
              ] -->
            <set_value name="$rewardnpcs" exact="[]" />
            <set_value name="$rewardnpcdata" exact="[]" />
            <!-- entry = [
              npc (1), starttime (2), triggertime (3), relbonus (4), bounty (5), relationchangereason (6), tradesubscription (7)
              ] -->
            <set_value name="$timeout" exact="10min" comment="Time in which victim/protector data is considered valid" />
            <set_value name="$maxcount" exact="20" comment="Max number of victims to keep track of" />
            <set_value name="$updatingrelation" exact="false" />
            <set_value name="$reportinterval" exact="2min" />
            <set_value name="$warninginterval" exact="40s" />
            <set_value name="$firstattacktolerance" exact="3s" />
            <set_value name="$conversationblocked" exact="false" comment="true while a response conversation is queued or in progress" />
          </actions>
          <cues>

            <cue name="PlayerAttacks" instantiate="true" namespace="this">
              <conditions>
                <event_player_attacked_object />
                <check_value value="not event.param.isrelationchangedisabled and event.param.owner and event.param.owner != faction.player and event.param.owner != faction.ownerless" />
                <check_value value="not event.param3.iswreck" />
              </conditions>
              <actions>
                 <!-- <debug_text text="'Event: name=%1, param=%2, param2=%3, param3=%4'.[event.name, event.param, event.param2, event.param3]" /> -->

                <set_value name="IllegalActivity.$updatingrelation" exact="true" />
                <set_value name="$oldrelation" exact="event.param.relationto.{faction.player}" />
                <change_relation_on_attack attacker="player.controlled" attacked="event.param" method="event.param2" result="$relchange" />
                <set_value name="$newrelation" exact="event.param.relationto.{faction.player}" />
                <set_value name="IllegalActivity.$updatingrelation" exact="false" />

                <set_value name="$index" exact="IllegalActivity.$lastvictims.indexof.{event.param}" />
                <do_if value="$index == 1">
                  <set_value name="$data" exact="IllegalActivity.$lastvictimdata.{1}" />
                </do_if>
                <do_else>
                  <!-- Create victim data at front of list, or move entry to front -->
                  <do_if value="not $index">
                    <set_value name="$data" exact="[
                           event.param, null, null, null,
                           -IllegalActivity.$timeout, -IllegalActivity.$timeout,
                           false, false, null, 0,
                           null, null, null, player.age, null
                           ]" />
                  </do_if>
                  <do_else>
                    <set_value name="$data" exact="IllegalActivity.$lastvictimdata.{$index}" />
                    <remove_value name="IllegalActivity.$lastvictims.{$index}" />
                    <remove_value name="IllegalActivity.$lastvictimdata.{$index}" />
                  </do_else>
                  <set_value name="IllegalActivity.$lastvictims.{1}" operation="insert" exact="event.param" />
                  <set_value name="IllegalActivity.$lastvictimdata.{1}" operation="insert" exact="$data" />
                </do_else>
                <set_value name="$data.{2}" exact="event.name" />
                <set_value name="$data.{3}" exact="event.param2" />
                <set_value name="$data.{4}" exact="event.param3" />
                <set_value name="$data.{11}" exact="$oldrelation" />
                <set_value name="$data.{12}" exact="$newrelation" />
                <set_value name="$data.{13}" exact="$relchange" />
                <set_value name="$data.{15}" exact="relationchangereason.attackedobject" />
                <signal_cue_instantly cue="AttackResponse" param="$data" />
              </actions>
            </cue>

            <cue name="DistressDroneReportsAttack" instantiate="true" namespace="this">
              <conditions>
                <!-- params: param = signal ID, param2 = [attacked object, kill method, attacked component, attacker, reporter, protector] -->
                <event_object_signalled object="player.galaxy" param="'report_attack'"/>
                <check_value value="@event.param2.{1} and @event.param2.{2} and @event.param2.{3} and @event.param2.{4} and @event.param2.{5} and @event.param2.{6}"/>
                <debug_text text="'attack report received. attacked object: %s %s %s, kill method: %s, attacked component: %s %s %s, attacker: %s %s %s'.[@event.param2.{1}.idcode, @event.param2.{1}.knownname, event.param2.{1}, event.param2.{2}, @event.param2.{3}.idcode, @event.param2.{3}.knownname, @event.param2.{3}, @event.param2.{4}.idcode, @event.param2.{4}.knownname, @event.param2.{4}]" debugchance="0"/>
                <check_value value="event.param2.{1}.owner and (event.param2.{1}.owner != faction.player) and (event.param2.{1}.owner != faction.ownerless)"/>
                <!-- NB: this chain involves player-centric notifications and relation handling. generic relation handling is done in code. -->
                <check_value value="@event.param2.{4}.isplayerowned"/>
              </conditions>
              <actions>
                <set_value name="$attackedobject" exact="event.param2.{1}"/>
                <set_value name="$killmethod" exact="event.param2.{2}"/>
                <set_value name="$attackedcomponent" exact="event.param2.{3}"/>
                <set_value name="$attacker" exact="event.param2.{4}"/>
                <set_value name="$reporter" exact="event.param2.{5}"/>
                <set_value name="$protector" exact="event.param2.{6}"/>

                <set_value name="IllegalActivity.$updatingrelation" exact="true" />
                <set_value name="$oldrelation" exact="@$attackedobject.relationto.{$attacker.owner}"/>
                <do_if value="@$attackedobject.isoperational">
                  <change_relation_on_attack attacker="$attacker" attacked="$attackedobject" method="$killmethod" result="$relchange"/>
                </do_if>
                <do_else>
                  <change_relation_on_kill killer="$attacker" killed="$attackedobject" method="$killmethod" result="$relchange"/>
                </do_else>
                <set_value name="$newrelation" exact="$attackedobject.relationto.{$attacker.owner}"/>
                <set_value name="IllegalActivity.$updatingrelation" exact="false"/>
                <debug_text text="'relation change: %s. new relation: %s'.[$relchange, $newrelation]" chance="0"/>

                <set_value name="$index" exact="IllegalActivity.$lastvictims.indexof.{$protector}"/>
                <debug_text text="'index: ' + $index" chance="0"/>
                <do_if value="$index == 1">
                  <set_value name="$data" exact="IllegalActivity.$lastvictimdata.{1}"/>
                </do_if>
                <do_else>
                  <!-- Create victim data at front of list, or move entry to front -->
                  <do_if value="not $index">
                    <!-- NB: if we define a protector and want an immediate response, the protector has to be in data as the attacked object -->
                    <set_value name="$data" exact="[
                           $protector, 'report_attack', null, null,
                           -IllegalActivity.$timeout, -IllegalActivity.$timeout,
                           false, false, $protector, 0,
                           null, null, null, player.age, null, $reporter
                           ]"/>
                  </do_if>
                  <do_else>
                    <set_value name="$data" exact="IllegalActivity.$lastvictimdata.{$index}"/>
                    <remove_value name="IllegalActivity.$lastvictims.{$index}"/>
                    <remove_value name="IllegalActivity.$lastvictimdata.{$index}"/>
                  </do_else>
                  <set_value name="IllegalActivity.$lastvictims.{1}" operation="insert" exact="$protector"/>
                  <set_value name="IllegalActivity.$lastvictimdata.{1}" operation="insert" exact="$data"/>
                </do_else>
                <debug_text text="'index: ' + $index + ', data: ' + IllegalActivity.$lastvictimdata.{IllegalActivity.$lastvictims.indexof.{$protector}}" chance="0"/>
                <set_value name="$data.{2}" exact="'report_attack'"/>
                <set_value name="$data.{3}" exact="$killmethod"/>
                <set_value name="$data.{4}" exact="$attackedcomponent"/>
                <set_value name="$data.{9}" exact="$protector"/>
                <set_value name="$data.{11}" exact="$oldrelation"/>
                <set_value name="$data.{12}" exact="$newrelation"/>
                <set_value name="$data.{13}" exact="$relchange"/>
                <set_value name="$data.{15}" exact="relationchangereason.attackedobject"/>
                <do_if value="$data.count == 15">
                  <append_to_list name="$data" exact="$reporter"/>
                </do_if>
                <do_else>
                  <set_value name="$data.{16}" exact="$reporter"/>
                </do_else>
                <signal_cue_instantly cue="AttackResponse" param="$data"/>
              </actions>
            </cue>

            <!-- Controller for rapid-response mini-mission -->
            <cue name="RapidResponse" instantiate="true" namespace="this">
              <conditions>
                <event_object_enemy_found object="player.entity" />
                <check_value value="event.param.ismasstraffic and event.param.owner == faction.criminal" />
              </conditions>
              <actions>
                <set_value name="$DebugChance" exact="0" comment="TODO: Remember to turn this off for release builds" />
                <debug_text text="'An enemy / criminal mass-traffic ship has come into view'" chance="$DebugChance" />

                <!-- There should only be a rapid-response event if the masstraffic ship in question is flying around a station -->
                <do_if value="(event.param.masstrafficstartobject == event.param.masstrafficendobject) and event.param.masstrafficstartobject.owner != faction.player">
                  <set_value name="$Station" exact="event.param.masstrafficstartobject" comment="Keep a variable for the station so that we can find an NPC to be the actor for our event" />

                  <!-- Work out whether player can take part in a rapid-response police event -->
                  <do_if value="$Station.sector.owner.policefaction and faction.player.haslicence.police.{$Station.sector.owner.policefaction}">
                    <set_value name="$PlayerHasPoliceLicence" exact="true" />
                  </do_if>
                  <do_else>
                    <set_value name="$PlayerHasPoliceLicence" exact="false" />
                  </do_else>

                  <!-- Set up chances of a rapid-response event occuring -->
                  <do_if value="$PlayerHasPoliceLicence">
                    <set_value name="$ToHit" exact="61" comment="40% chance of having a rapid-response police event" />
                  </do_if>
                  <do_else>
                    <set_value name="$ToHit" exact="76" comment="25% chance of having a rapid-response event" />
                  </do_else>
                  <set_value name="$Rand" min="1" max="100" />
                  <debug_text text="'$Rand set to ' + $Rand" chance="$DebugChance" />

                  <!-- Decide on a secenario (not having a scenario simply means no event) -->
                  <do_if value="$PlayerHasPoliceLicence and $Rand ge $ToHit">
                    <set_value name="$Scenario" exact="'police_direct'" />
                  </do_if>
                  <do_elseif value="not $PlayerHasPoliceLicence and $Rand ge $ToHit">
                    <!-- If this sector has a police faction both scenarios are valid -->
                    <do_if value="$Station.sector.owner.policefaction">
                      <do_any>
                        <set_value name="$Scenario" exact="'police'" />
                        <set_value name="$Scenario" exact="'civilian'" />
                      </do_any>
                    </do_if>
                    <!-- Otherwise, only the civilian scenario is valid -->
                    <do_else>
                      <set_value name="$Scenario" exact="'civilian'" />
                    </do_else>
                  </do_elseif>
                  <do_else>
                    <set_value name="$Scenario" exact="'none'" />
                  </do_else>
                  <debug_text text="'$Scenario set to ' + $Scenario" chance="$DebugChance" />

                  <!-- Select NPC for scenario -->
                  <do_if value="$Scenario" exact="'none'" negate="true">
                    <find_ship name="$ZonalMassTrafficShips" space="$Station.zone" masstraffic="true" multiple="true" />
                    <do_if value="$ZonalMassTrafficShips.count">
                      <do_if value="$ZonalMassTrafficShips.indexof.{event.param}">
                        <remove_value name="$ZonalMassTrafficShips.{$ZonalMassTrafficShips.indexof.{event.param}}" />
                      </do_if>
                    </do_if>
                    <do_if value="$ZonalMassTrafficShips.count">
                      <set_value name="$SelectedShip" list="$ZonalMassTrafficShips" />
                      <set_value name="$RapidResponseActor" exact="$SelectedShip.pilot" />
                    </do_if>
                  </do_if>

                  <!-- Only continue with the scenario if an actor was selected -->
                  <do_if value="$RapidResponseActor?">
                    <do_if value="$Scenario" exact="'civilian'">
                      <speak actor="$RapidResponseActor" line="[1000051, 1000052, 1000053, 1000054].random" broadcast="true" />
                    </do_if>
                    <do_elseif value="$Scenario" exact="'police'">
                      <speak actor="$RapidResponseActor" line="[1000061, 1000062, 1000063, 1000065, 1000066, 1000067].random" broadcast="true" />
                    </do_elseif>
                    <do_elseif value="$Scenario" exact="'police_direct'">
                      <speak actor="$RapidResponseActor" broadcast="true">
                        <text line="[1000061, 1000062, 1000063].random" />
                        <text line="1000064" />
                      </speak>
                    </do_elseif>
                  </do_if>
                </do_if>
              </actions>
            </cue>

            <cue name="PlayerKills" instantiate="true" namespace="this">
              <conditions>
                <event_player_killed_object />
                <check_value value="event.param.isclass.destructible" />
                <check_value value="not event.param.isrelationchangedisabled and event.param.owner and event.param.owner != faction.player and event.param.owner != faction.ownerless" />
              </conditions>
              <actions>
                <do_if value="event.param.isclass.defensible">
                  <set_value name="$object" exact="event.param" />
                </do_if>
                <do_else>
                  <set_value name="$object" exact="event.param.defensible" />
                  <set_value name="$component" exact="event.param" />
                </do_else>
                <!--<debug_text text="'event.param: %s %s %s, state: %s'.[@event.param.idcode, @event.param.knownname, event.param, event.param.state]"/>-->
                <!--<debug_text text="'Destructible destroyed: object=%1, component=%2, owner=%3, pilot=%4, parent=%5'.[$object, @$component, event.param.owner, @event.param.pilot, event.param.parent.knownname]" /> -->

                <!-- <set_value name="IllegalActivity.$updatingrelation" exact="true" /> -->
                <set_value name="$oldrelation" exact="event.param.relationto.{faction.player}" />
                <change_relation_on_kill killer="player.controlled" killed="event.param" method="event.param2" result="$relchange" />
                <set_value name="$newrelation" exact="event.param.relationto.{faction.player}" />
                <!-- <set_value name="IllegalActivity.$updatingrelation" exact="false" /> -->

                <do_if value="@$object.type == shiptype.escapepod">
                  <!--<do_if value="$object.macro == macro.ship_gen_xs_escapepod_01_a_macro">-->
                  <set_value name="$podowner" exact="$object.owner"/>
                  <!-- propagate relation change to faction of the pod's passengers for doing such a horrible thing. -->
                  <add_faction_relation faction="$podowner" otherfaction="faction.player" value="$newrelation - $oldrelation" reason="relationchangereason.killedobject"/>
                  <debug_text text="'player destroyed a harmless escape pod with passengers from %s! oldrelation: %s, newrelation: %s, relchange: %s'.[$podowner, $oldrelation, $newrelation, $relchange]" chance="0"/>
                </do_if>

                <do_if value="$object">
                  <set_value name="$index" exact="IllegalActivity.$lastvictims.indexof.{$object}" />
                  <do_if value="$index == 1">
                    <set_value name="$data" exact="IllegalActivity.$lastvictimdata.{1}" />
                  </do_if>
                  <do_else>
                    <!-- Create victim data at front of list, or move entry to front -->
                    <do_if value="not $index">
                      <set_value name="$data" exact="[
                          $object, null, null, null,
                          -IllegalActivity.$timeout, -IllegalActivity.$timeout,
                          false, false, null, 0,
                          null, null, null, player.age, null
                          ]" />
                    </do_if>
                    <do_else>
                      <set_value name="$data" exact="IllegalActivity.$lastvictimdata.{$index}" />
                      <remove_value name="IllegalActivity.$lastvictims.{$index}" />
                      <remove_value name="IllegalActivity.$lastvictimdata.{$index}" />
                    </do_else>
                    <set_value name="IllegalActivity.$lastvictims.{1}" operation="insert" exact="event.param" />
                    <set_value name="IllegalActivity.$lastvictimdata.{1}" operation="insert" exact="$data" />
                  </do_else>
                  <set_value name="$data.{2}" exact="event.name" />
                  <set_value name="$data.{3}" exact="event.param2" />
                  <set_value name="$data.{4}" exact="@$component" />
                  <set_value name="$data.{11}" exact="$oldrelation" />
                  <set_value name="$data.{12}" exact="$newrelation" />
                  <set_value name="$data.{13}" exact="$relchange" />
                  <set_value name="$data.{15}" exact="relationchangereason.killedobject" />
                  <signal_cue_instantly cue="AttackResponse" param="$data" />
                </do_if>
              </actions>
            </cue>

            <cue name="PlayerBoarding" instantiate="true" namespace="this">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <actions>
                <set_value name="$object" exact="event.param.{1}" />
                <!-- <debug_text text="'Destructible destroyed: object=%1, component=%2, owner=%3, pilot=%4, parent=%5'.[$object, @$component, event.param.owner, @event.param.pilot, event.param.parent.knownname]" /> -->

                <set_value name="IllegalActivity.$updatingrelation" exact="true" />
                <set_value name="$oldrelation" exact="$object.relationto.{faction.player}" />
                <debug_text text="event.param.{2}"/>
                <do_if value="event.param.{2} == 'boarding started'">
                  <debug_text text="'boarding started'"/>
                  <change_relation_on_boarding boarder="player.controlled" boarded="$object" attempt="true" result="$relchange" />
                  <!--<change_relation_on_attack attacker="player.controlled" attacked="$object" method="killmethod.hitbybullet" result="$relchange" />-->
                </do_if>
                <do_elseif value="event.param.{2} == 'boarding ended'">
                  <debug_text text="'boarding ended'"/>
                  <!--Boarded but not yet changed owner-->
                  <change_relation_on_boarding boarder="player.controlled" boarded="$object" attempt="false" result="$relchange" />
                </do_elseif>
                <debug_text text="'$relchange: ' + $relchange"/>

                <set_value name="$newrelation" exact="$object.relationto.{faction.player}" />
                <debug_text text="'oldrelation: ' + $oldrelation"/>
                <debug_text text="'newrelation: ' + $newrelation"/>
                <set_value name="IllegalActivity.$updatingrelation" exact="false" />

                <set_value name="$index" exact="IllegalActivity.$lastvictims.indexof.{$object}" />
                <do_if value="$index == 1">
                  <set_value name="$data" exact="IllegalActivity.$lastvictimdata.{1}" />
                </do_if>
                <do_else>
                  <!-- Create victim data at front of list, or move entry to front -->
                  <do_if value="not $index">
                    <set_value name="$data" exact="[
                          $object, null, null, null,
                          -IllegalActivity.$timeout, -IllegalActivity.$timeout,
                          false, false, null, 0,
                          null, null, null, player.age, null
                          ]" />
                  </do_if>
                  <do_else>
                    <set_value name="$data" exact="IllegalActivity.$lastvictimdata.{$index}" />
                    <remove_value name="IllegalActivity.$lastvictims.{$index}" />
                    <remove_value name="IllegalActivity.$lastvictimdata.{$index}" />
                  </do_else>
                  <set_value name="IllegalActivity.$lastvictims.{1}" operation="insert" exact="$object" />
                  <set_value name="IllegalActivity.$lastvictimdata.{1}" operation="insert" exact="$data" />
                </do_else>
                <set_value name="$data.{2}" exact="event.param.{2}" />
                <set_value name="$data.{3}" exact="killmethod.hitbybullet" />
                <set_value name="$data.{4}" exact="null" />
                <set_value name="$data.{11}" exact="$oldrelation" />
                <set_value name="$data.{12}" exact="$newrelation" />
                <set_value name="$data.{13}" exact="$relchange" />
                <set_value name="$data.{15}" exact="relationchangereason.boardedobject" />
                <signal_cue_instantly cue="AttackResponse" param="$data" />
              </actions>
            </cue>

            <cue name="AttackResponse" instantiate="true" namespace="this">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <!-- event.param = [
                object (1), event (2), killmethod (3), component (4),
                last_time_attacked (5), last_time_responded (6),
                object_is_attacked (7), object_protects_3rd_party (8), protector (9), response_state (10),
                oldrelation (11), newrelation (12), relchange (13), first_time_attacked (14),
                relationchangereason (15), refobject (16)
                *****
                object_protects_3rd_party =0 (not protecting), =1 (protecting, not warned yet), =2 (protecting, player has been warned)
                response_state =0 (not warned/reported yet), =1 (tried to warn), =2 (warned, not reported yet), =3 (tried to report but failed), =4 (reported)
              ] -->
              <actions>
                <!-- <debug_text text="'AttackResponse data=%1'.[event.param]" /> -->
                <!-- First clean up lastvictims data -->
                <do_if value="IllegalActivity.$lastvictims.count gt IllegalActivity.$maxcount" comment="Too many entries?">
                  <resize_list list="IllegalActivity.$lastvictims" count="IllegalActivity.$maxcount" />
                  <resize_list list="IllegalActivity.$lastvictimdata" count="IllegalActivity.$maxcount" />
                </do_if>
                <set_value name="$object" exact="event.param.{1}" />
                <!--<debug_text text="'object: %s %s %s'.[@$object.idcode, @$object.knownname, $object]"/>-->
                <set_value name="$refobject" exact="player.controlled"/>
                <do_if value="@event.param.{16}.exists">
                  <set_value name="$refobject" exact="event.param.{16}"/>
                </do_if>
                <!-- Update protector data if it is outdated (last attack too long ago or protector does not exist any more) -->
                <!-- TODO: Check if ship is too far away from an existing protector? -->
                <do_if value="(player.age ge event.param.{5} + IllegalActivity.$timeout) or (event.param.{9} and not event.param.{9}.exists)">
                  <!-- protector data does not exist, is outdated, or protector does not exist any more -->
                  <set_value name="event.param.{8}" comment="object_protects_3rd_party" exact="0" />
                  <set_value name="event.param.{9}" comment="protector" exact="null" />
                  <do_if value="$object.isclass.ship and not $object.isclass.ship_l and not $object.isclass.ship_xl and not $object.zone.isclass.highway">
                    <!-- Find protector station (nearest suitable protective station) -->
                    <set_value name="$commander" exact="$object.commander" />
                    <do_while value="$commander and not $commander.isclass.station">
                      <set_value name="$commander" exact="$commander.commander" />
                    </do_while>
                    <find_station name="$stations" multiple="true" space="$refobject.sector">
                      <match owner="faction.player" negate="true" />
                      <match owner="null" negate="true"/>
                      <match_relation_to faction="$object.owner" comparison="not" relation="enemy" />
                      <match_distance object="$refobject" max="30km" comment="Note: also radar range has to be checked below" />
                    </find_station>
                    <set_value name="$beststation" exact="null" />
                    <set_value name="$bestdistance" exact="1000km" />
                    <do_all exact="$stations.count" counter="$i">
                      <do_if value="$stations.{$i}.defencenpc">
                        <set_value name="$distance" exact="$stations.{$i}.distanceto.{$refobject}" />
                        <do_if value="$distance le $stations.{$i}.maxradarrange">
                          <!-- All requirements met (except for isprotective) -->
                          <do_if value="$stations.{$i} == $commander">
                            <set_value name="$beststation" exact="$stations.{$i}" comment="Prefer the commander station over all other stations, if it's in range" />
                            <break />
                          </do_if>
                          <do_if value="@$stations.{$i}.owner.isprotective and $distance le $bestdistance">
                            <set_value name="$beststation" exact="$stations.{$i}" />
                            <set_value name="$bestdistance" exact="$distance" />
                          </do_if>
                        </do_if>
                      </do_if>
                    </do_all>
                    <do_if value="$beststation">
                      <set_value name="event.param.{9}" comment="protector" exact="$beststation" />
                      <set_value name="$index" exact="IllegalActivity.$lastvictims.indexof.{$beststation}" />
                      <!-- Create protector data at front of list, or move entry to front -->
                      <do_if value="not $index">
                        <set_value name="$protectordata" exact="[
                               $beststation, null, null, null,
                               -IllegalActivity.$timeout, -IllegalActivity.$timeout,
                               false, false, null, 0,
                               null, null, null, player.age, null
                               ]" />
                      </do_if>
                      <do_else>
                        <set_value name="$protectordata" exact="IllegalActivity.$lastvictimdata.{$index}" />
                        <remove_value name="IllegalActivity.$lastvictims.{$index}" />
                        <remove_value name="IllegalActivity.$lastvictimdata.{$index}" />
                      </do_else>
                      <set_value name="IllegalActivity.$lastvictims.{1}" operation="insert" exact="$beststation" />
                      <set_value name="IllegalActivity.$lastvictimdata.{1}" operation="insert" exact="$protectordata" />
                    </do_if>
                    <remove_value name="$index" />
                    <remove_value name="$distance" />
                    <remove_value name="$beststation" />
                    <remove_value name="$bestdistance" />
                    <remove_value name="$stations" />
                  </do_if>
                </do_if>

                <!-- At this point protector is set or cleared properly. If a new protector was found then object_protects_3rd_party (8) is still 0. -->
                <do_if value="event.param.{9}">
                  <set_value name="$protectordata" exact="@IllegalActivity.$lastvictimdata.{IllegalActivity.$lastvictims.indexof.{event.param.{9}}}" />
                </do_if>
                <do_else>
                  <set_value name="$protectordata" exact="null" comment="Have to reset in case it was set above" />
                </do_else>
                <!-- Find out if this attack is new or continued -->
                <do_if value="player.age gt event.param.{5} + IllegalActivity.$timeout" comment="last_time_attacked too long ago">
                  <set_value name="event.param.{14}" comment="first_time_attacked" exact="player.age" />
                </do_if>
                <set_value name="event.param.{5}" comment="last_time_attacked" exact="player.age" />

                <!-- If object is fully destroyed then remove it from the victim list (data list remains available via event.param) -->
                <do_if value="event.param.{2} == 'event_player_killed_object' and not event.param.{4}">
                  <set_value name="$index" exact="IllegalActivity.$lastvictims.indexof.{$object}" />
                  <remove_value name="IllegalActivity.$lastvictims.{$index}" />
                  <remove_value name="IllegalActivity.$lastvictimdata.{$index}" />
                  <remove_value name="$index" />
                </do_if>

                <!-- Set $commander to protector if protector is in $object's command hierarchy, set to null otherwise (NOTE: $object is not necessarily a controllable) -->
                <set_value name="$commander" exact="@$object.commander" />
                <do_while value="$commander and $commander != event.param.{9}">
                  <set_value name="$commander" exact="$commander.commander" />
                </do_while>

                <!-- Mark victim as attacked, mark protector as protecting, determine responder -->
                <set_value name="event.param.{7}" comment="is_attacked" exact="true" />
                <do_if value="$protectordata">
                  <do_if value="event.param.{13} or $protectordata.{8} != 2" comment="Relation boost affected, or player has not been warned before (object_protects_3rd_party == 0 or 1)">
                    <set_value name="$protectordata.{8}" comment="object_protects_3rd_party" exact="1" />
                    <set_value name="$responderdata" exact="$protectordata" comment="Responder = protector" />
                  </do_if>
                </do_if>
                <do_elseif value="(event.param.{2} != 'event_player_killed_object' and event.param.{2} != 'boarding ended') or event.param.{4}" comment="victim was attacked, or a sub-component was destroyed (victim object itself not destroyed yet)">
                  <set_value name="$responderdata" exact="event.param" comment="Responder = victim" />
                </do_elseif>

                <!-- Respond only if there's a trade manager with valid voice page and faction (base) relation is above -20 -->
                <set_value name="$tradenpc" exact="@$responderdata.{1}.tradenpc" />
                <do_if value="$tradenpc and @$tradenpc.page != 0 and not @$tradenpc.owner.hasrelation.kill.{faction.player}">
                  <!-- <debug_text text="'Responding: victim=%1 (%2), responder=%3 (%4), component=%5 (%6)'.[$object, $object.knownname, $responderdata.{1}, $responderdata.{1}.knownname, @event.param.{4}, @event.param.{4}.knownname]" /> -->

                  <!-- If responder is about to give a (delayed) reward to the player: Cancel reward(s) -->
                  <do_if value="IllegalActivity.$rewardnpcs.indexof.{$tradenpc}">
                    <do_all exact="IllegalActivity.$rewardnpcdata.count" counter="$i" reverse="true">
                      <do_if value="IllegalActivity.$rewardnpcdata.{$i}.{1}.owner == $tradenpc.owner">
                        <remove_value name="IllegalActivity.$rewardnpcs.{$i}" />
                        <remove_value name="IllegalActivity.$rewardnpcdata.{$i}" />
                      </do_if>
                    </do_all>
                  </do_if>

                  <!-- Determine whether and how to respond (response types: 1 = warning, 2 = report) -->
                  <do_if value="event.param.{2} == 'event_player_attacked_object'">
                    <!-- Attacked but not killed: Decide if we should send a warning -->

                    <do_if value="event.param.{9}" comment="protector">
                      <!-- Attack on protected ship -->
                      <do_if value="$responderdata.{10} lt 1 and player.age gt event.param.{14} + IllegalActivity.$firstattacktolerance" comment="Player not warned yet but scripted tolerance is used up">
                        <set_value name="$responderdata.{10}" exact="1" comment="response_state = tried to warn" />
                        <do_if value="not $tradenpc.hasrelation.enemy.{faction.player}">
                          <set_value name="$responsetype" exact="1" comment="Send warning" />
                        </do_if>
                        <set_value name="$responseinterval" exact="IllegalActivity.$warninginterval" />
                      </do_if>
                    </do_if>
                    <do_elseif value="$object.isclass.[class.ship_l, class.ship_xl, class.station]">
                      <do_if value="$responderdata.{10} lt 1" comment="Player not warned yet">
                        <!-- First attack on station or station component -->
                        <do_if value="player.age gt event.param.{14} + IllegalActivity.$firstattacktolerance" comment="scripted tolerance is used up">
                          <set_value name="$responderdata.{10}" exact="1" comment="response_state = tried to warn" />
                          <do_if value="not $tradenpc.hasrelation.enemy.{faction.player}">
                            <set_value name="$responsetype" exact="1" comment="Send warning" />
                          </do_if>
                          <do_elseif value="event.param.{13}" comment="Relation boost was affected">
                            <!-- Repeated attack on station or station component, station is enemy: Skip warning, report directly -->
                            <set_value name="$responsetype" exact="2" comment="Report to authority" />
                          </do_elseif>
                        </do_if>
                      </do_if>
                      <do_elseif value="event.param.{13}" comment="Relation boost was affected">
                        <!-- Repeated attack on station or station component -->
                        <set_value name="$responsetype" exact="2" comment="Report to authority" />
                      </do_elseif>
                    </do_elseif>
                    <do_else>
                      <!-- TODO: Behaviour of attacked small ship if no protective station is nearby -->
                    </do_else>

                  </do_if>
                  <do_elseif value="'event_player_killed_object'">
                    <!-- Something was destroyed, this is serious -->

                    <do_if value="event.param.{9}" comment="protector">
                      <!-- Protected ship was destroyed -->
                      <set_value name="$responsetype" exact="2" comment="Destruction of station subordinate or 3rd party: Report to authority" />
                    </do_if>
                    <do_elseif value="$object.isclass.[class.ship_l, class.ship_xl, class.station]">
                      <do_if value="$object.isoperational">
                        <!-- Destruction of station/capship component -->
                        <set_value name="$responsetype" exact="2" comment="Destruction of station/capship component: Report to authority" />
                      </do_if>
                      <do_else>
                        <!-- TODO: Destruction of whole station/capital ship -->
                      </do_else>
                    </do_elseif>
                    <do_else>
                      <!-- TODO: Behaviour when small ship is destroyed and no protective station is nearby -->
                    </do_else>

                  </do_elseif>
                  <do_elseif value="event.param.{2} == 'report_attack'">
                    <!-- attack reported by a distress drone. no warning since attack was already serious enough to warrant ship sending a distress drone, and this will only be received once. -->
                    <do_if value="event.param.{13}" comment="Relation boost was affected">
                      <set_value name="$responsetype" exact="2" comment="Destruction of station/capship component: Report to authority"/>
                    </do_if>
                  </do_elseif>
                  <!---->
                  <do_elseif value="event.param.{2}" list="['boarding started', 'boarding ended']">
                    <set_value name="$responsetype" exact="2" comment="Report to authority" />
                  </do_elseif>

                  <!-- NOTE: On first attack and on first report, $responseinterval is not set, so we are supposed to respond in any case -->
                  <!-- Limit frequency of reports to law enforcement -->
                  <do_if value="@$responsetype == 2">
                    <do_if value="$responderdata.{10} == 4" comment="been reported before?">
                      <set_value name="$responseinterval" exact="IllegalActivity.$reportinterval" />
                    </do_if>
                  </do_if>

                  <!-- If response type is available, conversation is not blocked, and last_time_responded more than $responseinterval seconds ago: -->
                  <do_if value="@$responsetype and not IllegalActivity.$conversationblocked and player.age ge $responderdata.{6} + @$responseinterval">
                    <!-- Actually respond -->
                    <set_value name="$responderdata.{6}" comment="last_time_responded" exact="player.age" />
                    <do_if value="$responsetype == 1">
                      <set_value name="IllegalActivity.$conversationblocked" exact="true" />
                      <start_conversation actor="$tradenpc" conversation="IllegalActivityWarning"
                                          convparam="[$responderdata, event.param, $protectordata and not $commander]"
                                          comment="responderdata, victimdata, is_3rd_party_victim" />
                    </do_if>
                    <do_elseif value="$responsetype == 2">
                      <set_value name="$lawnpc" exact="@$object.zone.policefaction.representative"/>
                      <do_if value="$lawnpc">
                        <do_if value="not $lawnpc.hasrelation.enemy.{$object}">
                          <!--<debug_text text="'object: %s %s %s, lawnpc faction: %s, object faction: %s, relation: %s, is enemy: %s'.[@$object.idcode, @$object.knownname, $object, $lawnpc.owner, $object.owner, $lawnpc.relationto.{$object}, $lawnpc.hasrelation.enemy.{$object}]"/>-->
                          <set_value name="IllegalActivity.$conversationblocked" exact="true" />
                          <do_if value="event.param.{2} == 'boarding started'">
                            <!--TODO @Owen: Remove string check-->
                            <set_value name="$relchange" exact="0"/>
                          </do_if>
                          <do_else>
                            <set_value name="$relchange" exact="$object.relationchange.policefaction.change" />
                          </do_else>
                          <start_conversation actor="$tradenpc" conversation="IllegalActivityRetaliate"
                                              convparam="[$responderdata, event.param, $protectordata and not $commander, $lawnpc, $relchange, player.entity.coverowner != null, event.param.{15}]"
                                              comment="responderdata, victimdata, is_3rd_party_victim, lawnpc, relchange, has_cover, relationchangreason"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Cannot report player to police because victim is an enemy of law enforcement. Victim=%1 (%2)'.[$object, $object.knownname]" filter="scripts" />
                          <!-- report the player anyway, but police will refuse to help. this is to help communicate faction dynamics where a sector owner is friendly with a faction that that sector's police faction is hostile to.
                                no reward in this case since rewards come from the sector owner. -->
                          <set_value name="$relchange" exact="0"/>
                          <start_conversation actor="$tradenpc" conversation="IllegalActivityRetaliate"
                                              convparam="[$responderdata, event.param, $protectordata and not $commander, $lawnpc, $relchange, player.entity.coverowner != null, event.param.{15}]"
                                              comment="responderdata, victimdata, is_3rd_party_victim, lawnpc, relchange, has_cover, relationchangreason"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <debug_text text="'Cannot report player to police because law enforcement NPC does not exist. Victim=%1 (%2)'.[$object, $object.knownname]" filter="scripts" />
                        <!-- TODO: What to do in this case? -->
                      </do_else>
                    </do_elseif>
                  </do_if>
                </do_if>
                <do_else>
                  <!-- No responder: Check if player can get reward for destroying an enemy -->
                  <do_if value="event.param.{2} == 'event_player_killed_object' and not event.param.{4}" comment="component is null, i.e. no sub-component killed">
                    <!-- Object was destroyed -->
                    <!-- Check if this zone has a police faction, if a law enforcement NPC exists for the police faction, and if the player has a police licence -->
                    <set_value name="$policefaction" exact="$object.zone.policefaction" />
                    <do_if value="$policefaction">
                      <set_value name="$lawnpc" exact="$policefaction.representative" />
                      <do_if value="$lawnpc and $policefaction.hasrelation.enemy.{$object}">
                        <set_value name="$policelicence" exact="$policefaction.licence.police" />
                        <do_if value="$policelicence.exists and faction.player.haslicence.{$policelicence}">
                          <!-- event.param = [ defence_npc, killed_object, givereputation, givebounty ] -->
                          <signal_cue_instantly cue="AccumulateRewards" param="[$lawnpc, $object, false, true, relationchangereason.destroyedfactionenemy]" />
                        </do_if>
                      </do_if>
                    </do_if>
                    <!-- Also check if a protective station is nearby which could thank the player for killing an enemy (even if it's an enemy of the player) -->
                    <find_station name="$stations" multiple="true" space="player.sector">
                      <match owner="faction.player" negate="true" />
                      <match owner="null" negate="true" />
                      <match_relation_to faction="$object.owner" relation="enemy" />
                      <match_distance object="$refobject" max="30km" comment="Note: also radar range has to be checked below" />
                    </find_station>
                    <set_value name="$beststation" exact="null" />
                    <set_value name="$bestdistance" exact="1000km" />
                    <do_all exact="$stations.count" counter="$i">
                      <do_if value="@$stations.{$i}.tradenpc.page != 0 and $stations.{$i}.owner.isprotective">
                        <set_value name="$distance" exact="$stations.{$i}.distanceto.{$refobject}" />
                        <do_if value="$distance le $stations.{$i}.maxradarrange">
                          <!-- All requirements met -->
                          <do_if value="$distance le $bestdistance">
                            <set_value name="$beststation" exact="$stations.{$i}" />
                            <set_value name="$bestdistance" exact="$distance" />
                          </do_if>
                        </do_if>
                      </do_if>
                    </do_all>
                    <do_if value="$beststation">
                      <!-- param = [ tradenpc, killed_object, givereputation, givebounty, relationchangereason ] -->
                      <signal_cue_instantly cue="AccumulateRewards" param="[$beststation.tradenpc, $object, true, false, relationchangereason.destroyedfactionenemy]" />
                    </do_if>

                  </do_if>
                </do_else>

                <!-- TODO:
                    - Conflict with other event_player_killed_object events (achievements, Yisha comments)
                    - Conflict with NPC reactions in AI scripts
                -->
              </actions>
            </cue>

            <cue name="IllegalActivityWarningConv" instantiate="true" namespace="this">
              <conditions>
                <event_conversation_started conversation="IllegalActivityWarning" />
              </conditions>
              <actions>
                <!-- event.param2 = [ responderdata, victimdata, is_3rd_party_victim ] -->
                <do_if value="event.param2.{1}.{10}" comment="response_state" max="1">
                  <set_value name="event.param2.{1}.{10}" exact="2" comment="warned" />
                </do_if>
                <do_if value="player.entity.coverowner">
                  <do_if value="event.object.container.isclass.station">
                    <!-- TODO (@Klaus / Lorraine): review this conversation to make sure it still makes sense -->
                    <add_npc_line line="7001" comment="(warning against violence)" />
                  </do_if>
                </do_if>
                <do_else>
                  <do_if value="event.object.container.isclass.station">
                    <!-- TODO (@Klaus / Lorraine): review this conversation to make sure it still makes sense -->
                    <add_npc_line line="7001" comment="(warning against violence)" />
                  </do_if>
                </do_else>
                <do_if value="event.param2.{3}" comment="is_3rd_party_victim">
                  <set_value name="event.param2.{1}.{8}" comment="object_protects_3rd_party" exact="2" />
                  <!-- TODO (@Klaus / Lorraine): review this conversation to make sure it still makes sense -->
                  <add_npc_line line="7002" comment="(first warning to an attacking ship)" />
                </do_if>
              </actions>
            </cue>

            <cue name="IllegalActivityWarningConvFinished" instantiate="true" namespace="this">
              <conditions>
                <event_conversation_finished outcome="IllegalActivityWarning" />
              </conditions>
              <actions>
                <!-- event.param2 = [ responderdata, victimdata, is_3rd_party_victim ] -->
                <set_value name="IllegalActivity.$conversationblocked" exact="false" />
              </actions>
            </cue>

            <cue name="IllegalActivityRetaliateConv" instantiate="true" namespace="this">
              <conditions>
                <event_conversation_started conversation="IllegalActivityRetaliate" />
              </conditions>
              <actions>
                <!-- event.param2 = [ responderdata, victimdata, is_3rd_party_victim, lawnpc, relchange, has_cover, relationchangereason ] -->
                <do_if value="event.param2.{1}.{10}" comment="response_state" max="2">
                  <set_value name="event.param2.{1}.{10}" exact="3" comment="tried to report" />
                </do_if>
                <do_if value="event.param2.{6}" comment="has_cover">
                  <!-- TODO: If 3rd party attacked and station passively protects (?): Use case ST6a, station tries to uncover player, does not retaliate yet -->
                  <do_if value="event.object.container.isclass.station">
                    <!-- TODO (@Klaus / Lorraine): review this conversation to make sure it still makes sense -->
                    <add_npc_line line="7002" comment="(first warning against attacking ships)" />
                  </do_if>
                  <do_if value="event.param2.{3}" comment="is_3rd_party_victim">
                    <!-- TODO (@Klaus / Lorraine): review this conversation to make sure it still makes sense -->
                    <add_npc_line line="7002" comment="(first warning against attacking ships)" />
                  </do_if>
                </do_if>
                <do_else>
                  <do_if value="event.param2.{3}" comment="is_3rd_party_victim">
                    <do_if value="event.object.container.isclass.station">
                      <!-- TODO (@Klaus / Lorraine): review this conversation to make sure it still makes sense -->
                      <add_npc_line line="7002" comment="(first warning against attacking ships)" />
                    </do_if>
                  </do_if>
                  <set_value name="$lawnpc" exact="event.param2.{4}" />
                  <do_if value="$lawnpc">
                    <!-- Remember that the incident was reported -->
                    <set_value name="event.param2.{1}.{10}" comment="response_state = reported" exact="4" />
                    <set_value name="$lawnpc.$NumPlayerReports" operation="add" />
                    <!-- <debug_text text="'Law NPC found: %1 (%2) in %3 (%4, %5)'.[$lawnpc.knownname, $lawnpc, $lawnpc.container.knownname, $lawnpc.zone.knownname, $lawnpc.sector.knownname]" /> -->
                    <do_if value="event.object.container.isclass.station">
                      <!-- TODO (@Klaus / Lorraine): review this conversation to make sure it still makes sense -->
                      <add_npc_line line="7003" comment="(warning of consequences - generic)" />
                    </do_if>
                    <do_else>
                      <add_npc_line>
                        <text line="3020" />
                        <text line="7007" />
                      </add_npc_line>
                    </do_else>
                    <add_npc_line speaker="$lawnpc">
                      <text line="11201" />
                      <text line="2005" />
                    </add_npc_line>

                    <add_npc_line line="7008" comment="(reporting of attack - stations)" />
                    <!--<debug_text text="'report response: police relation to victim: %s, enemy: %s'.[$lawnpc.relationto.{event.param2.{2}.{1}}, $lawnpc.hasrelation.enemy.{event.param2.{2}.{1}}]"/>-->
                    <do_if value="$lawnpc.hasrelation.enemy.{event.param2.{2}.{1}}">
                      <add_npc_line line="2109" speaker="$lawnpc" comment="(rejection)Negative."/>
                    </do_if>
                    <do_else>
                      <add_npc_line speaker="$lawnpc">
                        <text line="[2103,2104,2105].random" comment="(formal acknowledgement)" />
                        <text line="7009" comment="(law enforcement confirms report)" />
                      </add_npc_line>
                    </do_else>
                    <!-- Notoriety is changed when conversation is finished -->
                  </do_if>
                  <!--
                  TODO: if 3rd party and actively protects: retaliate
                  -->
                </do_else>
              </actions>
            </cue>

            <cue name="IllegalActivityConvFinished" instantiate="true" namespace="this">
              <conditions>
                <event_conversation_finished outcome="IllegalActivityRetaliate" />
              </conditions>
              <actions>
                <!-- event.param2 = [ responderdata, victimdata, is_3rd_party_victim, lawnpc, relchange, has_cover, relationchangereason ] -->
                <set_value name="IllegalActivity.$conversationblocked" exact="false" />
                <!--<debug_text text="'penalty: police relation to victim: %s, enemy: %s'.[event.param2.{4}.relationto.{event.param2.{2}.{1}}, event.param2.{4}.hasrelation.enemy.{event.param2.{2}.{1}}]"/>-->
                <do_if value="not event.param2.{4}.hasrelation.enemy.{event.param2.{2}.{1}}">
                  <set_value name="$reason" exact="event.param2.{7}" />
                  <do_if value="event.param2.{6}" comment="has_cover">
                    <set_value name="$chance" exact="2" />
                  </do_if>
                  <do_elseif value="event.param2.{4}" comment="lawnpc">
                    <add_faction_relation faction="faction.player" otherfaction="event.param2.{4}.owner" value="event.param2.{5}" reason="$reason" comment="relchange" />
                    <signal_objects object="event.param2.{4}.sector" param="'police'" param2="player.controlled" param3="event.param2.{2}.{1}" />
                  </do_elseif>
                </do_if>
                <!--<do_else>
                  <debug_text text="'victim was a known felon. no penalty.'"/>
                </do_else>-->
              </actions>
            </cue>

            <cue name="AccumulateRewards" instantiate="true" namespace="this">
              <conditions>
                <event_cue_signalled />
                <!-- event.param = [ defence_npc, killed_object, givereputation, givebounty, relationchangereason ] -->
              </conditions>
              <actions>
                <!-- <debug_text text="'Accumulate rewards, param: ' + event.param" /> -->
                <set_value name="$npc" exact="event.param.{1}" />
                <set_value name="$faction" exact="$npc.owner" />
                <set_value name="$object" exact="event.param.{2}" />
                <do_if value="$faction and $object">
                  <do_if value="event.param.{3}" comment="givereputation">
                    <set_value name="$relbonus" exact="$object.relationchange.killfaction.bonus" />
                    <!--<debug_text text="'awarding faction %s\n npc: %s %s\n relbonus: %s\n destroyed object: %s %s %s'.[$npc.owner, $npc.knownname, $npc, $relbonus, $object.idcode, $object.knownname, $object]"/>-->
                  </do_if>
                  <do_if value="event.param.{4}" comment="givebounty">
                    <set_value name="$bounty" exact="$object.relationchange.policefaction.bounty" />
                  </do_if>
                  <do_else>
                    <!-- this assumes a minimum bounty of 3. current minimum is 1500. defined in defaults.xml -->
                    <set_value name="$bounty" exact="$object.relationchange.policefaction.bounty / 3"/>
                  </do_else>
                  <do_if value="event.param.{5}" comment="relationchangereason">
                    <set_value name="$reason" exact="event.param.{5}" />
                  </do_if>
                  <set_value name="$triggerdelay" exact="45s" />
                  <set_value name="$maxtriggerdelay" exact="10min" />
                  <!-- Find or create faction entry: [
                    npc (1), starttime (2), triggertime (3), relbonus (4), bounty (5), relationchangereason (6), tradesubscription (7)
                    ] -->
                  <set_value name="$index" exact="IllegalActivity.$rewardnpcs.indexof.{$npc}" />
                  <do_if value="not $npc.container.hastradesubscription">
                    <set_value name="$gettradeagent" chance="[(100 / [@player.entity.$tradesubscriptionsrewarded, 3].max), 10].max"/>
                  </do_if>
                  <do_if value="not $index">
                    <set_value name="$curdata" exact="[ $npc, player.age, player.age + $triggerdelay, @$relbonus, @$bounty, @$reason, $gettradeagent? ]" />
                    <append_to_list name="IllegalActivity.$rewardnpcs" exact="$npc" />
                    <append_to_list name="IllegalActivity.$rewardnpcdata" exact="$curdata" />
                  </do_if>
                  <do_else>
                    <set_value name="$curdata" exact="IllegalActivity.$rewardnpcdata.{$index}" />
                    <set_value name="$maxtimeleft" exact="$curdata.{2} + $maxtriggerdelay - player.age" comment="After $maxtriggerdelay, the NPC should really say something" />
                    <set_value name="$triggerdelay" exact="$triggerdelay * $maxtimeleft / $maxtriggerdelay" comment="The longer we've already waited, the smaller the additional delay" />
                    <set_value name="$curdata.{3}" comment="triggertime" exact="player.age + $triggerdelay" />
                    <set_value name="$curdata.{4}" comment="relbonus" exact="@$relbonus" operation="add" />
                    <!--<debug_text text="'awarding faction %s\n npc: %s %s\n accumulated relbonus: %s\n destroyed object: %s %s %s'.[$npc.owner, $npc.knownname, $npc, $curdata.{4}, $object.idcode, $object.knownname, $object]"/>-->
                    <set_value name="$curdata.{5}" comment="bounty" exact="@$bounty" operation="add" />
                    <set_value name="$curdata.{6}" comment="relationchangereason" exact="@$reason" />
                    <do_if value="$gettradeagent?">
                      <do_if value="not $curdata.{7}">
                        <set_value name="$curdata.{7}" exact="true" comment="trade subscription"/>
                        <do_if value="not @$bounty">
                          <set_value name="$curdata.{5}" exact="$curdata.{5} + $object.relationchange.policefaction.bounty" comment="bounty"/>
                        </do_if>
                      </do_if>
                    </do_if>
                  </do_else>
                  <signal_cue cue="ReputationTriggerStart" check="false" />
                  <remove_value name="$gettradeagent"/>
                </do_if>
              </actions>
            </cue>

            <cue name="ReputationTriggerStart">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <cues>
                <cue name="ReputationTrigger" checkinterval="5s" instantiate="true" namespace="static">
                  <conditions>
                    <check_value value="IllegalActivity.$conversationblocked" negate="true" />
                    <!-- Check if a trigger time is reached or no triggers are left -->
                    <check_any exact="IllegalActivity.$rewardnpcdata.count" counter="$i">
                      <check_all>
                        <check_age min="IllegalActivity.$rewardnpcdata.{$i}.{3}" comment="triggertime passed" />
                        <set_value name="$index" exact="$i" />
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="$index?">
                      <set_value name="$curdata" exact="IllegalActivity.$rewardnpcdata.{$index}" />
                      <do_if value="$curdata.{1}.exists">
                        <do_if value="$curdata.{7}">
                          <!-- INTERACTION: station rewarding player -->
                          <play_cutscene key="'ShowPilot'" targetmonitor="true" timeout="10s" caption="{1001, 3301} + ' - %s (%s)'.[$curdata.{1}.container.knownname, $curdata.{1}.container.idcode]" comment="Reward">
                            <interaction text="readtext.{1001}.{3301}" param="$curdata.{1}" param2="'RewardChoice'"/>
                            <param name="npcref" object="$curdata.{1}"/>
                          </play_cutscene>
                          <write_to_logbook category="general" title="{1001, 3301}" text="{1016, 94}.[$curdata.{1}.knownname, $curdata.{1}.container.knownname, $curdata.{1}.container.idcode]" interaction="showonmap" object="$curdata.{1}.container" comment="%1 offered a reward for protecting %2 (%3)."/>
                        </do_if>
                        <do_else>
                          <set_value name="IllegalActivity.$conversationblocked" exact="true" />
                          <start_conversation actor="$curdata.{1}" conversation="IllegalActivityReward" convparam="$curdata" />
                          <signal_cue_instantly cue="Cleanup_ReputationTrigger" param="this"/>
                        </do_else>
                      </do_if>
                      <remove_value name="IllegalActivity.$rewardnpcs.{$index}" />
                      <remove_value name="IllegalActivity.$rewardnpcdata.{$index}" />
                      <remove_value name="$index" />
                    </do_if>
                  </actions>
                  <cues>
                    <cue name="RewardChoice_Timeout">
                      <delay exact="10s"/>
                      <actions>
                        <cancel_cue cue="RewardChoice_Interact"/>
                        <set_value name="$curdata.{7}" exact="null"/>
                        <start_conversation actor="$curdata.{1}" conversation="IllegalActivityReward" convparam="$curdata"/>
                        <signal_cue cue="Cleanup_ReputationTrigger"/>
                      </actions>
                    </cue>
                    <cue name="RewardChoice_Interact">
                      <conditions>
                        <event_player_interaction param="$curdata.{1}" param2="'RewardChoice'"/>
                      </conditions>
                      <actions>
                        <cancel_cue cue="RewardChoice_Timeout"/>
                        <start_conversation actor="$curdata.{1}" conversation="IllegalActivityReward" convparam="$curdata"/>
                        <signal_cue cue="Cleanup_ReputationTrigger"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
                <cue name="Cleanup_ReputationTrigger">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <delay exact="1ms"/>
                  <actions>
                    <!-- Stop checking if there's no trigger data left. The next signal will start the regular checks again. -->
                    <do_if value="IllegalActivity.$rewardnpcdata.count == 0">
                      <reset_cue cue="ReputationTriggerStart" />
                    </do_if>
                    <do_elseif value="@event.param.exists">
                      <cancel_cue cue="event.param"/>
                      <reset_cue cue="this"/>
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="IllegalActivityRewardConv" instantiate="true" namespace="this">
              <conditions>
                <event_conversation_started conversation="IllegalActivityReward" />
              </conditions>
              <delay exact="1ms"/>
              <actions>
                <do_if value="event.param2.{7}">
                  <add_player_choice position="top_left" text="{1002, 12200}.[readtext.{1001}.{37}]" choiceparam="event.param2" section="RewardChoice_Cash" selectable="event.param2.{5}"  comment="Credits"/>
                  <add_player_choice position="left" text="{1002, 12220}" choiceparam="event.param2" section="RewardChoice_TradeAgent" selectable="event.param2.{7}"  comment="Ask for: Trade offer updates"/>
                </do_if>

                <do_if value="event.object.type == entitytype.factionrepresentative">
                  <add_npc_line>
                    <text line="2111" comment="(grateful)" />
                    <text line="5023" comment="(reward)" />
                  </add_npc_line>
                </do_if>
                <do_else>
                  <add_npc_line line="2111" comment="(grateful)" />
                </do_else>
              </actions>
            </cue>

            <cue name="IllegalActivityRewardConvFinished" instantiate="true" namespace="this">
              <conditions>
                <check_any>
                  <event_conversation_finished outcome="IllegalActivityReward"/>
                  <event_conversation_finished outcome="RewardChoice_Cash"/>
                  <event_conversation_finished outcome="RewardChoice_TradeAgent"/>
                </check_any>
                <check_value value="event.object.exists" />
              </conditions>
              <delay exact="100ms"/>
              <actions>
                <!-- event.param2 = [
                  npc (1), starttime (2), triggertime (3), relbonus (4), bounty (5), relationchangereason (6), tradesubscription (7)
                  ] -->
                <set_value name="IllegalActivity.$conversationblocked" exact="false" />
                <assert value="event.object == event.param2.{1}" />

                <set_value name="$rewardnpc" exact="event.param2.{1}"/>
                <set_value name="$logdata" exact="table[ $tradeagent = null, $bounty = 0 ]"/>
                <!--<set_value name="$logdata" exact="table[ $tradeagent = null, $bounty = 0, $relationchangedirection = 0, $relationuivaluechanged = false ]"/>-->
                <set_value name="$reason" exact="event.param2.{6}" />

                <do_if value="event.param == 'RewardChoice_TradeAgent' and not $rewardnpc.container.hastradesubscription">
                  <add_trade_subscription object="$rewardnpc.container"/>
                  <set_value name="player.entity.$tradesubscriptionsrewarded" exact="@player.entity.$tradesubscriptionsrewarded + 1"/>
                  <set_value name="event.param2.{5}" exact="null"/>

                  <set_value name="$logdata.$tradeagent" exact="$rewardnpc.container"/>
                  <set_value name="$printlog"/>
                </do_if>
                <do_if value="event.param2.{5}" comment="bounty">
                  <transfer_money from="$rewardnpc.container" to="faction.player" amount="event.param2.{5}" />

                  <set_value name="$logdata.$bounty" exact="event.param2.{5}"/>
                  <set_value name="$printlog"/>
                </do_if>
                <do_if value="event.param2.{4}" comment="relbonus">
                  <!-- If relation is negative, make the bonus proportional to the current relation, so we always get the same UI change -->
                  <!-- (lower relation = higher reward, basically cancelling out the logarithmic UI scale) -->
                  <set_value name="$oldrelation" exact="$rewardnpc.owner.relationto.{faction.player}" />
                  <!--<set_value name="$oldrelationuivalue" exact="$rewardnpc.owner.relation.{$oldrelation}.uivalue"/>-->
                  <do_if value="$oldrelation lt -0.0032" comment="UI below -5">
                    <!-- Divide negative relation by 10 (which is UI +10 in range -30 to -5) for each +0.0064 bonus (which is UI +10 in neutral range -5 to +5) -->
                    <set_faction_relation faction="$rewardnpc.owner" otherfaction="faction.player" value="$oldrelation * 0.1 ^ (event.param2.{4} / 0.006401)" reason="$reason" />
                    
                    <!--<set_value name="$logdata.$relationchangedirection" exact="-1"/>-->
                  </do_if>
                  <do_else>
                    <add_faction_relation faction="$rewardnpc.owner" otherfaction="faction.player" value="event.param2.{4}" reason="$reason" />
                    <!--<set_value name="$logdata.$relationchangedirection" exact="1"/>-->
                  </do_else>

                  <!--<set_value name="$logdata.$relationuivaluechanged" exact="$oldrelationuivalue != $rewardnpc.owner.relation.{$rewardnpc.owner.relationto.{faction.player}}.uivalue"/>
                  <set_value name="$printlog"/>-->
                </do_if>

                <do_if value="$printlog?">
                  <!--<debug_text text="'preparing and printing logbook entry. faction: %s, container: %s %s %s, tradeagent: %s, bounty: %s, relationcangedirection: %s'.[$rewardnpc.owner, $rewardnpc.container.idcode, $rewardnpc.container.knownname, $rewardnpc.container, $logdata.$tradeagent, $logdata.$bounty, $logdata.$relationchangedirection]"/>-->
                  <set_value name="$logtitle" exact="{1016, 100}" comment="Rewarded for station defence"/>
                  <set_value name="$logtext" exact="''"/>

                  <do_if value="$logdata.$tradeagent">
                    <set_value name="$logtext" exact="{1016, 101}.[$logtext, $rewardnpc.container.knownname, $rewardnpc.container.idcode, $rewardnpc.sector.knownname]" comment="Trade subscription at %s(Station name) /(%s(Station ID code)/) in sector %s(Sector name) awarded."/>
                    <set_value name="$nextline"/>
                  </do_if>

                  <!-- bounty text moved to money attribute -->
                  <!--<do_if value="$logdata.$bounty != 0">
                    <do_if value="$nextline?">
                      <set_value name="$logtext" exact="'%s\n'.[$logtext]"/>
                    </do_if>
                    <set_value name="$logtext" exact="'%s'.[$logtext] + {1016, 102}.[$logdata.$bounty.formatted.default]" comment="Bounty awarded: %s(Money amount)Cr"/>
                    <set_value name="$nextline"/>
                  </do_if>-->

                  <!-- relation change text redundant with separate entry for relation change -->
                  <!--<do_if value="$logdata.$relationchangedirection gt 0">
                    <set_value name="$relationtext" exact="{1016, 103}" comment="Relations improved."/>
                    <do_if value="$logdata.$relationuivaluechanged">
                      <set_value name="$relationtext" exact="{1016, 104}.[$rewardnpc.owner.relation.{$rewardnpc.relationto.{faction.player}}.uivalue]" comment="Relations improved to %s(New relation value)."/>
                    </do_if>
                  </do_if>
                  <do_elseif value="$logdata.$relationchangedirection lt 0">
                    <set_value name="$relationtext" exact="{1016, 105}" comment="Relations worsened."/>
                    <do_if value="$logdata.$relationuivaluechanged">
                      <set_value name="$relationtext" exact="{1016, 106}.[$rewardnpc.owner.relation.{$rewardnpc.relationto.{faction.player}}.uivalue]" comment="Relations worsened to %s(New relation value)."/>
                    </do_if>
                  </do_elseif>

                  <do_if value="$relationtext?">
                    <do_if value="$nextline?">
                      <set_value name="$logtext" exact="'%s\n'.[$logtext]"/>
                    </do_if>
                    <set_value name="$logtext" exact="'%s%s'.[$logtext, $relationtext]"/>
                  </do_if>-->

                  <write_to_logbook category="general" title="$logtitle" text="$logtext" money="$logdata.$bounty" faction="$rewardnpc.owner" object="$rewardnpc.container" interaction="showonmap"/>
                </do_if>
              </actions>
            </cue>

          </cues>
        </cue>

        <cue name="MissileIncoming" instantiate="true" namespace="static">
          <conditions>
            <event_object_incoming_missile group="global.$PlayerContainerGroup" />
            <check_value value="event.object.isclass.ship and event.object.isplayerowned" />
            <check_age min="@$lasttime + 8s"/>
          </conditions>
          <actions>
            <speak actor="player.computer" line="500" priority="-30" caninterrupt="false" comment="Incoming Missile" />
            <set_value name="$lasttime" exact="player.age"/>
          </actions>
        </cue>

        <cue name="PlayerOpensCrate" instantiate="true" namespace="this">
          <conditions>
            <event_player_opened_crate />
          </conditions>
          <actions>
            <!-- <debug_text text="'Player opened crate #%1 \'%2\', contained wares: %3, contained money: %4'.[event.param, event.param.knownname, event.param.wares.list, event.param.money]" /> -->
            <do_if value="event.param.wares.count != 0">
              <set_value name="$wares" exact="event.param.wares.list" />
              <do_all exact="$wares.count" counter="$i">
                <set_value name="$tickertext" exact="[ {1015,9}, '', $wares.{$i}.name, event.param.wares.{$wares.{$i}}.count ]" />
                <do_if value="$wares.{$i}.iscrafting">
                  <set_value name="$products" exact="$wares.{$i}.products.list" />
                  <include_actions ref="AddKnownCraftingWares" />
                  <include_actions ref="NotificationCraftingProgress" />
                </do_if>
                <show_notification text="$tickertext" timeout="1s + ($tickertext.count * 1s)" />
              </do_all>
            </do_if>
            <do_if value="event.param.money">
              <show_notification text="[ {1015,9}, '', {1001,37}, event.param.money.formatted.{'%s %Cr'} ]" timeout="5s" />
            </do_if>
            <set_value name="stat.crates_opened" operation="add" />
          </actions>
        </cue>

        <cue name="PlayerDiscountCommission" instantiate="true" namespace="this">
          <conditions>
            <check_any>
              <event_player_discount_added />
              <event_player_commission_added />
            </check_any>
          </conditions>
          <actions>
            <do_if value="event.param3" min="1">
              <debug_text text="'source=%1, name=%2, amount=%3, duration=%4'.[event.object, event.param, event.param2, event.param3 - player.age]" />
            </do_if>
            <do_else>
              <debug_text text="'source=%1, name=%2, amount=%3'.[event.object, event.param, event.param2]" />
            </do_else>
            <do_if value="typeof event.object == datatype.component">
              <do_if value="event.object.isclass.entity">
                <set_value name="$name" exact="event.object.container.name" />
              </do_if>
              <do_else>
                <set_value name="$name" exact="event.object.name" />
              </do_else>
              <set_value name="$faction" exact="event.object.owner" />
            </do_if>
            <do_else>
              <set_value name="$name" exact="event.object.name" />
              <set_value name="$faction" exact="event.object" />
            </do_else>
            <!-- Percentage is relative to the price variation range, not to the price, so the price percentage depends on the ware. -->
            <!-- To avoid confusion, convert percentage to discount/commission "level" -->
            <set_value name="$levelname" exact="readtext.{1001}.{2851 + [[(event.param2)i / 3, 0].max, 6].min}" />
            <set_value name="$logtext" exact="[
                       event.param, '',
                       {1001,2850} + {1001,120}, $levelname,
                       {1015,12} + {1001,120}, $name]" />
            <!-- Add duration if applicable -->
            <do_if value="event.param3" min="player.age + 1s">
              <do_if value="event.param3 - player.age" min="4h">
                <set_value name="$timeval" exact="((event.param3 - player.age) / 1h)i" />
                <set_value name="$timeunit" exact="{1001,102}" comment="h" />
              </do_if>
              <do_else>
                <set_value name="$timeval" exact="((event.param3 - player.age) / 1min)i" />
                <set_value name="$timeunit" exact="{1001,103}" comment="min" />
              </do_else>
              <append_to_list name="$logtext" exact="{1015,13} + {1001,120}" />
              <append_to_list name="$logtext" exact="'%1 %2'.[$timeval, $timeunit]" />
            </do_if>

            <!-- $tickertext is based on $logtext but may require truncation -->
            <set_value name="$tickertext" exact="$logtext.clone" />
            <do_if value="event.name" exact="'event_player_discount_added'">
              <set_value name="$tickertext.{1}" operation="insert" exact="{1015,10}" />
            </do_if>
            <do_else>
              <set_value name="$tickertext.{1}" operation="insert" exact="{1015,11}" />
            </do_else>
            <set_value name="$tickertext.{2}" operation="insert" exact="''" />
            <do_if value="$tickertext.count" min="2*4 + 1">
              <!-- Truncate the ticker message by putting display name and level on the same row -->
              <remove_value name="$tickertext.{5}" />
              <remove_value name="$tickertext.{4}" />
            </do_if>

            <do_if value="event.name == 'event_player_discount_added'">
              <set_value name="stat.discounts_unlocked" operation="add"/>
              <do_if value="notification.discount_unlocked.active and player.age ge 10s">
                <show_notification text="$tickertext" sound="notification_unlocked_discount" />
              </do_if>
            </do_if>
            <do_else>
              <set_value name="stat.commissions_unlocked" operation="add"/>
              <do_if value="notification.commission_unlocked.active and player.age ge 10s">
                <show_notification text="$tickertext" sound="notification_unlocked_commission" />
              </do_if>
            </do_else>

            <do_if value="typeof event.object == datatype.component and event.object.isclass.object">
              <write_to_logbook category="general" title="if event.name == 'event_player_discount_added' then {1015,10} else {1015,11}" text="$logtext" interaction="showonmap" object="event.object"/>
            </do_if>
            <do_else>
              <write_to_logbook category="general" title="if event.name == 'event_player_discount_added' then {1015,10} else {1015,11}" text="$logtext"/>
            </do_else>
          </actions>
        </cue>

        <!--
        UIValues[0.01f] = 10;
        UIValues[0.032f] = 15;
        UIValues[0.1f] = 20;
        UIValues[0.32f] = 25;
        UIValues[1.0f] = 30;-->

        <cue name="PlayerRelationDiscounts" namespace="this">
          <actions>
            <!--$DiscountMap [ ['ID', UnlockReleationValue, DiscountPercentage] ]-->
            <!--Must be from lowest to highest relation value-->
            <set_value name="$DiscountMap" exact="[
                   ['md_relation_discount_1', 0.01f, 5, 3101],
                   ['md_relation_discount_2', 0.1f, 15, 3111],
                   ['md_relation_discount_3', 1.0f, 25, 3121]
                   ]"/>
            <set_value name="$Discount_Index_ID" exact="1" comment="Player discount ID string"/>
            <set_value name="$Discount_Index_UnlockValue" exact="2" comment="Relation value at which it unlocks"/>
            <set_value name="$Discount_Index_DiscountValue" exact="3" comment="Percentage of discount"/>
            <set_value name="$Discount_Index_TextID" exact="4" comment="Text ID for the name of the discount on page 20210"/>
          </actions>
          <cues>
            <cue name="PlayerRelationDiscounts_Gamestart_Unlock" checktime="5s" checkinterval="1s">
              <actions>
                <set_value name="$debugchance" exact="0"/>
                <do_all exact="md.$EconomicFactions.count" counter="$Counter">
                  <set_value name="$Faction" exact="md.$EconomicFactions.{$Counter}"/>
                  <do_if value="$Faction.knowntoplayer">
                    <set_value name="$Relation" exact="$Faction.relationto.{faction.player}"/>
                    <do_all exact="$DiscountMap.count" counter="$DiscountCounter">
                      <debug_text text="'Checking ' + $Faction.knownname + ' relation is ' + $Relation + ' $DiscountCounter is : ' + $DiscountCounter" chance="$debugchance"/>
                      <do_if value="$Relation ge $DiscountMap.{$DiscountCounter}.{$Discount_Index_UnlockValue}">

                        <!--Check if this is the highest tier OR the next tier has not been reached-->
                        <set_value name="$DoDiscount" exact="false"/>
                        <do_if value="$DiscountMap.count == $DiscountCounter">
                          <debug_text text="'this discount is the highest tier'" chance="$debugchance"/>
                          <set_value name="$DoDiscount" exact="true"/>
                        </do_if>
                        <do_elseif value="$Relation lt $DiscountMap.{$DiscountCounter + 1}.{$Discount_Index_UnlockValue}">
                          <debug_text text="'next tier has not been reached'" chance="$debugchance"/>
                          <set_value name="$DoDiscount" exact="true"/>
                        </do_elseif>

                        <do_if value="$DoDiscount">
                          <do_if value="not player.hasdiscount.{$Faction}.{$DiscountMap.{$DiscountCounter}.{$Discount_Index_ID}}">
                            <!--Remove any discounts flow lower tiers (shouldn't really happen for this cue)-->
                            <do_all exact="$DiscountMap.count" counter="$DiscountCounter2">
                              <do_if value="player.hasdiscount.{$Faction}.{$DiscountMap.{$DiscountCounter2}.{$Discount_Index_ID}}">
                                <debug_text text="'removing ' + $DiscountMap.{$DiscountCounter2}.{$Discount_Index_ID}" chance="$debugchance"/>
                                <remove_player_discount id="$DiscountMap.{$DiscountCounter2}.{$Discount_Index_ID}" faction="$Faction"/>
                              </do_if>
                            </do_all>
                            <debug_text text="'adding ' + $DiscountMap.{$DiscountCounter}.{$Discount_Index_ID} + ' for ' + $Faction.knownname" chance="$debugchance"/>
                            <add_player_discount id="$DiscountMap.{$DiscountCounter}.{$Discount_Index_ID}" amount="$DiscountMap.{$DiscountCounter}.{$Discount_Index_DiscountValue}" faction="$Faction" name="readtext.{20210}.{$DiscountMap.{$DiscountCounter}.{$Discount_Index_TextID}}"/>
                          </do_if>
                          <do_else>
                            <debug_text text="'player already has ' + $DiscountMap.{$DiscountCounter}.{$Discount_Index_ID} + ' for ' + $Faction.knownname" chance="$debugchance"/>
                          </do_else>
                        </do_if>
                      </do_if>
                      <do_else>
                        <break/>
                      </do_else>
                    </do_all>
                  </do_if>
                </do_all>
              </actions>
            </cue>
            <cue name="PlayerRelationDiscounts_Unlock" instantiate="true">
              <conditions>
                <event_player_relation_changed />
                <check_value value="event.object == null and event.param != null" />
                <!-- Don't unlock when relation drops -->
                <check_value value="event.param2.{1}" min="event.param2.{2}" />
                <!--Check that the relation is high enough for the lowest tier-->
                <check_value value="event.param2.{1} ge $DiscountMap.{1}.{$Discount_Index_UnlockValue}"/>

                <check_any exact="$DiscountMap.count" counter="$Counter">
                  <check_all>
                    <!--New relation is greater than or equal to the Discount_Index_UnlockValue-->
                    <check_value value="event.param2.{1} ge $DiscountMap.{$Counter}.{$Discount_Index_UnlockValue}"/>
                    <check_any>
                      <!--Check if this is the highest tier OR the next tier has not been reached-->
                      <check_value value="$DiscountMap.count == $Counter"/>
                      <check_value value="event.param2.{1} lt $DiscountMap.{$Counter + 1}.{$Discount_Index_UnlockValue}"/>
                    </check_any>

                    <check_value value="not player.hasdiscount.{event.param}.{$DiscountMap.{$Counter}.{$Discount_Index_ID}}"/>
                    <set_value name="$CounterResult" exact="$Counter"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <do_all exact="$DiscountMap.count" counter="$Counter">
                  <do_if value="player.hasdiscount.{event.param}.{$DiscountMap.{$Counter}.{$Discount_Index_ID}}">
                    <debug_text text="'removing ' + $DiscountMap.{$Counter}.{$Discount_Index_ID}"/>
                    <remove_player_discount id="$DiscountMap.{$Counter}.{$Discount_Index_ID}" faction="event.param"/>
                  </do_if>
                </do_all>
                <add_player_discount id="$DiscountMap.{$CounterResult}.{$Discount_Index_ID}" amount="$DiscountMap.{$CounterResult}.{$Discount_Index_DiscountValue}" faction="event.param" name="readtext.{20210}.{$DiscountMap.{$CounterResult}.{$Discount_Index_TextID}}"/>
              </actions>
            </cue>

            <cue name="PlayerRelationDiscounts_Remove" instantiate="true">
              <conditions>
                <event_player_relation_changed />
                <check_value value="event.object == null and event.param != null" />
                <check_value value="event.param2.{1} lt $DiscountMap.{1}.{$Discount_Index_UnlockValue}" />
              </conditions>
              <actions>
                <do_all exact="$DiscountMap.count" counter="$Counter">
                  <do_if value="player.hasdiscount.{event.param}.{$DiscountMap.{$Counter}.{$Discount_Index_ID}}">
                    <debug_text text="'removing ' + $DiscountMap.{$Counter}.{$Discount_Index_ID} + ' for ' + event.param"/>
                    <remove_player_discount id="$DiscountMap.{$Counter}.{$Discount_Index_ID}" faction="event.param"/>
                  </do_if>
                </do_all>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="TempRelationDropped" instantiate="true" namespace="this">
          <conditions>
            <event_player_relation_changed />
            <check_value value="event.object != null and event.param != null and event.param2.{1} lt event.param2.{2}" />
            <check_value value="not IllegalActivity.$updatingrelation" comment="Do not react if updating the relation via attack handler" />
            <check_value value="notification.reputation_lost_temp.active" />
            <check_age min="@$lasttime + 30s"/>
          </conditions>
          <actions>
            <!-- Player lost reputation temporarily for a specific object -->
            <debug_text text="'Player lost reputation for entity %4 (%5, %1): %3 --&gt; %2 (entity=%4)'.[event.param, event.param2.{1}, event.param2.{2}, event.object.knownname, event.object.controlled.knownname]" />
            <set_value name="$newnum" exact="faction.player.relation.{event.param2.{1}}.uivalue" />
            <set_value name="$oldnum" exact="faction.player.relation.{event.param2.{2}}.uivalue" />
            <set_value name="$tickertext" exact="[{1015,16}, '', event.object.controlled.name, '', {1015,250} + {1001,120}, $newnum]" comment="Lost reputation temporarily / [objectname] / Current reputation:" />
            <do_if value="$newnum lt $oldnum">
              <set_value name="$tickertext.{1}" operation="add" exact="{1001,120}" />
              <set_value name="$tickertext.{2}" exact="$newnum - $oldnum" />
            </do_if>
            <do_if value="event.param3" comment="relationchangereason">
              <set_value name="$tickertext.{5}" operation="insert" exact="{1015,251} + {1001,120}" comment="Reason:" />
              <set_value name="$tickertext.{6}" operation="insert" exact="event.param3.name" />
            </do_if>
            <show_notification text="$tickertext" sound="ui_mon_eve_notoriety_down" />
            <set_value name="static.$lasttime" exact="player.age"/>
          </actions>
        </cue>

        <cue name="BaseRelationChanged" instantiate="true" namespace="this">
          <conditions>
            <event_player_relation_changed />
            <check_value value="event.object == null and event.param != null" />
            <check_value value="not IllegalActivity.$updatingrelation" comment="Do not react if updating the relation via attack handler" />
          </conditions>
          <actions>
            <!-- Player reputation changed permanently (faction base relation changed) -->
            <!--<debug_text text="'Player reputation changed permanently for %1: %3 &gt; %2'.[event.param, event.param2.{1}, event.param2.{2}]" />-->
            <set_value name="$oldnum" exact="faction.player.relation.{event.param2.{2}}.uivalue" />
            <set_value name="$newnum" exact="faction.player.relation.{event.param2.{1}}.uivalue" />
            <set_value name="$tickertext" exact="['', '', {1001,43} + {1001,120}, event.param.name, {1015,250} + {1001,120}, $newnum]" comment="Faction: / Current reputation:"/>
            <do_if value="$newnum != $oldnum">
              <set_value name="$tickertext.{1}" exact="{1001,120}" comment="Preceding text will be inserted later" />
              <set_value name="$tickertext.{2}" exact="(if $newnum gt $oldnum then '+' else '') + ($newnum - $oldnum)" />
            </do_if>
            <do_if value="event.param3" comment="relationchangereason">
              <set_value name="$tickertext.{5}" operation="insert" exact="{1015,251} + {1001,120}" comment="Reason:" />
              <set_value name="$tickertext.{6}" operation="insert" exact="event.param3.name" />
            </do_if>
            <do_if value="event.param2.{1} gt event.param2.{2}">
              <set_value name="$tickertext.{1}" exact="{1015,14} + $tickertext.{1}" comment="Reputation gained" />
              <do_if value="notification.reputation_gained.active">
                <show_notification text="$tickertext" sound="ui_mon_eve_notoriety_up" />
              </do_if>
              <set_value name="stat.max_faction_relation" exact="$newnum" />
            </do_if>
            <do_else>
              <set_value name="$tickertext.{1}" exact="{1015,15} + $tickertext.{1}" comment="Reputation lost" />
              <do_if value="notification.reputation_lost.active">
                <show_notification text="$tickertext" sound="ui_mon_eve_notoriety_down" />
              </do_if>
            </do_else>
            <!-- Build the logbook text entirely from scratch -->
            <do_if value="$tickertext.{2} == ''">
              <set_value name="$title" exact="$tickertext.{1}" />
            </do_if>
            <do_else>
              <set_value name="$title" exact="$tickertext.{1} + ' ' + $tickertext.{2}" />
            </do_else>
            <set_value name="$logtext" exact="[{1015,250} + {1001,120}, $newnum]" />
            <do_if value="event.param3" comment="relationchangereason">
              <set_value name="$logtext.{1}" operation="insert" exact="$tickertext.{5}" />
              <set_value name="$logtext.{2}" operation="insert" exact="$tickertext.{6}" />
            </do_if>
            <write_to_logbook category="general" title="$title" faction="event.param" text="$logtext" />
          </actions>
        </cue>

        <cue name="PlayerFactionTradeCompleted" instantiate="true" namespace="this">
          <conditions>
            <event_player_trade_completed />
          </conditions>
          <actions>
            <set_value name="$trade" exact="event.param" />
          </actions>
          <cues>
            <cue name="PlayerFactionTradeCompleted_Actions">
              <actions>
                <do_if value="$trade.buyer.owner == faction.player and $trade.seller.owner == faction.player">
                  <!-- <debug_text text="'Both parties are player owned. Ignore.'" /> -->
                </do_if>
                <do_elseif value="$trade.buyer.commander == $trade.seller or $trade.seller.commander == $trade.buyer">
                  <!-- <debug_text text="'Parties are in same subordinate hierarchy. Ignore.'" /> -->
                </do_elseif>
                <do_else>
                  <set_value name="$amount" exact="$trade.transferredamount"/>
                  <set_value name="$ware" exact="$trade.ware"/>
                  <set_value name="$price" exact="$trade.unitprice * $amount"/>
                  <do_if value="$trade.seller.owner == faction.player">
                    <set_value name="$otherfaction" exact="$trade.buyer.owner"/>
                    <set_value name="$playerobject" exact="$trade.seller"/>
                    <set_value name="$otherobject" exact="$trade.buyer"/>
                    <set_value name="$text" exact="{1016, 90}.[$playerobject.name, $playerobject.idcode, $amount, $ware, $otherobject.name, $otherobject.idcode, @$otherobject.sector.name, $price/100]" comment="%1 %2 sold %3 %4 to %5 %6 in %7 for %8 Cr."/>

                    <set_value name="$tradecontainer" exact="if $trade.seller.commander then $trade.seller.commander else $trade.seller"/>
                    <do_if value="$tradecontainer.isoperational">
                      <set_value name="$tradenpc" exact="$tradecontainer.tradenpc"/>
                    </do_if>
                    <do_else>
                      <set_value name="$otherfaction" exact="$trade.seller.owner"/>
                      <set_value name="$playerobject" exact="$trade.buyer"/>
                      <set_value name="$otherobject" exact="$trade.seller"/>
                      <set_value name="$text" exact="{1016, 91}.[$playerobject.name, $playerobject.idcode, $amount, $ware, $otherobject.name, $otherobject.idcode, @$otherobject.sector.name, $price/100]" comment="%1 %2 bought %3 %4 from %5 %6 in %7 for %8 Cr."/>
                      <set_value name="$price" exact="-$price"/>
                    </do_else>

                    <do_if value="not $playerobject.commander or $playerobject.commander == player.occupiedship">
                      <write_to_logbook title="{20217, 1200}" text="$text" money="$price" faction="$otherfaction" category="upkeep"/>
                    </do_if>
                  </do_if>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="PlayerMoneyTransfer" instantiate="true" namespace="this">
          <conditions>
            <event_player_money_updated />
          </conditions>
          <actions>
            <set_value name="stat.money_player" exact="event.param2 / 1Cr" />
            <do_if value="event.param &gt; event.param2">
              <do_if value="notification.money_subtracted.active">
                <substitute_text text="$message" source="{1015,7}">
                  <replace string="'$MONEY$'" with="(event.param - event.param2).formatted.default" />
                  <replace string="'$MONEY2$'" with="event.param2.formatted.default" />
                </substitute_text>
                <show_notification text="$message" sound="ui_mon_eve_money_down" />
              </do_if>
            </do_if>
            <do_else>
              <do_if value="notification.money_added.active">
                <substitute_text text="$message" source="{1015,8}">
                  <replace string="'$MONEY$'" with="(event.param2 - event.param).formatted.default" />
                  <replace string="'$MONEY2$'" with="event.param2.formatted.default" />
                </substitute_text>
                <show_notification text="$message" sound="ui_mon_eve_money_up" />
              </do_if>
            </do_else>
          </actions>
        </cue>

        <cue name="PlayerOwnedMoneyUpdated" instantiate="true" namespace="this">
          <conditions>
            <!-- Update this if we implement separate controls for setting the budget and transferring money to object accounts. -->
            <event_player_owned_money_updated/>
            <check_value value="event.object.isoperational and event.object.hasownaccount"/>
            <check_value value="event.object.money and event.object.maxbudget"/>
            <set_value name="$productionmoney" exact="event.object.productionmoney"/>
            <check_value value="event.object.money gt [event.object.maxbudget, $productionmoney].max"/>
          </conditions>
          <actions>
            <set_value name="$accountholder" exact="event.object"/>
            <set_value name="$productionmoney" exact="static.$productionmoney"/>
            <debug_text text="'%s %s %s money updated from %sCr to %sCr.'.[@event.object.idcode, @event.object.knownname, event.object, event.param.formatted.default, event.param2.formatted.default]" chance="0"/>

            <!-- if account money is 50% higher than max budget or productionmoney, whichever is higher. -->
            <set_value name="$transfer" exact="(2 * $accountholder.money) gt (3 * $accountholder.maxbudget)"/>
            <set_value name="$moneytotransfer" exact="$accountholder.money - $accountholder.maxbudget"/>
            <do_if value="$transfer and $productionmoney">
              <set_value name="$transfer" exact="$accountholder.money gt $productionmoney"/>
              <set_value name="$moneytotransfer" exact="$accountholder.money - [$accountholder.maxbudget, $productionmoney].max"/>
            </do_if>

            <do_if value="$transfer and ($moneytotransfer ge 1Cr)">
              <debug_text text="'%s %s %s transferring %sCr to the player. current cash: %sCr, max budget: %sCr, production money: %sCr'.[$accountholder.idcode, $accountholder.knownname, $accountholder, $moneytotransfer.formatted.default, $accountholder.money.formatted.default, $accountholder.maxbudget.formatted.default, $productionmoney.formatted.default]" filter="scripts"/>
              <transfer_money result="$result" from="$accountholder" to="faction.player" amount="$moneytotransfer"/>
              <do_if value="$result != 0Cr">
                <substitute_text text="$logtext" source="{1016,45}" comment="Received surplus from $STATION$ in $SECTOR$.">
                  <replace string="'$STATION$'" with="$accountholder.name" />
                  <replace string="'$SECTOR$'" with="$accountholder.sector.name" />
                </substitute_text>
                <write_to_logbook category="upkeep" title="$logtext" money="-$result" interaction="showonmap" object="$accountholder"/>
              </do_if>
              <do_else>
                <debug_text text="'transfer_money resulted in 0Cr transferred. tried to transfer %sCr.'.[$moneytotransfer.formatted.default]" filter="error"/>
              </do_else>
            </do_if>
          </actions>
        </cue>

        <cue name="PlayerOwnedAttacked" instantiate="true" namespace="this">
          <conditions>
            <event_player_owned_attacked/>
            <check_age min="@event.object.controlentity.default.$NextAttackedMessage"/>
            <check_value value="event.object != player.controlled and @event.object.controlentity.default.isclass.npc"/>
            <check_value value="not event.object.commander or event.object.commander == player.occupiedship"/>
            <check_value value="not @event.param.isplayerowned"/>
            <!-- hull+shield below 150%, or below 95% in case there are no shields -->
            <check_value value="(event.object.hullpercentage + event.object.shieldpercentage) lt (95 + (55 * (event.object.maxshield != 0)))"/>
          </conditions>
          <actions>
            <!-- <debug_text text="'%1: %2, object=%3, param=%4, param2=%5, param3=%6'.[player.age, event.name, event.object, event.param, event.param2, event.param3]" /> -->
            <set_value name="$actor" exact="event.object.controlentity.default"/>
            <set_value name="$actor.$NextAttackedMessage" exact="player.age + 10min"/>

            <set_value name="$attacker" exact="event.param"/>
            <set_value name="$attacked" exact="event.object"/>
            <set_value name="$fleemethod" exact="null"/>
            <do_if value="$attacked.isclass.ship and not $attacked.iscapitalship">
              <do_any>
                <set_value name="$fleemethod" exact="'boost'"     weight="20"/>
                <set_value name="$fleemethod" exact="'maneuver'"  weight="20"/>
                <set_value name="$fleemethod" exact="'highway'"   weight="30"/>
                <set_value name="$fleemethod" exact="'dock'"      weight="30"/>
              </do_any>
            </do_if>
            <do_elseif value="$attacked.iscapitalship">
              <set_value name="$fleemethod" exact="'boost'"/>
            </do_elseif>
            <set_value name="$attackdata" exact="table[$attacker = $attacker, $attacked = $attacked, $fleemethod = $fleemethod, $cue = this]"/>

            <!-- Write logbook entry: $SHIP$ is under attack.\nLocation: $SECTOR$ -->
            <write_to_logbook category="upkeep" title="event.object.name + (' ' + {10002,310} + '\n' + {1001,2943} + {1001,120} + ' ') + event.object.sector.name" interaction="showonmap" object="event.object" highlighted="true"/>
            <!-- Interactive notification -->
            <do_if value="notification.npc_under_attack.active and player.age ge @static.$NextNotification and $attacked.isclass.ship">
              <set_value name="static.$NextNotification" exact="player.age + 15s"/>
              <set_value name="$timeout" exact="8s"/>
              <!-- INTERACTION: player-owned ship/station attacked -->
              <play_cutscene key="'ShowPilot'" targetmonitor="true" timeout="$timeout" caption="{1015, 262} + ' - %s (%s)'.[event.object.knownname, event.object.idcode]" sound="notification_warning_playerownedattacked" comment="Under attack">
                <interaction text="''" param="$actor" param2="'PlayerOwnedAttacked'"/>
                <param name="npcref" object="$actor"/>
              </play_cutscene>
            </do_if>
            <do_else>
              <cancel_cue cue="this" comment="Don't start sub-cues"/>
            </do_else>
          </actions>
          <cues>
            <cue name="PlayerOwnedAttacked_Speak">
              <delay exact="1ms" />
              <actions>
                <do_if value="$attackdata.$attacked.hullpercentage gt 80">
                  <speak actor="$actor" line="[10004, 10005, 10006].random" comment="(under light fire)"/>
                </do_if>
                <do_else>
                  <speak actor="$actor" line="[10007, 10008].random" comment="Taking serious damage."/>
                </do_else>
              </actions>
            </cue>

            <cue name="PlayerOwnedAttacked_Interact">
              <conditions>
                <event_player_interaction param="$actor" param2="'PlayerOwnedAttacked'"/>
              </conditions>
              <actions>
                <stop_cutscene key="'ShowPilot'"/>
                <debug_text text="'%s %s %s attacked by %s %s %s in sector %s'.[@$attackdata.$attacked.idcode, @$attackdata.$attacked.knownname, $attackdata.$attacked, @$attackdata.$attacker.idcode, @$attackdata.$attacker.knownname, $attackdata.$attacker, @$attackdata.$attacked.sector.knownname]" chance="0"/>
                <!-- conversation handling in md.Conversations.PlayerOwnedAttacked_Conv -->
                <start_conversation actor="$actor" conversation="PlayerOwnedAttacked" convparam="$attackdata" type="unqueued"/>
              </actions>
            </cue>

            <cue name="PlayerOwnedAttacked_Timeout">
              <delay exact="$timeout"/>
              <actions>
                <cancel_cue cue="PlayerOwnedAttacked"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="IllegalCargoDropped" instantiate="true" namespace="this">
          <conditions>
            <event_object_signalled object="player.entity" param="'IllegalCargoDropped'" />
            <!-- param2 = player_subordinate, param3 = [droppingentity, droppedwares, droppedamounts, dropgroup, policefaction] -->
            <check_value value="event.param2 == event.param3.{1}.ship" />
          </conditions>
          <actions>
            <set_value name="$actor" exact="event.param3.{1}" />
            <set_value name="$droppedwares" exact="event.param3.{2}" />
            <set_value name="$droppedamounts" exact="event.param3.{3}" />
            <set_value name="$policefaction" exact="event.param3.{5}" />
            <!-- <debug_text text="'%1: warning! %2 says: %3 has dropped illegal wares: %4'.[player.age, $actor.name, $actor.ship.name, $droppedwares]" /> -->
            <!-- Significant reputation loss -->
            <do_if value="$policefaction">
              <add_faction_relation faction="faction.player" otherfaction="$policefaction" value="-0.01" reason="relationchangereason.illegalcargo" comment="UI -10" />
            </do_if>
          </actions>
          <cues>
            <cue name="IllegalCargoDropped_Notification">
              <actions>
                <set_value name="$shownotification" exact="false"/>
                <set_value name="$duration" exact="1ms"/>
                <do_if value="notification.npc_illegal_cargo_dropped.active and not player.isinconversation and player.age ge @IllegalCargoDropped.static.$NextNotification">
                  <set_value name="$shownotification" exact="true"/>
                  <set_value name="$duration" exact="8s" />
                  <set_value name="IllegalCargoDropped.static.$NextNotification" exact="player.age + 60s" />
                  <play_cutscene key="'ShowPilot'" targetmonitor="true" timeout="$duration" caption="$actor.ship.name" sound="notification_conversationstart">
                    <param name="npcref" object="$actor"/>
                  </play_cutscene>
                </do_if>
              </actions>
              <cues>
                <cue name="IllegalCargoDropped_Speak" onfail="cancel">
                  <conditions>
                    <check_value value="$shownotification" />
                  </conditions>
                  <!-- Start speaking after cutscene has started on monitor -->
                  <delay exact="1ms" />
                  <actions>
                    <speak actor="$actor" line="[6001, 5001]" comment="I was asked to drop my cargo. The request came from a police vessel." />
                  </actions>
                </cue>
                <cue name="IllegalCargoDropped_Timeout">
                  <delay exact="$duration" />
                </cue>
                <!-- This cue must be triggered in either case, even if no cutscene notification is shown -->
                <cue name="IllegalCargoDropped_SpeakFinished">
                  <conditions>
                    <check_any>
                      <!-- Triggered at the end of the entire speak - note: the parameter is only the first speak line! -->
                      <event_speak_finished actor="$actor" line="6001" />
                      <event_cue_completed cue="IllegalCargoDropped_Timeout" />
                    </check_any>
                  </conditions>
                  <actions>
                    <!-- Write logbook entry -->
                    <set_value name="$logtext" exact="['', '']" />
                    <substitute_text text="$logtext.{1}" source="{1016,20}" comment="$SHIP$ in $SECTOR$ was scanned and forced to drop all illegal cargo.">
                      <replace string="'$SHIP$'" with="$actor.ship.name" />
                      <replace string="'$SECTOR$'" with="$actor.sector.name" />
                    </substitute_text>
                    <do_all exact="$droppedwares.count" counter="$i">
                      <append_to_list name="$logtext" exact="$droppedwares.{$i}.name" />
                      <append_to_list name="$logtext" exact="$droppedamounts.{$i}" />
                    </do_all>

                    <do_if value="notification.illegal_cargo_dropped.active">
                      <set_value name="$tickertext" exact="$logtext.clone" />
                      <set_value name="$tickertext.{1}" operation="insert" exact="{1015,45}" />
                      <set_value name="$tickertext.{2}" operation="insert" exact="''" />
                      <include_actions ref="TruncateTickerText" />
                      <show_notification text="$tickertext" priority="2" sound="notification_warning" />
                    </do_if>
                    <write_to_logbook category="upkeep" title="{1015,45}" text="$logtext" separator="{1001,120} + ' '" interaction="showonmap" object="$actor.ship" />
                    <!-- Instance cleanup: Don't allow any cue siblings to stay alive -->
                    <cancel_cue cue="parent" />
                  </actions>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="AutopilotTargetSet" instantiate="true" namespace="this">
          <conditions>
            <event_autopilot_target_set />
          </conditions>
          <actions>
            <set_value name="$text" exact="[{10002,920}, '']" />
            <do_if value="event.param">
              <do_if value="event.param.isclass.ship">
                <append_to_list name="$text" exact="{1001,78} + {1001,120} + ' ' + {1011,3}.[event.param.name]" />
              </do_if>
              <do_elseif value="event.param.isclass.space">
                <append_to_list name="$text" exact="{1001,78} + {1001,120} + ' ' + {1011,16}.[event.param.name]" />
              </do_elseif>
              <do_else>
                <append_to_list name="$text" exact="{1001,78} + {1001,120} + ' ' + {1011,26}.[event.param.name]" />
              </do_else>
              <append_to_list name="$text" exact="''" />
              <do_if value="event.param2 and event.param2 != event.param">
                <append_to_list name="$text" exact="{1011,1014}.[event.param2.name]" />
                <append_to_list name="$text" exact="''" />
              </do_if>
            </do_if>
            <show_notification text="$text" />
          </actions>
        </cue>

        <cue name="DiscoverGalaxy" instantiate="true">
          <conditions>
            <!-- Whenever the player enters a sector, look for an unknown sector - if none is found, unlock achievement -->
            <event_object_changed_sector object="player.entity"/>
            <!-- Optimisation: Remember an unknown sector that we found last time - we can ignore sector changes until player enters that unknown sector -->
            <check_value value="not @$nextsector or $nextsector == event.param" />
          </conditions>
          <actions>
            <!-- Find any unknown sector -->
            <find_sector name="$nextsector" space="player.galaxy">
              <match knownto="faction.player" negate="true" />
              <match_context normalcluster="true" />
            </find_sector>
            <!-- <debug_text text="'Next unknown sector: %s (%s)'.[$nextsector, @$nextsector.knownname]" /> -->
            <do_if value="not $nextsector">
              <!-- No unknown sector left, we're done -->
              <signal_cue cue="OnGalaxyDiscovered" />
              <cancel_cue cue="static" />
            </do_if>
          </actions>
        </cue>
        <cue name="OnGalaxyDiscovered">
          <conditions>
            <event_cue_signalled />
          </conditions>
          <delay exact="1s" />
          <actions>
            <unlock_achievement name="EXPLORER" />
          </actions>
        </cue>

        <cue name="ClaimedShip" instantiate="true">
          <conditions>
            <event_object_signalled object="player.entity" param="'ClaimedShip'" />
          </conditions>
          <actions>
            <signal_cue_instantly cue="ProcessClaimedShip" param="event.param2.ship"/>

            <debug_text text="'starting orders.base'" chance="0"/>
            <!-- After all the claim operations are done, start the default script -->
            <start_script object="event.param2" name="'orders.base'" />
          </actions>
        </cue>

        <cue name="ProcessClaimedShip" instantiate="true" namespace="this">
          <conditions>
            <event_cue_signalled/>
            <check_value value="@event.param.isoperational"/>
          </conditions>
          <actions>
            <set_value name="$ship" exact="event.param"/>

            <!-- capture docked ships -->
            <find_dockingbay name="$dockingbays" object="$ship" multiple="true"/>
            <debug_text text="'found %s dockingbays on %s %s %s'.[$dockingbays.count, $ship.idcode, $ship.knownname, $ship]" chance="0"/>
            <do_all exact="$dockingbays.count" counter="$i">
              <set_value name="$locdockedships" exact="$dockingbays.{$i}.docked"/>
              <debug_text text="'found %s ships on docking bay %s'.[$locdockedships.count, $i]" chance="0"/>
              <do_all exact="$locdockedships.count" counter="$j">
                <debug_text text="'processing ship %s: %s %s %s'.[$j, $locdockedships.{$j}.idcode, $locdockedships.{$j}.knownname, $locdockedships.{$j}]" chance="0"/>
                <do_if value="$locdockedships.{$j}.hascontext.{$ship}">
                  <do_if value="$locdockedships.{$j}.isunit">
                    <destroy_object object="$locdockedships.{$j}" explosion="false" comment="unit will be collected"/>
                  </do_if>
                  <do_else>
                    <set_owner object="$locdockedships.{$j}" faction="$ship.trueowner"/>
                    <signal_cue_instantly cue="this.static" param="$locdockedships.{$j}"/>
                  </do_else>
                </do_if>
              </do_all>
            </do_all>

            <!-- remove people on board. -->
            <set_value name="$shippeople" exact="$ship.people.list"/>
            <do_all exact="$shippeople.count" counter="$i">
              <remove_npc_template object="$ship" template="$shippeople.{$i}"/>
            </do_all>

            <!-- release $ship from command hierarchy -->
            <remove_object_commander object="$ship" comment="Free ship from control of previous owner (which can be a station)"/>

            <!-- clean up order queue -->
            <cancel_all_orders object="$ship"/>
            <create_order id="'Wait'" object="$ship" default="true">
              <param name="allowdocked" value="not $ship.iscapitalship"/>
            </create_order>

            <!-- change faction of personnel on-board the seized ship -->
            <get_control_entities object="$ship" groupname="$ControlEntities"/>
            <do_all exact="$ControlEntities.count" counter="$Counter">
              <do_if value="$ControlEntities.{$Counter}.trueowner != $ship.trueowner">
                <do_if value="$ControlEntities.{$Counter}.isclass.npc">
                  <abort_scripts entity="$ControlEntities.{$Counter}"/>
                  <destroy_object object="$ControlEntities.{$Counter}"/>
                </do_if>
                <do_elseif value="$ControlEntities.{$Counter}.isclass.computer">
                  <!--For computers, abort their scripts, set the owner and re-assign-->
                  <abort_scripts entity="$ControlEntities.{$Counter}"/>
                  <set_value name="$Post" exact="$ControlEntities.{$Counter}.controlpost"/>
                  <dismiss_control_entity object="$ship" actor="$ControlEntities.{$Counter}"/>
                  <set_owner object="$ControlEntities.{$Counter}" faction="$ship.trueowner"/>
                  <!--Re-assign to start scripts again-->
                  <assign_control_entity actor="$ControlEntities.{$Counter}" object="$ship" post="$Post"/>
                </do_elseif>
              </do_if>
            </do_all>

            <cease_fire object="$ship"/>
          </actions>
        </cue>

        <cue name="TravelModeCharging" instantiate="true">
          <conditions>
            <event_player_travelmode_charge_started />
          </conditions>
          <actions>
            <do_if value="player.occupiedship">
              <show_notification text="{1015,172}" />
            </do_if>
            <do_elseif value="player.room.isclass.cockpit and player.ship.isclass.[class.ship_m, class.ship_l, class.ship_xl]">
              <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[ $name = '$BridgeNavTravelDrive', $locations = table[ $Bridge = player.room.slotcontext ] ]" />
            </do_elseif>
          </actions>
        </cue>

        <cue name="TravelModeStarted" instantiate="true">
          <conditions>
            <event_player_travelmode_started />
          </conditions>
          <actions>
            <do_if value="player.occupiedship">
              <show_notification text="{1015,170}" />
            </do_if>
            <do_elseif value="player.room.isclass.cockpit and player.ship.isclass.[class.ship_m, class.ship_l, class.ship_xl]">
              <!-- Trigger usecase if not already triggered by charging event (it won't play twice due to usecase-internal timeout) -->
              <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[ $name = '$BridgeNavTravelDrive', $locations = table[ $Bridge = player.room.slotcontext ] ]" />
            </do_elseif>
          </actions>
        </cue>

        <cue name="ModeStarted" instantiate="true">
          <conditions>
            <event_player_changed_activity />
            <check_value value="player.occupiedship" />
          </conditions>
          <actions>
            <!-- notification for aborted mode: -->
            <do_if value="event.param2 == activity.travel">
              <show_notification text="{1015,171}" />
            </do_if>
            <do_elseif value="event.param2 == activity.scan">
              <show_notification text="{1015,174}" />
            </do_elseif>
            <do_elseif value="event.param2 == activity.scan_longrange">
              <show_notification text="{1015,176}" />
            </do_elseif>
            <do_elseif value="event.param2 == activity.seta">
              <show_notification text="{1015,178}" />
            </do_elseif>
            <!-- notification for activated mode -->
            <!-- activity.travel notification is handled by TravelModeCharging/TravelModeStarted -->
            <do_if value="event.param == activity.scan">
              <show_notification text="{1015,173}" />
            </do_if>
            <do_elseif value="event.param == activity.scan_longrange">
              <show_notification text="{1015,175}" />
            </do_elseif>
            <do_elseif value="event.param == activity.seta">
              <show_notification text="{1015,177}" />
            </do_elseif>
          </actions>
        </cue>

        <cue name="SignalUnlockStarted" instantiate="true">
          <conditions>
            <event_player_signal_unlock_started />
          </conditions>
          <actions>
            <do_if value="event.param.type == signalleaktype.voice">
              <!-- Modulating audio signal... -->
              <show_notification text="{1015,186}" sound="notification_detected_platform" />
            </do_if>
            <do_elseif value="event.param.type == signalleaktype.mission">
              <!-- Decrypting Data steam... -->
              <show_notification text="{1015,182}" sound="notification_detected_platform" />
            </do_elseif>
            <do_else>
              <!-- Decrypting data stream... -->
              <show_notification text="{1015,182}" sound="notification_detected_platform" />
            </do_else>
          </actions>
        </cue>

        <cue name="SignalUnlockFailed" instantiate="true">
          <conditions>
            <event_player_signal_unlock_failed />
          </conditions>
          <actions>
            <!-- Signal lost -->
            <show_notification text="{1015,187}" priority="2" sound="notification_detected_mission" />
          </actions>
        </cue>

        <cue name="SignalUnlockFinished" instantiate="true">
          <conditions>
            <event_player_signal_unlock_finished />
          </conditions>
          <actions>
            <do_if value="event.param.type == signalleaktype.voice">
              <!-- SUCCESS! Communication established. -->
              <show_notification text="{1015,188}" sound="notification_detected_platform" />
            </do_if>
             <!-- SUCCESS! Data decrypted. -->
            <do_elseif value="event.param.type == signalleaktype.mission">
              <show_notification text="{1015,184}" sound="notification_detected_platform" />
            </do_elseif>
            <do_else>
              <!-- SUCCESS! Data decrypted. -->
              <show_notification text="{1015,184}" sound="notification_detected_platform" />
            </do_else>
          </actions>
        </cue>

        <cue name="SignalUnlockImpossible" instantiate="true">
          <conditions>
            <event_player_signal_unlock_impossible />
          </conditions>
          <actions>
            <!-- Scanner insufficient -->
            <do_if value="@player.controlled.isclass.spacesuit">
              <show_notification text="{1015,267}" priority="2" sound="notification_detected_mission" comment="Scan insufficient. Acquire improved spacesuit scanner"/>
            </do_if>
            <do_else>
              <show_notification text="{1015,261}" priority="2" sound="notification_detected_mission" comment="Scan insufficient. Scan from Spacesuit"/>
            </do_else>
          </actions>
        </cue>

        <cue name="SpaceSuitWeaponActivated" instantiate="true">
          <conditions>
            <event_player_activated_weapon />
            <check_value value="@player.controlled.isclass.spacesuit"/>
          </conditions>
          <actions>
            <show_notification text="{1015,260}.[event.param.knownname]" />
          </actions>
        </cue>

        <cue name="BlueprintUnlocked" instantiate="true" namespace="static">
          <conditions>
            <event_player_blueprint_added />
            <check_any>
              <!-- Either this is the first blueprint message ever, or some time has passed since the last one -->
              <check_all>
                <check_value value="(not $lasttime?) or (player.age gt $lasttime)" />
                <set_value name="$lasttime" exact="player.age" />
                <set_value name="$nummessages" exact="0" />
                <set_value name="$limitreached" exact="false" />
              </check_all>
              <!-- Or no time has passed since the last blueprint message, but we are still allowed to display one -->
              <check_value value="not $limitreached" />
            </check_any>
          </conditions>
          <actions>
            <set_value name="$nummessages" operation="add" />
            <do_if value="$nummessages" min="12">
              <set_value name="$limitreached" exact="true" />
              <set_value name="$blueprint" exact="'...'" />
            </do_if>
            <do_else>
              <set_value name="$blueprint" exact="event.param2.name" />
            </do_else>
            <show_notification text="{1015,103}.[$blueprint]" />
          </actions>
        </cue>

        <cue name="PlayerAlert" instantiate="true" namespace="this">
          <conditions>
            <event_player_alert />
          </conditions>
          <actions>
            <!-- object = location (sector), param = alert message, param2 = sound id, param3 = object list -->
            <show_notification text="[event.param, '', {1001,2943} + {1001,120}, event.object.name]" sound="event.param2" />
            <set_value name="$logtext" exact="{1001,2943} + {1001,120} + ' ' + event.object.name" />
            <do_if value="event.param3.count">
              <write_to_logbook category="alerts" title="event.param" text="$logtext" interaction="showonmap" object="event.param3.{1}" />
            </do_if>
            <do_else>
              <write_to_logbook category="alerts" title="event.param" text="$logtext" />
            </do_else>
          </actions>
        </cue>

      </cues>
    </cue>

    <!-- Cue must be a root cue so that the event listener gets set up before event_game_loaded is triggered -->
    <cue name="HACK_FixBlockedConversations" instantiate="true">
      <conditions>
        <event_game_loaded />
      </conditions>
      <actions>
        <!-- Fix conversations being blocked by this variable not getting reset due to some unknown bug. When saving (and loading the save), there shouldn't be any conversations. -->
        <set_value name="IllegalActivity.$conversationblocked" exact="false" />
      </actions>
    </cue>

    <cue name="VentureMissionCompleted" instantiate="true" namespace="this">
      <conditions>
        <event_venture_mission_completed/>
      </conditions>
      <actions>
        <set_value name="$name" exact="event.param.{1}"/>
        <set_value name="$type" exact="event.param.{2}"/>
        <set_value name="$ships" exact="event.param2"/>
        <set_value name="$duration" exact="event.param3" comment="in seconds"/>
        <set_value name="$debugchance" exact="0"/>
        <debug_text text="'Venture mission completed, mission rawname=%1, mission type=%2, ships involved=%3, duration=%4s'.[$name, $type, $ships, $duration]"/>

        <!-- determine experience type and factor -->
        <set_value name="$xp_categories" exact="[]"/>
        <set_value name="$xp_times" exact="[($duration / 3600)i, 1].max"/>
        <do_if value="$type == 'aggressive'">
          <set_value name="$xp_times" exact="[($duration / 1800)i, 1].max"/>
          <do_all exact="$xp_times" counter="$i">
            <do_any>
              <append_to_list name="$xp_categories" exact="'ship_kill_hard'" weight="10"/>
              <append_to_list name="$xp_categories" exact="'ship_kill_easy'" weight="100"/>
              <append_to_list name="$xp_categories" exact="'ship_kill_surfaceelement'" weight="30"/>

              <append_to_list name="$xp_categories" exact="'ship_kill_station'" weight="1"/>
              <append_to_list name="$xp_categories" exact="'ship_kill_stationmodule'" weight="9"/>

              <append_to_list name="$xp_categories" exact="'ship_repel_hard'" weight="40"/>
              <append_to_list name="$xp_categories" exact="'ship_repel_easy'" weight="110"/>

              <append_to_list name="$xp_categories" exact="'ship_flee'" weight="80"/>
              <append_to_list name="$xp_categories" exact="'ship_flee_hard'" weight="20"/>

              <append_to_list name="$xp_categories" exact="'ship_repair'" weight="100"/>

              <!--<append_to_list name="$xp_categories" exact="null" weight="50"/>-->
            </do_any>
          </do_all>
        </do_if>
        <do_elseif value="$type == 'diplomatic'">
          <do_all exact="$xp_times" counter="$i">
            <do_any>
              <append_to_list name="$xp_categories" exact="'ship_trade_normal'" weight="20"/>
              <append_to_list name="$xp_categories" exact="'ship_trade_good'" weight="5"/>
              <append_to_list name="$xp_categories" exact="'ship_trade_bad'" weight="5"/>

              <append_to_list name="$xp_categories" exact="'ship_kill_easy'" weight="60"/>
              <append_to_list name="$xp_categories" exact="'ship_repel_easy'" weight="100"/>
              <append_to_list name="$xp_categories" exact="'ship_flee'" weight="40"/>

              <append_to_list name="$xp_categories" exact="'ship_repair'" weight="70"/>

              <!--<append_to_list name="$xp_categories" exact="null" weight="45"/>-->
            </do_any>
          </do_all>
        </do_elseif>
        <do_elseif value="$type == 'economic'">
          <do_all exact="$xp_times" counter="$i">
            <do_any>
              <append_to_list name="$xp_categories" exact="'ship_trade_normal'" weight="200"/>
              <append_to_list name="$xp_categories" exact="'ship_trade_good'" weight="100"/>
              <append_to_list name="$xp_categories" exact="'ship_trade_bad'" weight="100"/>

              <append_to_list name="$xp_categories" exact="'ship_kill_easy'" weight="10"/>
              <append_to_list name="$xp_categories" exact="'ship_repel_easy'" weight="5"/>
              <append_to_list name="$xp_categories" exact="'ship_flee'" weight="15"/>

              <append_to_list name="$xp_categories" exact="'ship_repair'" weight="70"/>

              <!--<append_to_list name="$xp_categories" exact="null" weight="45"/>-->
            </do_any>
          </do_all>
        </do_elseif>
        <do_elseif value="$type == 'exploration'">
          <do_all exact="$xp_times" counter="$i">
            <do_any>
              <append_to_list name="$xp_categories" exact="'ship_kill_easy'" weight="80"/>
              <append_to_list name="$xp_categories" exact="'ship_repel_easy'" weight="10"/>
              <append_to_list name="$xp_categories" exact="'ship_flee'" weight="60"/>

              <append_to_list name="$xp_categories" exact="'ship_repair'" weight="50"/>

              <!--<append_to_list name="$xp_categories" exact="null" weight="50"/>-->
            </do_any>
          </do_all>
        </do_elseif>
        <do_else>
          <debug_text text="'unsupported venture type: %s. no skills gained.'.[$type]" filter="error"/>
        </do_else>
        <debug_text text="'XP gain: venture type: %s, duration: %ss, times: %s, experiences:'.[$type, $duration, $xp_times]" chance="$debugchance"/>
        <do_all exact="$xp_times" counter="$i" chance="$debugchance">
          <debug_text text="@$xp_categories.{$i}"/>
        </do_all>

        <!-- apply experience to all ships involved. -->
        <do_all exact="$ships.count" counter="$i">
          <debug_text text="'applying experience to %s %s %s.\npilot skills:\npiloting: %s\nmanagement: %s\nengineering: %s\nboarding: %s\nmorale: %s'.[@$ships.{$i}.idcode, @$ships.{$i}.knownname, $ships.{$i}, @$ships.{$i}.pilot.skill.piloting, @$ships.{$i}.pilot.skill.management, @$ships.{$i}.pilot.skill.engineering, @$ships.{$i}.pilot.skill.boarding, @$ships.{$i}.pilot.skill.morale]" chance="$debugchance"/>
          <set_value name="$crewtable" exact="table[]" chance="$debugchance"/>
          <do_all exact="$ships.{$i}.people.count" counter="$j" chance="$debugchance">
            <set_value name="$npctemplate" exact="$ships.{$i}.people.list.{$j}"/>
            <set_value name="$crewtable.{$npctemplate}" exact="table[ $name = $ships.{$i}.people.{$npctemplate}.name, $piloting = $ships.{$i}.people.{$npctemplate}.skill.piloting, $management = $ships.{$i}.people.{$npctemplate}.skill.management, $engineering = $ships.{$i}.people.{$npctemplate}.skill.engineering, $boarding = $ships.{$i}.people.{$npctemplate}.skill.boarding, $morale = $ships.{$i}.people.{$npctemplate}.skill.morale ]"/>
          </do_all>

          <do_all exact="$xp_categories.count" counter="$j">
            <do_if value="@$xp_categories.{$j}">
              <do_if value="$ships.{$i}.pilot.exists">
                <apply_experience entity="$ships.{$i}.pilot" experience="$xp_categories.{$j}" factor="0.5"/>
              </do_if>
              <apply_experience object="$ships.{$i}" role="entityrole.service" experience="$xp_categories.{$j}" factor="0.5"/>
            </do_if>
          </do_all>
          <debug_text text="'experience applied.\npilot skills:\npiloting: %s\nmanagement: %s\nengineering: %s\nboarding: %s\nmorale: %s'.[@$ships.{$i}.pilot.skill.piloting, @$ships.{$i}.pilot.skill.management, @$ships.{$i}.pilot.skill.engineering, @$ships.{$i}.pilot.skill.boarding, @$ships.{$i}.pilot.skill.morale]" chance="$debugchance"/>

          <do_all exact="$ships.{$i}.people.count" counter="$j" chance="$debugchance">
            <set_value name="$npctemplate" exact="$ships.{$i}.people.list.{$j}"/>
            <set_value name="$skills" exact="['piloting', 'management', 'engineering', 'boarding', 'morale']"/>
            <do_all exact="$skills.count" counter="$k">
              <do_if value="($crewtable.{$npctemplate}.{'$' + $skills.{$k}}) != ($ships.{$i}.people.{$npctemplate}.skill.{$skills.{$k}})">
                <debug_text text="'%s of %s %s changed from %s to %s'.[$skills.{$k}, $ships.{$i}.people.{$npctemplate}.role, $crewtable.{$npctemplate}.$name, $crewtable.{$npctemplate}.{'$' + $skills.{$k}}, $ships.{$i}.people.{$npctemplate}.skill.{$skills.{$k}}]"/>
              </do_if>
            </do_all>
          </do_all>
        </do_all>

        <do_if value="@$ships.count gt 1">
          <set_value name="$text" exact="{1015,700}.[$ships.count, $name]"/>
        </do_if>
        <do_else>
          <set_value name="$text" exact="{1015,701}.[$name]"/>
        </do_else>
        <do_if value="notification.returned_from_venture.active">
          <show_notification text="$text" sound="ui_mission_completed" />
        </do_if>
        <write_to_logbook category="missions" title="$text" />
      </actions>
    </cue>

  </cues>

</mdscript>
