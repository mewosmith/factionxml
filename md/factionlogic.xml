<?xml version="1.0" encoding="utf-8"?>
<mdscript name="FactionLogic" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--Cue to be signalled to inform the faction manager of something
    The first element in the parameter list must be the faction e.g. param = [$Faction, 'attacked', $Victim]-->
    <cue name="FactionSignalled" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
    </cue>

    <cue name="Generate_Global_Report" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <debug_text text="player.age + ' - GENERATING GLOBAL FACTION LOGIC REPORT'" context="false"/>
        <set_value name="$Factions" exact="global.$FactionManagers.keys.list"/>
        <do_all exact="$Factions.count" counter="$i">
          <signal_cue_instantly cue="FactionSignalled" param="[$Factions.{$i}, 'Generate Report']"/>
        </do_all>
        <remove_value name="$Factions"/>
      </actions>
      <force name="Generate Faction Logic Report"/>
    </cue>

    <!--
    ####################
      MANAGER INSTANCES
    ####################-->

    <cue name="FactionLogicManagers" version="2">
      <conditions>
        <event_cue_signalled cue="md.Setup.Start" />
        <check_value value="player.galaxy.macro.ismacro.{macro.xu_ep2_universe_macro}"/>
      </conditions>
      <actions>
        <set_value name="md.$DefaultShipStrengthTable" exact="table[
                    {class.ship_xl} = 23,
                    {class.ship_l} = 11,
                    {class.ship_m} = 3,
                    {class.ship_s} = 1]"/>

        <set_value name="md.$DefaultSubordinateStrengthTable" exact="table[
                    {class.ship_xl} = 21,
                    {class.ship_l} = 9,
                    {class.ship_m} = 3,
                    {class.ship_s} = 1]"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <set_value name="md.$DefaultShipStrengthTable" exact="table[
                    {class.ship_xl} = 23,
                    {class.ship_l} = 11,
                    {class.ship_m} = 3,
                    {class.ship_s} = 1]"/>

        <set_value name="md.$DefaultSubordinateStrengthTable" exact="table[
                    {class.ship_xl} = 21,
                    {class.ship_l} = 9,
                    {class.ship_m} = 3,
                    {class.ship_s} = 1]"/>
      </patch>
      <cues>
        <cue name="ArgonFactionLogic">
          <cues>
            <cue name="ArgonFactionLogic_Manager" ref="Manager">
              <param name="Faction" value="faction.argon"/>
              <param name="BaseAggressionLevel" value="moodlevel.normal"/>
              <param name="BaseAvariceLevel" value="moodlevel.high"/>
              <param name="BaseLawfulness" value="0.8"/>
              <param name="PreferredHQSpaceMacro" value="macro.cluster_14_macro" comment="Argon Prime"/>
              <param name="PreferredHQTypes" value="['shipbuilding', 'equipmentdock', 'tradestation']"/>
              <param name="SatelliteNetworkGoal" value="20"/>
              <param name="LasertowerNetworkGoal" value="5"/>
              <param name="MinefieldGoalPerSector" value="1" comment="[MGPS * Sectors, 12].min is the maximum amount of Minefields for this faction"/>
              <param name="DebugChance" value="0"/>
              <param name="DebugChance2" value="0"/>
            </cue>
          </cues>
        </cue>
        <cue name="AntigoneFactionLogic">
          <cues>
            <cue name="AntigoneFactionLogic_Manager" ref="Manager">
              <param name="Faction" value="faction.antigone"/>
              <param name="BaseAggressionLevel" value="moodlevel.normal"/>
              <param name="BaseAvariceLevel" value="moodlevel.high"/>
              <param name="BaseLawfulness" value="0.4"/>
              <param name="PreferredHQSpaceMacro" value="macro.cluster_28_macro" comment="Antigone Memorial"/>
              <param name="PreferredHQTypes" value="['equipmentdock', 'shipbuilding', 'tradestation']"/>
              <param name="SatelliteNetworkGoal" value="7"/>
              <param name="LasertowerNetworkGoal" value="3"/>
              <param name="MinefieldGoalPerSector" value="1" comment="[MGPS * Sectors, 12].min is the maximum amount of Minefields for this faction"/>
              <param name="DebugChance" value="0"/>
              <param name="DebugChance2" value="0"/>
            </cue>
          </cues>
        </cue>
        <cue name="HatikvahFreeLeagueFactionLogic">
          <cues>
            <cue name="HatikvahFreeLeagueFactionLogic_Manager" ref="Manager">
              <param name="Faction" value="faction.hatikvah" />
              <param name="BaseAggressionLevel" value="moodlevel.low"/>
              <param name="BaseAvariceLevel" value="moodlevel.normal"/>
              <param name="BaseLawfulness" value="0.4"/>
              <param name="PreferredHQSpaceMacro" value="macro.cluster_29_sector001_macro" comment="Hatikvah's Choice"/>
              <param name="PreferredHQTypes" value="['tradestation', 'piratebase', 'equipmentdock']"/>
              <param name="SatelliteNetworkGoal" value="2"/>
              <param name="MinefieldGoalPerSector" value="2" comment="[MGPS * Sectors, 12].min is the maximum amount of Minefields for this faction"/>
              <param name="DebugChance" value="0"/>
              <param name="DebugChance2" value="0"/>
            </cue>
          </cues>
        </cue>
        <cue name="TeladiComapanyFactionLogic">
          <cues>
            <cue name="TeladiCompanyFactionLogic_Manager" ref="Manager">
              <param name="Faction" value="faction.teladi"/>
              <param name="BaseAggressionLevel" value="moodlevel.low"/>
              <param name="BaseAvariceLevel" value="moodlevel.veryhigh"/>
              <param name="BaseLawfulness" value="0.2"/>
              <param name="PreferredHQSpaceMacro" value="macro.cluster_15_macro" comment="Ianamus Zura"/>
              <param name="PreferredHQTypes" value="[macro.landmarks_tel_tradestation_01_macro, 'tradestation', 'equipmentdock', 'shipbuilding']"/>
              <param name="SatelliteNetworkGoal" value="17"/>
              <param name="LasertowerNetworkGoal" value="3"/>
              <param name="MinefieldGoalPerSector" value="0" comment="[MGPS * Sectors, 12].min is the maximum amount of Minefields for this faction"/>
              <param name="DebugChance" value="0"/>
              <param name="DebugChance2" value="0"/>
            </cue>
          </cues>
        </cue>
        <cue name="MinistryOfFinanceFactionLogic">
          <cues>
            <cue name="MinistryOfFinanceFactionLogic_Manager" ref="Manager">
              <param name="Faction" value="faction.ministry"/>
              <param name="BaseAggressionLevel" value="moodlevel.low"/>
              <param name="BaseAvariceLevel" value="moodlevel.veryhigh"/>
              <param name="BaseLawfulness" value="0.1"/>
              <param name="PreferredHQSpaceMacro" value="macro.cluster_34_macro" comment="Profit Centre Alpha"/>
              <param name="PreferredHQTypes" value="['equipmentdock', 'shipbuilding']"/>
              <param name="SatelliteNetworkGoal" value="2"/>
              <param name="LasertowerNetworkGoal" value="3"/>
              <param name="MinefieldGoalPerSector" value="2" comment="[MGPS * Sectors, 12].min is the maximum amount of Minefields for this faction"/>
              <param name="DebugChance" value="0"/>
              <param name="DebugChance2" value="0"/>
            </cue>
          </cues>
        </cue>
        <cue name="ScalePlatePactFactionLogic">
          <cues>
            <cue name="ScalePlatePactFactionLogic_Manager" ref="Manager">
              <param name="Faction" value="faction.scaleplate"/>
              <param name="BaseAggressionLevel" value="moodlevel.normal"/>
              <param name="BaseAvariceLevel" value="moodlevel.veryhigh"/>
              <param name="BaseLawfulness" value="0.1"/>
              <param name="PreferredHQSpaceMacro" value="macro.cluster_42_macro" comment="Nopileos' Legacy"/>
              <param name="PreferredHQTypes" value="['equipmentdock', 'piratebase']"/>
              <param name="SatelliteNetworkGoal" value="8"/>
              <param name="MinefieldGoalPerSector" value="2" comment="[MGPS * Sectors, 12].min is the maximum amount of Minefields for this faction"/>
              <param name="DebugChance" value="0"/>
              <param name="DebugChance2" value="0"/>
            </cue>
          </cues>
        </cue>
        <cue name="GodrealmOfTheParanidFactionLogic">
          <cues>
            <cue name="GodrealmOfTheParanidFactionLogic_Manager" ref="Manager">
              <param name="Faction" value="faction.paranid"/>
              <param name="BaseAggressionLevel" value="moodlevel.high"/>
              <param name="BaseAvariceLevel" value="moodlevel.normal"/>
              <param name="BaseLawfulness" value="1.0"/>
              <param name="PreferredHQSpaceMacro" value="macro.cluster_18_macro" comment="Trinity Sanctum"/>
              <param name="PreferredHQTypes" value="['shipbuilding', 'equipmentdock', 'tradestation']"/>
              <param name="SatelliteNetworkGoal" value="5"/>
              <param name="LasertowerNetworkGoal" value="5"/>
              <param name="MinefieldGoalPerSector" value="1" comment="[MGPS * Sectors, 12].min is the maximum amount of Minefields for this faction"/>
              <param name="DebugChance" value="0"/>
              <param name="DebugChance2" value="0"/>
            </cue>
          </cues>
        </cue>
        <cue name="HolyOrderFactionLogic">
          <cues>
            <cue name="HolyOrderFactionLogicFactionLogic_Manager" ref="Manager">
              <param name="Faction" value="faction.holyorder"/>
              <param name="BaseAggressionLevel" value="moodlevel.high"/>
              <param name="BaseAvariceLevel" value="moodlevel.normal"/>
              <param name="BaseLawfulness" value="0.6"/>
              <param name="PreferredHQSpaceMacro" value="macro.cluster_24_macro" comment="Holy Vision"/>
              <param name="PreferredHQTypes" value="['shipbuilding', 'equipmentdock', 'tradestation']"/>
              <param name="SatelliteNetworkGoal" value="4"/>
              <param name="LasertowerNetworkGoal" value="4"/>
              <param name="MinefieldGoalPerSector" value="2" comment="[MGPS * Sectors, 12].min is the maximum amount of Minefields for this faction"/>
              <param name="DebugChance" value="0"/>
              <param name="DebugChance2" value="0"/>
            </cue>
          </cues>
        </cue>
        <cue name="AllianceOfTheWordFactionLogic">
          <cues>
            <cue name="AllianceOfTheWordFactionLogic_Manager" ref="Manager">
              <param name="Faction" value="faction.alliance"/>
              <param name="BaseAggressionLevel" value="moodlevel.normal"/>
              <param name="BaseAvariceLevel" value="moodlevel.normal"/>
              <param name="BaseLawfulness" value="1.0"/>
              <param name="PreferredHQSpaceMacro" value="macro.cluster_23_macro" comment="Sacred Relic"/>
              <param name="PreferredHQTypes" value="['shipbuilding', 'equipmentdock']"/>
              <param name="SatelliteNetworkGoal" value="3"/>
              <param name="LasertowerNetworkGoal" value="1"/>
              <param name="DebugChance" value="0"/>
              <param name="DebugChance2" value="0"/>
            </cue>
          </cues>
        </cue>
        <cue name="XenonFactionLogic">
          <cues>
            <cue name="XenonFactionLogic_Manager" ref="Manager">
              <param name="Faction" value="faction.xenon"/>
              <param name="BaseAggressionLevel" value="moodlevel.veryhigh"/>
              <param name="BaseAvariceLevel" value="moodlevel.low"/>
              <param name="BaseLawfulness" value="1.0"/>
              <param name="HasMissions" value="false"/>
              <param name="SatelliteNetworkGoal" value="0"/>
              <param name="MinefieldGoalPerSector" value="1" comment="[MGPS * Sectors, 12].min is the maximum amount of Minefields for this faction"/>
              <param name="DebugChance" value="0"/>
              <param name="DebugChance2" value="0"/>
            </cue>
          </cues>
        </cue>
        <cue name="BuccaneersFactionLogic">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <cue name="BuccaneersFactionLogic_Manager" ref="Manager">
              <param name="Faction" value="faction.buccaneers"/>
              <param name="BaseAggressionLevel" value="moodlevel.high"/>
              <param name="BaseAvariceLevel" value="moodlevel.low"/>
              <param name="BaseLawfulness" value="0.1"/>
              <param name="PreferredHQSpaceMacro" value="macro.cluster_04_macro"/>
              <param name="PreferredHQTypes" value="['defencestation', 'shipbuilding', 'equipmentdock']"/>
              <param name="SatelliteNetworkGoal" value="2"/>
              <param name="LasertowerNetworkGoal" value="2"/>
              <param name="MinefieldGoalPerSector" value="7" comment="[MGPS * Sectors, 12].min is the maximum amount of Minefields for this faction"/>
              <param name="DebugChance" value="0"/>
              <param name="DebugChance2" value="0"/>
            </cue>
          </cues>
        </cue>
        <cue name="TrinityFactionLogic">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--debug_text text="'Starting Trinity factionlogic'"/-->
          </actions>
          <cues>
            <cue name="TrinityFactionLogic_Manager" ref="Manager">
              <param name="Faction" value="faction.trinity"/>
              <param name="ConsumedFactions" value="[faction.paranid, faction.holyorder]"/>
              <param name="BaseAggressionLevel" value="moodlevel.high"/>
              <param name="BaseAvariceLevel" value="moodlevel.normal"/>
              <param name="BaseLawfulness" value="0.8"/>
              <param name="PreferredHQSpaceMacro" value="macro.cluster_11_macro"/>
              <param name="PreferredHQTypes" value="['defencestation', 'shipbuilding', 'equipmentdock']"/>
              <param name="SatelliteNetworkGoal" value="5"/>
              <param name="LasertowerNetworkGoal" value="5"/>
              <param name="MinefieldGoalPerSector" value="1" comment="[MGPS * Sectors, 12].min is the maximum amount of Minefields for this faction"/>
              <param name="DebugChance" value="0"/>
              <param name="DebugChance2" value="0"/>
            </cue>
          </cues>
        </cue>

      </cues>
    </cue>

    <!--
    - Invade sector
    - Defend sector
    - Expand to area
    - Enforce anti-smuggler laws
    - Request job trade ships
    - -->

    <!--
    ####################
           MANAGER
    ####################-->

    <library name="Manager" namespace="this" version="4">
      <params>
        <param name="Faction" comment="The faction to be managed"/>
        <param name="ConsumedFactions" default="[]" comment="Inactive factions considered to be a part of $Faction. Used to take their old goals or economic actions into account with the new faction."/>
        <param name="BaseAggressionLevel" default="moodlevel.normal" comment="Base level the faction will normalize at"/>
        <param name="BaseAvariceLevel" default="moodlevel.normal" comment="Base level the faction will normalize at"/>
        <param name="BaseLawfulness" default="0.5"/>
        <param name="Volatility" default="0.5" comment="The strength of mood shifts"/>
        <param name="HasMissions" default="true" comment="Faction spawns missions"/>
        <param name="SatelliteNetworkGoal" default="0"/>
        <param name="LasertowerNetworkGoal" default="0"/>
        <param name="MinefieldGoalPerSector" default="0"/>
        <param name="PreferredHQSpaceMacro" default="null" comment ="When specifying a PreferredHQ, either specify both PreferredHQSpaceMacro and PreferredHQTypes, or neither"/>
        <param name="PreferredHQTypes" default="[]" comment="List of types by priority. Can be a station macro or strings 'shipbuilding', 'equipmentdock', 'tradestation', 'defencestation' or 'piratebase'"/>
        <param name="DebugChance" default="0"/>
        <param name="DebugChance2" default="0"/>
      </params>
      <actions>
        <set_faction_mood faction="$Faction" type="aggression" level="$BaseAggressionLevel"/>
        <set_faction_mood faction="$Faction" type="avarice" level="$BaseAvariceLevel"/>

        <set_value name="$Goals" exact="[]"/>

        <!-- $Intel == [[$TargetSpace, $Recon_NumObjects, $Recon_LastUpdate], etc] -->
        <set_value name="$Intel" exact="[]"/>
        <!-- $DistressCalls == [$Faction, [$ObjectID, $ForceDifferential, [$Sector, $ShipPosition], player.age, [$Priority, $State]], [$ObjectID, $ForceDifferential, [$Sector, $ShipPosition], player.age, [$Priority, $State]], etc] -->
        <set_value name="$DistressCalls" exact="[]"/>
        <set_value name="$MilitaryStrengthList" exact="[]"/>
        <create_group groupname="$Shipyards"/>
        <create_group groupname="$FactionSatellites"/>
        <create_list name="$FactionMinefields"/>
        <create_list name="$FactionLasertowers"/>
        <create_group groupname="$PlayerLasertowers" comment="lasertowers from player-missions"/>
        <create_group groupname="$ClaimedSectors"/>

        <!--Add faction manager cue to the global variable-->
        <do_if value="not global.$FactionManagers?">
          <set_value name="global.$FactionManagers" exact="table[]"/>
        </do_if>
        <set_value name="global.$FactionManagers.{$Faction}" exact="namespace"/>

        <debug_text text="$Faction + ' trying to register with the Patrol Coordination Service.'" chance="$DebugChance"/>
        <signal_cue_instantly cue="md.FactionGoal_PatrolCoordinationService.Register_Factions" param="namespace" comment="'namespace' is the manager-cue"/>
        <signal_cue_instantly cue="md.FactionGoal_Plunder.Register_Factions" param="namespace"/>
      </actions>
      <patch sinceversion="2">
        <create_group groupname="$PlayerLasertowers"/>
      </patch>
      <patch sinceversion="3">
        <set_value name="$MinefieldGoalPerSector" exact="0"/>
        <do_if value="($Faction == faction.teladi) or ($Faction == faction.alliance)">
        </do_if>
        <do_elseif value="($Faction == faction.ministry) or ($Faction == faction.scaleplate) or ($Faction == faction.holyorder)">
          <set_value name="$MinefieldGoalPerSector" exact="2"/>
        </do_elseif>
        <do_else>
          <set_value name="$MinefieldGoalPerSector" exact="1"/>
        </do_else>
      </patch>
      <patch sinceversion="4">
        <!-- removed unused faction.tempest from FactionDB -->
        <do_if value="@$Enemies.count">
          <do_for_each name="$enemy" in="$Enemies" counter="$_i" reverse="true">
            <do_if value="not $enemy">
              <debug_text text="'PATCH: removing %s from $Enemies. (should be null)'.[$Enemies.{$_i}]" filter="savegame"/>
              <remove_value name="$Enemies.{$_i}"/>
            </do_if>
          </do_for_each>
        </do_if>
      </patch>
      <cues>
        <cue name="Trigger_Report" instantiate="true" comment="Cue added here for convenience. Signal for faction report.">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <signal_cue_instantly cue="md.FactionLogic.FactionSignalled" param="[$Faction, 'Generate Report']"/>
          </actions>
        </cue>

        <!--Libraries-->
        <cue name="Econ_Manager" ref="md.FactionLogic_Economy.Econ_Manager">
          <param name="FactionManagerCue" value="Manager"/>
          <param name="Faction" value="$Faction"/>
          <param name="ConsumedFactions" value="$ConsumedFactions"/>
          <param name="DebugChance" value="$DebugChance"/>
        </cue>

        <cue name="Ship_Construction_Manager" ref="md.Job_Helper.Manager">
          <param name="FactionManagerCue" value="Manager"/>
          <param name="Faction" value="$Faction"/>
          <!--<param name="Ref_Shipyards" value="$Shipyards"/>-->
          <param name="DebugChance" value="0"/>
        </cue>

        <cue name="Maintain_Stations" ref="md.FactionLogic_Stations.Manage_Stations">
          <param name="FactionManagerCue" value="Manager"/>
          <param name="Faction" value="$Faction"/>
          <param name="DebugChance" value="0"/>
        </cue>

        <cue name="Find_Faction_Headquarters" version="4">
          <actions>
            <set_value name="$HQNecessary" exact="$Faction.isactive"/>
            <!--Even wrecked HQs are valid-->
            <set_value name="$HQ" exact="$Faction.headquarters"/>
            <do_if value="$HQ.exists">
              <debug_text text="$Faction + ' already has headquarters ' + $HQ" chance="$DebugChance"/>
            </do_if>
            <do_elseif value="not $HQNecessary">
              <debug_text text="$Faction + ' does not need a HQ'" chance="$DebugChance"/>
            </do_elseif>
            <do_else>
              <!-- Preferred Faction HQ location and type depends on the faction -->
              <debug_text text="'Finding Faction HQ for ' + $Faction" chance="$DebugChance" />
              <set_value name="$PreferredSpace" exact="null"/>
              <do_if value="$PreferredHQSpaceMacro">
                <find_cluster name="$PreferredSpace" macro="$PreferredHQSpaceMacro"/>
                <do_if value="not $PreferredSpace">
                  <find_sector name="$PreferredSpace" macro="$PreferredHQSpaceMacro"/>
                </do_if>
              </do_if>
              <do_if value="$PreferredSpace and $PreferredHQTypes.count">
                <!--2 passes. First with $PreferredSpace(based on $PreferredHQSpaceMacro), second for the whole galaxy-->
                <set_value name="$SearchSpace" exact="$PreferredSpace"/>
                <do_all exact="2">
                  <do_all exact="$PreferredHQTypes.count" counter="$i">
                    <debug_text text="'Attempting to find a suitable HQ in space ' + $SearchSpace.knownname + ' of type ' + $PreferredHQTypes.{$i}" chance="$DebugChance"/>
                    <do_if value="typeof $PreferredHQTypes.{$i} == datatype.macro">
                      <find_station_by_true_owner name="$HQ" space="$SearchSpace" faction="$Faction" macro="$PreferredHQTypes.{$i}" />
                    </do_if>
                    <do_elseif value="$PreferredHQTypes.{$i} == 'shipbuilding'">
                      <find_station_by_true_owner name="$HQ" space="$SearchSpace" faction="$Faction" canbuildships="true" />
                    </do_elseif>
                    <do_elseif value="$PreferredHQTypes.{$i} == 'equipmentdock'">
                      <find_station_by_true_owner name="$HQ" space="$SearchSpace" faction="$Faction" equipmentdock="true" />
                    </do_elseif>
                    <do_elseif value="$PreferredHQTypes.{$i} == 'tradestation'">
                      <find_station_by_true_owner name="$HQ" space="$SearchSpace" faction="$Faction" tradestation="true" />
                    </do_elseif>
                    <do_elseif value="$PreferredHQTypes.{$i} == 'defencestation'">
                      <find_station_by_true_owner name="$HQ" space="$SearchSpace" faction="$Faction" defencestation="true" />
                    </do_elseif>
                    <do_elseif value="$PreferredHQTypes.{$i} == 'piratebase'">
                      <find_station_by_true_owner name="$HQ" space="$SearchSpace" faction="$Faction" piratebase="true" />
                    </do_elseif>
                    <do_if value="$HQ">
                      <break/>
                    </do_if>
                  </do_all>
                  <do_if value="$HQ">
                    <break/>
                  </do_if>
                  <do_else>
                    <set_value name="$SearchSpace" exact="player.galaxy"/>
                  </do_else>
                </do_all>

                <do_if value="$HQ">
                  <debug_text text="$Faction + ' HQ set to ' + $HQ.knownname + ' ' + $HQ + ' in ' + $HQ.sector.knownname + ', ' + $HQ.cluster.knownname" chance="$DebugChance" />
                  <set_value name="md.$FactionData.{$Faction}.$Headquarters" exact="$HQ" />
                  <set_faction_headquarters faction="$Faction" station="$HQ"/>
                  <signal_cue cue="CreateNewFactionRepresentative" />
                </do_if>
              </do_if>
              <do_else>
                <set_value name="$HQNecessary" exact="false" />
                <debug_text text="'Faction is ' + $Faction.name + ' - no Faction HQ is required'" chance="$DebugChance" />
              </do_else>
              <remove_value name="$PreferredSpace"/>
            </do_else>
          </actions>
          <patch sinceversion="3">
            <signal_cue cue="CreateNewFactionRepresentative"/>
          </patch>
          <patch sinceversion="4">
            <set_value name="$HQNecessary" exact="true"/>
            <do_if value="$Faction == faction.argon">
              <set_value name="$PreferredHQSpaceMacro" exact="macro.cluster_14_macro" comment="Argon Prime"/>
              <set_value name="$PreferredHQTypes" exact="['shipbuilding', 'equipmentdock', 'tradestation']"/>
            </do_if>
            <do_elseif value="$Faction == faction.antigone">
              <set_value name="$PreferredHQSpaceMacro" exact="macro.cluster_28_macro" comment="Antigone Memorial"/>
              <set_value name="$PreferredHQTypes" exact="['equipmentdock', 'shipbuilding', 'tradestation']"/>
            </do_elseif>
            <do_elseif value="$Faction == faction.hatikvah">
              <set_value name="$PreferredHQSpaceMacro" exact="macro.cluster_29_sector001_macro" comment="Hatikvah's Choice"/>
              <set_value name="$PreferredHQTypes" exact="['tradestation', 'piratebase', 'equipmentdock']"/>
            </do_elseif>
            <do_elseif value="$Faction == faction.paranid">
              <set_value name="$PreferredHQSpaceMacro" exact="macro.cluster_18_macro" comment="Trinity Sanctum"/>
              <set_value name="$PreferredHQTypes" exact="['shipbuilding', 'equipmentdock', 'tradestation']"/>
            </do_elseif>
            <do_elseif value="$Faction == faction.holyorder">
              <set_value name="$PreferredHQSpaceMacro" exact="macro.cluster_24_macro" comment="Holy Vision"/>
              <set_value name="$PreferredHQTypes" exact="['shipbuilding', 'equipmentdock', 'tradestation']"/>
            </do_elseif>
            <do_elseif value="$Faction == faction.alliance">
              <set_value name="$PreferredHQSpaceMacro" exact="macro.cluster_23_macro" comment="Sacred Relic"/>
              <set_value name="$PreferredHQTypes" exact="['shipbuilding', 'equipmentdock']"/>
            </do_elseif>
            <do_elseif value="$Faction == faction.teladi">
              <set_value name="$PreferredHQSpaceMacro" exact="macro.cluster_15_macro" comment="Ianamus Zura"/>
              <set_value name="$PreferredHQTypes" exact="[macro.landmarks_tel_tradestation_01_macro, 'tradestation', 'equipmentdock', 'shipbuilding']"/>
            </do_elseif>
            <do_elseif value="$Faction == faction.ministry">
              <set_value name="$PreferredHQSpaceMacro" exact="macro.cluster_34_macro" comment="Profit Centre Alpha"/>
              <set_value name="$PreferredHQTypes" exact="['equipmentdock', 'shipbuilding']"/>
            </do_elseif>
            <do_elseif value="$Faction == faction.scaleplate">
              <set_value name="$PreferredHQSpaceMacro" exact="macro.cluster_42_macro" comment="Nopileos' Legacy"/>
              <set_value name="$PreferredHQTypes" exact="['equipmentdock', 'piratebase']"/>
            </do_elseif>
            <do_elseif value="not @$PreferredHQSpaceMacro">
              <set_value name="$PreferredHQSpaceMacro" exact="null"/>
            </do_elseif>
          </patch>
          <cues>
            <cue name="CheckHQStatus" checkinterval="5min">
              <conditions>
                <!--parent.time so the conditions don't pass as soon as the parent completes with no HQ-->
                <check_value value="$HQNecessary and player.age gt (parent.time + 1s) and not $Faction.headquarters.exists"/>
              </conditions>
              <actions>
                <debug_text text="$Faction + ' does not have a HQ. Attempt to find a new one.'" chance="$DebugChance"/>
                <reset_cue cue="Find_Faction_Headquarters"/>
              </actions>
            </cue>
            <cue name="CheckHQStatus_FactionActivated">
              <conditions>
                <event_faction_activated faction="$Faction"/>
                <check_value value="$HQNecessary and player.age gt (parent.time + 1s) and not $Faction.headquarters.exists"/>
              </conditions>
              <actions>
                <debug_text text="$Faction + ' active. Attempt to find a HQ.'" chance="$DebugChance"/>
                <reset_cue cue="Find_Faction_Headquarters"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="FactionRepresentativeKilled_Check" checkinterval="1s">
          <conditions>
            <check_value value="md.$FactionData.{$Faction}.$Representative?" />
            <check_value value="md.$FactionData.{$Faction}.$Representative"/>
          </conditions>
          <cues>
            <cue name="FactionRepresentativeKilled">
              <conditions>
                <event_object_destroyed object="md.$FactionData.{$Faction}.$Representative" />
              </conditions>
              <actions>
                <debug_text text="'Representative for ' + $Faction.name + ', ' + event.object.name + ' ({' + event.object + '}), has been killed'" chance="$DebugChance" />
                <set_value name="md.$FactionData.{$Faction}.$Representative" exact="null" />
              </actions>
            </cue>

            <cue name="CheckRepresentativeStatus" checkinterval="3min">
              <conditions>
                <check_value value="(md.$FactionData.{$Faction}.$Headquarters.isoperational) and (not md.$FactionData.{$Faction}.$Representative.exists)"/>
              </conditions>
              <actions>
                <signal_cue cue="CreateNewFactionRepresentative" />
              </actions>
            </cue>
            
          </cues>
        </cue>

        <!-- Create Faction Representative NPCs (at gamestart or when last representative was killed) -->
        <cue name="CreateNewFactionRepresentative" instantiate="true">
          <conditions>
            <event_cue_signalled />
          </conditions>
          <actions>
            <debug_text text="'Check if a new faction representative for ' + $Faction.name + ' is needed'" chance="$DebugChance" />
            <do_if value="not $Faction.representative">
              <debug_text text="'No faction representative exists for ' + $Faction.name" chance="$DebugChance" />
              <do_if value="@md.$FactionData.{$Faction}.$Headquarters.isoperational">
                <create_representative_actor name="$Representative" station="md.$FactionData.{$Faction}.$Headquarters" faction="$Faction" />
                <do_if value="$Representative">
                  <debug_text text="'Created ' + $Representative.name + ' ({' + $Representative + '}) as representive of ' + $Faction.name + ' on ' + md.$FactionData.{$Faction}.$Headquarters.knownname + ' ({' + md.$FactionData.{$Faction}.$Headquarters + '}) in ' + md.$FactionData.{$Faction}.$Headquarters.sector.knownname + ', ' + md.$FactionData.{$Faction}.$Headquarters.cluster.knownname" chance="$DebugChance" />
                  <set_value name="md.$FactionData.{$Faction}.$Representative" exact="$Representative" />
                  <do_if value="FactionRepresentativeKilled_Check.state" exact="cuestate.complete">
                    <reset_cue cue="FactionRepresentativeKilled_Check" />
                  </do_if>
                  <signal_cue_instantly cue="md.NPC_FactionRepresentative.FactionRepresentativeCreated" param="$Representative" />
                </do_if>
                <do_else>
                  <debug_text text="'Failed to create representative of ' + $Faction.name + ' on ' + md.$FactionData.{$Faction}.$Headquarters.knownname + ' ({' + md.$FactionData.{$Faction}.$Headquarters + '}) in ' + md.$FactionData.{$Faction}.$Headquarters.sector.knownname + ', ' + md.$FactionData.{$Faction}.$Headquarters.cluster.knownname" filter="error" />
                </do_else>
              </do_if>
              <do_else>
                <debug_text text="'There is no Faction HQ on which to generate the Faction Representative for ' + $Faction.name" filter="error" />
              </do_else>
            </do_if>
          </actions>
        </cue>

        <!--Delay a random amount so not all factions evaluate at the same time-->
        <cue name="Manager_Delay">
          <delay min="0s" max="3s"/>
          <cues>
            <cue name="EvaluateGoals_Wait">
              <conditions>
                <event_cue_completed cue="Manager_Delay"/>
              </conditions>
              <cues>

                <!--Loop over all potential goals, evaluate their weight and attempt to activate one-->
                <cue name="EvaluateGoals" checkinterval="30s" instantiate="true">
                  <actions>
                    <include_actions ref="UpdateData"/>

                    <!--Goals to trigger, regardless of other evaluation scores-->
                    <set_value name="$PriorityGoals" exact="[]"/>

                    <!--Goals to be selected for triggering, based on evaluation scores-->
                    <set_value name="$EvaluatedGoals" exact="[]"/>
                    <do_all exact="global.$FactionGoals.count" counter="$i">
                      <do_if value="global.$FactionGoals.{$i}.$EvaluationCue">
                        <!--Run the actions of the goals evaluation cue. If successful, data will be added to $EvaluatedGoals-->
                        <include_actions ref="global.$FactionGoals.{$i}.$EvaluationCue"/>
                      </do_if>
                    </do_all>

                    <do_all exact="$PriorityGoals.count" counter="$i">
                      <debug_text text="player.age + ': %1 is attempting to run priority goal %2 with params: %3'.[$Faction, $PriorityGoals.{$i}.$TriggerCue.$Name, $PriorityGoals.{$i}]" chance="$DebugChance"/>
                      <signal_cue_instantly cue="$PriorityGoals.{$i}.$TriggerCue" param="$PriorityGoals.{$i}"/>
                    </do_all>

                    <!--Evaluate goals and choose which ONE can be activated in this iteration-->
                    <do_if value="$EvaluatedGoals.count">
                      <set_value name="$TotalWeight" exact="0.0"/>
                      <do_all exact="$EvaluatedGoals.count" counter="$i">
                        <set_value name="$TotalWeight" exact="$EvaluatedGoals.{$i}.$Weight" operation="add"/>
                      </do_all>
                      <set_value name="$TargetWeight" min="0.0" max="$TotalWeight"/>
                      <set_value name="$CurrentWeight" exact="0.0"/>
                      <do_all exact="$EvaluatedGoals.count" counter="$i">
                        <!--CurrentGoal = [Weight, TriggerCue, TargetSpace, [NumReconObjects, time], param1, param2, e.t.c]-->
                        <set_value name="$CurrentGoal" exact="$EvaluatedGoals.{$i}"/>
                        <set_value name="$CurrentWeight" exact="$CurrentGoal.$Weight" operation="add"/>
                        <do_if value="$TargetWeight le $CurrentWeight or $i == $EvaluatedGoals.count">
                          <debug_text text="player.age + ': %1 is attempting to run goal %2 with weight %3 and params: %4'.[$Faction, $CurrentGoal.$TriggerCue.$Name, $CurrentGoal.$Weight, $CurrentGoal]" chance="$DebugChance"/>
                          <signal_cue_instantly cue="$CurrentGoal.$TriggerCue" param="$CurrentGoal"/>
                          <break/>
                        </do_if>
                      </do_all>
                    </do_if>
                  </actions>
                </cue>
              </cues>
            </cue>

            <library name="UpdateData">
              <actions>
                <set_value name="$Clusters" exact="[]"/>
                <set_value name="$Zones" exact="[]"/>

                <!--Populate $ClaimedSectors will all owned and contested sectors of this faction-->
                <clear_group group="$ClaimedSectors"/>
                <find_sector name="$Sectors" owner="$Faction" multiple="true"/>
                <add_to_group groupname="$ClaimedSectors" list="$Sectors"/>
                <find_sector groupname="$ClaimedSectors" contestedby="$Faction"/>

                <do_all exact="$Sectors.count" counter="$UpdateData_Sector_Counter">
                  <do_if value="not $Clusters.indexof.{$Sectors.{$UpdateData_Sector_Counter}.cluster}">
                    <append_to_list name="$Clusters" exact="$Sectors.{$UpdateData_Sector_Counter}.cluster"/>
                  </do_if>
                  <find_zone name="$Zones" append="true" space="$Sectors.{$UpdateData_Sector_Counter}" normalzone="true" multiple="true" />
                </do_all>

                <set_value name="$AdjacentSectors" exact="[]"/>
                <do_all exact="$Sectors.count" counter="$UpdateData_Sector_Counter">
                  <find_sector name="$AdjacentSectors_InCluster" space="$Sectors.{$UpdateData_Sector_Counter}.cluster" multiple="true">
                    <match owner="$Faction" negate="true"/>
                  </find_sector>
                  <do_all exact="$AdjacentSectors_InCluster.count" counter="$UpdateData_AdjacentSectors_IC_Counter">
                    <do_if value="not $AdjacentSectors.indexof.{$AdjacentSectors_InCluster.{$UpdateData_AdjacentSectors_IC_Counter}}">
                      <append_to_list name="$AdjacentSectors" exact="$AdjacentSectors_InCluster.{$UpdateData_AdjacentSectors_IC_Counter}"/>
                    </do_if>
                  </do_all>

                  <find_gate name="$JumpGates" space="$Sectors.{$UpdateData_Sector_Counter}" active="true" multiple="true"/>
                  <do_all exact="$JumpGates.count" counter="$UpdateData_JumpGate_Counter">
                    <do_if value="$JumpGates.{$UpdateData_JumpGate_Counter}.destination and $JumpGates.{$UpdateData_JumpGate_Counter}.destination.sector.owner != $Faction">
                      <append_to_list name="$AdjacentSectors" exact="$JumpGates.{$UpdateData_JumpGate_Counter}.destination.sector"/>
                    </do_if>
                  </do_all>
                </do_all>

                <debug_text text="$Faction.knownname + ' updating space data - Claimed Sectors: ' + $ClaimedSectors.count + ' - Adjacent Sectors: ' + $AdjacentSectors.count" chance="$DebugChance2"/>

                <!--<debug_text text="'$AdjacentSectors'"/>
                <do_all exact="$AdjacentSectors.count" counter="$AdjacentSectorsCounter">
                  <debug_text text="$AdjacentSectors.{$AdjacentSectorsCounter}.knownname" chance="$DebugChance"/>
                </do_all>-->

                <!--<set_value name="$MilitaryStrength" exact="0"/>
                <find_ship name="$MilitaryShips" primarypurpose="purpose.fight" owner="$Faction" space="player.galaxy" multiple="true"/>
                <do_all exact="$MilitaryShips.count" counter="$MilitaryCounter">
                  <do_if value="$MilitaryShips.{$MilitaryCounter}.isclass.ship_xs">
                    <set_value name="$MilitaryStrength" exact="1" operation="add"/>
                  </do_if>
                  <do_elseif value="$MilitaryShips.{$MilitaryCounter}.isclass.ship_s">
                    <set_value name="$MilitaryStrength" exact="5" operation="add"/>
                  </do_elseif>
                  <do_elseif value="$MilitaryShips.{$MilitaryCounter}.isclass.ship_m">
                    <set_value name="$MilitaryStrength" exact="8" operation="add"/>
                  </do_elseif>
                  <do_elseif value="$MilitaryShips.{$MilitaryCounter}.isclass.ship_l">
                    <set_value name="$MilitaryStrength" exact="35" operation="add"/>
                  </do_elseif>
                  <do_elseif value="$MilitaryShips.{$MilitaryCounter}.isclass.ship_xl">
                    <set_value name="$MilitaryStrength" exact="75" operation="add"/>
                  </do_elseif>
                </do_all>
                <append_to_list name="$MilitaryStrengthList" exact="$MilitaryStrength"/>-->

                <!--<debug_text text="$Faction + ' MilitaryStrength: ' + $MilitaryStrength" chance="$DebugChance"/>
                <do_if value="$MilitaryStrengthList.count" min="2">
                  <debug_text text="$Faction + ' MilitaryStrength was: ' + $MilitaryStrengthList.{$MilitaryStrengthList.count - 1}" chance="$DebugChance"/>
                </do_if>-->

              </actions>
            </library>

            <cue name="Manager_Signalled" instantiate="true">
              <conditions>
                <check_any>
                  <event_cue_signalled cue="md.FactionLogic.FactionSignalled"/>
                  <event_object_signalled object="player.galaxy" param2="$Faction"/>
                </check_any>
                <check_value value="@event.param.{1} == $Faction"/>
              </conditions>
              <actions>
                <set_value name="this.$Params" exact="event.param"/>
                <do_if value="this.$Params.{2} == 'recon update'">
                  <debug_text text="'%1 receiving reconnaissance update regarding the %2 in %3 %4.'.[this.$Params.{1}, this.$Params.{3}, this.$Params.{4}.class, this.$Params.{4}.knownname]" chance="$DebugChance"/>
                </do_if>
                <do_elseif value="this.$Params.{2} == 'add_shipyard'">
                  <add_to_group groupname="$Shipyards" object="this.$Params.{3}"/>
                </do_elseif>
                <do_elseif value="this.$Params.{2} == 'add_satellite'">
                  <add_to_group groupname="$FactionSatellites" object="this.$Params.{3}"/>
                </do_elseif>
                <do_elseif value="this.$Params.{2} == 'add_lasertower'">
                  <add_to_group groupname="$PlayerLasertowers" object="this.$Params.{3}"/>
                </do_elseif>
                <do_elseif value="this.$Params.{2} == 'get_economic_actions'">
                  <do_for_each name="$ActionsKey" valuename="$ActionsList" in="Econ_Manager.$ActionReports">
                    <do_if value="this.$Params.{3}.{$ActionsKey}?">
                      <!--Table already has entries for this sector. Add to it.-->
                      <!--<debug_text text="'append $ActionsList ' + $ActionsList"/>-->
                      <append_list_elements name="this.$Params.{3}.{$ActionsKey}" other="$ActionsList"/>
                    </do_if>
                    <do_else>
                      <!--<debug_text text="'set $ActionsList ' + $ActionsList"/>-->
                      <set_value name="this.$Params.{3}.{$ActionsKey}" exact="$ActionsList"/>
                    </do_else>
                  </do_for_each>
                </do_elseif>
              </actions>
              <cues>
                <cue name="Manager_Signalled_Delay">
                  <delay exact="1ms"/>
                  <actions>
                    <!--save parent.$Params to the namespace for convienience of the libraries. It may be modified by another instance, even in this frame-->
                    <set_value name="$Params" exact="parent.$Params"/>
                    <!--Go over active goals to see if any of them should react to the event-->
                    <do_all exact="$Goals.count" counter="$i">
                      <signal_cue_instantly cue="$Goals.{$i}" param="['evaluate_event', $Params]"/>
                    </do_all>
                    <!--Go through all goals with event evaluating cues to see if they should be triggered-->
                    <set_value name="$EvaluatedGoals" exact="[]"/>
                    <do_all exact="global.$FactionGoals.count" counter="$i">
                      <do_if value="global.$FactionGoals.{$i}.$EvaluateEventLib">
                        <include_actions ref="global.$FactionGoals.{$i}.$EvaluateEventLib"/>
                      </do_if>
                    </do_all>

                    <do_all exact="$EvaluatedGoals.count" counter="$i">
                      <!--CurrentGoal(FactionGoal_Invade_Space) = [Weight, TriggerCue, TargetSpace, [NumReconObjects, time], param1, param2, e.t.c]-->
                      <set_value name="$CurrentGoal" exact="$EvaluatedGoals.{$i}"/>
                      <do_if value="$CurrentGoal.{1}">
                        <include_actions ref="$CurrentGoal.{2}"/>
                        <break/>
                      </do_if>
                    </do_all>
                  </actions>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="Generate_Report" instantiate="true">
          <conditions>
            <event_cue_signalled cue="md.FactionLogic.FactionSignalled"/>
            <check_value value="@event.param.{1} == $Faction and @event.param.{2} == 'Generate Report'"/>
          </conditions>
          <actions>

            <find_sector name="$SectorsOwned" space="player.galaxy" owner="$Faction" multiple="true"/>

            <debug_text text="'\n---------------------------------------------------------------------------------------------------\nGenerating Faction Logic report for ' + $Faction.knownname" context="false"/>

            <debug_text text="'\n' + $Faction.knownname + ' owns ' + $SectorsOwned.count + ' sectors'" context="false"/>
            <do_all exact="$SectorsOwned.count" counter="$i">
              <debug_text text="'Sector #'+$i+': ' + $SectorsOwned.{$i}.knownname" context="false"/>
            </do_all>


            <debug_text text="'\n' + $Faction.knownname + ' has ' + $Goals.count + ' current goals'" context="false"/>
            <do_all exact="$Goals.count" counter="$i">
              <debug_text text="'\nGoal ' + $i + '/' + $Goals.count" context="false"/>
              <signal_cue_instantly cue="$Goals.{$i}" param="['generate_report']"/>
            </do_all>
          </actions>
        </cue>

        <!-- Factions try to maintain a satellite network of slowly deteriorating satellites -->
        <cue name="MaintainSatelliteNetwork" onfail="cancel" >
          <conditions>
            <check_value value="$SatelliteNetworkGoal"/>
          </conditions>
          <actions>
          </actions>
          <cues>
            <cue name="MaintainSatelliteNetwork_PeriodicCheck" checkinterval="1800s" instantiate="true">
              <delay min="0s" max="10s"/>
              <actions>
                <debug_text text="'detecting satellite link for \'' + $Faction.name + '\' with ' + $ClaimedSectors.count + ' claimed sectors.'" chance="$DebugChance"/>
                <!-- existing satellites slowly decay -->
                <do_all exact="$FactionSatellites.count" counter="$i">
                  <set_value name="$Satellite" exact="$FactionSatellites.{$i}"/>
                  <set_value name="$old" exact="$Satellite.hullpercentage"/>

                  <do_if value="$Satellite.macro == macro.eq_arg_satellite_02_macro">
                    <set_object_hull object="$Satellite" exact="$Satellite.hullpercentage - [0,1,2,3].random"/>
                  </do_if>
                  <do_else>
                    <set_object_hull object="$Satellite" exact="$Satellite.hullpercentage - [3,4,5,8].random"/>
                  </do_else>

                  <!--debug_text text="'deteriorate ' + $Satellite + ' ' + $Satellite.macro + ' from ' + $old + ' to ' +  $Satellite.hullpercentage "/-->
                  <do_if value="$Satellite.hull == 0">
                    <destroy_object object="$Satellite" comment="also removes from group" explosion="true"/>
                  </do_if>

                </do_all>

                <!-- fill satellite network to optimal capacity -->
                <set_value name="$MaxSpawn" exact="0"/>
                <do_while value="($FactionSatellites.count lt $SatelliteNetworkGoal) and ($MaxSpawn lt 15)">
                  <set_value name="$MaxSpawn" operation="add"/>
                  <do_if value="$ClaimedSectors.count" comment="empty at gamestart">

                    <set_value name="$Sector" exact="$ClaimedSectors.random"/>
                    <do_if value="$Sector">
                      <!-- select spawn-location (near gate or near station) -->
                      <do_any>
                        <do_all>
                          <find_station_by_true_owner name="$AllStations" space="$Sector" faction="$Faction" multiple="true" append="true"/>
                          <shuffle_list list="$AllStations"/>
                          <set_value name="$SelectedTarget" exact="$AllStations.random"/>
                        </do_all>
                        <do_all>
                          <include_actions ref="md.LIB_Generic.FindSectorEntryPoints"/>
                          <set_value name="$SelectedTarget" exact="@$LocalEntryPoints.random"/>
                        </do_all>
                      </do_any>
                      <!-- spawn -->
                      <do_if value="$SelectedTarget">
                        <create_object name="$TargetSatellite" macro="[macro.eq_arg_satellite_01_macro, macro.eq_arg_satellite_02_macro].random" owner="$Faction" sector="$SelectedTarget.sector">
                          <safepos max="15km" object="$SelectedTarget"/>
                        </create_object>
                        <!--debug_text text="'spawning satellite ' + $TargetSatellite + ' (in ' + $TargetSatellite.sector.knownname + ' ' + $TargetSatellite.position + ')'"/>
                        <set_object_hull object="$TargetSatellite" exact="[60,70,90,100].random"/-->
                        <add_to_group groupname="$FactionSatellites" object="$TargetSatellite"/>
                      </do_if>
                    </do_if>
                  </do_if>
                </do_while>
              </actions>
            </cue>
          </cues>
        </cue>


        <!-- Factions try to maintain a lasertower network around important locations ( shipyard, HQ ) -->
        <cue name="MaintainLasertowerNetwork" onfail="cancel" >
          <conditions>
            <check_value value="$LasertowerNetworkGoal"/>
          </conditions>
          <cues>
            <cue name="MaintainLasertowerNetwork_PeriodicCheck" checkinterval="1800s" instantiate="true">
              <delay min="10s" max="20s"/>
              <actions>
                <!-- prune empty groups-->
                <do_all exact="$FactionLasertowers.count" counter="$i" reverse="true">
                  <do_if value="$FactionLasertowers.{$i}.count == 0">
                    <remove_value name="$FactionLasertowers.{$i}"/>
                  </do_if>
                </do_all>

                <!-- repopulate -->
                <debug_text text="'Claimed sectors: ' + $ClaimedSectors.count + ' lasertowergroups: ' + $FactionLasertowers.count + ' goal: ' + $LasertowerNetworkGoal" chance="$DebugChance"/>

                <do_if value="$ClaimedSectors.count gt 2" comment="tiny factions don't have a lasertower-network (not unless they claim more sectors)">
                  <set_value name="$ClaimedSectorsClone" exact="$ClaimedSectors.list"/>
                  <shuffle_list list="$ClaimedSectorsClone"/>

                  <set_value name="$MaxSpawnPerIteration" exact="0"/>
                  <do_while value="($FactionLasertowers.count lt $LasertowerNetworkGoal) and ($MaxSpawnPerIteration lt 3) and $ClaimedSectorsClone.count">
                    <set_value name="$MaxSpawnPerIteration" operation="add"/>
                    <set_value name="$Sector" exact="$ClaimedSectorsClone.last"/>
                    <remove_value name="$ClaimedSectorsClone.{$ClaimedSectorsClone.count}"/>

                    <do_if value="$Sector">
                      <find_station_by_true_owner name="$AllStations" space="$Sector" faction="$Faction" multiple="true">
                        <match_any>
                          <match canbuildships="true"/>
                          <match headquarters="true"/>
                          <match tradestation="true"/>
                          <match piratebase="true"/>
                          <match equipmentdock="true"/>
                          <match defencestation="true"/>
                        </match_any>
                      </find_station_by_true_owner>

                      <do_if value="$AllStations.count">
                        <set_value name="$SelectedTarget" exact="$AllStations.random"/>


                        <!-- check if there are already lasertowers, if so, skip (avoid spamming our entire 'budget' around 1 station) -->
                        <set_value name="$PlaceTowers" exact="true"/>
                        <do_all exact="$FactionLasertowers.count" counter="$q">
                          <do_if value="$SelectedTarget.distanceto.{$FactionLasertowers.{$q}.{1}} lt 15km">
                            <set_value name="$PlaceTowers" exact="false"/>
                            <break/>
                          </do_if>
                        </do_all>

                        <debug_text text="'Selected ' + $SelectedTarget + ' in ' + $SelectedTarget.zone + ' place=' + $PlaceTowers" chance="$DebugChance"/>
                        <do_if value="$PlaceTowers">

                          <set_value name="$MinSpawn" exact="4"/>
                          <set_value name="$MaxSpawn" exact="8"/>
                          <set_value name="$ExplosiveOwner" exact="$Faction"/>
                          <include_actions ref="md.LIB_Generic.PlaceLasertowerfield" comment="input: multiple, output: $Explosives"/>

                          <do_if value="$Explosives.count">
                            <debug_text text="'Adding ' + $Explosives" chance="$DebugChance"/>
                            <append_to_list name="$FactionLasertowers" exact="$Explosives"/>
                            <remove_value name="$Explosives"/>
                          </do_if>
                        </do_if>

                      </do_if>
                      <do_else>
                        <debug_text text="'No suitable stations found in ' + $Sector.knownname" chance="$DebugChance"/>
                      </do_else>
                    </do_if>
                  </do_while>
                  <remove_value name="$ClaimedSectorsClone"/>
                </do_if>
              </actions>
            </cue>
          </cues>
        </cue>

        <!-- Factions try to maintain some minefields and Pirates rigged-asteroids -->
        <cue name="MaintainMinefields" onfail="cancel" version="2">
          <conditions>
            <check_value value="$MinefieldGoalPerSector gt 0"/>
          </conditions>
          <patch sinceversion="2" state="cancelled">
            <do_if value="$MinefieldGoalPerSector gt 0">
              <reset_cue cue="this"/>
            </do_if>
          </patch>
          <cues>
            <cue name="MaintainMinefields_PeriodicCheck" checkinterval="1800s" instantiate="true">
              <delay min="20s" max="30s"/>
              <actions>
                <!-- prune empty groups-->
                <do_all exact="$FactionMinefields.count" counter="$i" reverse="true">
                  <do_if value="$FactionMinefields.{$i}.count == 0">
                    <remove_value name="$FactionMinefields.{$i}"/>
                  </do_if>
                </do_all>

                <!-- repopulate -->

                <!-- Pirates don't have many claimed sectors, so instead find sectors with a (pirate)station -->
                <find_station_by_true_owner name="$Stations" space="player.galaxy" multiple="true" faction="$Faction"/>
                <get_factions_by_relation result="$Enemies" relation="enemy" faction="$Faction"/>

                <create_group groupname="$HomeSectors"                      comment="Sectors which are owned/contested by $Faction. // Pirates: With Station of the Faction in them"/>
                <create_group groupname="$HomeSectorsEndangered"            comment="HomeSectors which have hostile Stations inside or are neighbouring hostile owned/contested Sectors"/>
                <create_group groupname="$NeighbouringSectors"              comment="Sectors in Neighbouring Clusters to HomeSectors"/>
                <create_group groupname="$NeighbouringSectorsEndangered"    comment="Neighbouring which have hostile Stations inside or are owned/contested by enemies"/>

                <create_group groupname="$EnemyStationSectors"              comment="Sectors with Stations of Enemies inside"/>
                <do_if value="$Enemies.count">
                  <do_all exact="$Enemies.count" counter="$e">
                    <find_station_by_true_owner name="$EnemyStations" space="player.galaxy" multiple="true" faction="$Enemies.{$e}"/>
                    <do_if value="$EnemyStations.count">
                      <do_all exact="$EnemyStations.count" counter="$es">
                        <add_to_group groupname="$EnemyStationSectors" object="$EnemyStations.{$es}"/>
                      </do_all>
                    </do_if>
                  </do_all>
                </do_if>
                
                <do_if value="$Faction.willclaimspace"            comment="v2.5 Scaleplate and Ministry do not claim space">
                  <do_all>
                    <find_sector name="$AllSectors" space="player.galaxy" multiple="true"/>
                    <do_if value="$AllSectors.count">
                      <do_all exact="$AllSectors.count" counter="$i">
                        <do_if value="($AllSectors.{$i}.owner == $Faction) or ($AllSectors.{$i}.iscontestedby.{$Faction})">
                          <add_to_group groupname="$HomeSectors"  object="$AllSectors.{$i}"/>
                        </do_if>
                      </do_all>
                    </do_if>
                  </do_all>
                </do_if>
                <do_else>
                  <do_all exact="$Stations.count" counter="$s">
                    <add_to_group groupname="$HomeSectors"      object="$Stations.{$s}.sector"/>
                  </do_all>
                </do_else>

                <!-- Caluclate MinefieldGoalTotal from Minefieldgoal * Sectors, scales with sector gains and losses. Capped between 3 and 12 -->
                <set_value name="$MinefieldGoalTotal" exact="[[$MinefieldGoalPerSector * $HomeSectors.count, 3].max, 12].min" comment="Spawn"/>
                <!-- DEBUG normal counts -->

                <!-- Fill group $NeighbouringSectors with all sectors in clusters to maxdistance 1 to $HomeSectors (neighbouring)-->
                <do_if value="$HomeSectors.count gt 0" comment="">
                  <!-- Add sectors with a maxdistance of 1 towards the cluster to $NeighbouringSectors -->
                  <do_all exact="$HomeSectors.count" counter="$h">
                    <!--  Loop over all Sectors to find neighbouring Clusters-->
                    <find_cluster_in_range name="$LocalClusters" object="$HomeSectors.{$h}" maxdistance="1" multiple="true"/>
                    <do_if value="$LocalClusters.count">
                      <!--  Loop over all Clusters to find their Sectors, add them to $NeighbouringSectors-->
                      <do_all exact="$LocalClusters.count" counter="$i">
                        <find_sector name="$SectorsInCluster" space="$LocalClusters.{$i}" multiple="true"/>
                        <do_if value="$SectorsInCluster.count">
                          <do_all exact="$SectorsInCluster.count" counter="$k">
                            <do_if value="($SectorsInCluster.{$k}.owner != faction.xenon)" comment="No foreign minefields in Xenon Sectors">
                              <add_to_group groupname="$NeighbouringSectors" object="$SectorsInCluster.{$k}"/>
                            </do_if>
                          </do_all>
                        </do_if>
                      </do_all>
                    </do_if>
                  </do_all>
                  <!-- Remove all HomeSectors entries from ForeignSectors so that only the neighbouring ones are left -->
                  <do_all exact="$HomeSectors.count" counter="$i">
                    <remove_from_group group="$NeighbouringSectors" object="$HomeSectors.{$i}"/>
                  </do_all>

                  <!-- Fill group $NeighbouringSectorsEndangered with all ForeignSectors owned or contested by Enemies OR with enemy stations inside -->
                  <do_if value="$NeighbouringSectors.count">
                    <do_all exact="$NeighbouringSectors.count" counter="$i">
                      <do_if value="$Enemies.count">
                        <do_all exact="$Enemies.count" counter="$e">
                          <do_if value="($NeighbouringSectors.{$i}.owner == $Enemies.{$e}) or $NeighbouringSectors.{$i}.iscontestedby.{$Enemies.{$e}}">
                            <add_to_group groupname="$NeighbouringSectorsEndangered" object="$NeighbouringSectors.{$i}"/>
                          </do_if>
                        </do_all>
                      </do_if>
                      <do_elseif value="$EnemyStationSectors.count">
                        <do_all exact="$EnemyStationSectors.count" counter="$ess">
                          <do_if value="$NeighbouringSectors.{$i} == $EnemyStationSectors.{$ess}">
                            <add_to_group groupname="$NeighbouringSectorsEndangered" object="$NeighbouringSectors.{$i}"/>
                          </do_if>
                        </do_all>
                      </do_elseif>
                    </do_all>
                  </do_if>

                  <!-- Populate $HomeSectorsEndangered with HomeSectors which have Non-HomeSectors in neighbouring Cluster-Sectors which belong to or are contested by enemies -->
                  <!-- Go over all HomeSectors (with faction stations) -->
                  <do_if value="$Enemies.count">
                    <do_if value="$HomeSectors.count gt 0" comment="">
                      <do_all exact="$HomeSectors.count" counter="$h">
                        <find_cluster_in_range name="$LocalClusters" object="$HomeSectors.{$h}" maxdistance="1" multiple="true"/>
                        <do_if value="$LocalClusters.count">
                          <do_all exact="$LocalClusters.count" counter="$i">
                            <find_sector name="$SectorsInCluster" space="$LocalClusters.{$i}" multiple="true" />
                            <do_if value="$SectorsInCluster.count">
                              <!-- Look at all Sectors in neighbouring Clusters of this HomeSectors -->
                              <do_all exact="$SectorsInCluster.count" counter="$k">
                                <!-- Confirm that all the neighbouring Cluster Sectors are also HomeSectors -->
                                <!-- If one NeighbouringSector($k) towards HomeSector($h) is not in HomeSectors($l), keep $NSIsAHomeSector False-->
                                <set_value name="$NeighbouringSectorIsAHomeSector" exact="false"/>
                                <do_all exact="$HomeSectors.count" counter="$l" comment="Check if NeighbouringSector($k) is a HomeSector">
                                  <do_if value="$HomeSectors.{$l} == $SectorsInCluster.{$k}">
                                    <set_value name="$NeighbouringSectorIsAHomeSector" exact="true"/>
                                    <break/>
                                  </do_if>
                                </do_all>
                                <!-- $NeighbouringSectorIsAHomeSector is false, our HomeSector($h) has a border towards another faction-->
                                <do_if value="false == $NeighbouringSectorIsAHomeSector" comment="One of my neighbours is not a HomeSector">
                                  <!-- If the $NeighbourSector{$k}.owner is not hostile, we don't have to add the $HomeSector{$h} to the Endangered -->
                                  <!-- Loop over all hostile factions to check if they own or contest the sector -->
                                  <do_all exact="$Enemies.count" counter="$e">
                                    <do_if value="($SectorsInCluster.{$k}.owner == $Enemies.{$e}) or ($SectorsInCluster.{$k}.iscontestedby.{$Enemies.{$e}})">
                                      <add_to_group groupname="$HomeSectorsEndangered" object="$HomeSectors.{$h}"/>
                                    </do_if>
                                  </do_all>
                                </do_if>
                              </do_all>
                            </do_if>
                          </do_all>
                        </do_if>
                      </do_all>
                    </do_if>

                    <!-- Add all not enemy owned/contested HomeSectors with enemy stations inside to the HomeSectorsEndangered-->
                    <do_if value="$EnemyStationSectors.count">
                      <do_all exact="$EnemyStationSectors.count" counter="$ess">
                        <do_all exact="$HomeSectors.count" counter="$h">
                          <do_if value="$EnemyStationSectors.{$ess} == $HomeSectors.{$h}">
                            <add_to_group groupname="$HomeSectorsEndangered" object="$HomeSectors.{$h}"/>                            
                          </do_if>
                        </do_all>
                      </do_all>
                    </do_if>                    
                    
                  </do_if>


                  <debug_text text="'HomeSectors: ' + $HomeSectors.count + ' HomeSectorsEndangered: ' + $HomeSectorsEndangered.count + ' $NeighbouringSectors: ' + $NeighbouringSectors.count + ' $NeighbouringSectorsEndangered: ' + $NeighbouringSectorsEndangered.count + ' minefields: ' + $FactionMinefields.count + ' goal: ' + $MinefieldGoalTotal" chance="$DebugChance"/>
                  <do_if value="player.sector.exists">
                    <remove_from_group group="$HomeSectors"                     object="player.sector" comment="Do not place mines in the current player sector"/>
                    <remove_from_group group="$NeighbouringSectors"             object="player.sector" comment="Do not place mines in the current player sector"/>
                    <remove_from_group group="$HomeSectorsEndangered"           object="player.sector" comment="Do not place mines in the current player sector"/>
                    <remove_from_group group="$NeighbouringSectorsEndangered"   object="player.sector" comment="Do not place mines in the current player sector"/>
                  </do_if>
                    
                  <set_value name="$MaxSpawnPerIteration" exact="0"/>
                  <!-- select random zones to place minefields, in the sectors in which the faction owns stations -->
                  <do_while value="($FactionMinefields.count lt ($MinefieldGoalTotal)) and ($MaxSpawnPerIteration lt 6)" comment="Max 6 new Minefields per Faction every 30 mins">
                    <set_value name="$MaxSpawnPerIteration" operation="add"/>

                    <!--      SECTOR GROUPS
                              $HomeSectors                      Sectors which are owned/contested by $Faction. // Pirates: With Station of the Faction in them
                              $HomeSectorsEndangered            HomeSectors which have hostile Stations inside or are neighbouring hostile owned/contested Sectors
                              $NeighbouringSectors              Sectors in Neighbouring Clusters to HomeSectors
                              $NeighbouringSectorsEndangered    ForeignSectors which have hostile Stations inside or are owned/contested by enemies
                              
                              Prioritise EndangeredSectors over SafeSectors
                    -->
                    <!--
                              Place:  FriendFoe Mines           In: HomeSector (Sectors), ForeignSector
                              Place:  IndiscriminativeMines     In: ForeignSector
                              Place:  RiggedAsteroids           In: ForeignSector
                    -->

                    <set_value name="$MineType" exact="-1" comment="0: RiggedAsteroids, 1: Indiscriminative Mines, 2: FF-Mines"/>

                    <!--  Defensive Civs: Use FF Mines only 
                          Prioritise EndangeredSectors over SafeSectors
                          Prioritise HomeSectors over NeighbourSectors-->
                    <do_if value="$Faction == faction.argon or $Faction == faction.antigone or $Faction == faction.ministry or $Faction == faction.paranid">
                      <set_value name="$MineType" exact="2" comment="0: RiggedAsteroids, 1: Indiscriminative Mines, 2: FF-Mines"/>

                      <do_if value="$HomeSectorsEndangered.count" chance="66">
                        <set_value name="$Sector" exact="$HomeSectorsEndangered.random"/>
                      </do_if>
                      <do_elseif value="$NeighbouringSectorsEndangered.count" chance="80">
                        <set_value name="$Sector" exact="$NeighbouringSectorsEndangered.random"/>
                      </do_elseif>
                      <do_elseif value="$HomeSectors.count">
                        <set_value name="$Sector" exact="$HomeSectors.random"/>
                      </do_elseif>
                      <do_elseif value="$NeighbouringSectors.count">
                        <set_value name="$Sector" exact="$NeighbouringSectors.random"/>
                      </do_elseif>
                    </do_if>

                    <!--  Aggressive Civs:
                          Prioritise EndangeredSectors over SafeSectors
                          Use FF Mines in Home & Endangered Sectors
                          Use Indiscriminative & RiggdAsteroids in ForeignSectors -->
                    <do_elseif value="$Faction == faction.holyorder">
                      <do_if value="$HomeSectorsEndangered.count" chance="50">
                        <set_value name="$Sector" exact="$HomeSectorsEndangered.random"/>
                        <set_value name="$MineType" exact="2" comment="0: RiggedAsteroids, 1: Indiscriminative Mines, 2: FF-Mines"/>
                      </do_if>
                      <do_elseif value="$NeighbouringSectorsEndangered.count" chance="66">
                        <set_value name="$Sector" exact="$NeighbouringSectorsEndangered.random"/>
                        <set_value name="$MineType" exact="2" comment="0: RiggedAsteroids, 1: Indiscriminative Mines, 2: FF-Mines"/>
                      </do_elseif>
                      <do_elseif value="$NeighbouringSectors.count">
                        <set_value name="$Sector" exact="$NeighbouringSectors.random"/>
                        <do_if value="true" chance="66">
                          <set_value name="$MineType" exact="1" comment="0: RiggedAsteroids, 1: Indiscriminative Mines, 2: FF-Mines"/>
                        </do_if>
                        <do_else>
                          <set_value name="$MineType" exact="0" comment="0: RiggedAsteroids, 1: Indiscriminative Mines, 2: FF-Mines"/>
                        </do_else>
                      </do_elseif>
                      <do_elseif value="$HomeSectors.count">
                        <set_value name="$Sector" exact="$HomeSectors.random"/>
                        <set_value name="$MineType" exact="2" comment="0: RiggedAsteroids, 1: Indiscriminative Mines, 2: FF-Mines"/>
                      </do_elseif>
                    </do_elseif>

                    <!--  Hightech Civs:
                          Use FF Mines everywhere-->
                    <do_elseif value="$Faction == faction.xenon">
                      <set_value name="$MineType" exact="2" comment="0: RiggedAsteroids, 1: Indiscriminative Mines, 2: FF-Mines"/>
                      <do_if value="$NeighbouringSectorsEndangered.count and $HomeSectorsEndangered.count">
                        <set_value name="$Sector" exact="[$HomeSectorsEndangered.random, $NeighbouringSectorsEndangered.random].random"/>
                      </do_if>
                      <do_elseif value="$NeighbouringSectorsEndangered.count">
                        <set_value name="$Sector" exact="$NeighbouringSectorsEndangered.random"/>
                      </do_elseif>
                      <do_elseif value="$HomeSectorsEndangered.count">
                        <set_value name="$Sector" exact="$HomeSectorsEndangered.random"/>
                      </do_elseif>
                      <do_elseif value="$NeighbouringSectors.count">
                        <set_value name="$Sector" exact="$NeighbouringSectors.random"/>
                      </do_elseif>
                      <do_elseif value="$HomeSectorsEndangered.count">
                        <set_value name="$Sector" exact="$HomeSectorsEndangered.random"/>
                      </do_elseif>
                    </do_elseif>

                    <!--  Undefined / Piraty Civs:
                          Prioritise EndangeredSectors over SafeSectors
                          Prioritise IndiscrMines in ForeignSector
                          Use RiggedAsteroids in ForeignSector    
                          Cannot afford FF-Mines-->
                    <do_else>
                      <do_if value="$NeighbouringSectorsEndangered.count">
                        <set_value name="$Sector" exact="$NeighbouringSectorsEndangered.random"/>
                        <do_if value="true" chance="80">
                          <set_value name="$MineType" exact="1" comment="0: RiggedAsteroids, 1: Indiscriminative Mines, 2: FF-Mines"/>
                        </do_if>
                        <do_else>
                          <set_value name="$MineType" exact="0" comment="0: RiggedAsteroids, 1: Indiscriminative Mines, 2: FF-Mines"/>
                        </do_else>
                      </do_if>
                      <do_elseif value="$NeighbouringSectors.count">
                        <set_value name="$Sector" exact="$NeighbouringSectors.random"/>
                        <do_if value="true" chance="80">
                          <set_value name="$MineType" exact="1" comment="0: RiggedAsteroids, 1: Indiscriminative Mines, 2: FF-Mines"/>
                        </do_if>
                        <do_else>
                          <set_value name="$MineType" exact="0" comment="0: RiggedAsteroids, 1: Indiscriminative Mines, 2: FF-Mines"/>
                        </do_else>
                      </do_elseif>
                    </do_else>

                    <do_if value="$Sector">
                      <find_zone name="$NearbyZone" normalzone="true" space="$Sector" multiple="false">
                        <match_distance space="$Sector" value="$Sector.coreposition" max="[$Sector.coresize, 400km].min"/>
                      </find_zone>

                      <do_if value="$NearbyZone and $NearbyZone.position.y lt 15km and $NearbyZone.position.y gt -15km" comment="exclude zones with about +-100km deviation from the plane">
                        <set_value name="$SelectedTarget" exact="$NearbyZone"/>
                        <set_value name="$MinSpawn" exact="6"/>
                        <set_value name="$MaxSpawn" exact="12"/>
                        <set_value name="$ExplosiveOwner" exact="$Faction"/>

                        <do_if value="$MineType == 2"     comment="ff-minefield">
                          <include_actions ref="md.LIB_Generic.PlaceMinefield" comment="output: $Explosives"/>
                          <debug_text text="'Sector \'' + $NearbyZone.sector.knownname + '\' - adding ' + $Explosives + '(ff-mines)'" chance="$DebugChance"/>
                        </do_if>
                        <do_elseif value="$MineType == 1" comment="indiscriminative minefield">
                          <include_actions ref="md.LIB_Generic.PlaceMinefieldIndiscriminative" comment="output: $Explosives"/>
                          <debug_text text="'Sector \'' + $NearbyZone.sector.knownname + '\' - adding ' + $Explosives + '(indiscriminative mines)'" chance="$DebugChance"/>
                        </do_elseif>
                        <do_elseif value="$MineType == 0" comment="Rigged asteroids (harmless until a mission activates them)">
                          <include_actions ref="md.LIB_Generic.PlaceRiggedAsteroids" comment="output: $Explosives"/>
                          <debug_text text="'Sector \'' + $NearbyZone.sector.knownname + '\' - adding ' + $Explosives + '(rigged asteroids)'" chance="$DebugChance"/>
                        </do_elseif>

                        <do_if value="$MineType gt -1 and $Explosives.count">
                          <append_to_list name="$FactionMinefields" exact="$Explosives"/>
                        </do_if>
                        <remove_value name="$Position"/>
                        <remove_value name="$Explosives"/>
                      </do_if>
                      <do_else>
                        <debug_text text="'No suitable zones found in ' + $Sector.knownname" chance="$DebugChance"/>
                      </do_else>

                    </do_if>
                    <do_else>
                      <debug_text text="'No suitable sector found'" chance="$DebugChance"/>
                    </do_else>
                  </do_while>
                </do_if>
                <do_else>
                  <debug_text text="'No suitable sectors found'" chance="$DebugChance"/>
                </do_else>

              </actions>
            </cue>
          </cues>
        </cue>

      </cues>
    </library>

    <!--Param: [$ResultCue, $Object or Group/List, $ShipClassStrengthTable, $SubordinateClassStrengthTable (optional), $ResultTable(optional)]
    Result saved to $ResultCue.$EFS_Result-->
    <cue name="EvaluateForceStrength" instantiate="true" namespace="static">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$ResultCue" exact="event.param.{1}"/>
        <set_value name="$ShipStrengthTable" exact="event.param.{3}"/>
        <set_value name="$SubordinateStrengthTable" exact="@event.param.{4}"/>
        <set_value name="$ResultTable" exact="@event.param.{5}"/>
        <set_value name="$ResultCue.$EFS_Result" exact="0"/>
        <do_if value="typeof event.param.{2} == datatype.component">
          <set_value name="$ESS_Ship" exact="event.param.{2}"/>
          <include_actions ref="Estimated_Ship_Strength"/>
          <do_if value="$ResultTable">
            <set_value name="$ResultTable.{$ESS_Ship}" exact="$ESS_Result"/>
          </do_if>
          <set_value name="$ResultCue.$EFS_Result" exact="$ESS_Result"/>
        </do_if>
        <do_else>
          <set_value name="$Objects" exact="event.param.{2}"/>
          <do_all exact="$Objects.count" counter="$i">
            <set_value name="$ESS_Ship" exact="$Objects.{$i}"/>
            <include_actions ref="Estimated_Ship_Strength"/>
            <do_if value="$ResultTable">
              <set_value name="$ResultTable.{$ESS_Ship}" exact="$ESS_Result"/>
            </do_if>
            <set_value name="$ResultCue.$EFS_Result" exact="$ESS_Result" operation="add"/>
          </do_all>
        </do_else>
      </actions>
    </cue>

    <!--Strength of ship $ESS_Ship
        Result written to $ESS_Result-->
    <library name="Estimated_Ship_Strength">
      <actions>
        <!--TODO @Owen base strength on other factors.-->
        <set_value name="$ESS_Result" exact="@$ShipStrengthTable.{$ESS_Ship.realclass}"/>
        <do_if value="not $ESS_Result">
          <set_value name="$ESS_Result" exact="1"/>
        </do_if>

        <do_if value="$SubordinateStrengthTable and $ESS_Ship.parent">
          <set_value name="$ESS_Subordinates" exact="$ESS_Ship.allsubordinates"/>
          <!--Potentially less strength as we have less control over them-->
          <do_all exact="$ESS_Subordinates.count" counter="$ESS_i">
            <set_value name="$ESS_Subordinate_Result" exact="@$SubordinateStrengthTable.{$ESS_Subordinates.{$ESS_i}.realclass}"/>
            <do_if value="not $ESS_Subordinate_Result">
              <set_value name="$ESS_Subordinate_Result" exact="1"/>
            </do_if>
            <set_value name="$ESS_Result" operation="add" exact="$ESS_Subordinate_Result"/>
          </do_all>
          <!--<debug_text text="$DebugText + 'Ship ' + $ESS_Ship + ' ' + $ESS_Ship.knownname + ' has ' + $ESS_Subordinates.count + ' subordinates and a total strength of ' + $ESS_Result" context="false"/>-->
        </do_if>
      </actions>
    </library>


    <!--signal_cue_instantly
    param: [$ResultCue, $Points, $Faction]
    Result saved to $ResultCue.$Suitable_Jobs-->
    <cue name="Get_Military_Jobs" instantiate="true" namespace="static">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <do_if value="not @$MilitaryJobDefinitions">
          <!--Table with the keys as floats (mainly to avoid clashes)-->
          <!--[$ShipSize, [$Tags]]-->
          <set_value name="$MilitaryJobDefinitions" exact="table[
                      {23.0f} = [class.ship_xl, [tag.military, tag.factionlogic]],
                      {11.0f} = [class.ship_l,  [tag.military, tag.factionlogic]],
                      {3.0f} =  [class.ship_m,  [tag.military, tag.factionlogic]],
                      {1.0f} =  [class.ship_s,  [tag.military, tag.factionlogic]]]"/>
        </do_if>
        <signal_cue_instantly cue="Get_Suitable_Jobs" param="[$MilitaryJobDefinitions, event.param.{1}, event.param.{2}, event.param.{3}]"/>
      </actions>
      <!--To patch, clear value $MilitaryJobDefinitions-->
    </cue>

    <!--signal_cue_instantly
    param: [$ResultCue, $Points, $Faction]
    Result saved to $ResultCue.$Suitable_Jobs-->
    <cue name="Get_Scout_Jobs" instantiate="true" namespace="static">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <do_if value="not @$ScoutJobDefinitions">
          <!--Table with the keys as floats (mainly to avoid clashes)-->
          <!--[$ShipSize, [$Tags]]-->
          <set_value name="$ScoutJobDefinitions" exact="table[
                      {23.0f} = [class.ship_xl, [tag.scout, tag.factionlogic]],
                      {11.0f} = [class.ship_l,  [tag.scout, tag.factionlogic]],
                      {3.0f} =  [class.ship_m,  [tag.scout, tag.factionlogic]],
                      {1.0f} =  [class.ship_s,  [tag.scout, tag.factionlogic]]]"/>
        </do_if>
        <signal_cue_instantly cue="Get_Suitable_Jobs" param="[$ScoutJobDefinitions, event.param.{1}, event.param.{2}, event.param.{3}]"/>
      </actions>
      <!--To patch, clear value $ScoutJobDefinitions-->
    </cue>
    
    <!--Internal use
    param: [$JobDefinitionsTable, $ResultCue, $Points, $Faction]
    Result saved to $ResultCue.$Suitable_Jobs-->
    <cue name="Get_Suitable_Jobs" instantiate="true" namespace="static">
      <conditions>
        <event_cue_signalled/>
        <check_value value="typeof event.param.{1} == datatype.table"/>
        <check_value value="typeof event.param.{2} == datatype.cue"/>
        <check_value value="event.param.{3} gt 0"/>
        <check_value value="typeof event.param.{4} == datatype.faction"/>
      </conditions>
      <actions>
        <set_value name="$DebugChance" exact="0"/>
        <set_value name="$JobsTable" exact="event.param.{1}"/>
        <set_value name="$SortedJobsTableKeys" exact="$JobsTable.keys.list"/>
        <set_value name="$JobsTableKeys" exact="[]"/>
        <!--Store keys in reverse sorted order-->
        <do_all exact="$SortedJobsTableKeys.count" counter="$i" reverse="true">
          <append_to_list name="$JobsTableKeys" exact="$SortedJobsTableKeys.{$i}"/>
        </do_all>
        <set_value name="$ResultCue" exact="event.param.{2}"/>
        <set_value name="$Points" exact="event.param.{3}"/>
        <set_value name="$Faction" exact="event.param.{4}"/>
        <set_value name="$ResultCue.$Suitable_Jobs" exact="[]"/>
        <debug_text text="'Attempting to get suitable job ships for ' + $Faction + '. Points: ' + $Points" chance="$DebugChance"/>

        <do_if value="$MatchingJobsTable?">
          <clear_table table="$MatchingJobsTable"/>
        </do_if>
        <do_else>
          <set_value name="$MatchingJobsTable" exact="table[]"/>
        </do_else>
        <do_if value="$AffordableDefinitions?">
          <clear_list list="$AffordableDefinitions"/>
        </do_if>
        <do_else>
          <set_value name="$AffordableDefinitions" exact="[]"/>
        </do_else>

        <set_value name="$Definition_Size" exact="1"/>
        <set_value name="$Definition_Tags" exact="2"/>

        <set_value name="$Tries" exact="0"/>
        <set_value name="$PointsOverflow" exact="0"/>
        <do_while value="$Points gt 0 and $JobsTableKeys.count">
          <set_value name="$Tries" operation="add"/>
          <set_value name="$Definition" exact="null"/>
          <set_value name="$Cost" exact="0"/>
          <clear_list list="$AffordableDefinitions"/>

          <do_all exact="$JobsTableKeys.count" counter="$i">
            <do_if value="$AffordableDefinitions.count or $JobsTableKeys.{$i} le $Points">
              <append_to_list name="$AffordableDefinitions" exact="$JobsTableKeys.{$i}"/>
            </do_if>
          </do_all>

          <do_if value="$AffordableDefinitions.count">
            <!--Hardcoded scale as it can't be an expression-->
            <do_if value="$Tries" exact="1">
              <set_value name="$Index" exact="1" max="$AffordableDefinitions.count" profile="decreasing" scale="4"/>
            </do_if>
            <do_elseif value="$Tries" exact="2">
              <set_value name="$Index" exact="1" max="$AffordableDefinitions.count" profile="decreasing" scale="3"/>
            </do_elseif>
            <do_elseif value="$Tries" exact="3">
              <set_value name="$Index" exact="1" max="$AffordableDefinitions.count" profile="decreasing" scale="2"/>
            </do_elseif>
            <do_elseif value="$Tries" min="4">
              <set_value name="$Index" exact="1" max="$AffordableDefinitions.count" profile="decreasing"/>
            </do_elseif>
            <set_value name="$Cost" exact="$AffordableDefinitions.{$Index}"/>
            <set_value name="$Definition" exact="$JobsTable.{$Cost}"/>

            <do_if value="$MatchingJobsTable.{$Cost}?">
              <set_value name="$JobsList" exact="$MatchingJobsTable.{$Cost}"/>
              <debug_text text="'Has already found suitable jobs for cost ' + $Cost + ' Jobs: ' + $JobsList" chance="$DebugChance"/>
            </do_if>
            <do_else>
              <get_suitable_job result="$JobsList" multiple="true" faction="$Faction" size="$Definition.{$Definition_Size}" tags="$Definition.{$Definition_Tags}"/>
              <set_value name="$MatchingJobsTable.{$Cost}" exact="$JobsList"/>
            </do_else>

            <do_if value="$JobsList.count">
              <set_value name="$Tries" exact="0"/>
              <append_to_list name="$ResultCue.$Suitable_Jobs" exact="$JobsList.random"/>
              <set_value name="$Points" operation="subtract" exact="$Cost"/>
              <debug_text text="'Selected job ' + $ResultCue.$Suitable_Jobs.{$ResultCue.$Suitable_Jobs.count} + ' for cost: ' + $Cost + '; points now ' + $Points" chance="$DebugChance"/>
              <do_if value="$PointsOverflow gt 0">
                <debug_text text="'Attempted to add $PointsOverflow back to $Points. $PointsOverflow: ' + $PointsOverflow + '; $Points now: ' + ($Points + $PointsOverflow)" chance="$DebugChance"/>
                <set_value name="$Points" operation="add" exact="$PointsOverflow"/>
                <set_value name="$PointsOverflow" exact="0"/>
              </do_if>
            </do_if>
            <do_else>
              <!--No matching jobs. Remove entry in $JobsTableKeys-->
              <debug_text text="'No suitable job for cost ' + $Cost" chance="$DebugChance"/>
              <remove_value name="$JobsTableKeys.{$JobsTableKeys.indexof.{$Cost}}"/>
            </do_else>
          </do_if>
          <do_if value="$Tries gt 0">
            <do_if value="$Cost">
              <set_value name="$PointDiff" exact="$Points - $Cost"/>
            </do_if>
            <do_elseif value="$Tries gt 4">
              <do_if value="$Points gt 1">
                <!--$Points may be a float. Use 2 as a minimum for safety-->
                <set_value name="$PointDiff" min="1" max="[$Points - 1, 2].max"/>
              </do_if>
            </do_elseif>
            <do_else>
              <set_value name="$Points" exact="0"/>
              <set_value name="$PointDiff" exact="0"/>
            </do_else>

            <do_if value="$PointDiff">
              <set_value name="$Tries" exact="0"/>
              <set_value name="$Points" operation="subtract" exact="$PointDiff"/>
              <set_value name="$PointsOverflow" operation="add" exact="$PointDiff"/>
              <debug_text text="'Attempting another tier by reducing $Points to ' + $Points + '. Points overflow is now ' + $PointsOverflow" chance="$DebugChance"/>
            </do_if>
          </do_if>
        </do_while>
      </actions>
    </cue>

  </cues>
</mdscript>