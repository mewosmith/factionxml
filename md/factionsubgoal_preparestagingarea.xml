<?xml version="1.0" encoding="utf-8"?>
<mdscript name="FactionSubgoal_PrepareStagingArea" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--event.param = table[
    $OwnerGoal                (cue - Cue of calling faction goal),
    $OwnerStandbyShipsTable   (table - optional - Table reference to standby ships. Key = Ship, Value = GameTime they were set to standby),
    $DesiredEndTime           (time - Gametime in which to attempt and fullfil the subgoal),
    $ShipStrengthTable        (table - table of ship classes to evaluate ship strength against),
    $SubordinateStrengthTable (table - table of ship classes to evaluate subordinate strength against),
    $DesiredShipStrength      (int - strength value of ships this subgoal should attempt to achieve),
    $FindShipSpaces           (list - list of spaces in which to find ships to commandeer),
    $Target                   (space - target space the ships will be invading),
    $EntryPoint               (object - entry point to the target),
    $Position                 (position - position to hold),
    $DebugChance              (int),
    $DebugChance2             (int)]-->
    <cue name="Start" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <check_value value="typeof event.param == datatype.table"/>
      </conditions>
      <actions>
        <set_value name="$OwnerGoal"                exact="event.param.$OwnerGoal"/>
        <set_value name="$Descriptor"               exact="event.param.$Descriptor"/>
        <set_value name="$OwnerStandbyShipsTable"   exact="@event.param.$OwnerStandbyShipsTable"/>
        <set_value name="$DesiredEndTime"           exact="event.param.$DesiredEndTime"/>
        <set_value name="$Faction"                  exact="$OwnerGoal.$Faction"/>
        <set_value name="$ShipStrengthTable"        exact="event.param.$ShipStrengthTable"/>
        <set_value name="$SubordinateStrengthTable" exact="event.param.$SubordinateStrengthTable"/>
        <set_value name="$DesiredShipStrength"      exact="event.param.$DesiredShipStrength"/>
        <set_value name="$FindShipSpaces"           exact="event.param.$FindShipSpaces"/>
        <set_value name="$Target"                   exact="event.param.$Target"/>
        <set_value name="$EntryPoint"               exact="event.param.$EntryPoint"/>
        <set_value name="$Position"                 exact="event.param.$Position"/>

        <!--***Debug***-->
        <set_value name="$DebugChance"              exact="@event.param.$DebugChance"/>
        <set_value name="$DebugChance2"             exact="@event.param.$DebugChance2"/>

        <do_if value="$DebugChance or $DebugChance2 or player.debugfilteractive.economy_verbose">
          <include_actions ref="GenerateDebugTextWithCueID"/>
          <!--curtime, output_id, goal_id, subgoal_id, object_name, object_idcode, sector_name, faction_id, enemy_faction_id-->
          <debug_text filter="economy_verbose" text="'#FL#;%1;Started;%2;%3;%4;%5;%6;%7;%8'.[player.age, $DebugGoalText, $DebugText, null, null, $Target.knownname, $Faction.id, @$OwnerGoal.$EnemyFaction.id]" context="false"/>
        </do_if>
        <do_else>
          <set_value name="$DebugText" exact="'(' + $Faction.id + ') Prepare staging area: ' + $EntryPoint + ' ' + $EntryPoint.class + ' (' + $EntryPoint.sector.knownname + ') - '"/>
        </do_else>
        <debug_text text="'triggering ' + $DebugText" chance="$DebugChance"/>

        <assert value="$FindShipSpaces.count" text="'No local areas defined to acquire ships to commandeer or order. Target: ' + $Target + ' ' + $Target.knownname + ' [Owen]'"/>

        <create_group groupname="$Ships"/>
        <create_list name="$RequestedShips"/>
        <set_value name="$EvaluationResult" exact="'unknown'"/>
        <set_value name="$EvaluationDelay" exact="1ms"/>
        <set_value name="$InStandby" exact="false"/>
        <set_value name="$AllowedShipRequests" exact="2"/>
        <set_value name="$StrengthTable" exact="table[]"/>
        <!--TODO @Owen make Overtime a parameter?-->
        <set_value name="$OverTime" exact="$DesiredEndTime + 10min"/>
        <set_value name="$ProtectRange" exact="10km"/>

        <!--This table is the primary way the faction goal accesses data from this subgoal. Some duplicated data, but better than attempting to retrieve variables directly from a cue-->
        <set_value name="$RegistryTable" exact="table[]"/>
        <set_value name="$RegistryTable.$Cue" exact="this"/>
        <set_value name="$RegistryTable.$StartTime" exact="player.age"/>
        <set_value name="$RegistryTable.$EvaluationResult" exact="$EvaluationResult"/>
        <set_value name="$RegistryTable.$DesiredShipStrength" exact="$DesiredShipStrength"/>
        <signal_cue_instantly cue="$OwnerGoal" param="['add_subgoal', $RegistryTable]"/>
      </actions>
      <cues>
        <cue name="Init" onfail="cancel">
          <conditions>
            <!--Some faction goal activity may cause them to remove their subgoals before they are finished initialising. $SetToShutdown prevents the subgoal from performing initialisation in that case.-->
            <check_value value="not @$SetToShutdown"/>
          </conditions>
          <actions>
            <set_value name="$RegistryTable.$GenerateReportCue" exact="Generate_Report"/>
            <set_value name="$RegistryTable.$UpdateSubgoalCue" exact="Update_Sub_Goal"/>
            <set_value name="$RegistryTable.$EvaluateShipStrengthCue" exact="Evaluate_Ship_Strength"/>
            <set_value name="$RegistryTable.$EvaluateCue" exact="Force_Evaluation"/>

            <include_actions ref="SetFindShipFocusSpace"/>
          </actions>
        </cue>

        <cue name="Generate_Report" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'SUBGOAL (' + $EvaluationResult + ') ' + $DebugText + 'Active Ships: ' + $Ships.count + ' Requested: ' + $RequestedShips.count" context="false"/>
            <do_if value="$Ships.count">
              <debug_text text="'Active ships '" context="false"/>
              <do_all exact="$Ships.count" counter="$i">
                <debug_text text="$Ships.{$i} + ' ' + $Ships.{$i}.knownname + ' ' + $Ships.{$i}.idcode" context="false"/>
              </do_all>
            </do_if>
            <do_if value="$RequestedShips.count">
              <debug_text text="'Requested ships '" context="false"/>
              <do_all exact="$RequestedShips.count" counter="$i">
                <debug_text text="$RequestedShips.{$i} + ' ' + $RequestedShips.{$i}.knownname + ' ' + $RequestedShips.{$i}.idcode" context="false"/>
              </do_all>
            </do_if>
          </actions>
        </cue>

        <!--event.param.{1} == update ID-->
        <cue name="Update_Sub_Goal" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="$DebugText + 'Update request: ' + event.param.{1}" chance="$DebugChance"/>
            <do_if value="event.param.{1} == 'cleanup'">
              <!--Clean up, including releasing all commandeered ships-->
              <signal_cue_instantly cue="Cleanup" param="[false]"/>
            </do_if>

            <do_elseif value="event.param.{1} == 'handoff'">
              <!--Clean up, but pass commandeered ships to Faction Goal-->
              <signal_cue_instantly cue="Cleanup" param="[true]"/>
            </do_elseif>

            <do_elseif value="event.param.{1} == 'standby'">
              <!--The subgoal does not activly commandeer or request ships but does not care about time.
              The subgoal should not be in this state for too long. The faction goal should either dismiss it or make use of it in the next state.-->
              <set_value name="$InStandby" exact="true"/>
            </do_elseif>

            <do_elseif value="event.param.{1} == 'reactivate'">
              <assert value="$InStandby" text="$DebugText + 'subgoal was not in standby when asked to reactivate [Owen]'" break="1"/>
              <set_value name="$InStandby" exact="false"/>
              <signal_cue_instantly cue="$OwnerGoal" param="['reactivate_subgoal', $RegistryTable]"/>
            </do_elseif>

            <do_else>
              <assert value="event.param.{1}" text="$DebugText + 'Unknown update request [Owen]'" break="1"/>
            </do_else>
          </actions>
        </cue>

        <!--Result saved to $RegistryTable.$ShipStrength-->
        <cue name="Evaluate_Ship_Strength" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--TODO @Owen split the strengths into ready-not ready?-->
            <clear_table table="$StrengthTable"/>
            <signal_cue_instantly cue="md.FactionLogic.EvaluateForceStrength" param="[namespace, $Ships, $ShipStrengthTable, $SubordinateStrengthTable, $StrengthTable]"/>
            <set_value name="$ForceStrength" exact="$EFS_Result"/>
            <signal_cue_instantly cue="md.FactionLogic.EvaluateForceStrength" param="[namespace, $RequestedShips, $ShipStrengthTable, $SubordinateStrengthTable, $StrengthTable]"/>
            <set_value name="$ForceStrength" exact="$EFS_Result" operation="add"/>
            <set_value name="$RegistryTable.$ShipStrength" exact="$ForceStrength"/>
          </actions>
        </cue>

        <cue name="Force_Evaluation" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$EvaluationDelay" exact="0s"/>
            <reset_cue cue="Evaluate"/>
          </actions>
        </cue>

        <library name="Validate_Requested_Ships">
          <actions>
            <do_all exact="$RequestedShips.count" counter="$i" reverse="true">
              <do_if value="not $RequestedShips.{$i}.isrealclass.ship">
                <assert value="false" text="'Requested ship is no longer valid. ID: ' + $RequestedShips.{$i} + ' - It should have been removed from this list by other means. [Owen]'" break="1"/>
                <signal_cue_instantly cue="Remove_Requested_Ship" param="$RequestedShips.{$i}"/>
              </do_if>
            </do_all>
          </actions>
        </library>

        <library name="SetFindShipFocusSpace">
          <actions>
            <set_value name="$FindShipFocusSpace" exact="null"/>
            <do_all exact="$FindShipSpaces.count" counter="$i">
              <do_if value="$EntryPoint.hascontext.{$FindShipSpaces.{$i}}">
                <set_value name="$FindShipFocusSpace" exact="$FindShipSpaces.{$i}"/>
                <break/>
              </do_if>
            </do_all>
          </actions>
        </library>

        <!--Result saved to $RegistryTable.$EvaluationResult
        - 'unknown'    (subgoal is either initialising or in an erronious state)
        - 'preparing'  (subgoal is working within its desired timeframe and is attempting to ready itself to perform its task)
        - 'overtime'   (subgoal is working past its desired timeframe but expects it can be ready to perform its task)
        - 'failed'     (subgoal was unable to perform its task and should be dismissed)
        - 'performing' (subgoal is in its desired state)-->
        <cue name="Evaluate">
          <delay exact="$EvaluationDelay"/>
          <actions>
            <set_value name="$OldResult" exact="$EvaluationResult"/>
            <set_value name="$EvaluationResult" exact="'unknown'"/>

            <include_actions ref="Validate_Requested_Ships"/>
            <set_value name="$ForceStrength" exact="0"/>
            <signal_cue_instantly cue="Evaluate_Ship_Strength" comment="returns $ForceStrength"/>

            <debug_text text="$DebugText + ' wants strength of ' + $DesiredShipStrength + ' currently ' + $EFS_Result" context="false" chance="$DebugChance2"/>
            <do_if value="not $InStandby and $ForceStrength lt $DesiredShipStrength">

              <!--TODO @Owen Request goal for a suitable ship which may be spared-->
              <do_if value="$FindShipSpaces.count">
                <!--Always search in the $FindShipFocusSpace first, if it exists-->
                <do_all exact="$FindShipSpaces.count" counter="$i">
                  <do_if value="not $FindShipFocusSpace">
                    <do_if value="$i == 1">
                      <!--If there is no FocusSpace, just shuffle all spaces on the first iteration-->
                      <shuffle_list list="$FindShipSpaces"/>
                    </do_if>
                    <set_value name="this.$FindSpace" exact="$FindShipSpaces.{$i}"/>
                  </do_if>
                  <do_elseif value="$i == 1">
                    <!--Use the FocusSpace on the first iteration, no need to shuffle yet-->
                    <set_value name="this.$FindSpace" exact="$FindShipFocusSpace"/>
                  </do_elseif>
                  <do_else>
                    <do_if value="$i == 2">
                      <!--No suitable ship found in the FocusSpace, shuffle the space list and iterate over them-->
                      <shuffle_list list="$FindShipSpaces"/>
                    </do_if>
                    <do_if value="$FindShipSpaces.{$i} == $FindShipFocusSpace">
                      <!--As the first iteration dealt with $FindShipFocusSpace, if found in this iteration, actually use the first element-->
                      <set_value name="this.$FindSpace" exact="$FindShipSpaces.{1}"/>
                    </do_if>
                    <do_else>
                      <set_value name="this.$FindSpace" exact="$FindShipSpaces.{$i}"/>
                    </do_else>
                  </do_else>
                  <find_ship_by_true_owner name="$PotentialShips" faction="$Faction" commandeerable="true" primarypurpose="purpose.fight" multiple="true" space="this.$FindSpace"/>

                  <set_value name="$NewShipCount" exact="0"/>
                  <shuffle_list list="$PotentialShips"/>
                  <do_all exact="$PotentialShips.count" counter="$k">
                    <set_value name="$Ship" exact="$PotentialShips.{$k}"/>
                    <add_to_group groupname="$Ships" object="$Ship"/>
                    <set_value name="$NewShipCount" operation="add"/>
                    <commandeer_object object="$Ship"/>

                    <signal_cue_instantly cue="md.FactionLogic.EvaluateForceStrength" param="[namespace, $Ship, $ShipStrengthTable, $SubordinateStrengthTable, $StrengthTable]"/>
                    <set_value name="$ForceStrength" operation="add" exact="$EFS_Result"/>
                    <set_value name="$RegistryTable.$ShipStrength" exact="$EFS_Result" operation="add"/>
                    <debug_text text="$DebugText + ' commandeered ' + $Ship.knownname + ' ' + $Ship + ' with strength ' + $EFS_Result + ' force strength is now: ' + $ForceStrength + ' - desired: '+ $DesiredShipStrength" context="false" chance="$DebugChance"/>

                    <signal_cue_instantly cue="Set_Ship_Order" param="$Ship"/>

                    <do_if value="$ForceStrength ge $DesiredShipStrength">
                      <break/>
                    </do_if>

                  </do_all>

                  <debug_text text="$DebugText + 'found ' + $NewShipCount + ' ships in space: ' + this.$FindSpace.knownname" context="false" chance="if $NewShipCount then $DebugChance2 else 0"/>

                  <!--secondary break out of the first loop-->
                  <do_if value="$ForceStrength ge $DesiredShipStrength">
                    <break/>
                  </do_if>
                </do_all>
              </do_if>

              <debug_text text="$DebugText + $Ships.count + ' ships with force strength of ' + $ForceStrength + ' out of wanted strength ' + $DesiredShipStrength" context="false" chance="$DebugChance2"/>

              <!--TODO @Owen instead of $AllowedShipRequests, maybe limit the requested ship strength? And treat the result of Get_Military_Jobs differently. Don't use .random-->
              <do_if value="$ForceStrength lt $DesiredShipStrength and $AllowedShipRequests gt $RequestedShips.count">
                <signal_cue_instantly cue="md.FactionLogic.Get_Military_Jobs" param="[namespace, $DesiredShipStrength - $ForceStrength, $Faction]"/>
                <debug_text text="$DebugText + $Suitable_Jobs.count + ' suitable jobs found'" context="false" chance="$DebugChance"/>
                <do_if value="$Suitable_Jobs.count">
                  <set_value name="$SelectedJob" exact="$Suitable_Jobs.random"/>
                  <set_value name="$JobMainZone" exact="$EntryPoint.zone"/>
                  <!--TODO @Owen, do we need a requester-->
                  <debug_text text="$DebugText + 'Requested job ship to be created. Job ' + $SelectedJob + '; Job zone: ' + $JobMainZone + ' ' + $JobMainZone.knownname" context="false" chance="$DebugChance"/>
                  <signal_cue_instantly cue="Request_Job_Ship" param="[$SelectedJob, $JobMainZone]"/>
                  <remove_value name="$SelectedJob"/>
                </do_if>
                <debug_text text="$DebugText + $RequestedShips.count + ' ships are currently requested'" context="false" chance="$DebugChance2"/>
              </do_if>
            </do_if>

            <set_value name="$ArrivedStrength" exact="0"/>
            <set_value name="$DistantStrength" exact="0"/>
            <set_value name="$RequestedShipStrength" exact="0"/>

            <!-- determine strength of ships at the staging area & not-at location (still underway) -->
            <create_list name="$ArrivedShips"/>
            <do_all exact="$Ships.count" counter="$i">
              <set_value name="$Ship" exact="$Ships.{$i}"/>
              <do_if value="$Ship.sector == $EntryPoint.sector and $Ship.distanceto.[$EntryPoint.zone, $Position] le $ProtectRange + 5km">
                <set_value name="$ArrivedStrength" exact="$StrengthTable.{$Ship}" operation="add"/>
                <append_to_list name="$ArrivedShips" exact="$Ship"/>
              </do_if>
              <do_else>
                <set_value name="$DistantStrength" exact="$StrengthTable.{$Ship}" operation="add"/>
              </do_else>
            </do_all>

            <!-- calculate combined strength of all ships (= $ArrivedStrength + DistantStrength?) -->
            <do_all exact="$RequestedShips.count" counter="$i">
              <set_value name="$RequestedShipStrength" exact="$StrengthTable.{$RequestedShips.{$i}}" operation="add"/>
            </do_all>

            <do_if value="$ArrivedStrength ge $DesiredShipStrength">
              <set_value name="$EvaluationResult" exact="'performing'"/>
            </do_if>
            <do_elseif value="not $DesiredEndTime">
              <set_value name="$EvaluationResult" exact="'preparing'"/>
            </do_elseif>
            <do_elseif value="not $InStandby and player.age gt $DesiredEndTime">
              <!--Over the desired time-->
              <do_if value="not $OverTime or player.age gt $OverTime">
                <set_value name="$EvaluationResult" exact="'failed'"/>
              </do_if>
              <do_elseif value="$ArrivedStrength + $DistantStrength ge $DesiredShipStrength">
                <!--Give the ships time to get into position-->
                <set_value name="$EvaluationResult" exact="'overtime'"/>
              </do_elseif>
              <do_else>
                <!--Unlikely that the non-existant ships will make it in time-->
                <set_value name="$EvaluationResult" exact="'failed'"/>
              </do_else>
            </do_elseif>
            <do_else>
              <set_value name="$EvaluationResult" exact="'preparing'"/>
            </do_else>

            <debug_text text="$DebugText + 'Evaluation result changed from ' + $OldResult + ' to ' + $EvaluationResult" context="false" chance="if $EvaluationResult == $OldResult then 0 else $DebugChance"/>

            <set_value name="$RegistryTable.$EvaluationResult" exact="$EvaluationResult"/>
            <assert value="$EvaluationResult != 'unknown'" text="'Subgoal is in an invalid state [Owen]'"/>
            <set_value name="$EvaluationDelay" min="10s" max="20s"/>
            <reset_cue cue="Evaluate"/>
          </actions>
        </cue>

        <!--Param: [$JobID, $JobMainZone] Request the job-engine to build a new ship for us, when completed commandeer and give order -->
        <cue name="Request_Job_Ship" instantiate="true" version="2">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <request_job_ship name="this.$Requested_Job_Ship" job="event.param.{1}" requester="$EntryPoint" zone="event.param.{2}"/>
            <do_if value="this.$Requested_Job_Ship">
              <debug_text filter="economy_verbose" text="'#FLS#;%1;PrepareStagingArea_RequestShip;%2;%3;%4;%5;%6;%7;%8'.[player.age, [$OwnerGoal.static], this.$Requested_Job_Ship.knownname, this.$Requested_Job_Ship, this.$Requested_Job_Ship.idcode, $Target.knownname, $Faction.id, null]" context="false"/>
              <debug_text text="$DebugText + ' Requested ship ' + this.$Requested_Job_Ship + ' ' + this.$Requested_Job_Ship.knownname + ' ordered'" context="false" chance="$DebugChance"/>
              <append_to_list name="$RequestedShips" exact="this.$Requested_Job_Ship"/>
              <signal_cue_instantly cue="md.FactionLogic.EvaluateForceStrength" param="[namespace, this.$Requested_Job_Ship, $ShipStrengthTable, $SubordinateStrengthTable, $StrengthTable]" comment="returns namespace.$EFS_Result"/>
              <set_value name="this.$ShipStrength" exact="$EFS_Result"/>
              <set_value name="$ForceStrength" operation="add" exact="$EFS_Result"/>
              <set_value name="$RegistryTable.$ShipStrength" exact="$EFS_Result" operation="add"/>
            </do_if>
            <do_else>
              <cancel_cue cue="Request_Job_Ship"/>
            </do_else>
          </actions>
          <patch sinceversion="2">
            <set_value name="this.$ShipStrength" exact="0"/>
          </patch>
          <cues>
            <!-- Called when a requested jobship finished construction -->
            <cue name="Requested_Job_Ship_Built">
              <conditions>
                <event_object_signalled object="parent.$Requested_Job_Ship" param="'build.shiptrader'" param2="'requested_ship_built'"/>
              </conditions>
              <actions>
                <debug_text filter="economy_verbose" text="'#FLS#;%1;PrepareStagingArea_ShipBuilt;%2;%3;%4;%5;%6;%7;%8'.[player.age, [$OwnerGoal.static], parent.$Requested_Job_Ship.knownname, parent.$Requested_Job_Ship, parent.$Requested_Job_Ship.idcode, $Target.knownname, $Faction.id, parent.$Requested_Job_Ship.sector.knownname]" context="false"/>
                <debug_text text="$DebugText + ' Requested ship ' + parent.$Requested_Job_Ship + ' ' + parent.$Requested_Job_Ship.knownname + ' built'" context="false" chance="$DebugChance"/>
                <add_to_group groupname="$Ships" object="parent.$Requested_Job_Ship"/>
                <remove_value name="$RequestedShips.{$RequestedShips.indexof.{parent.$Requested_Job_Ship}}"/>
                <set_requested_job_ship_timeout ship="parent.$Requested_Job_Ship" timeout="player.age + 1h"/>
                <commandeer_object object="parent.$Requested_Job_Ship"/>
                <signal_cue_instantly cue="Set_Ship_Order" param="parent.$Requested_Job_Ship"/>
                <cancel_cue cue="Request_Job_Ship"/>
              </actions>
            </cue>
            <!-- Called when a requested jobship was destroyed (while being built in shipyard) -->
            <cue name="Requested_Job_Ship_Destroyed">
              <conditions>
                <event_object_destroyed object="parent.$Requested_Job_Ship"/>
              </conditions>
              <actions>
                <set_value name="$ForceStrength" operation="subtract" exact="parent.$ShipStrength"/>
                <set_value name="$RegistryTable.$ShipStrength" exact="parent.$ShipStrength" operation="add"/>
                <remove_value name="$RequestedShips.{$RequestedShips.indexof.{parent.$Requested_Job_Ship}}"/>
                <cancel_cue cue="Request_Job_Ship"/>
              </actions>
            </cue>
            <!-- Called when jobship-order was cancelled -->
            <cue name="Requested_Job_Ship_Unregistered">
              <conditions>
                <event_cue_signalled cue="Remove_Requested_Ship"/>
                <check_value value="event.param == parent.$Requested_Job_Ship"/>
              </conditions>
              <actions>
                <debug_text filter="economy_verbose" text="'#FLS#;%1;PrepareStagingArea_RemoveRequest;%2;%3;%4;%5;%6;%7;%8'.[player.age, [$OwnerGoal.static], parent.$Requested_Job_Ship.knownname, parent.$Requested_Job_Ship, parent.$Requested_Job_Ship.idcode, $Target.knownname, $Faction.id, null]" context="false"/>
                <cancel_cue cue="Request_Job_Ship"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <!-- Param: [event.param == ship] Cancel request for construction of JobShip -->
        <cue name="Remove_Requested_Ship">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <remove_value name="$RequestedShips.{$RequestedShips.indexof.{event.param}}"/>
          </actions>
        </cue>

        <!--Param: $OrderShip-->
        <cue name="Set_Ship_Order" instantiate="true">
          <conditions>
            <event_cue_signalled/>
            <check_value value="event.param.exists"/>
          </conditions>
          <actions>
            <!--TODO @Owen fallback orders-->
            <set_value name="$OrderShip" exact="event.param"/>
            <debug_text text="$DebugText + 'Attempting to find order for ' + $OrderShip + ' ' + $OrderShip.knownname" context="false" chance="$DebugChance2"/>

            <!--TODO @Owen - improve - use more orders at different stages?-->

            <!--TODO @Owen Add a smaller radius in which to move but still react to enemies at distance?-->
            <create_order id="'ProtectPosition'" object="$OrderShip" default="true">
              <param name="destination" value="[$EntryPoint.zone, $Position]"/>
              <param name="radius" value="$ProtectRange"/>
            </create_order>
          </actions>
        </cue>

        <cue name="Ship_Changed_Owner" instantiate="true">
          <conditions>
            <check_any>
              <event_object_changed_owner group="$Ships"/>
            </check_any>
          </conditions>
          <actions>
            <release_commandeered_object object="event.object"/>
            <remove_from_group group="$Ships" object="event.object"/>
          </actions>
        </cue>

        <!--event.param.{1} = (bool) Hand off commandeered ships to Faction Goal?-->
        <cue name="Cleanup">
          <conditions>
            <check_any>
              <event_cue_cancelled cue="$OwnerGoal"/>
              <event_cue_signalled/>
              <!-- NOTE: if other conditions are added, check whether $OwnerGoal needs to be signalled with remove_subgoal to avoid dead entries in the $RegistryTable! -->
            </check_any>
          </conditions>
          <actions>
            <do_if value="event.name == 'event_cue_signalled' and @event.param.{1} and $OwnerStandbyShipsTable and $OwnerGoal.exists">
              <!--This list ref is passed to the goal when attempting to add a standby ship to it. If successful, the element at index 1 will be set to true. If not, release the ship for safety.-->
              <set_value name="this.$ResultFeedbackList" exact="[false]"/>
              <do_all exact="$Ships.count" counter="$i">
                <signal_cue_instantly cue="$OwnerGoal" param="['add_standby_ship', $Ships.{$i}, this.$ResultFeedbackList]"/>
                <do_if value="this.$ResultFeedbackList.{1}">
                  <set_value name="this.$ResultFeedbackList.{1}" exact="false"/>
                </do_if>
                <do_else>
                  <assert value="this.$ResultFeedbackList.{1}" text="'Attempted to add ship as a faction goal standby ship but it was rejected [Owen]'" break="1"/>
                  <release_commandeered_object object="$Ships.{$i}"/>
                </do_else>
              </do_all>
            </do_if>
            <do_else>
              <do_all exact="$Ships.count" counter="$i">
                <debug_text text="$DebugText + '%1 resuming prior orders.'.[$Ships.{$i}.knownname]" context="false" chance="$DebugChance"/>
                <release_commandeered_object object="$Ships.{$i}"/>
              </do_all>
            </do_else>

            <do_all exact="$RequestedShips.count" counter="$i">
              <!--Requested ship being built-->
              <debug_text text="$DebugText + 'Removing requested ship ' + $RequestedShips.{$i} + ' ' + $RequestedShips.{$i}.knownname" context="false" chance="$DebugChance"/>
              <do_if value="$RequestedShips.{$i}.exists">
                <!--TODO @Owen - recycle?-->
                <set_requested_job_ship_timeout ship="$RequestedShips.{$i}" timeout="player.age"/>
              </do_if>
              <do_else>
                <remove_job_ship_request ship="$RequestedShips.{$i}"/>
              </do_else>
            </do_all>

            <do_if value="player.debugfilteractive.economy_verbose">
              <include_actions ref="GenerateDebugTextWithCueID"/>
              <!--curtime, output_id, goal_id, subgoal_id, object_name, object_idcode, sector_name, faction_id, enemy_faction_id-->
              <debug_text filter="economy_verbose" text="'#FL#;%1;Cleanup;%2;%3;%4;%5;%6;%7;%8'.[player.age, $DebugGoalText, $DebugText, null, null, $Target.knownname, $Faction.id, @$OwnerGoal.$EnemyFaction.id]" context="false"/>
            </do_if>

            <signal_cue_instantly cue="$OwnerGoal" param="['remove_subgoal', $RegistryTable]"/>
            <cancel_cue cue="Start"/>
          </actions>
        </cue>
      </cues>
    </cue>

    <library name="GenerateDebugTextWithCueID">
      <actions>
        <!--Simply want the cue instance ID to help differentiate in debug texts. Remove the cue path.-->
        <set_value name="$CueInstanceString" exact="'' + [namespace]"/>
        <substitute_text source="$CueInstanceString" text="$DebugID">
          <replace string="'md.'" with="''"/>
          <replace string="'.Start'" with="''"/>
          <replace string="'['" with="''"/>
          <replace string="']'" with="''"/>
        </substitute_text>
        <set_value name="$DebugText" exact="'(' + $Faction.id + ') ' + $DebugID + ' in: ' + $Target.knownname + ' ' + $Target"/>
        <remove_value name="$DebugID"/>

        <!--Also get the cue ID of the goal-->
        <set_value name="$CueInstanceString" exact="'' + [$OwnerGoal]"/>
        <substitute_text source="$CueInstanceString" text="$DebugGoalText">
          <replace string="'md.'" with="''"/>
          <replace string="'.Start'" with="''"/>
          <replace string="'['" with="''"/>
          <replace string="']'" with="''"/>
        </substitute_text>
        <remove_value name="$CueInstanceString"/>
      </actions>
    </library>
  </cues>
</mdscript>