<?xml version="1.0" encoding="utf-8"?>
<mdscript name="Setup" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>

    <cue name="Debugging">
      <actions>
        <!--Activate RML debugging-->
        <set_value name="md.$RML_Debugging" exact="1"/>
        <set_value name="md.$DebuggingNotifications" exact="0" comment="disabled by default"/>
      </actions>
    </cue>

    <cue name="DebuggingNotifications">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="md.$DebuggingNotifications" exact="1"/>
      </actions>
    </cue>

    <cue name="GameLoaded" instantiate="true">
      <conditions>
        <event_game_loaded />
      </conditions>
      <actions>
        <set_value name="stat.savegames_loaded" operation="add" />
        <signal_cue cue="Start" check="false" />
      </actions>
    </cue>

    <!--
    This cue sets up global variables that can be used by other MD scripts. 
    To wait for the setup to be complete, use the following condition:
        <event_cue_signalled cue="md.Setup.Start" />
    Unlike md.Setup.GameStart, the signal is also sent when loading a savegame,
    so also newly added cues can get the signal.
    -->
    <cue name="Start" version="12">
      <actions>
        <create_group groupname="global.$PlayerContainerGroup" />
        <create_group groupname="global.$PlayerControlledGroup" />
        <create_group groupname="global.$PlayerOccupiedShipGroup" />

        <set_value name="$RandomOfferLocations" exact="true"/>
        <!-- $list.{md.$RandomIdx} will be either $list.{1} or $list.random, depending on $RandomOfferLocations -->
        <set_value name="md.$RandomIdx" exact="1"/>
        <do_if value="$RandomOfferLocations">
          <set_value name="md.$RandomIdx" exact="'random'"/>
        </do_if>
        <set_value name="md.$MaxMissionOfferDistance" exact="60km"/>
        <set_value name="md.$InteractiveMissionOfferTimeout" exact="10s"/>
        <!-- Init player money stat -->
        <set_value name="stat.money_player" exact="player.money / 1Cr" />

        <create_list name="md.$TradeMissionStations"/>

        <!--TODO @Owen #EntityTypes Hiring fees based on skill?-->
        <!-- Hire Fee Entry: [entitytype, minfee, maxfee] -->
        <set_value name="md.$HireFees" exact="
            [
                [entitytype.officer, 11000, 33000]
            ]
        "/>

        <get_factions_by_tag result="global.$smugglercoverfactions" tag="tag.economic"/>
        <remove_from_list name="global.$smugglercoverfactions" list="[faction.hatikvah, faction.scaleplate, faction.alliance, faction.buccaneers, faction.trinity]" comment="honor among thieves. does not include the minor factions."/>

        <!-- Set up the ware lists that can be used for automatic station generation at the beginning of the game -->
        <set_value name="md.$SystemTimeAtGamestart" exact="player.systemtime.{'%Y-%m-%d_%H-%M-%S'}" />
        <set_value name="md.$EquipmentTable" exact="table[]" />
        <get_ware_definition result="md.$EquipmentTable.{faction.argon}" faction="faction.argon" flags="equipment" />
        <get_ware_definition result="md.$EquipmentTable.{faction.antigone}" faction="faction.antigone" flags="equipment" />
        <get_ware_definition result="md.$EquipmentTable.{faction.hatikvah}" faction="faction.hatikvah" flags="equipment" />
        <get_ware_definition result="md.$EquipmentTable.{faction.paranid}" faction="faction.paranid" flags="equipment" />
        <get_ware_definition result="md.$EquipmentTable.{faction.holyorder}" faction="faction.holyorder" flags="equipment" />
        <get_ware_definition result="md.$EquipmentTable.{faction.alliance}" faction="faction.alliance" flags="equipment" />
        <get_ware_definition result="md.$EquipmentTable.{faction.teladi}" faction="faction.teladi" flags="equipment" />
        <get_ware_definition result="md.$EquipmentTable.{faction.ministry}" faction="faction.ministry" flags="equipment" />
        <get_ware_definition result="md.$EquipmentTable.{faction.scaleplate}" faction="faction.scaleplate" flags="equipment" />
        <get_ware_definition result="md.$EquipmentTable.{faction.xenon}" faction="faction.xenon" flags="equipment" />
        <get_ware_definition result="md.$EquipmentTable.{faction.trinity}" faction="faction.trinity" flags="equipment" />
        <get_ware_definition result="md.$EquipmentTable.{faction.buccaneers}" faction="faction.buccaneers" flags="equipment" />

        <!-- setup a list of missiongroups to track to which ones the player is subscribed -->
        <create_list name="md.$SubscribedMissionGroups"/>

        <!-- Set up a list of persistant characters whose macros are already present in the universe -->
        <set_value name="md.$PersistentCharacters" exact="table[]"/>

        <!-- Set up a table to track faction HQs throughout the game -->
        <set_value name="md.$FactionData" exact="table[]" />
        <set_value name="md.$FactionData.{faction.argon}" exact="table[]" />
        <set_value name="md.$FactionData.{faction.antigone}" exact="table[]" />
        <set_value name="md.$FactionData.{faction.hatikvah}" exact="table[]" />
        <set_value name="md.$FactionData.{faction.paranid}" exact="table[]" />
        <set_value name="md.$FactionData.{faction.holyorder}" exact="table[]" />
        <set_value name="md.$FactionData.{faction.alliance}" exact="table[]" />
        <set_value name="md.$FactionData.{faction.teladi}" exact="table[]" />
        <set_value name="md.$FactionData.{faction.ministry}" exact="table[]" />
        <set_value name="md.$FactionData.{faction.scaleplate}" exact="table[]" />
        <set_value name="md.$FactionData.{faction.trinity}" exact="table[]" />
        <set_value name="md.$FactionData.{faction.buccaneers}" exact="table[]" />

        <!-- List of factions (DLC's can append dlc-specific factions) -->
        <do_if value="not md.$SplitFactions?">
          <set_value name="md.$SplitFactions" exact="[]" />
        </do_if>
        <do_if value="not md.$SplitPatriarchyFactions?">
          <set_value name="md.$SplitPatriarchyFactions" exact="[]" />
        </do_if>
        <do_if value="not md.$SplitCurbFactions?">
          <set_value name="md.$SplitCurbFactions" exact="[]" />
        </do_if>
        <do_if value="not md.$TerranFactions?">
          <set_value name="md.$TerranFactions" exact="[]" />
        </do_if>
        <do_if value="not md.$DLCPirateFactions?">
          <set_value name="md.$DLCPirateFactions" exact="[]" />
        </do_if>
      </actions>
      <patch sinceversion="2">
        <find_ship name="$hatikvahplunderships" space="player.galaxy" checkoperational="true" trueowner="faction.hatikvah" job="'dummy_job'" multiple="true" recursive="true"/>
        <debug_text text="'1: found %s plunder ships'.[$hatikvahplunderships.count]" chance="0"/>

        <do_all exact="$hatikvahplunderships.count" counter="$i">
          <do_if value="$hatikvahplunderships.{$i}.attention ge attention.visible">
            <set_value name="$donotdestroy"/>
          </do_if>
          <do_elseif value="$hatikvahplunderships.{$i}.boardingoperations.count">
            <set_value name="$donotdestroy"/>
          </do_elseif>

          <do_if value="not $donotdestroy?">
            <debug_text text="'destroying %s %s %s'.[$hatikvahplunderships.{$i}.idcode, $hatikvahplunderships.{$i}.knownname, $hatikvahplunderships.{$i}]" chance="0"/>
            <destroy_object object="$hatikvahplunderships.{$i}" explosion="false"/>
          </do_if>
          <do_else>
            <signal_objects object="$hatikvahplunderships.{$i}" param="'LoseCover'" param2="false"/>
            <set_owner object="$hatikvahplunderships.{$i}" faction="faction.scaleplate" overridenpc="true"/>
            <debug_text text="'handing %s %s %s over to %s'.[$hatikvahplunderships.{$i}.idcode, $hatikvahplunderships.{$i}.knownname, $hatikvahplunderships.{$i}, $hatikvahplunderships.{$i}.trueowner]" chance="0"/>
            <remove_value name="$donotdestroy"/>
          </do_else>
        </do_all>

        <remove_value name="$hatikvahplunderships"/>
      </patch>
      <patch sinceversion="3">
        <find_ship name="$coveredplayerships" space="player.galaxy" trueowner="faction.player" multiple="true" recursive="true">
          <match coverowner="null" negate="true"/>
        </find_ship>
        <do_all exact="$coveredplayerships.count" counter="$i">
          <debug_text text="'PATCH: player-owned ship %s %s %s currently under cover. uncovering.'.[$playerships.{$i}.idcode, $playerships.{$i}.knownname, $playerships.{$i}]" filter="savegame"/>
          <signal_objects object="$playerships.{$i}" param="'LoseCover'"/>
        </do_all>
        <do_if value="player.occupiedship">
          <!-- coverowner of player.occupiedship is always null, but we need to clean up the Cover instance if it has one. -->
          <signal_objects object="player.occupiedship" param="'LoseCover'"/>
        </do_if>

        <find_ship name="$coveredplayerships" space="player.galaxy" trueowner="faction.player" multiple="true" recursive="true">
          <match coverowner="null" negate="true"/>
        </find_ship>
        <debug_text text="'POST_PATCH: found %s player-owned ships currently under cover.'.[$coveredplayerships.count]" filter="savegame"/>

        <remove_value name="$coveredplayerships"/>
      </patch>
      <patch sinceversion="4">
        <find_ship name="$playerminers" space="player.galaxy" checkoperational="true" trueowner="faction.player" multiple="true" recursive="true"/>
        <do_all exact="$playerminers.count" counter="$i">
          <do_if value="@$playerminers.{$i}.defaultorder.id == 'MiningRoutine' and not @$playerminers.{$i}.commander.isclass.station">
            <set_value name="$defaultorder" exact="$playerminers.{$i}.defaultorder"/>
            <do_if value="@$playerminers.{$i}.pilot.combinedskill ge 80">
              <debug_text text="'PATCH: setting %s %s %s %s to expert automine.'.[$playerminers.{$i}.class, $playerminers.{$i}.idcode, $playerminers.{$i}.knownname, $playerminers.{$i}]" filter="savegame"/>
              <create_order object="$playerminers.{$i}" id="'MiningRoutine_Expert'" default="true">
                <param name="warebasket" value="$defaultorder.$warebasket"/>
                <param name="range" value="$defaultorder.$range"/>
                <param name="minbuy" value="$defaultorder.$minbuy"/>
                <param name="maxbuy" value="$defaultorder.$maxbuy"/>
                <param name="minsell" value="$defaultorder.$minsell"/>
                <param name="maxsell" value="$defaultorder.$maxsell"/>
                <param name="debugchance" value="$defaultorder.$debugchance"/>
                <param name="debugchance2" value="$defaultorder.$debugchance2"/>
              </create_order>
            </do_if>
            <do_elseif value="@$playerminers.{$i}.pilot.combinedskill ge 60">
              <debug_text text="'PATCH: setting %s %s %s %s to advanced automine.'.[$playerminers.{$i}.class, $playerminers.{$i}.idcode, $playerminers.{$i}.knownname, $playerminers.{$i}]" filter="savegame"/>
              <create_order object="$playerminers.{$i}" id="'MiningRoutine_Advanced'" default="true">
                <param name="warebasket" value="$defaultorder.$warebasket"/>
                <param name="range" value="$defaultorder.$range"/>
                <param name="minbuy" value="$defaultorder.$minbuy"/>
                <param name="maxbuy" value="$defaultorder.$maxbuy"/>
                <param name="minsell" value="$defaultorder.$minsell"/>
                <param name="maxsell" value="$defaultorder.$maxsell"/>
                <param name="debugchance" value="$defaultorder.$debugchance"/>
                <param name="debugchance2" value="$defaultorder.$debugchance2"/>
              </create_order>
            </do_elseif>
            <do_elseif value="@$playerminers.{$i}.pilot">
              <set_value name="$refsector" exact="@$playerminers.{$i}.sector"/>
              <do_if value="not $refsector and $playerminers.{$i}.zone.issuperhighway and $playerminers.{$i}.zone.destination and $playerminers.{$i}.zone.destination.sector">
                <set_value name="$refsector" exact="$playerminers.{$i}.zone.destination.sector"/>
              </do_if>

              <!-- fallback in case no reasonable ware can be found -->
              <set_value name="$locbasket" exact="$defaultorder.$warebasket.random"/>
              <do_if value="$refsector.exists">
                <do_all exact="$defaultorder.$warebasket.count" counter="$j">
                  <find_closest_resource ware="$defaultorder.$warebasket.{$j}" refobject="$playerminers.{$i}" sector="$resourcesector" position="$resourcepos"/>
                  <do_if value="$resourcesector.exists and ($refsector == $resourcesector)">
                    <set_value name="$locbasket" exact="$defaultorder.$warebasket.{$j}"/>
                    <break/>
                  </do_if>
                </do_all>
              </do_if>

              <debug_text text="'PATCH: setting %s %s %s %s to basic automine, harvesting %s.'.[$playerminers.{$i}.class, $playerminers.{$i}.idcode, $playerminers.{$i}.knownname, $playerminers.{$i}, $locbasket]" filter="savegame"/>
              <create_order object="$playerminers.{$i}" id="'MiningRoutine_Basic'" default="true">
                <param name="warebasket" value="$locbasket"/>
                <param name="range" value="$refsector"/>
                <param name="minbuy" value="0"/>
                <param name="maxbuy" value="0"/>
                <param name="minsell" value="0"/>
                <param name="maxsell" value="0"/>
                <param name="debugchance" value="$defaultorder.$debugchance"/>
                <param name="debugchance2" value="$defaultorder.$debugchance2"/>
              </create_order>
              <remove_value name="$locbasket"/>
              <remove_value name="$refsector"/>
              <remove_value name="$resourcesector"/>
              <remove_value name="$resourcepos"/>
            </do_elseif>
            <remove_value name="$defaultorder"/>
          </do_if>
        </do_all>
        <remove_value name="$playerminers"/>
      </patch>
      <patch sinceversion="5">
        <create_list name="md.$SubscribedMissionGroups"/>
      </patch>
      <patch sinceversion="6">
        <find_ship name="$allships" space="player.galaxy" multiple="true"/>
        <do_all exact="$allships.count" counter="$i">
          <do_if value="$allships.{$i}.isoperational and @$allships.{$i}.defaultorder.id == 'Recon' and $allships.{$i}.defaultorder.$police">
            <debug_text text="'PATCH: changing default order of %s %s %s %s to Police.'.[$allships.{$i}.class, @$allships.{$i}.idcode, @$allships.{$i}.knownname, $allships.{$i}]" filter="savegame"/>
            <set_value name="$currentdefaultorder" exact="$allships.{$i}.defaultorder"/>
            <create_order object="$allships.{$i}" id="'Police'" default="true">
              <param name="targetspace" value="$currentdefaultorder.$targetspace"/>
              <param name="hq" value="$currentdefaultorder.$hq"/>
              <param name="targetclasses" value="$currentdefaultorder.$targetclasses"/>
              <param name="targetpurposes" value="$currentdefaultorder.$targetpurposes"/>
              <param name="debugchance" value="$currentdefaultorder.$debugchance"/>
            </create_order>
            <remove_value name="$currentdefaultorder"/>
          </do_if>
        </do_all>
        <remove_value name="$allships"/>
      </patch>
      <patch sinceversion="7">
        <debug_text text="'Changing global MD list md.$PersistentCharacters ' + md.$PersistentCharacters + ' to a table'" filter="savegame"/>
        <set_value name="md.$PersistentCharacters" exact="table[]"/>
        <do_if value="md.X4Ep1_Mentor_Subscriptions.Start.$Boron_Mentor?">
          <set_value name="md.$PersistentCharacters.$BosoTa" exact="md.X4Ep1_Mentor_Subscriptions.Start.$Boron_Mentor"/>
          <debug_text text="'Adding Boso Ta to the persistent character table: ' + md.$PersistentCharacters" filter="savegame"/>
        </do_if>
      </patch>
      <patch sinceversion="8">
        <get_factions_by_tag result="global.$smugglercoverfactions" tag="tag.economic"/>
        <remove_from_list name="global.$smugglercoverfactions" list="[faction.hatikvah, faction.scaleplate, faction.alliance, faction.buccaneers, faction.trinity]" comment="honor among thieves. does not include the minor factions."/>
      </patch>
      <patch sinceversion="9">
        <set_value name="md.$SplitFactions" exact="[]" />
        <set_value name="md.$TerranFactions" exact="[]" />
      </patch>
      <patch sinceversion="10">
        <set_value name="md.$SplitPatriarchyFactions" exact="[]" />
        <set_value name="md.$SplitCurbFactions" exact="[]" />
      </patch>
      <patch sinceversion="11">
        <get_ware_definition result="md.$EquipmentTable.{faction.trinity}" faction="faction.trinity" flags="equipment" />
        <get_ware_definition result="md.$EquipmentTable.{faction.buccaneers}" faction="faction.buccaneers" flags="equipment" />
        <set_value name="md.$FactionData.{faction.trinity}" exact="table[]" />
        <set_value name="md.$FactionData.{faction.buccaneers}" exact="table[]" />
      </patch>
      <patch sinceversion="12">
        <set_value name="md.$DLCPirateFactions" exact="[]" />
      </patch>
      <cues>
        <!-- Send a signal to interested cues at game start: Only if this is a new game, not when resetting the MD -->
        <!-- Use the following condition: -->
        <!-- <event_cue_signalled cue="md.Setup.GameStart" /> -->
        <cue name="GameStart">
          <conditions>
            <!-- This can only run after the player was connected into the universe! -->
            <event_game_started/>
          </conditions>
          <actions>
            <do_if value="player.container">
              <add_to_group groupname="global.$PlayerContainerGroup" object="player.container" />
              <do_if value="player.container.isplayerowned and player.container.isclass.ship and not player.container.isclass.spacesuit">
                <set_value name="player.entity.$PlayerTaxi" exact="player.container"/>
              </do_if>
            </do_if>
            <do_if value="player.controlled">
              <add_to_group groupname="global.$PlayerControlledGroup" object="player.controlled" />
            </do_if>
            <do_if value="player.occupiedship">
              <add_to_group groupname="global.$PlayerOccupiedShipGroup" object="player.occupiedship" />
            </do_if>
            <signal_cue cue="this" check="false" />
            <signal_cue cue="Start" check="false" />
          </actions>
          <cues>
            <cue name="PlayerObjectChanged" instantiate="true">
              <conditions>
                <!-- Assumptions:
              1. Player is always in a container
              2. Player is always in a room
              3. A room always belongs to the same container
            -->
                <event_object_changed_room object="player.entity" />
                <check_value value="player.container != global.$PlayerContainerGroup.{1}" />
              </conditions>
              <actions>
                <!-- <debug_text text="'player.container = %s (%s)'.[player.container, player.container.name]" /> -->
                <clear_group group="global.$PlayerContainerGroup" />
                <add_to_group groupname="global.$PlayerContainerGroup" object="player.container" />
                <do_if value="player.container.isplayerowned and player.container.isclass.ship and not player.container.isclass.spacesuit">
                  <set_value name="player.entity.$PlayerTaxi" exact="player.container"/>
                </do_if>
              </actions>
            </cue>

            <cue name="PlayerControlledChanged" instantiate="true">
              <conditions>
                <check_any>
                  <!-- Note: Event object can be either the controlled object or the control entity -->
                  <event_control_entity_added object="player.entity" />
                  <event_control_entity_removed object="player.entity" />
                </check_any>
              </conditions>
              <actions>
                <!-- <debug_text text="'player.controlled = %s (%s)'.[player.controlled, @player.controlled.name]" /> -->
                <clear_group group="global.$PlayerControlledGroup" />
                <clear_group group="global.$PlayerOccupiedShipGroup" />
                <do_if value="event.name == 'event_control_entity_removed'">
                  <set_value name="global.$Time_PlayerStoppedControl" exact="player.age"/>
                </do_if>
                <!-- Player occupied ship is valid if and only if player is controlling something -->
                <do_if value="player.controlled">
                  <add_to_group groupname="global.$PlayerControlledGroup" object="player.controlled" />
                  <add_to_group groupname="global.$PlayerOccupiedShipGroup" object="player.occupiedship" />
                  <do_if value="player.occupiedship != @global.$LastPlayerShip">
                    <do_if value="not player.occupiedship.isclass.spacesuit">
                      <remove_value name="global.$Time_PlayerStoppedControl"/>
                      <do_if value="@global.$LastPlayerShip.isoperational">
                        <debug_text text="'signal to proceed sent to %s %s'.[global.$LastPlayerShip.knownname, global.$LastPlayerShip]" chance="0"/>
                        <signal_objects object="global.$LastPlayerShip" param="'playerownedship_proceed'"/>
                        <remove_value name="global.$WaitForSignalID"/>
                      </do_if>
                      <set_value name="global.$LastPlayerShip" exact="player.occupiedship"/>
                    </do_if>
                  </do_if>
                  <do_elseif value="global.$WaitForSignalID?">
                    <debug_text text="'player retaking control of %s %s %s. cancelling WaitForSignal'.[player.occupiedship.idcode, player.occupiedship.knownname, player.occupiedship]" chance="0"/>
                    <cancel_order order="global.$WaitForSignalID"/>
                    <remove_value name="global.$WaitForSignalID"/>
                  </do_elseif>
                </do_if>
                <do_if value="event.name == 'event_control_entity_removed' and @event.object.order.state == orderstate.critical">
                  <debug_text text="'Player stops controlling %s %s while ship has an order in critical state! order=%s'.[event.object, event.object.name, event.object.order.id]" filter="error" />
                </do_if>
              </actions>
            </cue>
          </cues>
        </cue>

      </cues>
    </cue>

    <cue name="EnableVentures">
      <conditions>
        <event_cue_signalled cue="md.Setup.Start"/>
      </conditions>
      <actions>
        <add_research ware="ware.research_module_venture"/>
        <add_blueprints wares="[ware.module_gen_conn_venturerbase_01, ware.module_gen_conn_venturerbase_02, ware.module_gen_conn_venturerbase_03, ware.module_gen_conn_venturercross_01, ware.module_gen_conn_venturervertical_01, ware.module_gen_conn_venturervertical_02, ware.module_gen_dock_m_venturer_01, ware.module_gen_ventureplatform_cross_01]"/>
      </actions>
    </cue>
  </cues>
</mdscript>
