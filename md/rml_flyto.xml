<?xml version="1.0" encoding="utf-8"?>
<mdscript name="RML_FlyTo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>

    <!--
    $feedbackvalue:
    -103: MissionCue not defined
    -102: EndSignalCue is not defined while EndOnCompletion is true
    -101: Target does not exist on start
    -100: Undefined failure. Defaulted to -100
    -1: Target destroyed
    1: Destination reached
    
   -->
    
    <library name="FlyTo" namespace="this" version="3">
      <params>
        <param name="EndSignalCue" default="null" comment="WARNING: EndSignalCue must be set if EndOnCompletion is true"/>
        <param name="MissionCue" />
        <param name="StartStep" default="1" comment="Briefing step to start the mission on"/>
        <param name="UpdateBriefing" default="true" comment="Update the briefing objective step when the objective is updated"/>
        <param name="SetObjective" default="true" comment="Use set_objective. A reason to not is that the calling mission takes care of that but still wants to use this libraries features."/>

        <!--Singular case-->
        <param name="Target"/>
        <param name="Offset" default="null" comment="An additional offset to $Target (no taking bbox into account)"/>
        <param name="Radius" default="0"    comment="circle radius around target/offset (for objective-circle on map)"/>
        
        <!--Group case - no offset-->
        <param name="Group" default="null"/>
        
        <!--Common target params-->
        <param name="TargetAlias" default="null" comment="Define optional objective target text (defaults to object name)"/>
        <param name="Distance" default="null" comment="- If null, distance will be generated.
                                                       - $Distance will be passed to $MissionCue.$RML_FlyTo__Distance
                                                       - In case of $Group, generated distance will be the greatest value"/>
        <param name="LeftDistance" default="null" comment="Distance to re-engage FlyTo objective if the player has already entered $Distance range (must be ge $Distance)"/>
        <param name="HideUnknown" default="false" comment="Should areas not yet known to the map be hidden in the objectives" />
        <param name="EndOnCompletion" default="true" comment="End this RML when the player has reached the destination. WARNING: If false, the caller must end the library."/>
        <param name="FlyToObjective" default="objective.flyto" comment="Objective during the flyto case"/>
        <param name="AtDestinationObjective" default="null" comment="What objective to perform on $Target once reached (only fired if EndOnCompletion is false)"/>
        <param name="ReachedTargetSignalCue" default="null" comment="Cue to be signalled when player reaches the destination"/>
        <param name="FireReachedTargetOnInit" default="true" comment="Signal $ReachedTargetSignalCue even if the player was already close?"/>
        <param name="LeftTargetSignalCue" default="null" comment="Cue to be signalled when player leaves the destination (only fired if EndOnCompletion is false)"/>
        
        <param name="DebugChance" default="0"/>
      </params>
      <actions>
        <set_value name="$feedbackvalue" exact="0" />
        <create_list name="$ErrorList"/>
        
        <do_if value="not $MissionCue">
          <append_to_list name="$ErrorList" exact="-103"/>
        </do_if>

        <do_if value="not $EndSignalCue and $EndOnCompletion">
          <append_to_list name="$ErrorList" exact="-102"/>
        </do_if>

        <create_group groupname="$Targets"/>
        <do_if value="$Target.exists">
          <add_to_group groupname="$Targets" object="$Target"/>
        </do_if>
        <do_elseif value="$Group">
          <add_to_group groupname="$Targets" group="$Group"/>
          <set_value name="$Offset" exact="position.[0, 0, 0]" comment="Group objectives can't handle offsets"/>
        </do_elseif>
        <do_else>
          <append_to_list name="$ErrorList" exact="-101"/>
        </do_else>

        <do_if value="$ErrorList.count" exact="0">
          <debug_text text="'Flyto objects are: ' + $Targets" chance="$DebugChance"/>

          <do_if value="not $TargetAlias">
            <set_value name="$TargetAlias" exact="''" />
          </do_if>

          <do_if value="not $Distance">
            <set_value name="$GenerateDistance"/>
          </do_if>
          <do_elseif value="$Distance" max="10m">
            <set_value name="$GenerateDistance"/>
          </do_elseif>

          <do_if value="$GenerateDistance?">
            <set_value name="$Distance" exact="0"/>
            <do_all exact="$Targets.count" counter="$Counter">
              <do_if value="$Targets.{$Counter}.isclass.zone">
                <set_value name="$ThisDistance" exact="50km"/>
              </do_if>
              <do_elseif value="$Targets.{$Counter}.isclass.space">
                <set_value name="$ThisDistance" exact="0"/>
              </do_elseif>
              <do_else>
                <!--objects (without $Offset) will have their bounding-box taken into account-->
                <set_value name="$ThisDistance" exact="2km"/>
              </do_else>

              <do_if value="$ThisDistance" min="$Distance">
                <set_value name="$Distance" exact="$ThisDistance"/>
              </do_if>
            </do_all>
          </do_if>
          <set_value name="$MissionCue.$RML_FlyTo__Distance" exact="$Distance"/>
          <debug_text text="'Flyto distance is: ' + $Distance" chance="$DebugChance"/>

          <do_if value="not $LeftDistance">
            <set_value name="$LeftDistance" exact="$Distance"/>
          </do_if>
          <do_elseif value="$LeftDistance lt $Distance">
            <debug_text text="'Provided $LeftDistance: ' + $LeftDistance + ' was lower than $Distance: ' + $Distance + ' - setting to $Distance'" filter="error"/>
            <set_value name="$LeftDistance" exact="$Distance"/>
          </do_elseif>
        </do_if>

      </actions>
      <cues>
        <cue name="Signal_Cleanup" onfail="cancel">
          <conditions>
            <check_value value="$ErrorList.count != 0" />
          </conditions>
          <actions>
            <signal_cue cue="Cleanup" />
          </actions>
        </cue>
        
        <cue name="StartMission" onfail="cancel">
          <conditions>
            <check_value value="$ErrorList.count == 0" />
          </conditions>
          <actions>
            <set_value name="$WasAtDestination" exact="false"/>
            <set_value name="$WasOutside" exact="false"/>

            <!--With $FirstRun set, the actions of CheckCurrentLocation will run immediatly to either set the flyto objective or signal that the destination is reached-->
            <!--***NOTE***  The below section may seem backwards with setting $FlyTo but it's correct-->
            <set_value name="$FirstRun" exact="true"/>
            <set_value name="$FlyTo" exact="false"/>

            <do_all exact="$Targets.count" counter="$Counter">
              <do_if value="$Targets.{$Counter}.isclass.cluster">
                <do_if value="player.entity.hascontext.{$Targets.{$Counter}}">
                  <set_value name="$FlyTo" exact="true"/>
                </do_if>
              </do_if>
              <!--TODO: Check context within object?-->
              <do_elseif value="$Offset and player.entity.distanceto.[$Targets.{$Counter}, $Offset] le $Distance">
                <set_value name="$FlyTo" exact="true"/>
              </do_elseif>
              <do_elseif value="not $Offset and $Targets.{$Counter}.bboxdistanceto.{player.entity} le $Distance">
                <set_value name="$FlyTo" exact="true"/>
              </do_elseif>

              <do_if value="$FlyTo">
                <break/>
              </do_if>
            </do_all>
          </actions>
          <cues>

            <cue name="CheckCurrentLocation" checkinterval="1s">
              <conditions>
                <check_any>
                  <check_value value="$FirstRun"/>
                  <!--Check when in range of ANY target-->
                  <check_any exact="$Targets.count" counter="$Counter">
                    <check_all>
                      <!--Player is outside the range. Check when they enter.-->
                      <check_value value="$FlyTo" exact="true"/>
                      <check_any>
                        <check_value value="$Targets.{$Counter}.isclass.cluster and player.entity.hascontext.{$Targets.{$Counter}}"/>
                        <check_all>
                          <check_value value="$Targets.{$Counter}.isclass.sector and player.sector == $Targets.{$Counter}"/>
                          <check_any>
                            <check_value value="$Offset and player.entity.distanceto.[$Targets.{$Counter}, $Offset] le $Distance"/>
                            <check_value value="not $Offset and player.entity.hascontext.{$Targets.{$Counter}}"/>
                          </check_any>
                        </check_all>
                        <check_all>
                          <check_value value="not $Targets.{$Counter}.isclass.sector and not $Targets.{$Counter}.isclass.cluster"/>
                          <check_value value="not player.zone.isclass.highway"/>
                          <check_value value="player.sector == $Targets.{$Counter}.sector"/>
                          <check_any>
                            <check_value value="$Offset and player.entity.distanceto.[$Targets.{$Counter}, $Offset] le $Distance"/>
                            <check_value value="not $Offset and $Targets.{$Counter}.bboxdistanceto.{player.entity} le $Distance"/>
                          </check_any>
                        </check_all>
                      </check_any>
                    </check_all>
                  </check_any>

                  <!--Check when player is outside range of ALL targets-->
                  <check_all exact="$Targets.count" counter="$Counter">
                    <!--The player is within range. Check when they leave.-->
                    <check_value value="$FlyTo" exact="false"/>
                    <check_any>
                      <check_value value="$Targets.{$Counter}.isclass.cluster and not player.entity.hascontext.{$Targets.{$Counter}}"/>
                      <check_all>
                        <check_value value="$Targets.{$Counter}.isclass.sector"/>
                        <check_any>
                          <check_value value="player.sector != $Targets.{$Counter}"/>
                          <check_value value="$Offset and player.entity.distanceto.[$Targets.{$Counter}, $Offset] gt $LeftDistance"/>
                          <check_value value="not $Offset and not player.entity.hascontext.{$Targets.{$Counter}}"/>
                        </check_any>
                      </check_all>
                      <check_all>
                        <check_value value="not $Targets.{$Counter}.isclass.sector and not $Targets.{$Counter}.isclass.cluster"/>
                        <check_any>
                          <check_value value="player.sector != $Targets.{$Counter}.sector"/>
                          <check_value value="$Offset and player.entity.distanceto.[$Targets.{$Counter}, $Offset] gt $LeftDistance"/>
                          <check_value value="not $Offset and $Targets.{$Counter}.bboxdistanceto.{player.entity} gt $LeftDistance"/>
                        </check_any>
                      </check_all>
                    </check_any>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$FirstRun" exact="false"/>
                <do_if value="$FlyTo">
                  <set_value name="$FlyTo" exact="false"/>
                  <debug_text text="'At Destination'" chance="$DebugChance"/>
                  <do_if value="$EndOnCompletion">
                    <set_value name="$feedbackvalue" exact="1"/>
                    <signal_cue cue="Cleanup"/>
                  </do_if>
                  <do_else>
                    <do_if value="$AtDestinationObjective and $SetObjective">                      
                      <do_if value="$Target">
                        <assert value="$Target.exists" text="'Target does not exist'"/>
                        <assert value="$Targets.count == 1" text="'$Targets should only have a size of 1'"/>
                        <set_value name="$ObjectiveText" exact="if $TargetAlias != '' then $TargetAlias else $Target.knownname"/>

                        <do_if value="$Target.isclass.cluster">
                          <find_zone name="$ObjectiveTarget" space="$Target" normalzone="true"/>
                        </do_if>
                        <do_else>
                          <set_value name="$ObjectiveTarget" exact="$Target"/>
                        </do_else>
                        <do_if value="$ObjectiveTarget">
                          <do_if value="$UpdateBriefing">
                            <update_mission cue="$MissionCue">
                              <briefing>
                                <objective step="$StartStep" action="$AtDestinationObjective" object="$ObjectiveTarget" text="$ObjectiveText"/>
                              </briefing>
                            </update_mission>
                          </do_if>
                          <do_if value="$Offset">
                            <set_objective cue="$MissionCue" step="$StartStep" action="$AtDestinationObjective" object="$ObjectiveTarget" offset="$Offset" radius="$Radius" text="$ObjectiveText" checkunknown="$HideUnknown" />
                          </do_if>
                          <do_else>
                            <set_objective cue="$MissionCue" step="$StartStep" action="$AtDestinationObjective" object="$ObjectiveTarget" text="$ObjectiveText" checkunknown="$HideUnknown" />
                          </do_else>
                        </do_if>
                        <do_else>
                          <do_if value="$UpdateBriefing">
                            <update_mission cue="$MissionCue">
                              <briefing>
                                <objective step="$StartStep" action="$AtDestinationObjective" text="$ObjectiveText"/>
                              </briefing>
                            </update_mission>
                          </do_if>
                          <set_objective cue="$MissionCue" step="$StartStep" action="$AtDestinationObjective" text="$ObjectiveText"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <do_if value="$UpdateBriefing">
                          <update_mission cue="$MissionCue">
                            <briefing>
                              <objective step="$StartStep" action="$AtDestinationObjective" group="$Targets" text="$TargetAlias"/>
                            </briefing>
                          </update_mission>
                        </do_if>
                        <set_objective cue="$MissionCue" step="$StartStep" action="$AtDestinationObjective" group="$Targets" text="$TargetAlias"/>
                      </do_else>
                    </do_if>

                    <do_if value="$ReachedTargetSignalCue">
                      <do_if value="$FireReachedTargetOnInit">
                        <signal_cue cue="$ReachedTargetSignalCue"/>
                      </do_if>
                      <do_elseif value="$WasOutside">
                        <signal_cue cue="$ReachedTargetSignalCue"/>
                      </do_elseif>
                    </do_if>
                    <set_value name="$WasAtDestination" exact="true"/>
                    <reset_cue cue="this"/>
                  </do_else>
                </do_if>
                <do_else>
                  <set_value name="$FlyTo" exact="true"/>
                  <set_value name="$WasOutside" exact="true"/>
                  <debug_text text="'Outside Destination Range'" chance="$DebugChance"/>
                  <do_if value="$SetObjective">
                    <do_if value="$Target">
                      <assert value="$Target.exists" text="'Target does not exist'"/>
                      <assert value="$Targets.count == 1" text="'$Targets should only have a size of 1'"/>
                      <set_value name="$ObjectiveText" exact="if $TargetAlias != '' then $TargetAlias else $Target.knownname"/>

                      <do_if value="$Target.isclass.cluster">
                        <find_zone name="$ObjectiveTarget" space="$Target" normalzone="true"/>
                      </do_if>
                      <do_else>
                        <set_value name="$ObjectiveTarget" exact="$Target"/>
                      </do_else>
                      <do_if value="$UpdateBriefing">
                        <update_mission cue="$MissionCue">
                          <briefing>
                            <objective step="$StartStep" action="$FlyToObjective" object="$ObjectiveTarget" text="$ObjectiveText"/>
                          </briefing>
                        </update_mission>
                      </do_if>
                      <do_if value="$Offset">
                        <set_objective cue="$MissionCue" step="$StartStep" action="$FlyToObjective" object="$ObjectiveTarget" offset="$Offset" radius="$Radius" text="$ObjectiveText" checkunknown="$HideUnknown" />
                      </do_if>
                      <do_else>
                        <set_objective cue="$MissionCue" step="$StartStep" action="$FlyToObjective" object="$ObjectiveTarget" text="$ObjectiveText" checkunknown="$HideUnknown" />
                      </do_else>
                    </do_if>
                    <do_else>
                      <do_if value="$UpdateBriefing">
                        <update_mission cue="$MissionCue">
                          <briefing>
                            <objective step="$StartStep" action="$FlyToObjective" group="$Targets" text="$TargetAlias"/>
                          </briefing>
                        </update_mission>
                      </do_if>
                      <set_objective cue="$MissionCue" step="$StartStep" action="$FlyToObjective" group="$Targets" text="$TargetAlias"/>
                    </do_else>
                  </do_if>
                  <do_if value="$WasAtDestination and $LeftTargetSignalCue">
                    <signal_cue cue="$LeftTargetSignalCue"/>
                  </do_if>
                  <reset_cue cue="this"/>
                </do_else>
              </actions>
            </cue>
            
            <cue name="TargetDestroyed" instantiate="true">
              <conditions>
                <event_object_destroyed group="$Targets"/>
              </conditions>
              <actions>
                <do_if value="$Targets.count - 1" exact="0">
                  <set_value name="$feedbackvalue" exact="-1"/>
                  <signal_cue cue="Cleanup"/>
                </do_if>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="Cleanup">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--TODO remove_objective-->
            <do_if value="$feedbackvalue" exact="0">
              <do_if value="$ErrorList.count" exact="0">
                <debug_text text="'ERROR: FlyTo.Cleanup - Feedback value is 0 and no error values were set. Defaulting to -100'" chance="$DebugChance"/>
                <set_value name="$feedbackvalue" exact="-100"/>
              </do_if>
              <do_else>
                <set_value name="$feedbackvalue" exact="$ErrorList.{1}"/>

                <do_if value="md.$RML_Debugging">
                  <do_all exact="$ErrorList.count" counter="$Counter">
                    <do_if value="$ErrorList.{$Counter}" exact="-101">
                      <set_value name="$FeedbackText" exact="'Target did not exist at start'"/>
                    </do_if>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-102">
                      <set_value name="$FeedbackText" exact="'EndSignalCue is not defined while EndOnCompletion is true'"/>
                    </do_elseif>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-103">
                      <set_value name="$FeedbackText" exact="'MissionCue not defined'"/>
                    </do_elseif>
                    <do_else>
                      <set_value name="$FeedbackText" exact="'Error: Unknown error value'"/>
                    </do_else>

                    <debug_text text="'Mission Error. Feedback id: ' + $ErrorList.{$Counter} + ' - ' + $FeedbackText" filter="error"/>
                  </do_all>
                </do_if>
              </do_else>
            </do_if>
            <do_else>

              <do_if value="$feedbackvalue" exact="1">
                <set_value name="$FeedbackText" exact="'Target Reached'"/>
              </do_if>
              <do_elseif value="$feedbackvalue" exact="-1">
                <set_value name="$FeedbackText" exact="{30004,6020}" comment="'Target destroyed'"/>
              </do_elseif>

              <do_if value="$feedbackvalue" min="1">
                <debug_text text="'Mission Successful. Feedback id: ' + $feedbackvalue + ' - ' + $FeedbackText" chance="md.$RML_Debugging * $DebugChance"/>
              </do_if>
              <do_elseif value="@$FeedbackText">
                <do_if value="$EndSignalCue">
                  <set_value name="$EndSignalCue.$EndFeedbackText" exact="$FeedbackText"/>
                  <debug_text text="'Mission Failed. Feedback id: ' + $feedbackvalue + ' - ' + $FeedbackText" chance="md.$RML_Debugging * $DebugChance"/>
                </do_if>
              </do_elseif>
              <do_else>
                <debug_text text="'WARNING: Unhandled feedback value ' + $feedbackvalue" chance="$DebugChance"/>
              </do_else>

            </do_else>

            <do_if value="$EndSignalCue">
              <set_value name="$EndSignalCue.$EndFeedbackValue" exact="$feedbackvalue"/>
              <signal_cue cue="$EndSignalCue"/>
            </do_if>
            <cancel_cue cue="FlyTo"/>
          </actions>
        </cue>
      </cues>
    </library>
  </cues>
</mdscript>
