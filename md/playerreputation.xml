<?xml version="1.0" encoding="utf-8"?>
<mdscript name="PlayerReputation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--Cue to be signalled from NPC_FactionRepresentative when an event happens in a ceremony (listened to by FactionRepresentativePromotionCallback)
    param: [FactionRep, EventID (string), AdditionalParam(depending on EventID)]-->
    <cue name="CeremonyEvent" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
    </cue>


    <!--cue name="DebugPlayerReputation">
      <conditions>
        <event_object_changed_zone object="player.entity" />
      </conditions>
      <actions>
        <add_faction_relation faction="faction.teladi" otherfaction="faction.player" value="0.0007" reason="relationchangereason.killedobject"/>
        <add_faction_relation faction="faction.antigone" otherfaction="faction.player" value="0.007" reason="relationchangereason.killedobject"/>
      </actions>
    </cue-->

    <cue name="TrackPlayerReputation" namespace="this" version="2" onfail="cancel">
      <conditions>
        <check_value value="player.galaxy.macro == macro.xu_ep2_universe_macro" comment="only in main-galaxy"/>
      </conditions>
      <actions>
        <set_value name="$DebugChance" exact="0" />

        <!-- Faction relation ranges: [-1 enemy -0.1]  <-0.1 unfriendly -0.01]  <-0.01 neutral -0.01>  [+0.01 friendly +0.1>  [+0.1 ally +1] -->

        <!--        range1 range2 comp1  comp2   string      mission? VoiceProm.  VoiceDemotion   OnPromotion-notifications                   OnDemotion-notifications-->
        <set_value name="$FactionRelation" exact="[
                  [ -1.00, -0.10, true,  true,  'enemy',      false, null        , null,         [],                                         []], 
                  [ -0.10, -0.01, false, true,  'unfriendly', false, null        , null,         [],                                         [{30003,2004}, {30003,2016}, {30003,2009}]],
                  [ -0.01, +0.01, false, false, 'neutral',    false, null        , {30003,2005}, [{30003,1004}, {30003,1016}, {30003,1009}], []],
                  [ +0.01, +0.10, true,  false, 'friendly',   true,  {30003,1005}, {30003,2006}, [],                                         []],
                  [ +0.10, +1.00, true,  true,  'ally',       true,  {30003,1006}, null,         [],                                         []],
              ]"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <!--Correct Ministry licence states as ally and friend minrelations were swapped-->
        <do_if value="not @md.$FactionData.{faction.ministry}.$PromotionActive and (faction.player.haslicence.ceremonyfriend.{faction.ministry} or faction.player.canholdlicence.ceremonyfriend.{faction.ministry})">
          <!--Player has or can hold the friend licence. Clean up any licences they shouldn't have and give them the correct one. If promotion ceremony is active, don't patch anything.-->
          <do_if value="faction.player.haslicence.ceremonyfriend.{faction.ministry}">
            <do_if value="not faction.player.canholdlicence.ceremonyfriend.{faction.ministry}">
              <remove_licence faction="faction.player" licencefaction="faction.ministry" type="ceremonyfriend"/>
              <debug_text text="'Removing Ministry friend licence which should not be held at this relation'" filter="savegame"/>
            </do_if>
          </do_if>
          <do_elseif value="faction.player.canholdlicence.ceremonyfriend.{faction.ministry}">
            <add_licence faction="faction.player" licencefaction="faction.ministry" type="ceremonyfriend"/>
            <debug_text text="'Adding Ministry friend licence which should have been given at this relation'" filter="savegame"/>
          </do_elseif>

          <do_if value="faction.player.haslicence.ceremonyally.{faction.ministry}">
            <do_if value="not faction.player.canholdlicence.ceremonyally.{faction.ministry}">
              <remove_licence faction="faction.player" licencefaction="faction.ministry" type="ceremonyally"/>
              <debug_text text="'Removing Ministry ally licence which should not be held at this relation'" filter="savegame"/>
            </do_if>
          </do_if>
          <do_elseif value="faction.player.canholdlicence.ceremonyally.{faction.ministry}">
            <add_licence faction="faction.player" licencefaction="faction.ministry" type="ceremonyally"/>
            <debug_text text="'Adding Ministry ally licence which should have been given at this relation'" filter="savegame"/>
          </do_elseif>
        </do_if>
      </patch>
      <cues>

        <library name="CalculateFactionRelation">
          <!-- Input:  $NewValue,    $OldValue    (relationship value in range -1 to +1
               Output: $RelationNew, $RelationOld (indexes into above array)-->
          <actions>
            <!-- find the previous and the new faction-relation -->
            <set_value name="$LocalRelation" exact="md.PlayerReputation.TrackPlayerReputation.$FactionRelation"/>
            <do_all exact="$LocalRelation.count" counter="$i">
              <do_if value="(if $LocalRelation.{$i}.{3} then $NewValue ge $LocalRelation.{$i}.{1} else $NewValue gt $LocalRelation.{$i}.{1}) and 
                              (if $LocalRelation.{$i}.{4} then $NewValue le $LocalRelation.{$i}.{2} else $NewValue lt $LocalRelation.{$i}.{2})">
                <!--debug_text text="'Found-new at ' + $i + ' for ' + $NewValue" chance="$DebugChance" /-->
                <set_value name="$RelationNew" exact="$i"/>
              </do_if>
              <do_if value="(if $LocalRelation.{$i}.{3} then $OldValue ge $LocalRelation.{$i}.{1} else $OldValue gt $LocalRelation.{$i}.{1}) and 
                              (if $LocalRelation.{$i}.{4} then $OldValue le $LocalRelation.{$i}.{2} else $OldValue lt $LocalRelation.{$i}.{2})">
                <!--debug_text text="'Found-old at ' + $i + ' for ' + $OldValue" chance="$DebugChance" /-->
                <set_value name="$RelationOld" exact="$i"/>
              </do_if>
            </do_all>
            <remove_value name="$LocalRelation"/>
          </actions>
        </library>

        <cue name="Base" instantiate="true">
          <conditions>
            <check_any>
              <event_player_relation_changed />
              <event_cue_signalled/>
            </check_any>
          </conditions>
          <actions>
            <debug_text text="event.name" chance="$DebugChance"/>

            <set_value name="$Faction" exact="null"/>
            <do_if value="event.name == 'event_player_relation_changed'">
              <do_if value="not event.object">
                <set_value name="$Faction"            exact="event.param" />
                <set_value name="$NewValue"           exact="event.param2.{1}" />
                <set_value name="$OldValue"           exact="event.param2.{2}" />
              </do_if>
              <do_else>
                <debug_text text="'Player\'s relation has been boosted - ignore'" chance="$DebugChance" />
              </do_else>
            </do_if>
            <do_else>
              <set_value name="$Faction"            exact="event.param.{1}" />
              <set_value name="$NewValue"           exact="event.param.{2}" />
              <set_value name="$OldValue"           exact="event.param.{3}" />
            </do_else>
            <do_if value="$Faction">
              <!-- calculate factionrelation ($RelationNew and $RelationOld from $NewValue and $OldValue) -->
              <include_actions ref="CalculateFactionRelation"/>

              <assert value="$RelationNew and $RelationOld" text="'Unable to determine faction-relation (RB)'"/>
              <debug_text text="'Player\'s relationship with ' + $Faction.name + ' was ' + $FactionRelation.{$RelationOld}.{5} + ' and is now ' + $FactionRelation.{$RelationNew}.{5} + ' delta=' + ($NewValue - $OldValue)" chance="$DebugChance" />

              <do_if value="$RelationNew != $RelationOld">
                <do_if value="$RelationOld lt $RelationNew">
                  <!-- Promotion (some effects instant, some applied after talking to faction-representative (or instant, if no representative available) -->

                  <set_value name="$iter" exact="$RelationOld"/>
                  <do_while value="$iter lt $RelationNew">
                    <set_value name="$iter" operation="add"/>

                    <!-- Show OnPromotion-notifications -->
                    <do_all exact="$FactionRelation.{$iter}.{9}.count" counter="$ni">
                      <show_notification text="[$FactionRelation.{$iter}.{9}.{$ni}, '', $Faction.name]" />
                    </do_all>
                  </do_while>

                  <!-- Trigger promotion mission, if required (no promotion-mission needed from enemy to unfriendly) -->
                  <do_if value="@md.$FactionData.{$Faction}.$PromotionActive">
                    <!-- promotion is already active, the running mission will handle a double-promotion -->
                    <debug_text text="'promotion-mission already running ($RelationNew=' + $RelationNew + ' entry=' + $FactionRelation.{$RelationNew}.{6}" chance="$DebugChance"/>
                  </do_if>
                  <do_elseif value="$FactionRelation.{$RelationNew}.{6}">
                    <set_value name="$Parameters" exact="[$Faction, $RelationNew, $RelationOld, $NewValue, $OldValue]" />

                    <set_value name="$Headquarters" exact="@md.$FactionData.{$Faction}.$Headquarters" />
                    <set_value name="$Representative" exact="@md.$FactionData.{$Faction}.$Representative" />

                    <do_if value="$Headquarters and $Representative">
                      <signal_cue_instantly cue="PromotionMission" param="$Parameters" />
                    </do_if>
                    <do_else>
                      <signal_cue_instantly cue="PromotionInstant" param="$Parameters" />
                    </do_else>

                  </do_elseif>
                  <do_else>
                    <debug_text text="'No promotion ceremony for this relationchange ($RelationNew=' + $RelationNew + ' entry=' + $FactionRelation.{$RelationNew}.{6}" chance="$DebugChance"/>
                    <include_actions ref="UpdateNonPromotionLicences" comment="Add free licenses, if any (matching min-relation and price = 0"/>
                  </do_else>

                  <!-- Notify about new voice/treatment -->
                  <do_if value="$FactionRelation.{$RelationNew}.{7}">
                    <show_notification text="[$FactionRelation.{$RelationNew}.{7}, '', $Faction.name]" />
                  </do_if>

                </do_if>
                <do_else>
                  <!-- Demotion (all effects instant) -->

                  <!-- loop from old index to new index (passing all relevant faction-relation levels for demotions -->
                  <set_value name="$iter" exact="$RelationOld"/>
                  <do_while value="$iter gt $RelationNew">
                    <set_value name="$iter" operation="subtract"/>
                    <!-- Show OnDemotion-notifications -->
                    <do_all exact="$FactionRelation.{$iter}.{10}.count" counter="$ni">
                      <show_notification text="[$FactionRelation.{$iter}.{10}.{$ni}, '', $Faction.name]" />
                    </do_all>
                  </do_while>

                  <!-- check all licences the player has with this faction; strip away if necessary -->
                  <set_value name="$iter" exact="$RelationOld"/>
                  <create_list name="$LicencesToRemove"/>
                  <do_all exact="faction.player.heldlicences.count" counter="$i">
                    <set_value name="$licence" exact="faction.player.heldlicences.{$i}"/>
                    <do_if value="($licence.faction == $Faction) and not (faction.player.canholdlicence.{$licence})">
                      <debug_text text="$licence + ' queue-for-removal'" chance="$DebugChance"/>
                      <append_to_list name="$LicencesToRemove" exact="$licence"/>
                    </do_if>
                    <do_else>
                      <debug_text text="$licence + ' keep'" chance="$DebugChance"/>
                    </do_else>
                  </do_all>

                  <!-- *instantly* remove licences (ranks are also licences) and show summarized notifications -->
                  <set_value name="$LicencesToRemoveText" exact="''"/>
                  <set_value name="$RanksToRemoveText" exact="''"/>
                  <do_all exact="$LicencesToRemove.count" counter="$i">
                    <set_value name="$licence" exact="$LicencesToRemove.{$i}"/>
                    <do_if value="$licence.type == 'ceremonyfriend' or $licence.type == 'ceremonyally'">
                      <set_value name="$RanksToRemoveText" exact="$RanksToRemoveText + $licence.name + '\n'"/>
                      <!--show_notification text="[{30003,2001}, '', $licence.name]" comment="You have been stripped of rank(s):" /-->
                    </do_if>
                    <!--do_elseif value="event.param.licence.police">
                        <show_notification text="[{30003,2003}, '', $licence.name]" comment="The following licences have been made unavailable:" />
                    </do_elseif-->
                    <do_else>
                      <set_value name="$LicencesToRemoveText" exact="$LicencesToRemoveText + $licence.name + '\n'"/>
                      <!--show_notification text="[{30003,2002}, '', $licence.name]" comment="You have been stripped of licence:" /-->
                    </do_else>
                    <remove_licence licence="$LicencesToRemove.{$i}" />
                  </do_all>

                  <do_if value="$RanksToRemoveText != ''">
                    <show_notification text="{30003,2001} + '\n' + $RanksToRemoveText" comment="You have been stripped of rank(s):"/>
                  </do_if>

                  <do_if value="$LicencesToRemoveText != ''">
                    <show_notification text="{30003,2002} + '\n' + $LicencesToRemoveText" comment="You have been stripped of licence:"/>
                  </do_if>

                  <!-- Notify about new voice/treatment -->
                  <do_if value="$FactionRelation.{$RelationNew}.{8}">
                    <show_notification text="[$FactionRelation.{$RelationNew}.{8}, '', $Faction.name]" />
                  </do_if>
                </do_else>

                <remove_value name="$RelationNew"/>
                <remove_value name="$RelationOld"/>
              </do_if>
              <do_else>
                <debug_text text="'Player\'s relationship with ' + $Faction.name + ' remains as-is.'" chance="$DebugChance" />
              </do_else>

            </do_if>

          </actions>
        </cue>


        <!-- Input: $Faction
        -->
        <library name="UpdateNonPromotionLicences">
          <actions>
            <do_all exact="$Faction.licences.count" counter="$i">
              <set_value name="$licence" exact="$Faction.licences.{$i}"/>

              <do_if value="faction.player.haslicence.{$licence}">
                <debug_text text="$licence + ' no (already has it)'" chance="$DebugChance"/>
              </do_if>
              <do_elseif value="faction.player.canholdlicence.{$licence} and $licence.price == 0">
                <add_licence licence="$licence" />
              </do_elseif>
            </do_all>
          </actions>
        </library>



        <!-- Input: $Faction
          Output: $ShipsAndEquipment, $PoliceCanBuy, $Subgroups, $LicencesToAdd[] -->
        <library name="CalculateLicences">
          <actions>
            <!-- check which ranks the player gains (these are 'precursor' for other licences, so handle first)! -->
            <do_all exact="$Faction.licences.count" counter="$i">
              <set_value name="$licence" exact="$Faction.licences.{$i}"/>
              <do_if value="faction.player.canholdlicence.{$licence}">
                <do_if value="$licence.type == 'ceremonyfriend' or $licence.type == 'ceremonyally'">
                  <add_licence licence="$licence" />
                </do_if>
              </do_if>
            </do_all>

            <!-- Check which other licences to add -->
            <set_value name="$ShipsAndEquipment" exact="false" />
            <set_value name="$PoliceCanBuy" exact="false" />
            <set_value name="$Subgroups" exact="false" />

            <create_list name="$LicencesToAdd"/>
            <do_all exact="$Faction.licences.count" counter="$i">
              <set_value name="$licence" exact="$Faction.licences.{$i}"/>

              <do_if value="faction.player.haslicence.{$licence}">
                <debug_text text="$licence + ' no (already has it)'" chance="$DebugChance"/>
              </do_if>
              <do_elseif value="$licence.issellable" comment="filter out licences which are sold">
                <do_if value="(faction.player.canholdlicence.{$licence}) and $Faction.licence.police">
                  <set_value name="$PoliceCanBuy" exact="true" />
                </do_if>
                <debug_text text="$licence + ' no (sold)'" chance="$DebugChance"/>
              </do_elseif>
              <do_elseif value="$licence.type == 'ceremonyfriend' or $licence.type == 'ceremonyally'" comment="filter out ranks">
                <debug_text text="$licence + ' no (rank)'" chance="$DebugChance"/>
              </do_elseif>
              <do_elseif value="(faction.player.canholdlicence.{$licence})">
                <debug_text text="$licence + ' yes'" chance="$DebugChance"/>
                <!-- update some bools, which determine which textlines the representative will speak -->
                <do_if value="$Faction.licence.militaryship or $Faction.licence.militaryequipment or $Faction.licence.capitalship or $Faction.licence.capitalequipment">
                  <set_value name="$ShipsAndEquipment" exact="true" />
                </do_if>
                <do_elseif value="$Faction.licence.subgroupfriend">
                  <set_value name="$Subgroups" exact="true" />
                </do_elseif>

                <append_to_list name="$LicencesToAdd" exact="$licence"/>
                <add_licence licence="$licence" />
              </do_elseif>
              <do_else>
                <debug_text text="$licence + ' no (not unlocked)'" chance="$DebugChance"/>
              </do_else>
            </do_all>
          </actions>
        </library>

        <library name="LicencesNotificationsAndLogbook">
          <actions>
            <!-- licences header for logbook -->
            <do_if value="$LicencesToAdd.count">
              <append_to_list name="$LogbookText" exact="readtext.{30003}.{1002}" />
            </do_if>

            <!-- licence notifications-->
            <set_value name="$LicencesText2" exact="''"/>
            <set_value name="$PerTimeLimit" exact="0"/>

            <do_while value="$LicencesToAdd.count" >

              <do_all exact="$LicencesToAdd.count" counter="$i" reverse="true">

                <append_to_list name="$LogbookText" exact="'\n' + $licence.name" />
                <set_value name="$licence" exact="$LicencesToAdd.{$LicencesToAdd.count}"/>
                <remove_value name="$LicencesToAdd.{$LicencesToAdd.count}"/>

                <!-- police and subgroupfriend announced seperately, militaryship/equipment combined, capship/equipment combined, friend/ally announced seperately -->
                <do_if value="$licence.type != 'ceremonyfriend' and $licence.type != 'ceremonyally' and $licence.type != 'militaryship' and $licence.type != 'capitalship' and $licence.type != 'police'">
                  <set_value name="$PerTimeLimit" operation="add"/>
                  <set_value name="$LicencesText2" exact="$LicencesText2 + $licence.name"/>
                  <do_if value="$PerTimeLimit lt 3">
                    <set_value name="$LicencesText2" exact="$LicencesText2 + '\n'"/>
                  </do_if>
                </do_if>

                <do_if value="$PerTimeLimit ge 3 or $LicencesToAdd.count == 0">
                  <do_if value="$LicencesText2 != ''">
                    <show_notification text="{30003,1018} + '\n' + $LicencesText2" comment="You have been granted licences:" timeout="15s" />
                    <set_value name="$LicencesText2" exact="''"/>
                    <set_value name="$PerTimeLimit" exact="0"/>
                  </do_if>
                  <break/>
                </do_if>
              </do_all>


            </do_while>



          </actions>
        </library>


        <cue name="PromotionInstant" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$Faction"           exact="event.param.{1}" />
            <set_value name="$RelationNewParam"  exact="event.param.{2}" />
            <set_value name="$RelationOldParam"  exact="event.param.{3}" />

            <remove_value name="md.$FactionData.{$Faction}.$PromotionActive"/>

            <debug_text text="'No $Headquarters and/or $Representative available - instantly promoting player'" chance="$DebugChance" />

            <!-- determine which ranks & licenses to add and applies those changes -->
            <include_actions ref="CalculateLicences" comment="returns $ShipsAndEquipment, $PoliceCanBuy, $Subgroups, $LicencesToAdd[]"/>

          </actions>
          <cues>
            <cue name="DelayedRankNotification">
              <delay exact="7s"/>
              <actions>
                <!-- rank notification -->
                <do_if value="faction.player.haslicence.ceremonyally.{$Faction}">
                  <set_value name="$TitlePostfix" exact="$Faction.licence.ceremonyally.name" />
                  <show_notification text="[{30003,1001}, '', $Faction.licence.ceremonyally.name]" />
                </do_if>
                <do_elseif value="faction.player.haslicence.ceremonyfriend.{$Faction}">
                  <set_value name="$TitlePostfix" exact="$Faction.licence.ceremonyfriend.name" />
                  <show_notification text="[{30003,1001}, '', $Faction.licence.ceremonyfriend.name]" />
                </do_elseif>
              </actions>
              <cues>
                <cue name="DelayedLicensesNotification">
                  <conditions>
                    <event_cue_completed cue="DelayedRankNotification"/>
                  </conditions>
                  <delay exact="7s"/>
                  <actions>
                    <!-- show notifications and logbook text-->
                    <create_list name="$LogbookText" />
                    <include_actions ref="LicencesNotificationsAndLogbook" comment="input $LicencesToAdd, appends to $LogbookText"/>

                    <!-- and add to logbook -->
                    <substitute_text text="$Title" source="readtext.{30003}.{1017}">
                      <replace string="'$RANK$'" with="$TitlePostfix" />
                    </substitute_text>
                    <debug_text text="'Ceremony completed.'" chance="$DebugChance"/>
                    <write_to_logbook category="general" title="$Title" text="$LogbookText" faction="$Faction" />

                  </actions>
                  <cues>
                    <cue name="DelayedPoliceNotification">
                      <conditions>
                        <event_cue_completed cue="DelayedLicensesNotification"/>
                      </conditions>
                      <delay exact="7s"/>
                      <actions>
                        <!-- police licence notification -->
                        <do_if value="$PoliceCanBuy">
                          <show_notification text="[{30003,1010}, '', $Faction.licence.police.name]" comment="You can now purchase:"/>
                        </do_if>
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="PromotionMissionDelayedHint" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <delay exact="20s"/>
          <actions>
            <show_help line="920" position="1" comment="You were invited by a faction representative to be rewarded."/>
            <show_help line="921" position="1" comment="Open your mission interface to activate the invitation mission."/>
          </actions>
        </cue>

        <!-- Promotion Mission (basically a dummy-mission, waiting checking "not md.$FactionData.{$Faction}.$PromotionActive?" ) -->
        <cue name="PromotionMission" instantiate="true" namespace="this" version="2">
          <conditions>
            <event_cue_signalled />
          </conditions>
          <actions>
            <signal_cue cue="PromotionMissionDelayedHint" comment="trigger tutorial hints"/>

            <set_value name="$DebugChance" exact="parent.namespace.$DebugChance" comment="needed because of namespace"/>
            <set_value name="$Faction"       exact="event.param.{1}" />
            <set_value name="$RelationNewParam"  exact="event.param.{2}" />
            <set_value name="$RelationOldParam"  exact="event.param.{3}" />
            <set_value name="$RelationNewValue"  exact="event.param.{4}" />
            <set_value name="$RelationOldValue"  exact="event.param.{5}" />


            <set_value name="$Headquarters" exact="md.$FactionData.{$Faction}.$Headquarters" />
            <set_value name="$Representative" exact="md.$FactionData.{$Faction}.$Representative" />

            <do_if value="$Headquarters and $Representative">
              <debug_text text="'Talk to representative for ' + $Faction.name + ' for promotion ('+$RelationOldParam+'->'+$RelationNewParam+')'" chance="$DebugChance" />
              <debug_text text="'$Representative for ' + $Faction.name + ': ' + $Representative.name + '. $Headquarters is in ' + $Headquarters.sector.knownname + ', ' + $Headquarters.cluster.knownname" chance="$DebugChance" />

              <!-- Text -->
              <do_if value="$RelationNewParam" exact="4">
                <set_value name="$RankName" exact="$Faction.licence.ceremonyfriend.name" />
              </do_if>
              <do_elseif value="$RelationNewParam" exact="5">
                <set_value name="$RankName" exact="$Faction.licence.ceremonyally.name" />
              </do_elseif>

              <substitute_text text="$MissionName" source="readtext.{30003}.{10001}" comment="Promotion to: $RANK$">
                <replace string="'$RANK$'" with="$RankName" />
              </substitute_text>
              <substitute_text text="$MissionDescription" source="readtext.{30003}.{10002}">
                <replace string="'$FACTION$'" with="$Faction.name" />
              </substitute_text>
              <substitute_text text="$RewardText" source="readtext.{30003}.{10003}">
                <replace string="'$RANK$'" with="$RankName" />
              </substitute_text>

              <!-- Create Mission -->
              <create_mission cue="PromotionMission" name="$MissionName" description="$MissionDescription" faction="$Faction" difficulty="level.trivial" type="missiontype.talkto" rewardtext="$RewardText" activate="not player.hasactivemission" abortable="false" comment="Abortable == false is subject to change">
                <briefing>
                  <objective step="1" action="objective.talkto" object="$Representative" />
                </briefing>
              </create_mission>
              <set_objective cue="PromotionMission" step="1" action="objective.talkto" object="$Representative" />
              <set_value name="md.$FactionData.{$Faction}.$PromotionActive" exact="true" />
            </do_if>
            <do_else>
              <debug_text text="'No Headquarters or RepresentativeHQ  for faction ' + $Faction.name" filter="error"/>
            </do_else>
          </actions>
          <patch sinceversion="2" state="complete">
            <do_if value="not md.$Patch_ActivePromotionMissions?">
              <create_list name="md.$Patch_ActivePromotionMissions"/>
            </do_if>
            <debug_text text="'active ' + namespace + ' ' + $Faction" chance="$DebugChance" filter="savegame"/>
            <append_to_list name="md.$Patch_ActivePromotionMissions" exact="namespace"/>
            <debug_text text="'active promotion missions: ' + md.$Patch_ActivePromotionMissions" chance="$DebugChance" filter="savegame"/>
          </patch>
          <cues>

            <!-- Check for reputation changes for the faction we are running the promotion-mission, 
              mission completes when "not md.$FactionData.{$Faction}.$PromotionActive" 
            -->
            <cue name="ReputationChanged" instantiate="true">
              <conditions>
                <event_player_relation_changed />
                <check_value value="event.param == $Faction"/>
              </conditions>
              <actions>
                <set_value name="$NewValue"           exact="event.param2.{1}" />
                <set_value name="$OldValue"           exact="event.param2.{2}" />

                <include_actions ref="CalculateFactionRelation" comment="Calculate faction-relation index from faction-relation value, returns $RelationNew and $RelationOld"/>

                <!-- If the new reputation goes down to or below $RelationOldParam (reputation we had when we started the mission) then cancel the mission (no need for promotion) -->
                <do_if value="$RelationNew le $RelationOldParam">
                  <debug_text text="'Removing promotion mission for ' + $Faction + ' from ' + $RelationNewParam + ' to ' + $RelationNew" chance="$DebugChance"/>
                  <set_value name="md.$FactionData.{$Faction}.$PromotionActive" exact="false" comment="this removed the rank-dialog option at the faction-representative"/>
                  <remove_mission cue="PromotionMission" type="aborted" />
                  <cancel_cue cue="PromotionMission"/>
                </do_if>

                <!-- If the current reputation is different to what we are promoted to when we started the mission, we need to update briefing-texts (and remember the new value) -->
                <do_if value="$RelationNew != $RelationNewParam">
                  <debug_text text="'Updating RelationNewParam' + $Faction + ' from ' + $RelationNewParam + ' to ' + $RelationNew" chance="$DebugChance"/>
                  <set_value name="$RelationNewParam" exact="$RelationNew" />
                </do_if>

              </actions>
            </cue>

            <cue name="FactionRepresentativeKilled" instantiate="true">
              <conditions>
                <event_object_destroyed object="$Representative" />
              </conditions>
              <actions>
                <!-- TODO: @Owen, @Roger: Update mission to use new representative, see CreateNewFactionRepresentative -->
                <!--set_objective cue="PromotionMission" step="1" action="objective.talkto" object="$Representative" /-->

                <!-- instant promotion -->
                <set_value name="$Parameters" exact="[$Faction, $RelationNewParam, $RelationOldParam, $RelationNewValue, $RelationOldValue]" />
                <signal_cue_instantly cue="PromotionInstant" param="$Parameters" />
                <!-- remove the mission -->
                <remove_mission cue="PromotionMission" type="completed" />
                <cancel_cue cue="PromotionMission"/>
              </actions>
            </cue>

            <cue name="MissionRunning" onfail="cancel">
              <conditions>
                <check_value value="md.$FactionData.{$Faction}.$PromotionActive?" />
              </conditions>
              <actions>
                <debug_text text="'Promotion Ceremony mission for ' + $Faction.name + ' is running...'" chance="$DebugChance" />
              </actions>
              <cues>
                <cue name="KeepAlive" checkinterval="1min" comment="Unfortunate hack where we must stop mission from being removed">
                  <conditions>
                    <check_value value="false" />
                  </conditions>
                </cue>

                <cue name="MissionBriefingStarted">
                  <conditions>
                    <event_briefing_started cue="PromotionMission" />
                  </conditions>
                  <actions>
                    <set_value name="$BriefingCutsceneStarted" />
                    <play_cutscene key="'OrbitIndefinitely'" rendertarget="event.param.{1}">
                      <param name="targetobject" object="$Headquarters" />
                    </play_cutscene>
                  </actions>
                  <cues>
                    <cue name="MissionBriefingStopped">
                      <conditions>
                        <event_briefing_cancelled cue="PromotionMission" />
                      </conditions>
                      <actions>
                        <do_if value="$BriefingCutsceneStarted?">
                          <stop_cutscene key="'OrbitIndefinitely'" />
                          <remove_value name="$BriefingCutsceneStarted" />
                        </do_if>
                        <reset_cue cue="MissionBriefingStarted" />
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="MissionComplete" checkinterval="1s">
                  <conditions>
                    <check_value value="not md.$FactionData.{$Faction}.$PromotionActive?" />
                  </conditions>
                  <actions>
                    <debug_text text="'Representative ' + $Representative.name + ' has finished promoting player - mission is complete'" chance="$DebugChance" />
                    <!-- TODO (@Lorraine): Write letter to logbook with details of promotion -->

                    <do_if value="$BriefingCutsceneStarted?">
                      <stop_cutscene key="'OrbitIndefinitely'" />
                      <remove_value name="$BriefingCutsceneStarted" />
                    </do_if>

                    <remove_mission cue="PromotionMission" type="completed" />
                    <cancel_cue cue="PromotionMission"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="FactionRepresentativePromotionCallback" instantiate="true">
              <conditions>
                <event_cue_signalled cue="CeremonyEvent"/>
                <check_value value="event.param.{2} == 'ceremonystarted' or event.param.{2} == 'ceremonyline' or event.param.{2} == 'ceremonycomplete'"/>
                <check_value value="event.param.{1}.owner == $Faction" comment="Talking to the representative of the faction we are promoting on"/>
              </conditions>
              <actions>
                <set_value name="$FactionRepresentative" exact="event.param.{1}"/>
                <debug_text text="$FactionRepresentative.name +' handling ' + event.param.{2}" chance="$DebugChance"/>

                <do_if value="event.param.{2} == 'ceremonystarted'">
                  <create_list name="$LogbookText" />

                  <!-- determine which licenses to add and applies those changes -->
                  <include_actions ref="CalculateLicences" comment="returns $ShipsAndEquipment, $PoliceCanBuy, $Subgroups, $LicencesToAdd[]"/>

                  <create_list name="$RepresentativeLines" />

                  <!-- Friend/Ally introduction lines -->
                  <do_if value="faction.player.haslicence.ceremonyally.{$Faction}">
                    <append_to_list name="$RepresentativeLines" exact="12108" comment="Second intro line - ally" />
                    <append_to_list name="$RepresentativeLines" exact="12110" comment="Medal line - ally" />
                  </do_if>
                  <do_elseif value="faction.player.haslicence.ceremonyfriend.{$Faction}">
                    <append_to_list name="$RepresentativeLines" exact="12107" comment="Second intro line - friendly" />
                    <append_to_list name="$RepresentativeLines" exact="12109" comment="Medal line - friendly" />
                  </do_elseif>

                  <!-- Licences -->
                  <do_if value="$ShipsAndEquipment or $PoliceCanBuy or $Subgroups">
                    <append_to_list name="$RepresentativeLines" exact="12111" comment="Benefits line" />
                  </do_if>

                  <append_to_list name="$RepresentativeLines" exact="12112" comment="First line to spread out notifications" />
                  <append_to_list name="$RepresentativeLines" exact="12113" comment="Second line to spread out notifications" />
                  <append_to_list name="$RepresentativeLines" exact="12114" comment="Third line to spread out notifications" />

                  <do_if value="$Subgroups or $PoliceCanBuy">
                    <append_to_list name="$RepresentativeLines" exact="12115" comment="Subgroup licence line" />
                  </do_if>

                  <!-- Outro -->
                  <append_to_list name="$RepresentativeLines" exact="12116" comment="First outro line" />
                  <append_to_list name="$RepresentativeLines" exact="12117" comment="Outro, this triggers the 'ceremonycomplete' callback "/>

                  <!-- Add lines to the queue -->
                  <do_all exact="$RepresentativeLines.count" counter="$LineCounter">
                    <add_npc_line speaker="$FactionRepresentative" lookat="player.entity" line="$RepresentativeLines.{$LineCounter}" />
                  </do_all>

                </do_if>
                <do_elseif value="event.param.{2} == 'ceremonyline'">

                  <do_if value="event.param.{3} == 12109">
                    <!-- rank notification -->
                    <show_notification text="[{30003,1001}, '', $Faction.licence.ceremonyfriend.name]" />
                    <set_value name="$TitlePostfix" exact="$Faction.licence.ceremonyfriend.name" />
                  </do_if>
                  <do_elseif value="event.param.{3} == 12110">
                    <!-- rank notification -->
                    <show_notification text="[{30003,1001}, '', $Faction.licence.ceremonyally.name]" />
                    <set_value name="$TitlePostfix" exact="$Faction.licence.ceremonyally.name" />
                  </do_elseif>
                  <do_elseif value="event.param.{3} == 12111">
                    <include_actions ref="LicencesNotificationsAndLogbook"/>
                  </do_elseif>
                  <do_elseif value="event.param.{3} == 12115">
                    <!-- police licence notification -->
                    <show_notification text="[{30003,1010}, '', $Faction.licence.police.name]" comment="You can now purchase:"/>
                  </do_elseif>

                </do_elseif>
                <do_elseif value="event.param.{2} == 'ceremonycomplete'">

                  <substitute_text text="$Title" source="readtext.{30003}.{1017}">
                    <replace string="'$RANK$'" with="$TitlePostfix" />
                  </substitute_text>
                  <debug_text text="'Ceremony completed.'" chance="$DebugChance"/>
                  <write_to_logbook category="general" title="$Title" text="$LogbookText" faction="$Faction" />

                </do_elseif>
              </actions>

            </cue>
          </cues>
        </cue>

      </cues>
    </cue>
  </cues>
</mdscript>