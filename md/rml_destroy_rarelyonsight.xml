<?xml version="1.0" encoding="utf-8"?>
<mdscript name="RML_Destroy_RarelyOnSight" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>

    <!--
    This RML is intended for use in Master-Missions. 
    It handles checking if the player destroyed enough ship(s) matching the specifications
    
    $feedbackvalue:
    -103 $TargetSpec parameter left undefined
    -101 Cue parameters not defined
    -100: Undefined failure. Defaulted to -100
    1: All Targets matching specs destroyed -->

    <library name="DestroyRarelyOnSight" version="3">
      <params>
        <param name="EndSignalCue"/>
        <param name="MissionCue"/>
        <param name="StartStep"       default="1"     comment="Briefing step to start the mission on"/>
        <param name="UpdateBriefing"  default="true"  comment="Update the briefing objective step when the objective is updated"/>
        <param name="DebugChance"     default="0" />

        <param name="Text_Objective"                  comment="Objective text to destroy the matching objects"/>
        <param name="TargetSpec"                      comment="Spec of the ships to destroy"/>
        <param name="TargetCount"     default="1"     comment="How many of 'TargetSpecs' to destroy"/>
        <param name="TargetFaction"   default="null"  comment="What Faction the Target needs to belong to"/>
      </params>
      <actions>
        <set_value name="$feedbackvalue" exact="0"/>
        <create_list name="$ErrorList"/>

        <do_if value="not $EndSignalCue or not $MissionCue">
          <append_to_list name="$ErrorList" exact="-101"/>
        </do_if>

        <do_if value="not $TargetSpec">
          <append_to_list name="$ErrorList" exact="-103"/>
        </do_if>

      </actions>
      <patch sinceversion="2" state="complete">
        <!--Patching $TargetSpec from a list to a table. However, this means that the caller (if they passed a list ref) would still have the old specs as we can't modify it from here.
        GM_Destroy_RarelyOnSight handles this itself-->
        <set_value name="$OldSpecs" exact="$TargetSpec"/>
        <set_value name="$TargetSpec" exact="table[]"/>
        <do_if value="$OldSpecs.{1}? and $OldSpecs.{1}">
          <set_value name="$TargetSpec.$macro" exact="$OldSpecs.{1}"/>
        </do_if>
        <do_if value="$OldSpecs.{2}? and $OldSpecs.{2}.count">
          <set_value name="$TargetSpec.$equipment" exact="$OldSpecs.{2}.clone"/>
        </do_if>
        <do_if value="$OldSpecs.{3}? and $OldSpecs.{3}.count">
          <do_all exact="$OldSpecs.{3}.count" counter="$i">
            <do_if value="$OldSpecs.{3}.{$i}.isammo">
              <do_if value="not $TargetSpec.$ammo?">
                <set_value name="$TargetSpec.$ammo" exact="table[]"/>
              </do_if>
              <set_value name="$TargetSpec.$ammo.{$OldSpecs.{3}.{$i}.objectmacro}" exact="1" comment="OldSpecs had no ware amount data. Default to 1"/>
            </do_if>
            <do_else>
              <do_if value="not $TargetSpec.$wares?">
                <set_value name="$TargetSpec.$wares" exact="table[]"/>
              </do_if>
              <set_value name="$TargetSpec.$wares.{$OldSpecs.{3}.{$i}}" exact="1" comment="OldSpecs had no ware amount data. Default to 1"/>
            </do_else>
          </do_all>
        </do_if>
        <do_if value="$OldSpecs.{4}? and $OldSpecs.{4}.count">
          <set_value name="$TargetSpec.$mods" exact="$OldSpecs.{4}.clone"/>
        </do_if>
        <debug_text text="'Patch: Target specs converted from list: ' + $OldSpecs + ' to table: ' + $TargetSpec" filter="savegame"/>
        <!--Do not remove $OldSpecs, for patch validation-->
      </patch>
      <patch sinceversion="3">
        <set_value name="$TargetFaction" exact="null"/>
      </patch>
      <cues>

        <cue name="Signal_Cleanup" onfail="cancel">
          <conditions>
            <check_value value="$ErrorList.count" min="1"/>
          </conditions>
          <actions>
            <signal_cue cue="Cleanup"/>
          </actions>
        </cue>

        <cue name="StartMission" onfail="cancel">
          <conditions>
            <check_value value="$ErrorList.count" min="0"/>
          </conditions>
          <actions>
            <debug_text text="'StartMission'" chance="$DebugChance"/>
            <set_value name="$TargetCountDone" exact="0"/>
            <signal_cue cue="UpdateBriefing"/>
          </actions>
          <cues>

            <cue name="DebugDestroyRarelyOnSight">
              <conditions>
                <event_cue_signalled comment="manually trigger for testing OwnerChanged-cue"/>
              </conditions>
              <actions>
                <generate_loadout macro="$TargetSpec.$macro" macros="if $TargetSpec.$equipment? then $TargetSpec.$equipment else []" level="1" result="$loadout"/>

                <create_ship name="$TargetSpec_Ship" zone="player.zone" macro="$TargetSpec.$macro">
                  <pilot group="argon.pilot">
                    <owner exact="faction.argon"/>
                  </pilot>
                  <loadout loadout="$loadout.{1}"/>
                  <owner exact="faction.argon"/>
                  <position object="player.ship" exact="4km"/>
                </create_ship>

                <do_if value="$TargetSpec.$equipment?">
                  <do_all exact="$TargetSpec.$equipment.count" counter="$UpgradeCounter" comment="engines, boosters, shields, ...">
                    <!-- TODO -->
                  </do_all>
                </do_if>

                <do_if value="$TargetSpec.$ammo?">
                  <do_all exact="$TargetSpec.$ammo.count" counter="$AmmoCounter" comment="flares and such">
                    <!-- TODO -->
                  </do_all>
                </do_if>

                <do_if value="$TargetSpec.$wares?">
                  <do_all exact="$TargetSpec.$wares.count" counter="$WaresCounter" comment="wares">
                    <!-- TODO -->
                  </do_all>
                </do_if>

                <do_if value="$TargetSpec.$mods?">
                  <do_all exact="$TargetSpec.$mods.count" counter="$ModCounter">
                    <set_value name="$Ware" exact="$TargetSpec.$mods.{$ModCounter}"/>

                    <do_if value="$Ware.isenginemod">
                      <add_equipment_mods object="$TargetSpec_Ship">
                        <engine ware="$Ware"/>
                      </add_equipment_mods>
                    </do_if>
                    <do_elseif value="$Ware.isweaponmod">
                      <find_object_component name="$TargetWeapon" class="class.weapon" object="$TargetSpec_Ship" multiple="false"/>
                      <do_if value="$TargetWeapon">
                        <add_equipment_mods object="$TheLastShip">
                          <weapon ware="$Ware" macro="$TargetWeapon.macro"/>
                        </add_equipment_mods>
                      </do_if>
                      <do_else>
                        <debug_text text="'No targetweapon found, ignoring weaponmods (if any)'"/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="$Ware.isshipmod">
                      <add_equipment_mods object="$TargetSpec_Ship">
                        <ship ware="$Ware"/>
                      </add_equipment_mods>
                    </do_elseif>
                    <do_elseif value="$Ware.isshieldmod">
                      <add_equipment_mods object="$TargetSpec_Ship">
                        <shield ware="$Ware"/>
                      </add_equipment_mods>
                    </do_elseif>
                  </do_all>
                </do_if>

                <set_owner object="$TargetSpec_Ship" faction="faction.xenon" />

                <set_object_shield object="$TargetSpec_Ship" exact="1"/>
                <set_object_hull object="$TargetSpec_Ship" exact="1"/>
                <!--destroy_object object="$TargetSpec_Ship" explosion="true"/-->


              </actions>
            </cue>

            <cue name="CheckMissionStatus" instantiate="true">
              <conditions>
                <event_player_owned_killed_object comment="also triggers for player killing something!"/>
              </conditions>
              <actions>
                <do_if value="event.name == 'event_player_killed_object'">
                  <set_value name="$KilledObject" exact="event.param"/>
                </do_if>
                <do_elseif value="event.name == 'event_player_owned_killed_object'">
                  <set_value name="$KilledObject" exact="event.param2"/>
                </do_elseif>
                <set_value name="$shipmatches" exact="false"/>
                <do_if value="$KilledObject.owner == faction.ownerless">
                  <set_value name="$KilledObjectFaction" exact="$TargetFaction" comment="In case of premature eject the check would fail otherwise"/>
                </do_if>
                <do_else>
                  <set_value name="$KilledObjectFaction"   exact="$KilledObject.owner"/>
                </do_else>
                <debug_text text="'KilledObjectFaction: ' + $KilledObjectFaction + ' Targetfaction: ' + $TargetFaction" chance="$DebugChance"/>

                <do_if value="$TargetSpec.$macro != 0">
                  <do_if value="($KilledObject.macro.ismacro.{$TargetSpec.$macro}) and ($KilledObjectFaction == $TargetFaction or $TargetFaction == 0 )">
                    <set_value name="$shipmatches" exact="true"/>
                    <set_value name="$shipequip" exact="@$TargetSpec.$equipment"/>
                    <set_value name="$shipammo" exact="@$TargetSpec.$ammo"/>
                    <set_value name="$shipwares" exact="@$TargetSpec.$wares"/>
                    <set_value name="$shipmods" exact="@$TargetSpec.$mods"/>
                    <set_value name="$currentship" exact="$KilledObject"/>
                    <include_actions ref="md.LIB_Generic.CheckShipMatches"/>
                  </do_if>
                </do_if>
                <do_elseif value="($KilledObjectFaction == $TargetFaction or $TargetFaction == 0 )">
                  <set_value name="$shipmatches" exact="true"/>
                </do_elseif>
                
                <!-- success check -->
                <do_if value="$shipmatches">
                  <signal_cue cue="UpdateBriefing"/>
                  <set_value name="$TargetCountDone" operation="add"/>
                </do_if>
                <do_else>
                  <debug_text text="'Destroyed ship does not meet requirements'" chance="$DebugChance"/>
                </do_else>

                <do_if value="$TargetCountDone ge $TargetCount">
                  <set_value name="$feedbackvalue" exact="1" comment="success"/>
                  <signal_cue cue="Cleanup"/>
                </do_if>

              </actions>

            </cue>


          </cues>
        </cue>

        <cue name="UpdateBriefing" instantiate="true" comment="Called each time a briefing-update is needed">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>

            <do_if value="$UpdateBriefing">
              <update_mission cue="$MissionCue">
                <briefing>
                  <objective step="$StartStep" action="objective.destroy" text="$Text_Objective"/>
                </briefing>
              </update_mission>
              <do_if value="$TargetCount == 1">
                <set_objective cue="$MissionCue" step="$StartStep" action="objective.destroy" text="$Text_Objective"/>
              </do_if>
              <do_else>
                <set_objective cue="$MissionCue" step="$StartStep" action="objective.destroy" text="$Text_Objective">
                  <progress progress="$TargetCountDone" max="$TargetCount" text="{30004,1800}"/>
                </set_objective>
              </do_else>
            </do_if>

          </actions>
        </cue>

        <cue name="Cleanup">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--TODO remove_objective-->

            <do_if value="$feedbackvalue" exact="0">
              <do_if value="$ErrorList.count" exact="0">
                <debug_text text="'ERROR: RML_Destroy_RarelyOnSight.Cleanup - Feedback value is 0 and no error values were set. Defaulting to -100'"/>
                <set_value name="$feedbackvalue" exact="-100"/>
              </do_if>
              <do_else>
                <set_value name="$feedbackvalue" exact="$ErrorList.{1}"/>

                <do_if value="md.$RML_Debugging">
                  <do_all exact="$ErrorList.count" counter="$Counter">
                    <do_if value="$ErrorList.{$Counter}" exact="-103">
                      <set_value name="$FeedbackText" exact="'$TargetSpec parameter left undefined'"/>
                    </do_if>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-101">
                      <set_value name="$FeedbackText" exact="'Cue parameters not defined'"/>
                    </do_elseif>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-100">
                      <set_value name="$FeedbackText" exact="'Undefined failure. Defaulted to -100'"/>
                    </do_elseif>
                    <do_else>
                      <set_value name="$FeedbackText" exact="'Error: Unknown error value'"/>
                    </do_else>

                    <debug_text text="'Mission Error. Feedback id: ' + $ErrorList.{$Counter} + ' - ' + $FeedbackText" filter="error"/>
                  </do_all>
                </do_if>
              </do_else>
            </do_if>
            <do_else>

              <do_if value="$feedbackvalue" exact="1">
                <set_value name="$FeedbackText" exact="'Targets destroyed'"/>
              </do_if>

              <do_if value="$feedbackvalue" min="1">
                <debug_text text="'Mission Successful. Feedback id: ' + $feedbackvalue + ' - ' + $FeedbackText" chance="md.$RML_Debugging * $DebugChance"/>
              </do_if>
              <do_elseif value="@$FeedbackText">
                <set_value name="$EndSignalCue.$EndFeedbackText" exact="$FeedbackText"/>
                <debug_text text="'Mission Failed. Feedback id: ' + $feedbackvalue + ' - ' + $FeedbackText" chance="md.$RML_Debugging * $DebugChance"/>
              </do_elseif>
              <do_else>
                <debug_text text="'WARNING: Unhandled feedback value ' + $feedbackvalue" chance="$DebugChance"/>
              </do_else>

            </do_else>

            <set_value name="$EndSignalCue.$EndFeedbackValue" exact="$feedbackvalue"/>
            <signal_cue cue="$EndSignalCue"/>
            <cancel_cue cue="DestroyRarelyOnSight"/>
          </actions>
        </cue>
      </cues>
    </library>
  </cues>
</mdscript>
