<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GM_BringItems" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>

    <!--Base Mission information-->
    <!--
    Generic Mission name:    Bring Item
    Primary 'missiontype':   missiontype.deliver -->

    <!--The Feedback Manager contains a table of feedback values related to this Generic Mission. 
		This table is 'const' during the mission (the table itself doesn't change anymore after inialization)

	There are several maintypes of feedback:
    event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
    removed:  The mission offer was removed before acceptance
    success:  The mission was successfully completed by the player
    failure:  The player failed the mission
    error:    Something went wrong with the mission set-up or during the mission-->
    <cue name="FeedbackValueManager" namespace="this" version="4">
      <actions>
        <set_value name="$FeedbackValues" exact="table[
                   $MISSION_GENERATED             = table[$type = 'event',    $text = 'Mission variation generated successfully'],
                   $MISSION_ACCEPTED              = table[$type = 'event',    $text = 'Mission accepted'],
                   $MISSION_NO_VARIANT            = table[$type = 'event',    $text = 'No mission variant currently possible'],
                   
                   $OFFER_REMOVED                     = table[$type = 'removed',  $text = 'Offer removed'],
                   $DECLINED_OFFER                    = table[$type = 'removed',  $text = 'Player declined Event Offer'],
                   $EVENT_OFFER_TIMEOUT               = table[$type = 'removed',  $text = 'Event Offer timeout'],
                   $SIGNAL_LEAK_REMOVED               = table[$type = 'removed',  $text = 'Signal leak offer removed'],
                   $DELIVERYNPC_KILLED_EARLY          = table[$type = 'removed',  $text = 'Delivery NPC was killed early'],
                   $DELIVERY_STATION_DESTROYED_EARLY  = table[$type = 'removed',  $text = 'Deliver station destroyed early'],
                   
                   $MISSION_SUCCEEDED             = table[$type = 'success',  $text = 'Mission succeeded'],
                   
                   $MISSION_ABORTED               = table[$type = 'failure',  $text = 'Mission aborted by player'],
                   $FORCED_CLEANUP                = table[$type = 'failure',  $text = 'Forced to end from outside'],
                   $MISSION_TIMEOUT               = table[$type = 'failure',  $text = 'Mission timeout'],
                   $MISSION_FAILED                = table[$type = 'failure',  $text = 'Mission failure'],
                   $DELIVERYNPC_KILLED            = table[$type = 'failure',  $text = 'Delivery NPC was killed'],
                   $DELIVERY_STATION_DESTROYED    = table[$type = 'failure',  $text = 'Deliver station destroyed'],
                   
                   $NO_VALID_CLIENT_OWNER         = table[$type = 'error',    $text = 'No valid ClientOwner parameter provided'],
                   $INVALID_OFFER_TYPE            = table[$type = 'error',    $text = 'No offer parameters were valid'],
                   $NO_TEXT_OFFSET                = table[$type = 'error',    $text = 'No TextOffset set'],
                   $INVALID_DELIVERYNPC_PARAM     = table[$type = 'error',    $text = 'Invalid DeliveryNPC param'],
                   $INVALID_DELIVERYSTATION_PARAM = table[$type = 'error',    $text = 'Invalid DeliveryStation param'],
                   $INVALID_DELIVERYROOM_PARAMS   = table[$type = 'error',    $text = 'Invalid delivery room params. Either DeliveryRoomMacro, DeliveryCorridorMacro, DeliveryDoors or DeliveryInteriorName'],
                   $INVALID_DELIVERYITEM_PARAM    = table[$type = 'error',    $text = 'Invalid DeliveryItem param'],
                   $INVALID_FORCE_CLEANUP         = table[$type = 'error',    $text = 'ForceCleanup cue invalid']
                   ]"/>
      </actions>
      <patch sinceversion="4">
        <!--To patch new feedback values, increment 'version' and 'sinceversion' number-->
        <force_cue cue="FeedbackValueManager"/>
      </patch>
    </cue>

    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternatively, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname
        2 = $TextTable.$description
        3 = $TextTable.$objective
        4 = $TextTable.$conversationoption  Used to substitute current amount and warename. Table value only used for substitution. example: "Deliver: $AMOUNT$x $WARE$"
        5 = $TextTable.$tooltip             Conversation option tooltip if not selectable
        7 = $TextTable.$progress            Progress bar text, e.g. 'Delivered' -->

        <set_value name="$TextTable.$missionname" exact="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100" />
        <set_value name="$TextTable.$description" exact="readtext.{$Page}.{$TextOffset + 2}" chance="if $TextTable.$description? then 0 else 100" />

        <do_if value="$TimeBonusCr_Max? and not $TextTable.$timebonus?">
          <do_if value="$DurationUntilBonusDecay? and ($DurationUntilBonusDecay le $MissionDuration)">
            <substitute_text text="$TextTable.$timebonus" source="readtext.{30135}.{108}">
              <replace string="'$TIME$'" with="($MissionDuration - $DurationUntilBonusDecay).formatted.{if ($MissionDuration - $DurationUntilBonusDecay) >= 3600 then '%h:%M:%S' else '%M:%S'}"/>
              <replace string="'$REWARD$'" with="(($TimeBonusCr_Max)ct).formatted.default + ' ' + readtext.{1001}.{101}" comment="Cr"/>
            </substitute_text>
          </do_if>
          <do_elseif value="$DurationUntilBonusExpiry? and ($DurationUntilBonusExpiry le $MissionDuration)">
            <substitute_text text="$TextTable.$timebonus" source="readtext.{30135}.{109}">
              <replace string="'$TIME$'" with="($MissionDuration - $DurationUntilBonusExpiry).formatted.{if ($MissionDuration - $DurationUntilBonusExpiry) >= 3600 then '%h:%M:%S' else '%M:%S'}"/>
              <replace string="'$REWARD$'" with="(($TimeBonusCr_Max)ct).formatted.default + ' ' + readtext.{1001}.{101}" comment="Cr"/>
            </substitute_text>
          </do_elseif>
        </do_if>
        
         <!--It is currently not possible to update a description as the mission goes on, which leads to misleading briefings once the player accepts the mission-->
        <!--<do_if value="$OwnedAmount">
          <set_value name="$TextTable.$description" exact="$TextTable.$description + '\n\n' + {30202,1043}"/>
          <substitute_text text="$TextTable.$description">
            <replace string="'$AMOUNT$'" with="$OwnedAmount" />
            <replace string="'$WARE$'" with="$DeliveryItem.name" />
          </substitute_text>
        </do_if>-->

        <do_if value="$TextTable.$timebonus?">
          <set_value name="$TextTable.$description" exact="$TextTable.$description + '\n\n' + $TextTable.$timebonus"/>
        </do_if>

        <substitute_text text="$TextTable.$objective" source="readtext.{$Page}.{$TextOffset + 3}" chance="if $TextTable.$objective? then 0 else 100">
          <replace string="'$AMOUNT$'" with="$DeliveryAmount" />
          <replace string="'$WARE$'" with="$DeliveryItem.name" />
        </substitute_text>

        <set_value name="$TextTable.$conversationoption" exact="readtext.{$Page}.{$TextOffset + 4}" chance="if $TextTable.$conversationoption? then 0 else 100"/>

        <set_value name="$TextTable.$tooltip" exact="readtext.{$Page}.{$TextOffset + 5}" chance="if $TextTable.$tooltip? then 0 else 100" />
        <set_value name="$TextTable.$progress" exact="readtext.{$Page}.{$TextOffset + 7}" chance="if $TextTable.$progress? then 0 else 100" />
      </actions>
    </library>

    <library name="Start" version="7">
      <params>
        <!-- For creating your own custom GM, you might need to change _some_ of the below parameters -->
        <param name="OfferObject" default="null" comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client" default="null" comment="Pre-existing client"/>
        <param name="ClientOwner" default="null" comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionCue" default="null" comment="Cue the mission is attached to. Defaults to Start (this)."/>
        <param name="MissionThread" default="null" comment="Mission thread for the offer and mission"/>

        <param name="GenerateReward" default="true" comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr" default="null" comment="If the reward for this mission is credits, the number of credits should be set to this variable." />
        <param name="RewardObj" default="null" comment="If the reward for this mission is not credits, and is an object, it should be set to this variable." />
        <param name="RewardNotoriety" default="null"/>
        <param name="RewardText" default="null"  comment="Any text needed to define the reward for this mission - may be used in conjunction with $RewardCr and $RewardObj." />
        <param name="MissionDuration" default="null"/>
        <param name="DurationUntilBonusDecay" default="null" comment="Mission duration until the bonus reward credits start to decay"/>
        <param name="DurationUntilBonusExpiry" default="null" comment="Mission duration until the bonus reward credits expire completely"/>
        <param name="MissionType" default="missiontype.deliver" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"/>
        <param name="Difficulty"/>

        <!--Offer location and conversation-->
        <param name="WithoutOffer" default="false" comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue" default="null" comment="Do not create a mission offer but wait for this cue to be completed before running the mission"/>
        <param name="DeclineButton" default="true" comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer" default="false" comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer" default="false" comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue" default="null" comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance" default="null"/>
        <param name="HideFromBBS" default="false" comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange" default="true"/>
        <param name="OfferDistance" default="50km" comment="Distance to the offer location before it becomes visible on the map or BBS (unless otherwise hidden)"/>

        <!--BBS only params-->
        <param name="BBSObject" default="null"/>
        <param name="BBSDistance" default="null"/>
        <param name="BBSTimeoutMin" default="null"/>
        <param name="BBSTimeoutMax" default="null"/>
        <param name="BBSSpace" default="null"/>

        <!--Mission text-->
        <param name="Page"        comment="Allows a different text page to be used instead of the generic one. Text IDs must be mapped similarly."/>
        <param name="TextOffset"  comment="The text offset for this variant's text on the page."/>
        <param name="TextTable" default="table[]" comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi'
               Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>

        <!--Mission specific params-->
        <param name="SignalLeakVoiceLine" default="null"                comment="The line that should be used for signal leak introductions to this mission" />
        <param name="DeliveryNPC"                                       comment="The NPC to which the items should be delivered" />
        <param name="DeliveryStation"                                   comment="The station in which to place the NPC or to place the dynamic interior" />
        <param name="DeliveryItem"                                      comment="The item to be delivered" />
        <param name="DeliveryAmount"      default="1"                   comment="The number of DeliveryItem to be delivered" />
        <param name="OwnedAmount"         default="null"                comment="The number of DeliveryItem to be delivered" />
        <!-- ************************************************************************************************************************************************************************ -->
        <!-- If the mission is to manage placing the delivery NPC, $StartObject must be set.
        Interior parameters are optional but if one is set, they must be passed in together -->
        <param name="PlaceNPC"            default="false"               comment="Does the mission handle the placement and removal of the delivery NPC? If false, some other system must be in charge of doing so." />
        <param name="PlacementTable"      default="table[$cue = namespace, $priority = 50]"  comment="Table containing the owning cue and priority of placing the NPC vs other missions"/>
        <param name="DeliveryNPCSlotTags" default="[tag.npc_generic]"   comment="NPC slot tags to help position the DeliveryNPC" />
        <!-- Interior parameters: Room, corridor and door definitions could be provided by the caller through get_room_definition -->
        <param name="DeliveryRoomMacro" default="null" comment="The dynamic interior room the DeliveryNPC should be placed in, if not placed already" />
        <param name="DeliveryCorridorMacro" default="null" comment="The dynamic interior corridor leading to DeliveryRoomMacro" />
        <param name="DeliveryDoors" default="null" comment="The possible dynamic interior doors used to connect the room and corridor. When defining a room or corridor macro, this is is the variable saved in the doors parameter" />
        <param name="DeliveryInteriorName" default="null" comment="The name of the dynamic interior the DeliveryNPC should used, if not placed already" />
        <!-- ************************************************************************************************************************************************************************ -->

        <param name="ReportSignalCue" default="null" comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue" default="null" comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup" default="null" comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance" default="0"/>
      </params>
      <actions>
        <!--Feedback value setup-->
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GM_BringItems.FeedbackValueManager"/>

        <assert value="$WithoutOffer or not $MissionCue or (not $MissionCue.hasmission and not $MissionCue.hasmissionoffer)"
                text="'Mission is set to create an offer but provided MissionCue: ' + $MissionCue + ' already has an offer or is a running mission [Owen]'"/>

        <assert value="not $MissionThread or $WithoutOffer" text="'Thread sub-mission is also set to create an offer which is not supported.\n
                The mission thread offer should be populated with mission details suitable for this mission, but not from an actual mission. Thread: ' + $MissionThread + ' [Owen]'"/>

        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>

        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [Owen]'"/>
            </do_if>

            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
            <do_else>
              <!--Mission specific param checks-->
              <do_if value="not $DeliveryNPC.isclass.npc">
                <set_value name="$Feedback" exact="'$INVALID_DELIVERYNPC_PARAM'"/>
              </do_if>
              <do_elseif value="not ($DeliveryStation.isclass.station and $DeliveryStation.isoperational)">
                <set_value name="$Feedback" exact="'$INVALID_DELIVERYSTATION_PARAM'" />
              </do_elseif>
              <do_elseif value="typeof $DeliveryItem != datatype.ware">
                <set_value name="$Feedback" exact="'$INVALID_DELIVERYITEM_PARAM'"/>
              </do_elseif>
              <do_elseif value="typeof $DeliveryAmount != datatype.integer or $DeliveryAmount le 0">
                <set_value name="$Feedback" exact="'$INVALID_ENEMY_SPAWNZONE_PARAM'"/>
              </do_elseif>
              <do_elseif value="not ($DeliveryRoomMacro and $DeliveryCorridorMacro and $DeliveryDoors and $DeliveryInteriorName) and 
                       not (not $DeliveryRoomMacro and not $DeliveryCorridorMacro and not $DeliveryDoors and not $DeliveryInteriorName)">
                <!--Interior parameters were incomplete-->
                <set_value name="$Feedback" exact="'$INVALID_DELIVERYROOM_PARAMS'"/>
              </do_elseif>
            </do_else>
          </do_else>
        </do_if>
      </actions>
      <patch sinceversion="3">
        <!--all variants of of this mission in this version should have these flags set-->
        <!--<set_value name="$AllowInteriorFallback" exact="true" comment="unused as of 2.0 B1"/>-->
        <set_entity_traits entity="$DeliveryNPC" missionactor="true" customhandler="true"/>
      </patch>
      <patch sinceversion="4" state="complete">
        <do_if value="not $DeliveryNPC.isclass.npc">
          <set_value name="$DebugChance" exact="100"/>
          <set_value name="$Feedback" exact="'$DELIVERYNPC_KILLED_EARLY'"/>
          <signal_cue cue="CleanUp"/>
        </do_if>
        <do_elseif value="not $DeliveryStation.isoperational">
          <set_value name="$DebugChance" exact="100"/>
          <set_value name="$Feedback" exact="'$DELIVERY_STATION_DESTROYED_EARLY'"/>
          <signal_cue cue="CleanUp"/>
        </do_elseif>
      </patch>
      <patch sinceversion="5" state="complete">
        <set_value name="$PlaceNPC" exact="false"/>
        <do_if value="$DeliveryNPC.isclass.npc and $DeliveryStation.isoperational">
          <!--The shady guy has its own handler for being placed-->
          <do_if value="$DeliveryNPC.controlpost != controlpost.shadyguy">
            <debug_text text="'Setting bring item mission to handle the placement of delivery NPC ' + $DeliveryNPC + ' ' + $DeliveryNPC.knownname + ' on ' + $DeliveryStation + ' ' + $DeliveryStation.knownname" filter="savegame"/>
            <set_value name="$PlaceNPC" exact="true"/>
          </do_if>
        </do_if>
        <remove_value name="$AllowInteriorFallback"/>
        <remove_value name="$PreexistingDeliveryNPC"/>
      </patch>
      <patch sinceversion="6" state="complete">
        <set_value name="$DeliveryNPCSlot" exact="null"/>
        <do_if value="$PlaceNPC">
          <get_room_definition macro="$DeliveryCorridorMacro" doors="$DeliveryDoors" race="$DeliveryStation.owner.primaryrace" tags="tag.corridor" />
          <get_room_definition macro="$DeliveryRoomMacro" tags="tag.bar" />
          <set_value name="$DeliveryInteriorName" exact="readtext.{20007}.{1031}" />
        </do_if>
      </patch>
      <patch sinceversion="7" state="complete">
        <set_value name="$PlacementTable" exact="table[$cue = namespace, $priority = 50]"/>
        <set_value name="$DeliveryNPCSlotTags" exact="[tag.npc_generic]"/>
        <remove_value name="$DeliveryNPCSlot"/>
      </patch>
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>

        <cue name="Do_Start_Mission" onfail="cancel" version="2">
          <conditions>
            <check_value value="not $Feedback"/>
          </conditions>
          <actions>
            <do_if value="not $MissionCue">
              <set_value name="$MissionCue" exact="Start"/>
            </do_if>

            <do_if value="not $PreexistingClient?">
              <!-- No pre-existing client, create a temporary client for this mission -->
              <create_cue_actor cue="Start" name="$Client">
                <select faction="$ClientOwner"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>

            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>

              <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]" comment="basic reward credits"/>
              <include_actions ref="md.LIB_Reward_Balancing.TimeBonusCr_Max" comment="Input: $Reward_Money__Result; Output: $TimeBonusCr_Max"/>

              <do_any>
                <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                  <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                  <include_actions ref="CalculateResourceCost"/>
                  <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied + $ResourceCost__Result"/>
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardModWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_ModPart" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_ModPart__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardSeminarWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Seminar" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_Seminar__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
              </do_any>

              <do_if value="not $RewardNotoriety">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
              </do_if>
            </do_if>

            <include_actions ref="GenerateTextTable"/>

            <do_if value="$ReportSignalCue">
              <!--Signal the $ReportSignalCue that the mission has been successfully generated-->
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
              <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
              <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
              <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText]"/>
            </do_if>
          </actions>
          <patch sinceversion="2">
            <set_value name="$TextTable.$progress" exact="readtext.{$Page}.{$TextOffset + 7}" chance="if $TextTable.$progress? then 0 else 100" />
          </patch>
          <cues>

            <!--***MISSION OFFER***-->
            <cue name="With_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <cues>
                <!--Cue which creates the offer, when signalled. To be signalled from the GenericMissions.OfferMission library, referenced below-->
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">

                      <!-- TODO: For creating your own custom GM, you want to change the below briefing details/objective -->
                      <!-- Briefing details -->
                      <create_offer cue="$MissionCue" location="$OfferObject" distance="$OfferDistance" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" actor="$Client"
                                  faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" duration="$MissionDuration" hidden="$HideFromBBS" space="$BBSSpace">
                        <briefing>
                          <objective step="1" action="objective.deliver" text="$TextTable.$objective" comment="Deliver: $AMOUNT$x $WARE$"/>
                        </briefing>
                      </create_offer>
                    </do_if>
                    <set_value name="$OfferCreated" exact="true"/>

                    <do_if value="$OfferObject.isclass.signalleak">
                      <do_if value="readtext.{$Client.page}.{$SignalLeakVoiceLine}?">
                        <update_signal_leak_voice object="$OfferObject" page="$Client.page" lines="$SignalLeakVoiceLine" />
                      </do_if>
                      <do_else>
                        <set_value name="$Feedback" exact="'$INVALID_SIGNALLEAKVOICELINE_PARAM'" />
                        <signal_cue cue="CleanUp" />
                      </do_else>
                    </do_if>
                  </actions>
                </cue>

                <!--The majority of the offer logic is within this library. The parameters we pass down below, specify in which way this mission is going to be offered to the player (i.e. BBS, Signal-Leak, ...)
                Some of the mission specific handling is still contained in this file but triggered via the library via a signal e.g. setting up the briefing details via the 'CreateOffer' cue above.-->
                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType"     value="$OfferType"/>
                  <param name="OfferCue"      value="$MissionCue"/>
                  <param name="CleanupCue"    value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName"   value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue" value="$CancelOfferCue"/>

                  <!--Object based params (offered by Station/Ship/Signal-leak)-->
                  <param name="TimeoutMin"  value="8min" comment="Minimum time the offer remains valid"/>
                  <param name="TimeoutMax"  value="12min"/>
                  <param name="MaxDistance" value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>

                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject" value="$OfferObject"/>

                  <!--BBS based offers-->
                  <param name="BBSObject"     value="@$BBSObject"/>
                  <param name="BBSDistance"   value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>

                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>

                  <!--Client-->
                  <param name="Client"                 value="$Client"/>
                  <param name="Line_EventOffer"        value="1000101" comment="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_StartConversation" value="null" comment ="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_Goodbye"           value="null" comment="Client speaks this line from his generic-npc-page"/>

                  <param name="DebugChance" value="$DebugChance"/>
                </cue>

                <!--Cue signalled when the offer library is finished-->
                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the cases where a mission is automatically accepted on creation-->
            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
              </conditions>
              <actions>
                <signal_cue cue="MissionAccepted" />
              </actions>
            </cue>

            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="not event.param? or event.param == $MissionCue"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <signal_cue_instantly cue="MissionAccepted" />
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)-->
            <cue name="BriefingStarted">
              <conditions>
                <check_any>
                  <event_briefing_started cue="$MissionCue"/>
                  <event_briefing_submission_selected cue="$MissionCue"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$RenderTarget" exact="event.param.{1}"/>

                <set_value name="$BriefingCutsceneStarted" />
                <debug_text text="'Briefing started'" chance="$DebugChance"/>
              </actions>
              <cues>

                <cue name="DisplayCutscene" onfail="cancel">
                  <conditions>
                    <check_value value="$BriefingCutsceneStarted?"/>
                  </conditions>
                  <actions>
                    <set_value name="$CutsceneObject" exact="$DeliveryNPC" />
                    <set_value name="$CutsceneKey" exact="'ShowCharacter'" />
                    <play_cutscene key="$CutsceneKey" rendertarget="$RenderTarget">
                      <param name="npcref" object="$CutsceneObject" />
                    </play_cutscene>
                  </actions>
                </cue>

                <cue name="BriefingStopped">
                  <conditions>
                    <check_any>
                      <event_briefing_cancelled cue="$MissionCue"/>
                      <event_briefing_submission_unselected cue="$MissionCue"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                    <do_if value="$BriefingCutsceneStarted?">
                      <remove_value name="$BriefingCutsceneStarted"/>
                      <stop_cutscene key="$CutsceneKey"/>
                    </do_if>

                    <debug_text text="'Briefing cancelled'" chance="$DebugChance"/>
                    <reset_cue cue="BriefingStarted"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="DeliveryNpcKilled_Early">
              <conditions>
                <event_object_destroyed object="$DeliveryNPC"/>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$DELIVERYNPC_KILLED_EARLY'"/>
                <signal_cue cue="CleanUp"/>
              </actions>
            </cue>

            <cue name="DeliverStationDestroyed_Early">
              <conditions>
                <event_object_destroyed object="$DeliveryStation"/>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$DELIVERY_STATION_DESTROYED_EARLY'"/>
                <signal_cue cue="CleanUp"/>
              </actions>
            </cue>

            <!--This cue creates the mission itself, either from scratch or via an existing mission offer-->
            <cue name="MissionAccepted">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <actions>
                <do_if value="not $WithoutOffer">
                  <speak actor="$Client" line="1000204" comment="(player accepted mission offer)" />
                  <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = 1000204]"/>
                </do_if>

                <debug_text text="'Mission accepted!'" chance="$DebugChance"/>
                <set_value name="stat.missions_accepted" operation="add"/>

                <do_if value="$WithoutOffer">
                  <!--$MissionCue may already be a mission cue passed in as a parameter-->
                  <do_if value="not $MissionCue.hasmission">
                    <do_if value="$MissionThread">
                      <create_mission cue="$MissionCue" missionthread="$MissionThread" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_if>
                    <do_else>
                      <create_mission cue="$MissionCue" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_else>
                  </do_if>

                  <update_mission cue="$MissionCue">
                    <briefing>
                      <objective step="1" action="objective.deliver" text="$TextTable.$objective" comment="Deliver: $AMOUNT$x $WARE$" />
                    </briefing>
                  </update_mission>
                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="$MissionCue" offercue="$MissionCue" missionthread="$MissionThread"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="$MissionCue" offercue="$MissionCue"/>
                  </do_else>
                  <remove_offer cue="$MissionCue"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>

                <!-- TODO: For creating your own custom GM, the below code consists of the actual mission-logic, this will likely need major changes -->
                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>

                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>
              </actions>
              <cues>
                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>

                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{$MissionCue}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{$MissionCue}"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="ActivateMission" version="2">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <cancel_cue cue="DeliveryNpcKilled_Early"/>
                    <cancel_cue cue="DeliverStationDestroyed_Early"/>

                    <set_value name="$StartStep" exact="1"/>

                    <set_value name="$AmountToBeDelivered" exact="$DeliveryAmount" comment="Track the number of items the player has already delivered - when it hits 0, this mission is complete" />
                    <do_if value="$DeliveryNPC.type" exact="entitytype.shadyguy">
                      <!-- If this is the mission variant working with a shady guy, check to see whether they require unlocking -->
                      <debug_text text="'We are working with a shady guy - look to see whether they require unlocking'" chance="$DebugChance" />
                      <do_if value="not $DeliveryNPC.tradesvisible">
                        <debug_text text="'Registering this mission ' + $MissionCue + ' as a requester for shady guy instantiation of ' + $DeliveryNPC" chance="$DebugChance" />
                        <do_if value="not $DeliveryNPC.$InstantiationRequesters?">
                          <set_value name="$DeliveryNPC.$InstantiationRequesters" exact="[]"/>
                        </do_if>
                        <append_to_list name="$DeliveryNPC.$InstantiationRequesters" exact="$MissionCue"/>
                        <signal_objects object="$DeliveryStation" param="'npc_instantiation__mission'" comment="Make sure the shady guy is actually properly instantiated on the station" />
                      </do_if>
                    </do_if>
                    <set_value name="$MissionActivationTime" exact="player.age"/>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <set_value name="$Patch200_CancelDestructionCues" exact="true"/>
                  </patch>
                  <cues>

                    <cue name="Debug_AddNecessaryItems" instantiate="true">
                      <conditions>
                        <event_cue_signalled />
                      </conditions>
                      <actions>
                        <add_inventory entity="player.entity" ware="$DeliveryItem" exact="$DeliveryAmount" />
                        <debug_text text="$DeliveryAmount + ' ' + $DeliveryItem.name + ' added to player inventory'" />
                      </actions>
                    </cue>

                    <cue name="Patch200_CancelDestructionCues" onfail="cancel">
                      <conditions>
                        <check_value value="$Patch200_CancelDestructionCues?" />
                      </conditions>
                      <actions>
                        <cancel_cue cue="DeliveryNpcKilled_Early"/>
                        <cancel_cue cue="DeliverStationDestroyed_Early"/>
                      </actions>
                    </cue>

                    <cue name="DeliverInventory_RML">
                      <actions>
                        <set_value name="$WaresTable" exact="table[]"/>
                        <set_value name="$WaresTable.{$DeliveryItem}" exact="[$DeliveryAmount, $AmountToBeDelivered]"/>
                      </actions>
                      <cues>
                        <cue name="DeliverInventory_RML_Ref" ref="md.RML_Deliver_Inventory.Deliver_Inventory">
                          <param name="EndSignalCue"    value="MissionEnded"/>
                          <param name="MissionCue"      value="$MissionCue"/>
                          <param name="StartStep"       value="$StartStep"  comment="Briefing step to start the mission on"/>
                          <param name="UpdateBriefing"  value="true"        comment="Update the briefing objective step when the objective is updated"/>

                          <!--Delivery params-->
                          <param name="WaresTableParam" value="$WaresTable"       comment="Table of ware amounts. Key = ware. Value = [$maxamount, $remainingamount]. Inventory wares only."/>
                          <param name="DeliveryNPC"     value="$DeliveryNPC"      comment="The NPC to which the items should be delivered." />
                          <param name="DeliveryObject"  value="$DeliveryStation"  comment="The object on which to point to before the NPC is placed. Also used to create the interior with the below parameters" />
                          <param name="ProgressBarText"         value="$TextTable.$progress" comment="Text to be displayed next to the ware delivery progress bar e.g. ('Delivered')"/>
                          <param name="ConversationOptionText"  value="$TextTable.$conversationoption"/>
                          <param name="ConversationTipText"     value="$TextTable.$tooltip"/>
                          <!-- ************************************************************************************************************************************************************************ -->
                          <!-- NPC Placement and interior creation - See library for parameter details-->
                          <param name="PlaceNPC"              value="$PlaceNPC"/>
                          <param name="PlacementTable"        value="$PlacementTable"/>
                          <param name="DeliveryNPCSlotTags"   value="$DeliveryNPCSlotTags"/>

                          <!-- Interior parameters. If either is provided, all must be valid. -->
                          <param name="DeliveryRoomMacro"     value="$DeliveryRoomMacro"    comment="The dynamic interior room the DeliveryNPC should be placed in, if not placed already" />
                          <param name="DeliveryCorridorMacro" value="$DeliveryCorridorMacro" comment="The dynamic interior corridor leading to DeliveryRoomMacro" />
                          <param name="DeliveryDoor"          value="if $DeliveryDoors then $DeliveryDoors.random else null" comment="The possible dynamic interior doors used to connect the room and corridor. When defining a room or corridor macro, this is is the variable saved in the doors parameter" />
                          <param name="DeliveryInteriorName"  value="$DeliveryInteriorName" comment="The name of the dynamic interior the DeliveryNPC should used, if not placed already" />
                          <!-- ************************************************************************************************************************************************************************ -->
                          <param name="DebugChance"           value="$DebugChance"/>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="Aborted">
                      <conditions>
                        <event_mission_aborted cue="$MissionCue"/>
                      </conditions>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                        <remove_mission cue="$MissionCue" type="aborted"/>
                        <signal_cue cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="MissionTimeout" onfail="cancel">
                      <conditions>
                        <check_value value="typeof $MissionDuration == datatype.time"/>
                        <check_value value="$MissionDuration" min="1s"/>
                      </conditions>
                      <delay exact="$MissionDuration"/>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericTimeoutLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <remove_mission cue="$MissionCue" type="failed"/>
                        <set_value name="$Feedback" exact="'$MISSION_TIMEOUT'"/>
                        <signal_cue_instantly cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="MissionEnded">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!-- Failure case -->
                        <do_if value="MissionEnded.$EndFeedbackValue" max="0">
                          <debug_text text="'This mission has failed. Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                          <do_if value="MissionEnded.$EndFeedbackValue == -3">
                            <set_value name="$Feedback" exact="'$DELIVERY_STATION_DESTROYED'"/>
                          </do_if>
                          <do_elseif value="MissionEnded.$EndFeedbackValue == -2">
                            <set_value name="$Feedback" exact="'$DELIVERYNPC_KILLED'"/>
                          </do_elseif>
                          <do_else>
                            <set_value name="$Feedback" exact="'$MISSION_FAILED'"/>
                            <speak actor="$Client" line="1000403" comment="(failed mission)" />
                          </do_else>
                          <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>

                          <remove_mission cue="$MissionCue" type="failed" reason="@MissionEnded.$EndFeedbackText"/>
                        </do_if>

                        <!-- Success case -->
                        <do_else>
                          <debug_text text="'This mission has ended. Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                          <do_if value="$RewardNotoriety and $ClientOwner">
                            <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                            <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted" />
                            <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                          </do_if>

                          <include_actions ref="md.LIB_Reward_Balancing.Apply_TimeBonusCr" comment="Input: $TimeBonusCr_Max, $MissionActivationTime, ($DurationUntilBonusDecay), ($DurationUntilBonusExpiry), ($RewardCr); Output: $RewardCr"/>

                          <do_if value="$RewardCr" comment="There may be a credit reward (e.g. time bonus) even if the main reward is an object">
                            <reward_player money="$RewardCr"/>
                          </do_if>
                          <do_if value="$RewardObj">
                            <do_if value="typeof $RewardObj == datatype.ware and $RewardObj.isinventory">
                              <add_inventory entity="player.entity" ware="$RewardObj" />
                              <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received" />
                            </do_if>
                            <do_elseif value="$RewardObj.isclass.npc and $RewardObj.isshadyguy">
                              <set_entity_traits entity="$RewardObj" tradesvisible="true"/>
                            </do_elseif>
                          </do_if>
                          <set_value name="stat.missions_completed" operation="add"/>
                          <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'"/>
                          <speak actor="$Client" line="1000401" comment="(successful mission)" />
                          <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>

                          <remove_mission cue="$MissionCue" type="completed" activate="next" />
                        </do_else>
                        <signal_cue cue="CleanUp" />
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="ForceCleanup" onfail="cancel">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="not event.param? or event.param == $MissionCue"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
            <do_if value="$BriefingCutsceneStarted?">
              <remove_value name="$BriefingCutsceneStarted"/>
              <stop_cutscene key="$CutsceneKey"/>

              <do_if value="$CutsceneCluster.exists">
                <destroy_object object="$CutsceneCluster"/>
              </do_if>
              <do_if value="$CutsceneShip.exists">
                <destroy_object object="$CutsceneShip"/>
              </do_if>
            </do_if>
            <do_if value="$HoloMap?">
              <remove_holomap />
              <remove_value name="$HoloMap"/>
            </do_if>


            <!--***Cleanup objects***-->
            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and (not $PreexistingClient?)">
              <signal_cue_instantly cue="md.GenericMissions.CleanupActor" param="[$Client]" />
            </do_if>

            <do_if value="@$DeliveryNPC.$InstantiationRequesters.indexof.{$MissionCue}">
              <remove_value name="$DeliveryNPC.$InstantiationRequesters.{$DeliveryNPC.$InstantiationRequesters.indexof.{$MissionCue}}"/>
              <do_if value="$DeliveryNPC.$InstantiationRequesters.count == 0">
                <remove_value name="$DeliveryNPC.$InstantiationRequesters"/>
              </do_if>
            </do_if>

            <!--***Evaluate result***-->
            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']" comment="feedback = id, type and error-text from the above FeedbackValues-table"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [Owen]'" break="1"/>
              </do_else>

              <do_if value="$ReportSignalCue" comment ="The cue which called us">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData" comment="return feedback-data to calling cue"/>
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>

            <cancel_cue cue="Start"/>
          </actions>
        </cue>
      </cues>
    </library>

    <!-- Clean up of non-preexisting delivery client and dynamic interior -->
    <!-- NO LONGER SIGNALLED - Cue remains for savegame compatibility-->
    <cue name="CleanUpDynamicInterior" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <set_value name="$Interior" exact="event.param.{1}" />
        <set_value name="$InteriorStation" exact="$Interior.station" />
        <set_value name="$NPC" exact="event.param.{2}" />
      </actions>
      <cues>
        <cue name="PlayerLeavesArea">
          <conditions>
            <event_object_interiors_despawning object="$InteriorStation" />
          </conditions>
          <actions>
            <signal_cue_instantly cue="md.GenericMissions.CleanupActor" param="[$NPC]" />
            <remove_dynamic_interior object="$InteriorStation" interior="$Interior" />
          </actions>
        </cue>
      </cues>
    </cue>


    <!-- MISSION SETUP HELPERS -->

    <!--TODO @Owen - check if the setup libraries for GMs and subscription missions should be separated-->

    <!-- Requires: $Faction, Result: $TargetStation, $DeliveryItem, $DeliveryAmount
    If $Station is provided, it will be used as the $TargetStation-->
    <library name="Setup_Production_MiningEquipment">
      <actions>
        <do_if value="@$Station.exists">
          <set_value name="$TargetStation" exact="$Station"/>
        </do_if>
        <do_else>
          <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="2" multiple="true"/>
          <shuffle_list list="$LocalClusters"/>
          <do_all exact="$LocalClusters.count" counter="$cluster_i">
            <find_station name="$TargetStation" space="$LocalClusters.{$cluster_i}" owner="$Faction" multiple="false">
              <match_relation_to faction="faction.player" relation="dock" comparison="ge" />
            </find_station>
            <do_if value="$TargetStation">
              <break/>
            </do_if>
          </do_all>
        </do_else>
        <set_value name="$DeliveryItem" exact="[ware.inv_crystalbit, ware.inv_micromotor, ware.inv_hydraulicpump].random"/>
        <set_value name="$DeliveryAmount" exact="[10,20].random" />
      </actions>
    </library>

    <!-- Requires: $Faction, Result: $TargetStation, $DeliveryItem, $DeliveryAmount
    If $Station is provided, it will be used as the $TargetStation-->
    <library name="Setup_Production_Explosives">
      <actions>
        <do_if value="@$Station.exists">
          <set_value name="$TargetStation" exact="$Station"/>
        </do_if>
        <do_else>
          <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="2" multiple="true"/>
          <shuffle_list list="$LocalClusters"/>
          <do_all exact="$LocalClusters.count" counter="$cluster_i">
            <find_station name="$TargetStation" space="$LocalClusters.{$cluster_i}" owner="$Faction" multiple="false">
              <match_relation_to faction="faction.player" relation="dock" comparison="ge" />
            </find_station>
            <do_if value="$TargetStation">
              <break/>
            </do_if>
          </do_all>
        </do_else>
        <set_value name="$DeliveryItem" exact="[ware.inv_unstablecrystal].random"/>
        <set_value name="$DeliveryAmount" exact="[15,30].random" />
      </actions>
    </library>


    <!-- Requires: $Faction, Result: $TargetStation, $DeliveryItem, $DeliveryAmount
    If $Station is provided, it will be used as the $TargetStation-->
    <library name="Setup_Production_Spices">
      <actions>
        <do_if value="@$Station.exists">
          <set_value name="$TargetStation" exact="$Station"/>
        </do_if>
        <do_else>
          <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="2" multiple="true"/>
          <shuffle_list list="$LocalClusters"/>
          <do_all exact="$LocalClusters.count" counter="$cluster_i">
            <find_station name="$TargetStation" space="$LocalClusters.{$cluster_i}" owner="$Faction" multiple="false">
              <match_relation_to faction="faction.player" relation="dock" comparison="ge" />
            </find_station>
            <do_if value="$TargetStation">
              <break/>
            </do_if>
          </do_all>
        </do_else>
        <set_value name="$DeliveryItem" exact="[ware.inv_rarespices].random"/>
        <set_value name="$DeliveryAmount" exact="[15,30].random" />
      </actions>
    </library>

    <!-- Requires: $Faction, Result: $TargetStation, $DeliveryItem, $DeliveryAmount
    If $Station is provided, it will be used as the $TargetStation-->
    <library name="Setup_Production_WaterPurification">
      <actions>
        <do_if value="@$Station.exists">
          <set_value name="$TargetStation" exact="$Station"/>
        </do_if>
        <do_else>
          <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="2" multiple="true"/>
          <shuffle_list list="$LocalClusters"/>
          <do_all exact="$LocalClusters.count" counter="$cluster_i">
            <find_station name="$TargetStation" space="$LocalClusters.{$cluster_i}" owner="$Faction" multiple="false">
              <match_relation_to faction="faction.player" relation="dock" comparison="ge" />
            </find_station>
            <do_if value="$TargetStation">
              <break/>
            </do_if>
          </do_all>
        </do_else>
        <set_value name="$DeliveryItem" exact="[ware.inv_carbonfilter, ware.inv_rapidsandfilter, ware.inv_algaescrubber].random"/>
        <set_value name="$DeliveryAmount" exact="[15,30].random" />
      </actions>
    </library>

    <!-- Requires: $Faction, Result: $TargetStation, $DeliveryItem, $DeliveryAmount
    If $Station is provided, it will be used as the $TargetStation-->
    <library name="Setup_Production_Herbices">
      <actions>
        <do_if value="@$Station.exists">
          <set_value name="$TargetStation" exact="$Station"/>
        </do_if>
        <do_else>
          <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="2" multiple="true"/>
          <shuffle_list list="$LocalClusters"/>
          <do_all exact="$LocalClusters.count" counter="$cluster_i">
            <find_station name="$TargetStation" space="$LocalClusters.{$cluster_i}" owner="$Faction" multiple="false">
              <match_relation_to faction="faction.player" relation="dock" comparison="ge" />
            </find_station>
            <do_if value="$TargetStation">
              <break/>
            </do_if>
          </do_all>
        </do_else>
        <set_value name="$DeliveryItem" exact="[ware.inv_herbicide].random"/>
        <set_value name="$DeliveryAmount" exact="[15,30].random" />
      </actions>
    </library>

    <!-- Requires: $Faction, Result: $TargetStation, $DeliveryItem, $DeliveryAmount
    If $Station is provided, it will be used as the $TargetStation-->
    <library name="Setup_ExquisiteFood">
      <actions>
        <do_if value="@$Station.exists">
          <set_value name="$TargetStation" exact="$Station"/>
        </do_if>
        <do_else>
          <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="2" multiple="true"/>
          <shuffle_list list="$LocalClusters"/>
          <do_all exact="$LocalClusters.count" counter="$cluster_i">
            <find_station name="$TargetStation" space="$LocalClusters.{$cluster_i}" owner="$Faction" multiple="false">
              <match_relation_to faction="faction.player" relation="dock" comparison="ge" />
            </find_station>
            <do_if value="$TargetStation">
              <break/>
            </do_if>
          </do_all>
        </do_else>
        <set_value name="$DeliveryItem" exact="[ware.inv_finemeal].random"/>
        <set_value name="$DeliveryAmount" exact="[1,2,3].random" />
      </actions>
    </library>

    <!-- input: $DeliveryItem and $DeliveryAmount, output: $ResourceCost__Result -->
    <library name="CalculateResourceCost">
      <actions>
        <set_value name="$ResourceCost__Result" exact="0Cr"/>
        <!-- reimburse cost of required inventory items -->
        <do_if value="$DeliveryItem and $DeliveryAmount">
          <set_value name="$ResourceCost__Result" exact="($DeliveryItem.maxprice * $DeliveryAmount) / (10Cr) * (10Cr)" comment="round"/>
        </do_if>
        <do_else>
          <debug_text text="'Missing $DeliveryItem and/or $DeliveryAmount. $ResourceCost__Result set to 0'" filter="error"/>
        </do_else>
      </actions>
    </library>

    <!-- Requires: $Faction, Result: $TargetStation, $DeliveryItem, $DeliveryAmount
    Not currently used-->
    <!--<library name="Setup_Smuggle">
      <actions>
        <include_actions ref="Setup_FindStation" comment="input: $Faction, output: $TargetStation"/>
        <set_value name="$DeliveryItem" exact="[ware.inv_agidevice_03, ware.inv_hallucinogenics, ware.inv_harddrug_01].random"/>
        <set_value name="$DeliveryAmount" exact="[1,2,3].random" />
      </actions>
    </library>-->


    <!--GENERIC MISSION VARIANTS-->

    <cue name="Force_Generic_Var_1" instantiate="true">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers" />
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 1, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_BringItems_Var_1" />
    </cue>

    <!--event.param = table[
    $Sector,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnSectorChange (Optional, defaults to true)
    $DebugChance (Optional)]-->
    <cue name="GenerateGenericMission" instantiate="true" namespace="this" version="2">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Sector"           exact="event.param.$Sector"/>
        <set_value name="$ReportSignalCue"  exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant"   exact="@event.param.$MissionVariant"/>
        <do_if value="event.param.$RemoveOnSectorChange?">
          <set_value name="$RemoveOnSectorChange" exact="event.param.$RemoveOnSectorChange"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnSectorChange" exact="true"/>
        </do_else>

        <set_value name="$DebugChance"      exact="@event.param.$DebugChance"/>
        <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>

        <set_value name="$FeedbackManager" exact="FeedbackValueManager"/>
        <assert value="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT?" text="'Required error code does not exist. Was the FeedbackValueManager not updated for stand-alone missions? [Owen/Roger]'"/>

        <debug_text text="'Attempting to generate a generic mission'" chance="$DebugChance"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <do_if value="$ReportSignalCue.exists">
          <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        </do_if>
        <do_else>
          <debug_text text="'cancelling dead GM instance'" filter="savegame"/>
          <cancel_cue cue="this"/>
        </do_else>
      </patch>
      <cues>
        <cue name="GenerateGenericMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>

            <!--Set up some common variables first so that the variants don't have to do things multiple times-->

            <!--Find potential offer stations in the sector-->
            <find_station name="$PotentialOfferStations" space="$Sector" multiple="true">
              <match owner="[faction.player, faction.xenon, faction.ownerless]" negate="true"/>
              <match_relation_to object="player.entity" comparison="not" relation="enemy" />
            </find_station>

            <do_if value="$PotentialOfferStations.count">

              <do_if value="$MissionVariant">
                <!--A specific MissionVariant ID was requested-->
                <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
                <do_if value="$MissionVariant == 1">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [Owen]'"/>
                </do_else>
              </do_if>
              <do_else>
                <!--Attempt to a mission variant at random-->
                <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
              </do_else>
            </do_if>

            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateGenericMission"/>
            </do_else>
          </actions>
        </cue>

        <cue name="GenerateGenericMission_Variant_1" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>
            <shuffle_list list="$OfferStations"/>

            <set_value name="$Valid" exact="false"/>
            <set_value name="$MissionLevel" exact="1"/>
            <set_value name="$Difficulty" exact="level.veryeasy"/>
            <set_value name="$Station" exact="$OfferStations.random"/>
            <set_value name="$Faction" exact="$Station.owner"/>
            <set_value name="$TargetStation" exact="null"/>
            <set_value name="$DeliveryItem" exact="null"/>
            <set_value name="$DeliveryAmount" exact="0"/>
            <set_value name="$OwnedAmount" exact="0"/>

            <do_if value="md.$SplitFactions.indexof.{$Faction}" chance="40">
              <do_any>
                <do_all>
                  <set_value name="$TextOffset" exact="2500"/>
                  <include_actions ref="Setup_Production_MiningEquipment"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="2600"/>
                  <include_actions ref="Setup_Production_Explosives"/>
                </do_all>
              </do_any>
            </do_if>
            <do_else>
              <do_any>
                <do_all>
                  <set_value name="$TextOffset" exact="2000"/>
                  <include_actions ref="Setup_Production_MiningEquipment"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="2100"/>
                  <include_actions ref="Setup_Production_Explosives"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="2200"/>
                  <include_actions ref="Setup_Production_Spices"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="2300"/>
                  <include_actions ref="Setup_Production_WaterPurification"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="2400"/>
                  <include_actions ref="Setup_Production_Herbices"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="3000"/>
                  <include_actions ref="Setup_ExquisiteFood"/>
                </do_all>
              </do_any>
            </do_else>

            <do_if value="$TargetStation and $DeliveryItem and $DeliveryAmount">
              <get_room_definition macro="$DeliveryCorridorMacro" doors="$DeliveryDoors" race="$TargetStation.owner.primaryrace" tags="tag.corridor" />
              <get_room_definition macro="$DeliveryRoomMacro" tags="tag.bar" />
              <do_if value="$DeliveryCorridorMacro and $DeliveryRoomMacro">
                <set_value name="$Valid" exact="true"/>
                <set_value name="$DeliveryInteriorName" exact="readtext.{20007}.{1031}" />
              </do_if>
              <do_if value="$DeliveryItem.isinventory">
                <set_value name="$OwnedAmount" exact="player.entity.inventory.{$DeliveryItem}.count"/>
              </do_if>
            </do_if>

            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_1_Trigger" version="2">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <actions>
                <create_cue_actor cue="GenerateGenericMission_Variant_1_Trigger" name="$MissionActor">
                  <select faction="$Faction"/>
                </create_cue_actor>
                <set_entity_traits entity="$MissionActor" missionactor="true" customhandler="true"/>
                <set_entity_type entity="$MissionActor" type="entitytype.crowd"/>
              </actions>
              <patch sinceversion="2" state="complete">
                <set_value name="GenerateGenericMission_Variant_1_Ref.$PlaceNPC" exact="true"/>
                <set_value name="GenerateGenericMission_Variant_1_Ref.$PatchNPCPosition" exact="true"/>
              </patch>
              <cues>
                <cue name="GenerateGenericMission_Variant_1_Ref" ref="Start">
                  <param name="OfferObject"   value="$Station"/>
                  <param name="MissionLevel"  value="$MissionLevel"/>
                  <param name="Difficulty"    value="$Difficulty"/>

                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>

                  <!--Mission text-->
                  <param name="Page"          value="30135"/>
                  <param name="TextOffset"    value="$TextOffset"/>

                  <!--Mission specific params-->
                  <param name="DeliveryNPC"           value="$MissionActor" />
                  <param name="DeliveryStation"       value="$TargetStation" />
                  <param name="DeliveryItem"          value="$DeliveryItem" />
                  <param name="DeliveryAmount"        value="$DeliveryAmount" />
                  <param name="OwnedAmount"           value="$OwnedAmount"/>
                  <param name="PlaceNPC"              value="true"/>

                  <param name="DeliveryRoomMacro"     value="$DeliveryRoomMacro" />
                  <param name="DeliveryCorridorMacro" value="$DeliveryCorridorMacro" />
                  <param name="DeliveryDoors"         value="$DeliveryDoors" />
                  <param name="DeliveryInteriorName"  value="$DeliveryInteriorName" />

                  <param name="ReportSignalCue"     value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance"         value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

  </cues>
</mdscript>