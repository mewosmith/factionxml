<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GM_Transport_Passengers" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>

    <!--TODO @Owen - Dockarea > WalkableModule-->

    <!--Generic Mission: Transport Passengers - intended for Master Missions
    missiontype.transport-->

    <!--
    To start the mission, reference the library md.GM_Transport_Passengers.Start
    To attempt to trigger the Generic Mission, signal md.GM_Transport_Passengers.StartGeneric-->

    <!--The Feedback Manager contains a table of feedback values related to this Generic Mission. There are several maintypes of feedback:
    event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
    removed:  The mission offer was removed before acceptance
    success:  The mission was successfully completed by the player
    failure:  The player failed the mission
    error:    Something went wrong with the mission set-up or during the mission-->
    <cue name="FeedbackValueManager" namespace="this" version="5">
      <actions>
        <set_value name="$FeedbackValues" exact="table[
                   $MISSION_GENERATED         = table[$type = 'event',    $text = 'Mission variation generated successfully'],
                   $MISSION_ACCEPTED          = table[$type = 'event',    $text = 'Mission accepted'],
                   $MISSION_NO_VARIANT        = table[$type = 'event',    $text = 'No mission variant currently possible'],
                   $MISSION_NO_NPC_SCENE    = table[$type = 'event',    $text = 'No mission NPC scene could be set up'],
                   
                   $OFFER_REMOVED             = table[$type = 'removed',  $text = 'Offer removed'],
                   $DECLINED_OFFER            = table[$type = 'removed',  $text = 'Player declined Event Offer'],
                   $EVENT_OFFER_TIMEOUT       = table[$type = 'removed',  $text = 'Event Offer timeout'],
                   $SIGNAL_LEAK_REMOVED       = table[$type = 'removed',  $text = 'Signal leak offer removed'],
                   $OFFER_REMOVED_NO_SLOTS    = table[$type = 'removed',  $text = 'Offer removed due to no free NPC slots'],
                   
                   $MISSION_SUCCEEDED         = table[$type = 'success',  $text = 'Mission succeeded'],
                   
                   $MISSION_ABORTED           = table[$type = 'failure',  $text = 'Mission aborted by player'],
                   $FORCED_CLEANUP            = table[$type = 'failure',  $text = 'Forced to end from outside'],
                   $MISSION_TIMEOUT           = table[$type = 'failure',  $text = 'Mission timeout'],
                   $TRANSPORT_RML_FAILED      = table[$type = 'failure',  $text = 'RML_Transport_Passengers failed'],
                   $PLAYER_KILLED_START       = table[$type = 'failure',  $text = 'Start container destroyed by player'],
                   $OTHER_KILLED_START        = table[$type = 'failure',  $text = 'Start container destroyed not by player'],
                   $START_OWNER_BECAME_ENEMY  = table[$type = 'failure',  $text = 'Start container owner became an enemy to the player'],
                   
                   $NO_VALID_CLIENT_OWNER             = table[$type = 'error',    $text = 'No valid ClientOwner parameter provided'],
                   $INVALID_OFFER_TYPE                = table[$type = 'error',    $text = 'No offer parameters were valid'],
                   $NO_TEXT_OFFSET                    = table[$type = 'error',    $text = 'No TextOffset set'],
                   $INVALID_START_ROOM_NAME           = table[$type = 'error',    $text = 'Parameter StartRoomName was not provided along with other dynamic interior parameters'],
                   $INVALID_START_ROOM                = table[$type = 'error',    $text = 'Parameter StartRoomMacro was not provided along with other dynamic interior parameters'],
                   $INVALID_START_CORRIDOR            = table[$type = 'error',    $text = 'Parameter StartCorridorMacro was not provided along with other dynamic interior parameters'],
                   $INVALID_START_CONTAINER           = table[$type = 'error',    $text = 'Parameter StartContainer was not provided, nor could be derived from StartDockArea parameter'],
                   $INVALID_TARGET_CONTAINER          = table[$type = 'error',    $text = 'Parameter TargetContainer was not provided, nor could be derived from TargetDockArea parameter'],
                   $INVALID_FORCE_CLEANUP             = table[$type = 'error',    $text = 'ForceCleanup cue invalid'],
                   $TRANSPORT_RML_ERROR               = table[$type = 'error',    $text = 'RML_Transport_Passengers suffered an error'],
                   $CANNOT_PLACE_PASSENGER            = table[$type = 'error',    $text = 'Start location is not suitable to place passengers'],
                   $INVALID_DELIVERY_DOCK             = table[$type = 'error',    $text = 'No DeliveryDock could be found'],
                   $NO_PASSENGERS                     = table[$type = 'error',    $text = 'No passengers were provided either with $ExistingActors or $UseClient'],
                   $INVALID_LEAD_PASSENGER            = table[$type = 'error',    $text = 'Lead passenger was invalid by the time the mission was set to activate'],
                   $NO_SPAWN_SLOT                     = table[$type = 'error',    $text = 'No spawn slot could be found'],
                   $INVALID_SIGNALLEAKVOICELINE_PARAM = table[$type = 'error',    $text = 'Invalid SignalLeakVoiceLine param']
                   ]"/>
      </actions>
      <patch sinceversion="5">
        <!--To patch new feedback values, increment 'version' and 'sinceversion' number-->
        <force_cue cue="FeedbackValueManager"/>
      </patch>
    </cue>

    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternativly, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!--TODO @Owen handle passenger gender in mission name and description-->
        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname (male or neutral)
        2 = $TextTable.$description (male or neutral)
        3 = $TextTable.$comeonboard
        4 = DEPRICATED (text may still exist on some pages)
        5 = DEPRICATED (text may still exist on some pages)
        7 = $TextTable.$onboardnotification
        8 = $TextTable.$passengerleftnotification
        9 = $TextTable.$transportobjective  (male , optional) NOT YET IMPLEMENTED
        10 = $TextTable.$transportobjective (female , optional) NOT YET IMPLEMENTED
        11 = $TextTable.$missionname (female. defaults to male if text ID doesn't exist)
        12 = $TextTable.$description (female. defaults to male if text ID doesn't exist)-->

        <!--$TextTable.$missionname + 1 (or 11 for female)-->
        <do_if value="not $TextTable.$missionname?">
          <do_if value="$LeadPassenger.isfemale and readtext.{$Page}.{$TextOffset + 11}?">
            <set_value name="$TextTable.$missionname" exact="readtext.{$Page}.{$TextOffset + 11}"/>
          </do_if>
          <do_else>
            <set_value name="$TextTable.$missionname" exact="readtext.{$Page}.{$TextOffset + 1}"/>
          </do_else>
        </do_if>

        <!--$TextTable.$description + 2 (or 12 for female)-->
        <do_if value="not $TextTable.$description?">
          <do_if value="$LeadPassenger.isfemale and readtext.{$Page}.{$TextOffset + 12}?">
            <substitute_text text="$TextTable.$description" source="readtext.{$Page}.{$TextOffset + 12}">
              <replace string="'$FACTIONNAME$'" with="$ClientOwner"/>
              <replace string="'$SECTORNAME$'" with="$EnemySpawnZone.sector"/>
            </substitute_text>
          </do_if>
          <do_else>
            <substitute_text text="$TextTable.$description" source="readtext.{$Page}.{$TextOffset + 2}">
              <replace string="'$FACTIONNAME$'" with="$ClientOwner"/>
              <replace string="'$SECTORNAME$'" with="$EnemySpawnZone.sector"/>
            </substitute_text>
          </do_else>
        </do_if>

        <!--$TextTable.$comeonboard + 3 conversation option-->
        <set_value name="$TextTable.$comeonboard" exact="readtext.{$Page}.{$TextOffset + 3}" chance="if $TextTable.$comeonboard? then 0 else 100"/>

        <!--$TextTable.$onboardnotification + 7 conversation option (e.g. $SHIP$ - Passenger aboard: $PASSENGER$)-->
        <set_value name="$TextTable.$onboardnotification" exact="readtext.{$Page}.{$TextOffset + 7}" chance="if $TextTable.$onboardnotification? then 0 else 100"/>

        <!--$TextTable.$passengerleftnotification + 8 conversation option (e.g. $SHIP$ - Passenger left: $PASSENGER$)-->
        <set_value name="$TextTable.$passengerleftnotification" exact="readtext.{$Page}.{$TextOffset + 8}" chance="if $TextTable.$passengerleftnotification? then 0 else 100"/>

        <!--$TextTable.$transportobjective + 9 (or 10 for female)-->
        <do_if value="not $TextTable.$transportobjective?">
          <do_if value="$LeadPassenger.isfemale and readtext.{$Page}.{$TextOffset + 10}?">
            <set_value name="$TextTable.$transportobjective" exact="readtext.{$Page}.{$TextOffset + 10}"/>
          </do_if>
          <do_elseif value="$LeadPassenger.isfemale and readtext.{$Page}.{$TextOffset + 9}?">
            <set_value name="$TextTable.$transportobjective" exact="readtext.{$Page}.{$TextOffset + 9}"/>
          </do_elseif>
        </do_if>
        
        <do_if value="$DockSizes">
          <do_if value="$DockSizes.count ge 2" comment="Several dock sizes available">
            <set_value name="$TextTable.$requirements" exact="readtext.{30004}.{1507}" comment="Docking limited to either S-sized ships or M-sized ships"/>
            <set_value name="$TextTable.$description" exact="$TextTable.$description + '\n\n' + $TextTable.$requirements"/>
          </do_if>
          <do_elseif value="$DockSizes.indexof.{'Size_S'}">
            <set_value name="$TextTable.$requirements" exact="readtext.{30004}.{1505}" comment="Docking limited to S-sized ships"/>
            <set_value name="$TextTable.$description" exact="$TextTable.$description + '\n\n' + $TextTable.$requirements"/>
          </do_elseif>
          <do_elseif value="$DockSizes.indexof.{'Size_M'}">
            <set_value name="$TextTable.$requirements" exact="readtext.{30004}.{1506}" comment="Docking limited to M-sized ships"/>
            <set_value name="$TextTable.$description" exact="$TextTable.$description + '\n\n' + $TextTable.$requirements"/>
          </do_elseif>
        </do_if>
      </actions>
    </library>

    <!--TODO @Owen - Convert mission to be single-passenger only as that is the only case we have right now. Should simplify a number of things.-->
    <library name="Start" version="6">
      <params>
        <param name="OfferObject" default="null" comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client" default="null" comment="Pre-existing client"/>
        <param name="ClientOwner" default="null" comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionCue" default="null" comment="Cue the mission is attached to. Defaults to Start (this)."/>
        <param name="MissionThread" default="null" comment="Mission thread for the offer and mission"/>

        <param name="GenerateReward" default="true" comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr" default="null" comment="If the reward for this mission is credits, the number of credits should be set to this variable." />
        <param name="RewardObj" default="null" comment="If the reward for this mission is not credits, and is an object, it should be set to this variable." />
        <param name="RewardNotoriety" default="null"/>
        <param name="RewardText" default="null"  comment="Any text needed to define the reward for this mission - may be used in conjunction with $RewardCr and $RewardObj." />
        <param name="MissionDuration" default="null"/>
        <param name="MissionType" default="missiontype.transport" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"/>
        <param name="Difficulty"/>

        <!--Offer location and conversation-->
        <param name="WithoutOffer" default="false" comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue" default="null" comment="Do not create a mission offer but wait for this cue to be completed before running the mission"/>
        <param name="DeclineButton" default="true" comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer" default="false" comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer" default="false" comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue" default="null" comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance" default="null"/>
        <param name="HideFromBBS" default="false" comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange" default="true"/>
        <param name="OfferDistance" default="50km" comment="Distance to the offer location before it becomes visible on the map or BBS (unless otherwise hidden)"/>

        <!--BBS only params-->
        <param name="BBSObject" default="null"/>
        <param name="BBSDistance" default="null"/>
        <param name="BBSTimeoutMin" default="null"/>
        <param name="BBSTimeoutMax" default="null"/>
        <param name="BBSSpace" default="null"/>

        <!--Mission text-->
        <param name="Page"        comment="Allows a different text page to be used instead of the generic one. Text IDs must be mapped similarly."/>
        <param name="TextOffset"  comment="The text offset for this variant's text on the page.
               Each variant starts at a different offset, but the entries[] within that offset have to match for all variants. 
               For example variant 1 starts at TextOffset 100 and variant 2 starts at TextOffset 200, then
               101 = Mission Name (for Variant 1)
               102 = Mission Briefing (for Variant 1)
               103 = Objective 1 (for Variant 1)
               ...
               201 = Mission Name (for Variant 2)
               202 = Mission Briefing (for Variant 2)
               203 = Objective 1 (for Variant 2)
               ...
               In the script we can then use TextOffset + 1 to get the Mission Name (for whichever variant is currently running) "/>
        <param name="TextTable" default="table[]" comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi'
               Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>

        <!--Mission specific params-->
        <param name="SignalLeakVoiceLine" default="null" comment="The line that should be used for signal leak introductions to this mission" />
        <param name="StartContainer" default="null" comment="Container to find a slot on to place the passenger"/>
        <!--Dynamic interior params - Take precidence over $StartDockArea-->
        <param name="StartRoomName" default="null" comment="Name of the dynamic interior generated for the passenger (Requires $StartRoomMacro, $StartCorridorMacro and $StartContainer)"/>
        <param name="StartRoomMacro" default="null" comment="Room macro to generate a dynamic interior for the passenger (Requires $StartRoomName, $StartCorridorMacro and $StartContainer)"/>
        <param name="StartCorridorMacro" default="null" comment="Room macro to generate a dynamic interior for the passenger (Requires $StartRoomName, StartRoomMacro and $StartContainer)"/>
        <param name="AllowRoomFallback" default="true" comment="Allow a room to be created if no other slots could be found, even if the dynamic interior params have not been provided"/>
        <!--Start Dock Area param. Usage is generally more complicated than the dynamic interior case due to prop generation and other NPCs taking slots. Consider using a room.-->
        <param name="StartDockArea" default="null" comment="Dock area to find a slot on to place the passenger (takes precidence over $StartContainer)"/>
        <!--TODO @Owen parameter for a specific NPC slot?-->
        <param name="TargetContainer" default="null" />
        <param name="TargetDockArea" default="null" />
        <param name="RequestNewTargetCue" default="null" comment="Cue to signal if a replacement dock is needed. Should set results to $TargetContainer and $TargetDockArea"/>
        <param name="UseClient" default="true" comment="Is the mission offer client also the passenger?" />
        <param name="ExistingActors" default="null" comment="List of passenger NPCs. Can include the Client or be used along with $UseClient in which case they would be included in the passenger list"/>
        <param name="CleanExistingActors" default="true" comment="If ExistingActors is provided, clean them up at the end of the mission?"/>
        <param name="EnemyFaction" default="null"/>
        <param name="EnemyWaves" default="null"/>
        <param name="BonusTime" default="null" comment="Time to get to destination to receive a bonus (no timer shown)"/>
        <param name="DurationUntilBonusDecay" default="null" comment="Mission duration until the bonus reward credits start to decay"/>
        <param name="DurationUntilBonusExpiry" default="null" comment="Mission duration until the bonus reward credits expire completely"/>
        <param name="DockSizes" default="null" comment="To let the player know what size ship can dock at the target"/>

        <param name="ReportSignalCue" default="null" comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue" default="null" comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup" default="null" comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance" default="0"/>
      </params>
      <actions>
        <!--Feedback value setup-->
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GM_Transport_Passengers.FeedbackValueManager"/>

        <assert value="$WithoutOffer or not $MissionCue or (not $MissionCue.hasmission and not $MissionCue.hasmissionoffer)"
                text="'Mission is set to create an offer but provided MissionCue: ' + $MissionCue + ' already has an offer or is a running mission [Owen]'"/>

        <assert value="not $MissionThread or $WithoutOffer" text="'Thread sub-mission is also set to create an offer which is not supported.\n
                The mission thread offer should be populated with mission details suitable for this mission, but not from an actual mission. Thread: ' + $MissionThread + ' [Owen]'"/>

        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>

        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [Owen]'"/>
            </do_if>

            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
            <do_else>
              <!--Mission specific param checks-->
              <do_if value="$StartDockArea.exists">
                <set_value name="$PreexistingDock"/>
                <do_if value="$StartContainer">
                  <assert value="$StartDockArea.container == $StartContainer" text="'$StartDockArea container: ' + $StartDockArea.container + ' ' + $StartDockArea.container.knownname + ' differs from $StartContainer: ' + $StartContainer + ' ' + $StartContainer.knownname"/>
                </do_if>
                <do_else>
                  <set_value name="$StartContainer" exact="$StartDockArea.container"/>
                </do_else>
              </do_if>

              <do_if value="$StartContainer">
                <do_if value="$StartRoomMacro">
                  <do_if value="not $StartRoomName">
                    <set_value name="$Feedback" exact="'$INVALID_START_ROOM_NAME'"/>
                  </do_if>
                  <do_elseif value="typeof $StartCorridorMacro != datatype.macro">
                    <set_value name="$Feedback" exact="'$INVALID_START_CORRIDOR'"/>
                  </do_elseif>
                </do_if>
                <do_elseif value="$StartCorridorMacro">
                  <set_value name="$Feedback" exact="'$INVALID_START_ROOM'"/>
                </do_elseif>
              </do_if>
              <do_else>
                <set_value name="$Feedback" exact="'$INVALID_START_CONTAINER'"/>
              </do_else>

              <do_if value="not $Feedback">
                <set_value name="$DeliveryDockArea" exact="null"/>
                <do_if value="$TargetContainer.exists">
                  <set_value name="$DeliveryContainer" exact="$TargetContainer"/>
                </do_if>
                <do_if value="$TargetDockArea.exists">
                  <set_value name="$DeliveryDockArea" exact="$TargetDockArea"/>
                  <do_if value="$TargetContainer">
                    <set_value name="$DeliveryContainer" exact="$TargetContainer"/>
                    <assert value="$TargetDockArea.container == $DeliveryContainer" text="'$TargetDockArea container: ' + $TargetDockArea.container + ' ' + $TargetDockArea.container.knownname + ' differs from $TargetContainer: ' + $TargetContainer + ' ' + $TargetContainer.knownname"/>
                  </do_if>
                  <do_else>
                    <set_value name="$DeliveryContainer" exact="$TargetDockArea.container"/>
                  </do_else>
                </do_if>

                <do_if value="not $DeliveryContainer?">
                  <set_value name="$Feedback" exact="'$INVALID_TARGET_CONTAINER'"/>
                </do_if>
              </do_if>
            </do_else>
          </do_else>
        </do_if>
      </actions>
      <patch sinceversion="6">
        <set_value name="$DockSizes" exact="null"/>
      </patch> 
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>

        <cue name="Do_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="not $Feedback"/>
          </conditions>
          <actions>
            <do_if value="not $MissionCue">
              <set_value name="$MissionCue" exact="Start"/>
            </do_if>

            <do_if value="not $PreexistingClient?">
              <!-- No pre-existing client, create a temporary client for this mission -->
              <!-- This auto-assigns a 'matching' text-page using the metadata (id=0) specified in the text-files. Speak commands for this actor will then refer to the selected text-page-->
              <!-- Possibly we'll need to add additional filters (in case some topics aren't supported by all generic text-pages) -->
              <create_cue_actor cue="Start" name="$Client">
                <select faction="$ClientOwner"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>

            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>

              <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]" comment="basic reward credits"/>

              <do_if value="@$DurationUntilBonusExpiry gt 1">
                <include_actions ref="md.LIB_Reward_Balancing.TimeBonusCr_Max" comment="Input: $Reward_Money__Result, $MissionDuration; Output: $TimeBonusCr_Max"/>
              </do_if>

              <do_any>
                <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                  <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                  <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied"/>
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardModWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_ModPart" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_ModPart__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardSeminarWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Seminar" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_Seminar__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
              </do_any>

              <do_if value="not $RewardNotoriety">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
              </do_if>
            </do_if>

            <!--Passenger Transport specific checks-->
            <set_value name="$PassengerList" exact="if $ExistingActors then $ExistingActors else []"/>
            <do_if value="$UseClient and not $PassengerList.indexof.{$Client}">
              <do_if value="not $PreexistingClient?">
                <set_entity_type entity="$Client" type="entitytype.crowd"/>
              </do_if>
              <append_to_list name="$PassengerList" exact="$Client"/>
            </do_if>

            <do_if value="$PassengerList.count == 0">
              <set_value name="$Feedback" exact="'$NO_PASSENGERS'"/>
              <signal_cue cue="CleanUp"/>
              <cancel_cue cue="Do_Start_Mission"/>
            </do_if>
            <do_else>
              <set_value name="$LeadPassenger" exact="$PassengerList.{$PassengerList.count}"/>
              <set_value name="$PassengerName" exact="$LeadPassenger.knownname"/>

              <!--Text table generated after lead passenger is decided-->
              <include_actions ref="GenerateTextTable"/>

              <set_value name="$Ship" exact="null"/>
              <set_value name="$Passenger_Onboard" exact="false"/>

              <do_if value="$Feedback">
                <signal_cue cue="CleanUp"/>
                <cancel_cue cue="Do_Start_Mission"/>
              </do_if>
              <do_else>
                <set_entity_traits entity="$Client" missionactor="true" />

                <do_if value="$ReportSignalCue">
                  <!--TODO: Rework spawning of passengers so we know the gender by this point-->
                  <do_if value="$ReportSignalCue">
                    <!--Signal the $ReportSignalCue that the mission has been successfully generated-->
                    <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
                    <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
                    <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
                    <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText]"/>
                  </do_if>
                </do_if>
              </do_else>
            </do_else>
          </actions>
          <cues>

            <!--***MISSION OFFER***-->
            <cue name="With_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <actions>
                <do_if value="$OfferObject.isclass.signalleak">
                  <set_value name="$ConversationStartLine" exact="null" />
                  <set_value name="$EventOfferLine" exact="[1000106, 1000107].random" />
                </do_if>
                <do_else>
                  <do_if value="$Difficulty" max="level.veryeasy">
                    <set_value name="$ConversationStartLine" exact="1000102" comment="Client tells the player that the mission will be easy."/>
                  </do_if>
                  <do_elseif value="$Difficulty" min="level.easy">
                    <set_value name="$ConversationStartLine" exact="1000103" comment="Client tells the player that the mission might involve complications."/>
                  </do_elseif>
                  <do_else>
                    <set_value name="$ConversationStartLine" exact="1000101" comment="other"/>
                  </do_else>
                  <set_value name="$EventOfferLine" exact="1000101" />
                </do_else>
              </actions>
              <cues>
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">
                      <create_offer cue="$MissionCue" location="$OfferObject" distance="$OfferDistance" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" actor="$Client"
                                  faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" duration="$MissionDuration" hidden="$HideFromBBS" space="$BBSSpace">
                        <briefing>
                          <objective step="1" action="objective.pickup_person" text="$PassengerName"/>
                          <objective step="2" action="objective.flyto" object="$DeliveryContainer"/>
                        </briefing>
                      </create_offer>
                    </do_if>
                    <set_value name="$OfferCreated" exact="true"/>

                    <do_if value="$Client.page" exact="0">
                      <debug_text text="'ERROR: Page is 0 - client is: ' + $Client.name + ' ({' + $Client + '})'" />
                    </do_if>

                    <do_if value="$OfferObject.isclass.signalleak">
                      <do_if value="readtext.{$Client.page}.{$SignalLeakVoiceLine}?">
                        <update_signal_leak_voice object="$OfferObject" page="$Client.page" lines="$SignalLeakVoiceLine" />
                      </do_if>
                      <do_else>
                        <set_value name="$Feedback" exact="'$INVALID_SIGNALLEAKVOICELINE_PARAM'" />
                        <signal_cue cue="CleanUp" />
                      </do_else>
                    </do_if>
                  </actions>
                </cue>

                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType"     value="$OfferType"/>
                  <param name="OfferCue"      value="$MissionCue"/>
                  <param name="CleanupCue"    value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName"   value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue" value="$CancelOfferCue"/>
                  <param name="AdditionalOfferCheckCue"  value="AdditionalOfferChecks"/>

                  <!--Object based params-->
                  <param name="TimeoutMin"  value="8min"/>
                  <param name="TimeoutMax"  value="12min"/>
                  <param name="MaxDistance" value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>

                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject" value="$OfferObject"/>

                  <!--BBS based offers-->
                  <param name="BBSObject"     value="@$BBSObject"/>
                  <param name="BBSDistance"   value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>

                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>

                  <!--Client-->
                  <param name="Client"                 value="$Client"/>
                  <param name="Line_EventOffer"        value="$EventOfferLine" />
                  <param name="Line_StartConversation" value="$ConversationStartLine"/>
                  <param name="Line_Goodbye"           value="2008"/>

                  <param name="DebugChance" value="$DebugChance"/>
                </cue>

                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                  </actions>
                </cue>

                <!--This mission has some additional checks after a player response to the offer
                event.param = LIST [callingcue, 'accept'/'decline']
                Returnvalue = callingcue.$HelperResult =
                        'confirm' == Confirm the request to accept or decline
                        'reject'  == Reject the request (only makes sense for 'accept' cases)
                        'error'   == Something has gone wrong in the check and the offer should be aborted-->
                <cue name="AdditionalOfferChecks" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <debug_text text="'player response was ' + event.param.{2}" chance="$DebugChance"/>
                    <!-- Accept case -->
                    <do_if value="event.param.{2} == 'accept'">
                      <include_actions ref="StartIsValid"/>

                      <do_if value="not $Feedback">
                        <!--Confirm the acceptance of the offer-->
                        <set_value name="event.param.{1}.$HelperResult" exact="'confirm'"/>
                      </do_if>
                      <do_else>
                        <!--Thrown an error due to mission $Feedback being set during the checks-->
                        <set_value name="event.param.{1}.$HelperResult" exact="'error'"/>
                        <signal_cue_instantly cue="CleanUp"/>
                      </do_else>
                    </do_if>
                    <do_elseif value="event.param.{2} == 'decline'">
                      <!--Confirm the declining of the offer-->
                      <set_value name="event.param.{1}.$HelperResult" exact="'confirm'"/>
                    </do_elseif>
                    <do_else>
                      <assert value="event.param.{2} == 'accept' or event.param.{2} == 'decline'" text="'Unhandled case for offer response. [Owen]'"/>
                    </do_else>
                  </actions>
                </cue>

                <!--TODO @Owen remove?-->
                <cue name="CheckActorSlots" checkinterval="1s">
                  <conditions>
                    <check_object object="$StartContainer" freemissionactorslot="true" negate="true"/>
                  </conditions>
                  <actions>
                    <set_value name="$Feedback" exact="'$OFFER_REMOVED_NO_SLOTS'"/>
                    <signal_cue_instantly cue="CleanUp"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
              </conditions>
              <actions>
                <include_actions ref="StartIsValid"/>

                <do_if value="not $Feedback">
                  <signal_cue cue="MissionAccepted"/>
                </do_if>
                <do_else>
                  <signal_cue_instantly cue="CleanUp"/>
                </do_else>
              </actions>
            </cue>

            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="not event.param? or event.param == $MissionCue"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <include_actions ref="StartIsValid"/>

                    <do_if value="not $Feedback">
                      <signal_cue_instantly cue="MissionAccepted"/>
                    </do_if>
                    <do_else>
                      <signal_cue_instantly cue="CleanUp"/>
                    </do_else>
                  </actions>
                </cue>
              </cues>
            </cue>

            <library name="StartIsValid">
              <actions>
                <do_if value="not $StartContainer.isoperational">
                  <set_value name="$Feedback" exact="'$CANNOT_PLACE_PASSENGER'"/>
                </do_if>
                <do_else>
                  <do_if value="not $StartRoomMacro or not $StartCorridorMacro">
                    <check_object object="$DeliveryContainer" result="$HasDockArea">
                      <match_content class="class.walkablemodule" checkoperational="true"/>
                    </check_object>
                    <do_if value="not $HasDockArea">
                      <set_value name="$Feedback" exact="'$CANNOT_PLACE_PASSENGER'"/>
                    </do_if>
                  </do_if>
                </do_else>
              </actions>
            </library>

            <cue name="BriefingStarted">
              <conditions>
                <check_any>
                  <event_briefing_started cue="$MissionCue"/>
                  <event_briefing_submission_selected cue="$MissionCue"/>
                </check_any>
              </conditions>
              <actions>

                <set_value name="$RenderTarget" exact="event.param.{1}"/>

                <set_value name="$OpenHolomap"/>
                <set_value name="$HolomapReplay" exact="false"/>
                <set_value name="$MapTarget" exact="$DeliveryContainer"/>

                <debug_text text="'Briefing started'"/>
              </actions>
              <cues>
                <cue name="DisplayHolomap" onfail="cancel">
                  <conditions>
                    <check_value value="$OpenHolomap?"/>
                  </conditions>
                  <actions>
                    <do_if value="not $HoloMap?">
                      <add_holomap name="$HoloMap" rendertarget="$RenderTarget"/>
                    </do_if>
                    <remove_value name="$OpenHolomap" />
                  </actions>
                  <cues>
                    <cue name="HolomapRef" ref="md.LIB_HolomapTarget.Start">
                      <param name="EndSignalCue" value="HolomapEnd"/>

                      <param name="HoloMap" value="$HoloMap" />
                      <param name="Components" value="[if $Ship then $Ship else $StartContainer, $MapTarget]"/>
                      <param name="ShowUnknown" value="false"/>
                      <param name="IsReplay" value="$HolomapReplay"/>

                      <param name="verbosedebugchance" value="$DebugChance"/>
                    </cue>
                    <cue name="HolomapEnd">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <debug_text text="'Holomap animation end'" chance="$DebugChance"/>
                      </actions>
                      <cues>
                        <cue name="ReplayHoloMap">
                          <delay exact="10s"/>
                          <actions>
                            <set_value name="$HolomapReplay" exact="true"/>
                            <set_value name="$OpenHolomap"/>
                            <reset_cue cue="DisplayHolomap"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                  </cues>
                </cue>

                <cue name="BriefingStopped">
                  <conditions>
                    <check_any>
                      <event_briefing_cancelled cue="$MissionCue"/>
                      <event_briefing_submission_unselected cue="$MissionCue"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                    <do_if value="$BriefingCutsceneStarted?">
                      <remove_value name="$BriefingCutsceneStarted"/>
                      <stop_cutscene key="$CutsceneKey"/>
                    </do_if>

                    <do_if value="$HoloMap?">
                      <remove_holomap />
                      <remove_value name="$HoloMap"/>
                    </do_if>

                    <debug_text text="'Briefing canceled'"/>
                    <reset_cue cue="BriefingStarted"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="StartContainerDestroyed">
              <conditions>
                <event_object_destroyed object="$StartContainer"/>
              </conditions>
              <actions>
                <!--TODO @Owen check the status of disconnected passengers. Are they correctly killed via Cleanup?-->
                <do_if value="event.param == player.ship">
                  <set_value name="MissionEnded.$Feedback" exact="'$PLAYER_KILLED_START'" />
                </do_if>
                <do_elseif value="event.param.owner" exact="faction.player">
                  <set_value name="MissionEnded.$Feedback" exact="'$PLAYER_KILLED_START'" />
                </do_elseif>
                <do_else>
                  <set_value name="MissionEnded.$Feedback" exact="'$OTHER_KILLED_START'" />
                </do_else>
                <signal_cue cue="MissionEnded" />
              </actions>
            </cue>

            <cue name="StationFactionBecameEnemy" checkinterval="5s">
              <conditions>
                <check_value value="$StartContainer.owner.hasrelation.enemy.{faction.player}"/>
              </conditions>
              <actions>
                <set_value name="MissionEnded.$Feedback" exact="'$START_OWNER_BECAME_ENEMY'" />
                <signal_cue cue="MissionEnded" />
              </actions>
            </cue>

            <!--These cue handles the destruction of the delivery dock, but only before the TransportPassengers RML starts-->
            <cue name="DeliveryStationHandlers">
              <cues>
                <cue name="DeliveryDockDestroyed" onfail="cancel">
                  <conditions>
                    <check_value value="$DeliveryDockArea.exists"/>
                  </conditions>
                  <cues>
                    <cue name="Do_Check_DeliveryDockDestroyed">
                      <conditions>
                        <event_object_destroyed object="$DeliveryDockArea" />
                      </conditions>
                      <actions>
                        <!--TODO @Owen param to disallow mission continuing if dockarea was destroyed?-->
                        <debug_text text="'DeliveryDockArea got destroyed'" />
                        <check_object object="$DeliveryContainer" result="$HasDockArea">
                          <match_content class="class.walkablemodule" checkoperational="true"/>
                        </check_object>
                        <do_if value="$HasDockArea">
                          <set_value name="$DeliveryDockArea" exact="null"/>
                          <include_actions ref="MissionResetOnDestinationChange"/>
                        </do_if>
                        <do_else>
                          <set_value name="MissionEnded.$Feedback" exact="'$INVALID_DELIVERY_DOCK'" />
                          <signal_cue cue="MissionEnded" />
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="DeliveryStationDestroyed">
                  <conditions>
                    <event_object_destroyed object="$DeliveryContainer" />
                  </conditions>
                  <actions>
                    <debug_text text="'DeliveryContainer got destroyed'" />
                    <set_value name="MissionEnded.$Feedback" exact="'$INVALID_DELIVERY_DOCK'" />
                    <signal_cue cue="MissionEnded" />
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="MissionResetOnDestinationChange" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <!--TODO: Logbook/notification?-->
                <do_if value="not $Passenger_Onboard">
                  <reset_cue cue="DeliveryStationHandlers"/>
                </do_if>
                <reset_cue cue="MissionEnded"/>
              </actions>
            </cue>

            <cue name="MissionAccepted" version="2">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <debug_text text="'Mission accepted!'" chance="$DebugChance" />
                <set_value name="stat.missions_accepted" operation="add"/>

                <do_if value="$Difficulty" min="level.hard">
                  <speak actor="$Client" line="1000205" comment="(reluctant for player to take mission - particularly hard missions, etc)" />
                  <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = 1000205]"/>
                </do_if>
                <do_else>
                  <speak actor="$Client" line="1000204" comment="(player accepted mission offer)" />
                  <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = 1000204]"/>
                </do_else>

                <do_if value="$WithoutOffer">
                  <!--$MissionCue may already be a mission cue passed in as a parameter-->
                  <do_if value="not $MissionCue.hasmission">
                    <do_if value="$MissionThread">
                      <create_mission cue="$MissionCue" missionthread="$MissionThread" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_if>
                    <do_else>
                      <create_mission cue="$MissionCue" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_else>
                  </do_if>

                  <update_mission cue="$MissionCue">
                    <briefing>
                      <objective step="1" action="objective.talkto" object="$LeadPassenger" text="$LeadPassenger.knownname"/>
                      <objective step="2" action="objective.flyto" object="$DeliveryContainer" />
                    </briefing>
                  </update_mission>
                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="$MissionCue" offercue="$MissionCue" missionthread="$MissionThread"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="$MissionCue" offercue="$MissionCue"/>
                  </do_else>
                  <remove_offer cue="$MissionCue"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>

                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>

                <set_value name="$StartTime" exact="player.age"/>
                <set_value name="$TotalEnemyWaves" exact="$EnemyWaves"/>
                <create_list name="$PassengerTemplates"/>
                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>
              </actions>
              <cues>

                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>

                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{$MissionCue}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{$MissionCue}"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="ActivateMission">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <set_value name="$StartStep" exact="1"/>
                    <set_value name="$MissionActivationTime" exact="player.age"/>

                    <debug_text text="'MissionActivationTime: ' + $MissionActivationTime" chance="$DebugChance"/>


                    <do_if value="$MissionDuration">
                      <update_mission cue="$MissionCue" endtime="player.age + $MissionDuration"/>
                    </do_if>

                    <!--Group of passenger NPCs for when they are placed on an object-->
                    <create_group groupname="$Passengers" />
                  </actions>
                  <cues>

                    <!--Set of cues managing the placement of the lead passenger for the player to approach
                    Requires handling of $StartContainer attention levels and potentially dynamic interiors-->
                    <cue name="PlaceLeadPassenger">
                      <cues>
                        <library name="PlaceLeadPassenger_Placement">
                          <actions>
                            <debug_text text="'Placing passenger on ' + $NPC_Slot.component + ' ' + $NPC_Slot.component.knownname + ' ' + $NPC_Slot.name" chance="$DebugChance"/>
                            <!--TODO @Owen #EntityTypes this was a manager. Appearance?-->
                            <!--<set_entity_type entity="$passenger" type="entitytype.officer"/>-->

                            <!--TODO @Owen default state machine for these NPCs? Currently State_Stay due to being a mission actor-->
                            <set_entity_traits entity="$LeadPassenger" missionactor="true" remote="false" />

                            <add_actor_to_room actor="$LeadPassenger" slot="$NPC_Slot"/>
                            <add_to_group groupname="$Passengers" object="$LeadPassenger" />
                            <set_entity_traits entity="$LeadPassenger" customhandler="true" />

                            <set_objective cue="$MissionCue" action="objective.talkto" object="$LeadPassenger" text="$LeadPassenger.knownname"/>
                          </actions>
                        </library>

                        <cue name="PlaceLeadPassenger_Init">
                          <actions>
                            <do_if value="$LeadPassenger.isclass.npc">
                              <do_if value="$StartRoomMacro">
                                <signal_cue cue="PlaceLeadPassenger_WithinDynamicInterior"/>
                              </do_if>
                              <do_else>
                                <signal_cue cue="PlaceLeadPassenger_WithinStartContainer"/>
                              </do_else>
                            </do_if>
                            <do_else>
                              <set_value name="$Feedback" exact="'$INVALID_LEAD_PASSENGER'"/>
                              <signal_cue cue="MissionEnded" />
                            </do_else>
                          </actions>
                        </cue>

                        <cue name="PlaceLeadPassenger_WithinDynamicInterior">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <debug_text text="'Lead passenger ' + $LeadPassenger + ' ' + $LeadPassenger.knownname + ' will be placed within a dynamic interior'" chance="$DebugChance"/>
                          </actions>
                          <cues>
                            <cue name="PlaceLeadPassenger_WithinDynamicInterior_Init">
                              <actions>
                                <set_value name="$PassengerLeftInterior" exact="false"/>
                                <do_if value="$StartContainer.attention ge attention.nearby">
                                  <signal_cue cue="PlaceLeadPassenger_WithinDynamicInterior_Create"/>
                                </do_if>
                                <do_else>
                                  <set_objective cue="$MissionCue" action="objective.dockat" object="$StartContainer"/>
                                </do_else>
                              </actions>
                            </cue>

                            <cue name="PlaceLeadPassenger_WithinDynamicInterior_Create">
                              <conditions>
                                <check_any>
                                  <event_cue_signalled/>
                                  <check_all>
                                    <event_object_changed_attention object="$StartContainer"/>
                                    <check_value value="event.param ge attention.nearby"/>
                                  </check_all>
                                </check_any>
                                <check_value value="not $PassengerLeftInterior"/>
                              </conditions>
                              <actions>
                                <debug_text text="'Attempting to create dynamic interior to place NPC'" chance="$DebugChance"/>
                                <create_dynamic_interior object="$StartContainer" corridor="$StartCorridorMacro" room="$StartRoomMacro" name="$StartRoomName" interiorname="$DynamicInterior" corridorname="$DynamicCorridor" roomname="$DynamicRoom" />
                                <do_if value="$DynamicInterior">
                                  <set_dynamic_interior_private object="$StartContainer" interior="$DynamicInterior" private="true"/>
                                  <find_npc_slot name="$NPC_Slot" object="$DynamicRoom"/>
                                  <do_if value="$NPC_Slot">
                                    <include_actions ref="PlaceLeadPassenger_Placement"/>
                                  </do_if>
                                </do_if>
                                <do_else>
                                  <!--TODO @Owen error code-->
                                  <debug_text text="'Unable to create dynamic interior'"/>
                                  <assert value="false" text="'Unable to create dynamic interior'"/>
                                </do_else>
                              </actions>
                              <cues>
                                <cue name="PlaceLeadPassenger_PassengerLeftInterior">
                                  <conditions>
                                    <event_object_changed_room object="$LeadPassenger"/>
                                    <check_value value="event.param and not event.param.hascontext.{$DynamicInterior}"/>
                                  </conditions>
                                  <actions>
                                    <set_value name="$PassengerLeftInterior" exact="true"/>
                                  </actions>
                                </cue>

                                <cue name="PlaceLeadPassenger_WithinDynamicInterior_Destroy">
                                  <conditions>
                                    <event_object_interiors_despawning object="$StartContainer"/>
                                  </conditions>
                                  <actions>
                                    <debug_text text="'Interiors despawning. Destroying interior ' + $DynamicInterior + (if $PassengerLeftInterior then ' - interior hander will be cancelled as passenger has left' else ' - interior hander will be reset as passenger is still inside')" chance="$DebugChance"/>
                                    <do_if value="not $PassengerLeftInterior">
                                      <debug_text text="'Removing LeadPassenger ' + $LeadPassenger + ' ' + $LeadPassenger.knownname + ' from $Passengers group'" chance="$DebugChance"/>
                                      <remove_from_group group="$Passengers" object="$LeadPassenger"/>
                                      <remove_actor_from_room actor="$LeadPassenger"/>

                                      <set_objective cue="$MissionCue" action="objective.dockat" object="$StartContainer"/>
                                    </do_if>

                                    <destroy_object object="$DynamicInterior"/>
                                    <do_if value="$PassengerLeftInterior">
                                      <cancel_cue cue="PlaceLeadPassenger_WithinDynamicInterior_Create"/>
                                    </do_if>
                                    <do_else>
                                      <reset_cue cue="PlaceLeadPassenger_WithinDynamicInterior_Create"/>
                                    </do_else>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>
                          </cues>
                        </cue>

                        <cue name="PlaceLeadPassenger_WithinStartContainer">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <debug_text text="'Lead passenger ' + $LeadPassenger + ' ' + $LeadPassenger.knownname + ' will be placed within the start container'" chance="$DebugChance"/>
                          </actions>
                          <cues>
                            <cue name="PlaceLeadPassenger_WithinStartContainer_Init">
                              <actions>
                                <set_value name="this.$AttemptPlacement" exact="false"/>
                                <do_if value="$StartContainer.attention ge attention.nearby">
                                  <set_value name="this.$AttemptPlacement" exact="true"/>
                                  <do_if value="$StartDockArea.exists">
                                    <find_npc_slot name="this.$TempSlot" object="$StartDockArea"/>
                                    <do_if value="not this.$TempSlot">
                                      <set_value name="this.$AttemptPlacement" exact="false"/>
                                    </do_if>
                                  </do_if>
                                  <do_if value="this.$AttemptPlacement">
                                    <signal_cue cue="PlaceLeadPassenger_WithinStartContainer_Place"/>
                                  </do_if>
                                </do_if>

                                <do_if value="not this.$AttemptPlacement">
                                  <do_if value="$StartDockArea.exists">
                                    <set_objective cue="$MissionCue" action="objective.dockat" object="$StartDockArea"/>
                                  </do_if>
                                  <do_else>
                                    <set_objective cue="$MissionCue" action="objective.dockat" object="$StartContainer"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_objective cue="$MissionCue" action="objective.pickup_person" object="$LeadPassenger"/>
                                </do_else>
                              </actions>
                            </cue>

                            <cue name="PlaceLeadPassenger_WithinStartContainer_Place" instantiate="true">
                              <conditions>
                                <check_any>
                                  <event_cue_signalled/>
                                  <check_all>
                                    <event_object_changed_attention object="$StartContainer"/>
                                    <check_value value="not $StartDockArea and event.param ge attention.nearby"/>
                                  </check_all>
                                  <event_npc_slots_validated object="$StartDockArea" check="false"/>
                                </check_any>
                              </conditions>
                              <actions>

                                <do_if value="$LeadPassenger.hascontext.{$StartContainer}">
                                  <debug_text text="'NPC still at location'"  chance="$DebugChance"/>
                                  <set_objective cue="$MissionCue" action="objective.talkto" object="$LeadPassenger" text="$LeadPassenger.knownname"/>
                                </do_if>
                                <do_else>
                                  <debug_text text="'Attempting to place NPC'" chance="$DebugChance"/>
                                  <do_if value="$StartDockArea.exists">
                                    <find_npc_slot name="$NPC_Slot" object="$StartDockArea"/>
                                    <do_if value="$NPC_Slot">
                                      <debug_text text="'Placing on StartDockArea'"/>
                                      <include_actions ref="PlaceLeadPassenger_Placement"/>
                                    </do_if>
                                    <do_else>
                                      <debug_text text="'No slot found on StartDockArea'"/>
                                      <!--TODO @Owen have a temporary NPC despawn to make room for the LeadPassenger?-->
                                    </do_else>
                                  </do_if>

                                  <do_if value="not $LeadPassenger.hascontext.{$StartContainer}">
                                    <find_npc_slot name="$NPC_Slot" object="$StartContainer"/>
                                    <do_if value="$NPC_Slot">
                                      <debug_text text="'Placing on StartDockContainer'"/>
                                      <include_actions ref="PlaceLeadPassenger_Placement"/>
                                    </do_if>
                                    <do_else>
                                      <debug_text text="'No slot found on StartContainer'"/>
                                    </do_else>
                                  </do_if>

                                  <do_if value="not $LeadPassenger.hascontext.{$StartContainer} and $AllowRoomFallback">
                                    <!--Fallback with a randomly generated dynamic room-->
                                    <debug_text text="'Falling back to creating a dynamic interior'"/>
                                    <get_room_definition macro="$StartCorridorMacro" race="$StartContainer.owner.primaryrace" tags="tag.corridor" />
                                    <get_room_definition macro="$StartRoomMacro" doors="$RoomDoors" tags="tag.office" race="$StartContainer.owner.primaryrace" />
                                    <do_if value="$StartCorridorMacro and $StartRoomMacro">
                                      <!--TODO @Owen - better room generation-->
                                      <set_value name="this.$RoomNumber" min="100" max="999"/>
                                      <set_value name="$StartRoomName" exact="{20007,1141} + ' ' + this.$RoomNumber"/>
                                      <signal_cue cue="PlaceLeadPassenger_WithinDynamicInterior"/>
                                      <cancel_cue cue="PlaceLeadPassenger_WithinStartContainer"/>
                                    </do_if>
                                  </do_if>
                                </do_else>

                                
                              </actions>
                            </cue>

                            <cue name="PlaceLeadPassenger_PropsRemoved" instantiate="true">
                              <conditions>
                                <event_object_props_despawning object="$StartContainer"/>
                                <check_value value="$LeadPassenger.hascontext.{event.param}"/>
                              </conditions>
                              <actions>
                                <debug_text text="'Props on ' + event.param + ' ' + event.param.knownname + ' were removed and ' + $LeadPassenger + ' ' + $LeadPassenger.knownname + ' was inside it. Disconecting'" chance="$DebugChance"/>
                                <debug_text text="'Removing LeadPassenger ' + $LeadPassenger + ' ' + $LeadPassenger.knownname + ' from $Passengers group'" chance="$DebugChance"/>
                                <remove_from_group group="$Passengers" object="$LeadPassenger"/>
                                <remove_actor_from_room actor="$LeadPassenger"/>

                                <set_objective cue="$MissionCue" action="objective.dockat" object="$StartContainer"/>
                              </actions>
                            </cue>
                          </cues>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="PickupPassengerSection">
                      <cues>
                        <cue name="PassengerStart" instantiate="true">
                          <conditions>
                            <check_any>
                              <event_conversation_started actor="$LeadPassenger" />
                              <event_conversation_returned_to_section actor="$LeadPassenger" />
                            </check_any>
                          </conditions>
                          <actions>
                            <!--TODO: Improve conversations-->
                            <add_npc_line line="2002" comment="(Greeting - neutral)" />
                            <do_if value="not $Passenger_Onboard">
                              <add_player_choice text="$TextTable.$comeonboard" position="left" section="passenger_onboard" />
                            </do_if>
                            <add_player_choice text="{1002,2}" position="bottom_right" section="g_finish" comment="Goodbye"/>
                          </actions>
                        </cue>

                        <!--TODO @Owen #EntityTypes What if passengers are split between ships by some form of transfer? Work with a list of containing ships?-->
                        <cue name="PassengerNextSection_Has_Space" instantiate="true">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>

                            <!-- Update objective, to "follow the npc" (instead of keeping it on "talk to") -->
                            <cancel_cue cue="PassengerStart" comment="Npc is going towards ship - no more talking"/>

                            <!-- Make NPC walk to selected ship -->
                            <find_npc_waypoint name="this.$DespawnWaypoints" object="$Ship" tags="tag.npctransport" multiple="true"/>
                            <assert value="this.$DespawnWaypoints.count" text="'No waypoints on ' + $Ship + ' ' + $Ship.knownname + ' tagged ' + tag.npctransport + '. No place to despawn passengers.'"/>
                            <do_all exact="$PassengerList.count" counter="$i" reverse="true">
                              <debug_text text="'Attempting to add ' + $PassengerList.{$i} + ' to ' + $Ship + ' ' +$Ship.knownname + ' as a passenger'" chance="$DebugChance"/>
                              <create_npc_template name="$Template" object="$Ship" entity="$PassengerList.{$i}" role="entityrole.passenger"/>
                              <assert value="$Template" text="'Attempted to add passenger to the playership but it failed. [Owen]'"/>
                              <do_if value="$Template">
                                <append_to_list name="$PassengerTemplates" exact="$Template"/>
                                <!--TODO @Owen #EntityTypes can we really just destroy this actor? Disconnect and reconnect instead of instantiating if needed?-->
                                <do_if value="$PassengerList.{$i}.exists and this.$DespawnWaypoints.count">
                                  <!-- TODO (@Lorraine): for Away From Here / Fast Flight variation of this mission, force movement speed to be the passenger's run speed - this should become a parameter passed into the mission(?) -->
                                  <!--set_value name="$MovementTable" exact="table[$slot = this.$DespawnWaypoints.random, $movementspeed = $PassengerList.{$i}.runspeed]" /-->
                                  <set_entity_role entity="$PassengerList.{$i}" role="entityrole.passenger"/>
                                  <set_value name="$MovementTable" exact="table[$slot = this.$DespawnWaypoints.random]" />
                                  <signal_objects object="$PassengerList.{$i}" param="'npc_move_to'" param2="$MovementTable.clone"/>
                                </do_if>
                                <do_else>
                                  <remove_actor_from_room actor="$PassengerList.{$i}"/>
                                </do_else>
                              </do_if>
                              <remove_value name="$Template"/>
                            </do_all>

                          </actions>
                          <cues>

                            <cue name="PassengerWaitForEmbark1" checkinterval="2s">
                              <conditions>
                                <check_value value="not player.entity.hascontext.{$Ship}"/>
                              </conditions>
                              <actions>
                                <debug_text text="'WaitForEmbark1'"/>
                                <set_objective cue="$MissionCue" action="objective.embark" object="$Ship"/>
                              </actions>
                              <cues>
                                <cue name="PassengerWaitForEmbark1_keepalive">
                                  <conditions>
                                    <event_cue_signalled/>
                                  </conditions>
                                </cue>
                              </cues>
                            </cue>
                            <cue name="PassengerWaitForEmbark2" checkinterval="2s">
                              <conditions>
                                <check_value value="player.entity.hascontext.{$Ship}"/>
                                <check_all exact="$Passengers.count" counter="$i">
                                  <check_value value="not $Passengers.{$i}.hascontext.{$Ship}"/>
                                </check_all>
                              </conditions>
                              <actions>
                                <debug_text text="'WaitForEmbark2'"/>
                                <!--Wait: for passenger to arrive-->
                                <do_if value="$LeadPassenger.isfemale">
                                  <set_objective cue="$MissionCue" action="objective.wait" text="{30004,5107}"/>
                                </do_if>
                                <do_else>
                                  <set_objective cue="$MissionCue" action="objective.wait" text="{30004,5106}"/>
                                </do_else>
                              </actions>
                              <cues>
                                <cue name="PassengerWaitForEmbark2_keepalive">
                                  <conditions>
                                    <event_cue_signalled/>
                                  </conditions>
                                </cue>
                              </cues>
                            </cue>

                            <cue name="PassengerNextSection_Next2" checkinterval="1s">
                              <conditions comment="have player and all passengers arrived?">
                                <check_value value="player.entity.hascontext.{$Ship}"/>
                                <check_all exact="$Passengers.count" counter="$i">
                                  <check_value value="$Passengers.{$i}.hascontext.{$Ship}"/>
                                </check_all>
                              </conditions>
                              <actions>
                                <!--TODO @Owen better notification for all passengers on board-->
                                <substitute_text text="$Notification" source="$TextTable.$onboardnotification">
                                  <replace string="'$SHIP$'" with="$Ship.name" />
                                  <replace string="'$PASSENGER$'" with="$PassengerList.count" />
                                </substitute_text>
                                <show_notification text="[$TextTable.$missionname, '', $Notification]" />
                                <speak actor="$LeadPassenger" line="11801" comment="(NPC moved onto player ship)" />
                                <set_value name="$Passenger_Onboard" exact="true"/>
                                <signal_cue cue="StartPassengerTransport" />
                              </actions>
                            </cue>
                          </cues>
                        </cue>

                        <cue name="PassengerNextSection_SelectShip" instantiate="true">
                          <conditions>
                            <event_conversation_next_section actor="$LeadPassenger" />
                            <check_value value="event.param == 'passenger_onboard'" />
                          </conditions>
                          <actions>
                            <find_object_component name="$PlayerShips" object="$LeadPassenger.container" owner="faction.player" class="[class.ship_s, class.ship_m, class.ship_l, class.ship_xl]" recursive="true" multiple="true" />
                            <do_if value="not $PlayerShips.count">
                              <debug_text text="'No player ships on $LeadPassenger\'s ship or station'" chance="$DebugChance" />
                              <!-- TODO (@Lorraine): Add voice line for player not having any available ships -->
                            </do_if>
                            <do_else>
                              <open_conversation_menu menu="PlatformUndockMenu" param="[0, 0, $LeadPassenger.container, 'movepassenger']" />
                            </do_else>
                          </actions>
                        </cue>

                        <cue name="PassengerNextSection_Check_Space" instantiate="true">
                          <conditions>
                            <event_conversation_next_section actor="$LeadPassenger" />
                            <check_value value="event.param == 'c_movepassenger_destinationselected'" />
                          </conditions>
                          <actions>
                            <set_value name="$PassengerShip" exact="event.param2" />
                            <!--people.free does not count control entity slots, which is fine for this case
                            Inbound people should be flagged as 'intransit' and included in the current total of people-->
                            <debug_text text="'$PassengerShip ' + $PassengerShip + ' has ' + $PassengerShip.people.free + ' free people slots'" chance="$DebugChance"/>
                            <do_if value="$PassengerShip.people.free lt $PassengerList.count">
                              <add_npc_line speaker="$LeadPassenger" line="11803" comment="(No room on player ship)" />
                            </do_if>
                            <do_else>
                              <set_value name="$Ship" exact="$PassengerShip"/>
                              <signal_cue cue="PassengerNextSection_Has_Space"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="StartPassengerTransport">
                      <conditions>
                        <event_cue_signalled />
                      </conditions>
                      <actions>
                        <debug_text text="'Starting passenger transport phase with passengers: ' + $Passengers" chance="$DebugChance"/>
                        <cancel_cue cue="PickupPassengerSection" />
                        <!--TODO @Owen this removed the handling for clearing up the dynamic interior-->
                        <cancel_cue cue="DeliveryStationHandlers"/>
                        <cancel_cue cue="PlaceLeadPassenger"/>
                        <do_if value="MissionTimeout.state" exact="cuestate.active">
                          <cancel_cue cue="MissionTimeout"/>
                        </do_if>
                      </actions>
                      <cues>
                        <cue name="TransportPass_Ref" ref="md.RML_Transport_Passengers.TransportPassengers">
                          <param name="EndSignalCue" value="TransportPassengers_End" />
                          <param name="MissionCue" value="$MissionCue" />
                          <param name="StartStep" value="2"/>
                          <param name="Ship" value="$Ship"/>
                          <param name="Passengers" value="$PassengerTemplates" />
                          <param name="DestinationDock" value="$DeliveryDockArea" />
                          <param name="DestinationStation" value="$DeliveryContainer" />
                          <param name="TimeOut" value="$MissionDuration" />
                        </cue>

                        <cue name="StartPassengerTransport_Reset">
                          <conditions>
                            <event_cue_signalled cue="MissionResetOnDestinationChange"/>
                          </conditions>
                          <actions>
                            <reset_cue cue="StartPassengerTransport"/>
                            <signal_cue cue="StartPassengerTransport"/>
                          </actions>
                        </cue>

                        <cue name="TransportPassengers_End">
                          <conditions>
                            <event_cue_signalled />
                          </conditions>
                          <actions>
                            <do_if value="this.$EndFeedbackValue" max="-100">
                              <debug_text text="'There was a script or code error in RML - aborting mission: ' + this.$EndFeedbackValue" chance="$DebugChance" />
                              <set_value name="$Feedback" exact="'$TRANSPORT_RML_ERROR'" />
                              <signal_cue cue="MissionAborted" />
                            </do_if>
                            <do_else>
                              <set_value name="MissionEnded.$EndFeedbackValue" exact="this.$EndFeedbackValue" />
                              <signal_cue cue="MissionEnded" />
                            </do_else>
                          </actions>
                        </cue>

                        <cue name="CheckDistance" instantiate="true">
                          <conditions>
                            <event_object_changed_zone object="$Ship"/>
                            <check_value value="$EnemyFaction"/>
                            <check_value value="$EnemyWaves"/>
                            <check_value value="not player.zone.istempzone"/>
                            <check_value value="player.zone.haspriority"/>
                            <check_value value="not player.zone.isclass.highway"/>
                          </conditions>
                          <actions>
                            <debug_text text="'CheckDistance'" chance="$DebugChance"/>
                            <do_if value="$DeliveryDockArea">
                              <set_value name="$EndZone" exact="$DeliveryDockArea.zone" />
                            </do_if>
                            <do_else>
                              <set_value name="$EndZone" exact="$DeliveryContainer.zone" />
                            </do_else>
                            <get_global_path component="$Path" multiple="true">
                              <start object="$Ship"/>
                              <end object="$EndZone"/>
                            </get_global_path>

                            <do_if value="not $ClosestDistance? or $Path.count lt @$ClosestDistance">
                              <set_value name="$ClosestDistance" exact="$Path.count"/>

                              <debug_text text="'Now closer to the end, at a distance of: ' + $ClosestDistance" chance="$DebugChance"/>

                              <do_all exact="$Path.count" counter="$Counter">
                                <do_if value="$Path.{$Counter}.isclass.highway">
                                  <do_if value="$Path.{$Counter}.entry.zone == player.zone">
                                    <debug_text text="'Spawn ships at: ' + $Path.{$Counter}.entry.position"/>
                                    <set_value name="$EnemyZone" exact="player.zone"/>
                                    <set_value name="$EnemyPosObject" exact="$Path.{$Counter}.entry"/>
                                    <set_value name="$AllowHighways" exact="50"/>
                                    <signal_cue cue="SpawnEnemiesEvent"/>
                                    <break/>
                                  </do_if>
                                  <do_else>
                                    <debug_text text="'Spawn ships inside highway: ' + $Path.{$Counter}.macro.id"/>
                                    <set_value name="$EnemyZone" exact="player.zone"/>
                                    <set_value name="$EnemyPosObject" exact="$Ship"/>
                                    <set_value name="$AllowHighways" exact="100"/>
                                    <signal_cue cue="SpawnEnemiesEvent"/>
                                    <break/>
                                  </do_else>
                                </do_if>
                              </do_all>
                            </do_if>
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="SpawnEnemiesEvent" instantiate="true">
                      <conditions>
                        <event_cue_signalled/>
                        <check_value value="$EnemyZone.exists"/>
                      </conditions>
                      <actions>
                        <debug_text text="'SpawnEnemiesEvent'"/>
                        <signal_cue_instantly cue="md.LIB_Create_Enemies.CalculatePoints" param="[Start, $Difficulty, $MissionLevel]"/>
                        <set_value name="$EnemyWaves" operation="subtract"/>

                        <set_value name="$WaveEnemyPoints" exact="$EnemyPoints / $TotalEnemyWaves"/>
                      </actions>
                      <cues>
                        <cue name="LIB_Create_Enemies_Ref" ref="md.LIB_Create_Enemies.Start">
                          <param name="EndSignalCue" value="Enemies_Created"/>
                          <param name="GroupCue" value="Start" comment="Ship group is saved to '$GroupCue.$LIB_Create_Ships_Result'"/>

                          <!--Generation Info-->
                          <param name="EnemyPoints" value="$WaveEnemyPoints"/>

                          <!--Ship Info-->
                          <param name="Ship_Faction" value="$EnemyFaction" comment="Either a faction or 'pilot' to take from the pilot NPC"/>

                          <param name="Ship_CategoryFaction" value="$EnemyFaction" comment="faction or list of factions"/>


                          <!--Location Info-->
                          <param name="Zone" value="$EnemyZone"/>
                          <param name="PositionObject" value="$EnemyPosObject"/>
                          <param name="MinRange" value="3km"/>
                          <param name="MaxRange" value="6km"/>

                          <param name="AllowHighways" value="$AllowHighways"/>

                          <param name="DebugChance" value="$DebugChance"/>
                        </cue>

                        <cue name="Enemies_Created">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <do_all exact="$LIB_Create_Enemies_Result.count" counter="$Counter">
                              <create_order object="$LIB_Create_Enemies_Result.{$Counter}" id="'Attack'">
                                <param name="primarytarget" value="$Ship"/>
                                <param name="pursuetargets" value="true"/>
                              </create_order>
                            </do_all>
                            <!--No need to track the group. Just create and forget.-->
                            <clear_group group="$LIB_Create_Enemies_Result"/>
                            <set_value name="$EnemyZone" exact="null"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="MissionTimeout" onfail="cancel">
                      <conditions>
                        <check_value value="typeof $MissionDuration == datatype.time"/>
                        <check_value value="$MissionDuration" min="1s"/>
                      </conditions>
                      <delay exact="$MissionDuration"/>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericTimeoutLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <cancel_cue cue="StartPassengerTransport"/>
                        <remove_mission cue="$MissionCue" type="failed"/>
                        <set_value name="MissionEnded.$Feedback" exact="'$MISSION_TIMEOUT'"/>
                        <signal_cue_instantly cue="MissionEnded" />
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

            <cue name="MissionAborted">
              <conditions>
                <check_any>
                  <event_mission_aborted cue="$MissionCue"/>
                  <event_cue_signalled />
                </check_any>
              </conditions>
              <actions>
                <!-- Player aborted mission -->
                <do_if value="event.object" exact="$MissionCue">
                  <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                  <debug_text text="'GM_Transport_Passengers: Mission was aborted by the player.'" chance="$DebugChance" />
                  <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>
                </do_if>

                <!-- Script / code error aborted mission -->
                <do_else>
                  <!-- Leave $Feedback as it is because it has already been set in the part of the script that went wrong -->
                  <debug_text text="'GM_Transport_Passengers: Mission was aborted because of a script or code error.'" chance="$DebugChance" />
                  <speak actor="$Client" line="1000406" comment="(mission aborted by NPC / script error)" />
                </do_else>

                <remove_mission cue="$MissionCue" type="aborted" />
                <do_if value="$Ship">
                  <signal_cue cue="PassengerPreparesToLeavePlayerShip" />
                </do_if>
                <do_else>
                  <signal_cue cue="CleanUp" />
                </do_else>
              </actions>
            </cue>

            <cue name="MissionEnded" version="2">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <!--This cue can be activated from either the RML or the other parts of this mission-->

                <!--This cue may be signalled even though the mission is not yet accepted-->
                <set_value name="this.$WasAccepted" exact="MissionAccepted.state == cuestate.complete"/>

                <set_value name="$PassengerKilled" exact="false"/>
                <set_value name="$DockDestroyed" exact="false"/>
                <do_if value="MissionEnded.$EndFeedbackValue?">
                  <debug_text text="'This mission has ended due to the RML. ' + player.age + '. Feedback: ' + MissionEnded.$EndFeedbackValue"/>
                  <do_if value="MissionEnded.$EndFeedbackValue" exact="-4">
                    <set_value name="$DockDestroyed" exact="true"/>
                  </do_if>
                  <do_elseif value="MissionEnded.$EndFeedbackValue" exact="-1">
                    <set_value name="$PassengerKilled" exact="true"/>
                  </do_elseif>
                </do_if>
                <do_else>
                  <debug_text text="'This mission has ended at ' + player.age + '. Feedback: ' + this.$Feedback"/>
                  <do_if value="this.$Feedback" exact="'$INVALID_DELIVERY_DOCK'">
                    <set_value name="$DockDestroyed" exact="true"/>
                  </do_if>
                </do_else>

                <!--Mission completed successfully through the RML-->
                <do_if value="@MissionEnded.$EndFeedbackValue" min="1">
                  <do_if value="$RewardNotoriety and $ClientOwner">
                    <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                    <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted" />
                    <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                  </do_if>

                  <set_value name="$BonusCr" exact="0Cr"/>

                  <do_if value="@$DurationUntilBonusExpiry gt 1">
                    <include_actions ref="md.LIB_Reward_Balancing.Apply_TimeBonusCr" comment="Input: $TimeBonusCr_Max, $MissionActivationTime, ($DurationUntilBonusDecay), ($DurationUntilBonusExpiry), ($RewardCr); Output: $RewardCr"/>
                  </do_if>

                  <do_if value="$RewardCr">
                    <do_if value="$BonusTime">
                      <do_if value="(player.age - $StartTime) lt $BonusTime">
                        <!--Cast values to float before converting back to money-->
                        <set_value name="$BonusCr" exact="(($RewardCr)f * (1.0f - ((player.age - $StartTime) / $BonusTime))f)ct"/>
                        <debug_text text="'Ratio ' + (1.0f - ((player.age - $StartTime) / $BonusTime))f" chance="$DebugChance"/>
                        <debug_text text="'$RewardCr ' + $RewardCr" chance="$DebugChance"/>
                        <debug_text text="'$BonusCr ' + $BonusCr" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                    <reward_player money="$RewardCr + $BonusCr" />
                  </do_if>
                  <do_elseif value="$RewardObj">
                    <do_if value="$RewardObj.isinventory">
                      <add_inventory entity="player.entity" ware="$RewardObj" />
                      <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received" />
                    </do_if>
                  </do_elseif>
                  <set_value name="stat.missions_completed" operation="add"/>
                  <set_value name="stat.passenger_missions_completed" operation="add"/>
                  <speak actor="$Client" line="1000401" comment="(successful mission)" />
                  <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>
                  <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'" />
                  <remove_mission cue="$MissionCue" type="completed" activate="next" />
                  <signal_cue_instantly cue="CleanUp" />
                </do_if>

                <do_else>
                  <set_value name="$EndMission" exact="true"/>
                  <!--Destination destroyed. Request a new one via $RequestNewTargetCue-->
                  <do_if value="$DockDestroyed and $RequestNewTargetCue">
                    <signal_cue_instantly cue="$RequestNewTargetCue"/>
                    <do_if value="$TargetContainer.exists">
                      <set_value name="$DeliveryContainer" exact="$TargetContainer"/>
                    </do_if>
                    <do_if value="$TargetDockArea.exists">
                      <do_if value="$DeliveryContainer">
                        <assert value="$TargetDockArea.container == $DeliveryContainer" text="'$TargetDockArea container: ' + $TargetDockArea.container + ' ' + $TargetDockArea.container.knownname + ' differs from $DeliveryContainer: ' + $DeliveryContainer + ' ' + $DeliveryContainer.knownname"/>
                      </do_if>
                      <do_else>
                        <set_value name="$DeliveryContainer" exact="$TargetDockArea.container"/>
                      </do_else>
                    </do_if>
                    <do_if value="$DeliveryContainer.exists">
                      <!--Reset $Feedback-->
                      <set_value name="$Feedback" exact="null"/>
                      <set_value name="$EndMission" exact="false"/>
                    </do_if>
                  </do_if>

                  <!--Either end the mission and use the $EndFeedbackValue or restart the mission with a different destination-->
                  <!--Passengers will have to get off if already onboard-->
                  <do_if value="$EndMission">
                    <do_if value="MissionEnded.$EndFeedbackValue?">
                      <do_if value="MissionEnded.$EndFeedbackValue le -100">
                        <set_value name="$Feedback" exact="'$TRANSPORT_RML_ERROR'"/>
                      </do_if>
                      <do_else>
                        <set_value name="$Feedback" exact="'$TRANSPORT_RML_FAILED'"/>
                      </do_else>
                    </do_if>
                    <do_else>
                      <set_value name="$Feedback" exact="this.$Feedback"/>
                    </do_else>

                    <!--Player needs to dock to let passenger off?-->
                    <set_value name="$PlayerMustDock" exact="false"/>
                    <do_if value="this.$WasAccepted and $Ship and $Ship.isoperational">
                      <do_if value="not $Ship.dock">
                        <set_value name="$PlayerMustDock" exact="true"/>
                      </do_if>
                    </do_if>
                    <do_if value="$PlayerMustDock">
                      <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>
                      <do_if value="DeliveryDockDestroyed.state" exact="cuestate.complete">
                        <cancel_cue cue="DeliveryDockDestroyed" />
                      </do_if>
                      <do_if value="DeliveryStationDestroyed.state" exact="cuestate.complete">
                        <cancel_cue cue="DeliveryStationDestroyed" />
                      </do_if>

                      <remove_mission cue="$MissionCue" type="failed" reason="@MissionEnded.$EndFeedbackText"/>

                      <cancel_cue cue="StartPassengerTransport" />
                      <signal_cue cue="PassengerPreparesToLeavePlayerShip" />
                    </do_if>
                    <do_else>
                      <do_if value="this.$WasAccepted">
                        <!--TODO: NPC Text line to abort the mission themselves due to changed conditions-->
                        <do_if value="not $PassengerKilled and $Ship">
                          <!--TODO @Owen #EntityTypes event for when a person has left a ship? Keep track of where they are?-->
                          <set_value name="$ShipPeople" exact="$Ship.people.list"/>
                          <do_all exact="$PassengerTemplates.count" counter="$i">
                            <do_if value="$ShipPeople.indexof.{$PassengerTemplates.{$i}}">
                              <add_npc_line page="$Ship.people.{$PassengerTemplates.{$i}}.page" line="1000403" comment="(failed mission)" />
                              <break/>
                            </do_if>
                          </do_all>
                        </do_if>
                        <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>
                        <remove_mission cue="$MissionCue"/>
                      </do_if>
                      <signal_cue_instantly cue="CleanUp" />
                    </do_else>
                  </do_if>

                  <!--Restart the mission-->
                  <do_else>
                    <include_actions ref="MissionResetOnDestinationChange"/>
                  </do_else>
                </do_else>
              </actions>
              <cues>
                <cue name="PlayerDocked">
                  <conditions>
                    <event_object_docked group="global.$PlayerContainerGroup" />
                  </conditions>
                  <actions>
                    <do_if value="$Aborted?">
                      <remove_mission cue="$MissionCue" type="aborted"/>
                    </do_if>
                    <do_else>
                      <remove_mission cue="$MissionCue" type="failed"/>
                    </do_else>

                    <signal_cue_instantly cue="CleanUp" />
                  </actions>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="PassengerPreparesToLeavePlayerShip">
          <conditions>
            <event_cue_signalled />
          </conditions>
          <actions>
            <do_if value="$LeadPassenger.isclass.npc and $Ship.people.list.indexof.{$LeadPassenger.npctemplate}">
              <add_npc_line speaker="$LeadPassenger" line="1000403" comment="(failed mission)" />
            </do_if>
            <do_else>
              <set_value name="$ShipPeople" exact="$Ship.people.list"/>
              <do_all exact="$PassengerTemplates.count" counter="$i">
                <do_if value="$ShipPeople.indexof.{$PassengerTemplates.{$i}}">
                  <add_npc_line page="$Ship.people.{$PassengerTemplates.{$i}}.page" line="1000403" comment="(failed mission)" />
                  <break/>
                </do_if>
              </do_all>
            </do_else>

            <signal_cue_instantly cue="CleanUp" />
          </actions>
        </cue>

        <cue name="ForceCleanup" onfail="cancel">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="not event.param? or event.param == $MissionCue"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <do_if value="Do_Start_Mission.state == cuestate.complete">
              <cancel_cue cue="Do_Start_Mission"/>
            </do_if>
            <do_if value="$Ship? and $Ship.isoperational">
              <do_all exact="$PassengerList.count" counter="$i">
                <do_if value="$Ship.people.{$PassengerList.{$i}.npctemplate}.exists">
                  <substitute_text text="$Notification" source="$TextTable.$passengerleftnotification">
                    <replace string="'$SHIP$'" with="$Ship.name" />
                    <replace string="'$PASSENGER$'" with="$Ship.people.{$PassengerList.{$i}.npctemplate}.name" />
                  </substitute_text>
                  <show_notification text="[$TextTable.$missionname, '', $Notification]" />
                  <remove_npc_template object="$Ship" template="$PassengerList.{$i}.npctemplate"/>
                </do_if>
              </do_all>
            </do_if>

            <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
            <do_if value="$BriefingCutsceneStarted?">
              <remove_value name="$BriefingCutsceneStarted"/>
              <stop_cutscene key="$CutsceneKey"/>
            </do_if>

            <do_if value="$HoloMap?">
              <remove_holomap />
              <remove_value name="$HoloMap"/>
            </do_if>

            <!--***Cleanup objects***-->

            <!--TODO: Make sure it's safe to remove the client this quickly-->
            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and not $PreexistingClient?">
              <do_if value="not $Passengers? or not $Passengers.indexof.{$Client}">
                <destroy_object object="$Client"/>
              </do_if>
            </do_if>

            <do_if value="(($ExistingActors or $UseClient) and $CleanExistingActors) or not $PreexistingClient?">
              <do_if value="$PassengerList?">
                <do_all exact="$PassengerList.count" counter="$i">
                  <do_if value="$PassengerList.{$i}.isclass.npc">
                    <set_value name="$DespawnSlot" exact="null"/>
                    <do_if value="$PassengerList.{$i}.ship">
                      <do_if value="$PassengerList.{$i}.ship.container">
                        <find_npc_waypoint name="$DespawnSlot" object="$PassengerList.{$i}.ship.container" tags="tag.npctransport"/>
                      </do_if>
                    </do_if>
                    <set_value name="$DespawnTable" exact="table[$slot = $DespawnSlot]"/>
                    <!--TODO @Owen NPC cleanup outside of this cue for the case where the mission ends but the player is not docked-->
                    <debug_text text="'Cleaning up pre-existing passenger ' + $PassengerList.{$i}" chance="$DebugChance"/>
                    <signal_objects object="$PassengerList.{$i}" param="'npc_despawn'" param2="$DespawnTable.clone"/>
                  </do_if>
                </do_all>
              </do_if>
            </do_if>

            <!--TODO @Owen cleanup the dynamic interior if the mission was aborted (make sure the player isn't in it)-->

            <!--***Evaluate result***-->

            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [Owen]'" break="1"/>
              </do_else>

              <do_if value="$ReportSignalCue">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData"/>
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>

            <cancel_cue cue="Start"/>
          </actions>
        </cue>
      </cues>
    </library>

    <!-- MISSION SETUP HELPERS -->

    <!-- input: $MissionLevel, $OfferStation, $TargetStation / $TargetShip; output: $MissionLevel -->
    <library name="ConfigureDifficulty">
      <actions>
        <set_value name="$MissionLevel" exact="if not $MissionLevel? then 1 else $MissionLevel"/>
        <debug_text text="'Missing $MissionLevel input. Set to: ' + $MissionLevel" chance="$DebugChance"/>

        <do_if value="@$TargetStation">
          <do_if value="$TargetStation.distanceto.{$OfferStation} lt 50km">
            <!-- Use base $MissionLevel -->
          </do_if>
          <do_elseif value="$TargetStation.sector == $OfferStation.sector">
            <set_value name="$MissionLevel" operation="add"/>
          </do_elseif>
          <do_else>
            <set_value name="$MissionLevel" exact="2" operation="add"/>
          </do_else>
        </do_if>

        <do_elseif value="@$TargetShip">
          <do_if value="$TargetShip.distanceto.{$OfferStation} lt 50km">
            <!-- Use base $MissionLevel -->
          </do_if>
          <do_elseif value="$TargetShip.sector == $OfferStation.sector">
            <set_value name="$MissionLevel" operation="add"/>
          </do_elseif>
          <do_else>
            <set_value name="$MissionLevel" exact="2" operation="add"/>
          </do_else>
        </do_elseif>

      </actions>
    </library>

    <!--GENERIC MISSION VARIANTS-->

    <cue name="Force_Generic_Var_1" instantiate="true">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers" />
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 1, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_Transport_Passengers_Var_1" />
    </cue>

    <cue name="Force_Generic_Var_2" instantiate="true">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers" />
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 2, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_Transport_Passengers_Var_2" />
    </cue>

    <!--event.param = table[
    $Sector,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnSectorChange (Optional, defaults to true)
    $DebugChance (Optional)]-->
    <cue name="GenerateGenericMission" instantiate="true" namespace="this" version="2">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Sector"           exact="event.param.$Sector"/>
        <set_value name="$ReportSignalCue"  exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant"   exact="@event.param.$MissionVariant"/>
        <do_if value="event.param.$RemoveOnSectorChange?">
          <set_value name="$RemoveOnSectorChange" exact="event.param.$RemoveOnSectorChange"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnSectorChange" exact="true"/>
        </do_else>

        <set_value name="$DebugChance"      exact="@event.param.$DebugChance"/>
        <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>

        <set_value name="$FeedbackManager" exact="FeedbackValueManager"/>
        <assert value="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT?" text="'Required error code does not exist. Was the FeedbackValueManager not updated for stand-alone missions? [Owen/Roger]'"/>

        <debug_text text="'Attempting to generate a generic mission'" chance="$DebugChance"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <do_if value="$ReportSignalCue.exists">
          <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        </do_if>
        <do_else>
          <debug_text text="'cancelling dead GM instance'" filter="savegame"/>
          <cancel_cue cue="this"/>
        </do_else>
      </patch>
      <cues>
        <cue name="GenerateGenericMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>

            <!--Set up some common variables first so that the variants don't have to do things multiple times-->

            <!--Find potential offer stations in the sector-->
            <find_station name="$PotentialOfferStations" space="$Sector" multiple="true">
              <match owner="[faction.player, faction.xenon, faction.ownerless]" negate="true"/>
              <match_relation_to object="player.entity" comparison="not" relation="enemy" />
            </find_station>

            <do_if value="$PotentialOfferStations.count">
              <do_if value="$MissionVariant">
                <!--A specific MissionVariant ID was requested-->
                <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
                <do_if value="$MissionVariant == 1">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
                </do_if>
                <do_elseif value="$MissionVariant == 2">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_2"/>
                </do_elseif>
                <do_else>
                  <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [Owen]'"/>
                </do_else>
              </do_if>
              <do_else>
                <!--Attempt to a mission variant at random-->
                <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
                <signal_cue_instantly cue="GenerateGenericMission_Variant_2"/>
              </do_else>
            </do_if>

            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateGenericMission"/>
            </do_else>
          </actions>
        </cue>

        <!-- Passenger transport from Station to Station -->
        <cue name="GenerateGenericMission_Variant_1" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStation" exact="GenerateGenericMission.$PotentialOfferStations.random"/>
            <set_value name="$TargetStation" exact="null"/>
            <set_value name="$Faction" exact="$OfferStation.owner"/>
            
            <set_value name="$SearchSpace" exact="$OfferStation.sector"/>

            <set_value name="$Difficulty" exact="level.veryeasy"/>
            <set_value name="$MissionLevel" exact="1"/>

            <set_value name="$Valid" exact="false"/>

            <do_any>
              <set_value name="$CheckOutside" exact="true" weight="10"/>
              <set_value name="$CheckOutside" exact="false" weight="50"/>
            </do_any>

            <do_all exact="2" comment="2 passes for checking within the sector or outside.">
              <do_if value="$CheckOutside">
                <find_cluster_in_range name="$NearClusters" object="$OfferStation" mindistance="1" maxdistance="1" multiple="true"/>
                <shuffle_list list="$NearClusters"/>

                <do_all exact="$NearClusters.count" counter="$i">
                  <find_station name="$TargetStation" space="$NearClusters.{$i}">
                    <match_relation_to faction="faction.player" comparison="not" relation="enemy" />
                    <match_relation_to faction="$OfferStation.owner" comparison="not" relation="enemy" />
                  </find_station>
                  <do_if value="$TargetStation">
                    <break/>
                  </do_if>
                </do_all>
              </do_if>
              <do_else>
                <find_station name="$TargetStations" space="$OfferStation.cluster" multiple="true">
                  <match_relation_to faction="faction.player" comparison="not" relation="enemy" />
                  <match_relation_to faction="$OfferStation.owner" comparison="not" relation="enemy" />
                </find_station>
                <do_if value="$TargetStations.indexof.{$OfferStation}">
                  <remove_value name="$TargetStations.{$TargetStations.indexof.{$OfferStation}}"/>
                </do_if>
                <do_if value="$TargetStations.count">
                  <set_value name="$TargetStation" exact="$TargetStations.random"/>
                </do_if>
              </do_else>

              <do_if value="$TargetStation">
                <break/>
              </do_if>

              <set_value name="this.$CheckOutside" exact="not this.$CheckOutside"/>
            </do_all>

            <!-- $MissionLevel depending on distance -->
            <do_if value="$TargetStation">
              <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel, $OfferStation, $TargetStation / $TargetShip; output: $MissionLevel"/>
              <set_value name="$Valid" exact="true"/>
            </do_if>

            <do_if value="md.$SplitPatriarchyFactions.indexof.{$Faction}" chance="30">
              <set_value name="$TextOffset" exact="700"/>
            </do_if>
            <do_if value="md.$SplitFactions.indexof.{$Faction}" chance="30">
              <set_value name="$TextOffset" exact="900"/>
            </do_if>
            <do_else>
              <do_any>
                <set_value name="$TextOffset" exact="100"/>
                <set_value name="$TextOffset" exact="200"/>
              </do_any>
            </do_else>

            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_1_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <cues>
                <cue name="GenerateGenericMission_Variant_1_Ref" ref="Start">
                  <param name="OfferObject"   value="$OfferStation"/>
                  <param name="MissionLevel"  value="$MissionLevel"/>
                  <param name="Difficulty"    value="$Difficulty"/>

                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>

                  <!--Mission text-->
                  <param name="Page"          value="30101"/>
                  <param name="TextOffset"    value="$TextOffset"/>

                  <!--Mission specific params-->
                  <param name="UseClient"           value="true"/>
                  <param name="StartContainer"      value="$OfferStation"/>
                  <param name="TargetContainer"     value="$TargetStation"/>

                  <param name="ReportSignalCue"     value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance"         value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <!-- Passenger transport from Station to Ship -->
        <cue name="GenerateGenericMission_Variant_2" namespace="this" version="2">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStation" exact="GenerateGenericMission.$PotentialOfferStations.random"/>
            <set_value name="$Faction" exact="$OfferStation.owner"/>

            <set_value name="$Difficulty" exact="level.veryeasy"/>
            <set_value name="$MissionLevel" exact="2" comment="Flying to a moving ship requires slightly more effort."/>

            <set_value name="$Valid" exact="false"/>

            <set_value name="$SearchSpace" exact="$OfferStation.sector"/>
            <set_value name="$DockSize_M" exact="false"/>
            <set_value name="$DockSize_S" exact="false"/>

            <create_list name="$DockSizes"/>

            <do_any>
              <set_value name="$CheckOutside" exact="true" weight="10"/>
              <set_value name="$CheckOutside" exact="false" weight="50"/>
            </do_any>

            <do_all exact="2" comment="2 passes for checking within the sector or outside.">
              <do_if value="$CheckOutside">
                <find_cluster_in_range name="$NearClusters" object="$OfferStation" mindistance="1" maxdistance="1" multiple="true"/>
                <shuffle_list list="$NearClusters"/>

                <do_all exact="$NearClusters.count" counter="$i">
                  <find_ship name="$TargetShip" owner="$OfferStation.owner" space="$NearClusters.{$i}">
                    <match_any>
                      <match_content checkoperational="true">
                        <match_dock size="tag.dock_s"/>
                      </match_content>
                      <match_content checkoperational="true">
                        <match_dock size="tag.dock_m"/>
                      </match_content>
                    </match_any>
                  </find_ship>
                  <do_if value="$TargetShip">
                    <break/>
                  </do_if>
                </do_all>
              </do_if>
              <do_else>
                <find_ship name="$TargetShip" owner="$OfferStation.owner" space="$OfferStation.cluster">
                  <match_any>
                    <match_content checkoperational="true">
                      <match_dock size="tag.dock_s"/>
                    </match_content>
                    <match_content checkoperational="true">
                      <match_dock size="tag.dock_m"/>
                    </match_content>
                  </match_any>
                </find_ship>
              </do_else>

              <do_if value="$TargetShip">
                <break/>
              </do_if>

              <set_value name="this.$CheckOutside" exact="not this.$CheckOutside"/>
            </do_all>

            <do_if value="$TargetShip">
              <find_object_component name="$ShipDocks" object="$TargetShip" class="class.dockingbay" multiple="true"/>
              <do_all exact="$ShipDocks.count" counter="$counter_docks">
                <do_all exact="$ShipDocks.{$counter_docks}.docksize.count" counter="$dock_i">
                  <do_if value="$ShipDocks.{$counter_docks}.docksize.{$dock_i}" exact="tag.dock_m">
                    <set_value name="$DockSize_M" exact="true"/>
                  </do_if>
                  <do_elseif value="$ShipDocks.{$counter_docks}.docksize.{$dock_i}" exact="tag.dock_s">
                    <set_value name="$DockSize_S" exact="true"/>
                  </do_elseif>
                </do_all>
              </do_all>
              <do_if value="$DockSize_M and $DockSize_S">
                <append_to_list name="$DockSizes" exact="'Size_M'"/>
                <append_to_list name="$DockSizes" exact="'Size_S'"/>
              </do_if>
              <do_elseif value="not $DockSize_M">
                <set_value name="$MissionLevel" operation="add" exact="2" comment="Added because of fewer possible ships the player can use and for having to land on a smaller ship"/>
                <append_to_list name="$DockSizes" exact="'Size_S'"/>
              </do_elseif>
              <do_elseif value="not $DockSize_S">
                <append_to_list name="$DockSizes" exact="'Size_M'"/>
              </do_elseif>
              <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel, $OfferStation, $TargetStation / $TargetShip; output: $MissionLevel"/>
              <set_value name="$Valid" exact="true"/>
            </do_if>

            <remove_value name="$DockSize_S"/>
            <remove_value name="$DockSize_M"/>

            <debug_text text="'Targetship Docksizes: ' + $DockSizes" chance="$DebugChance"/>

            <do_if value="md.$SplitFactions.indexof.{$Faction}" chance="30">
              <set_value name="$TextOffset" exact="800"/>
              <set_value name="$DurationUntilBonusDecay" exact="false"/>
              <set_value name="$DurationUntilBonusExpiry" exact="false"/>
            </do_if>
            <do_else>
              <do_any>
                <set_value name="$TextOffset" exact="400"/>
                <set_value name="$TextOffset" exact="500"/>
              </do_any>
              <set_value name="$DurationUntilBonusDecay" exact="120s"/>
              <set_value name="$DurationUntilBonusExpiry" exact="0.167h"/>
            </do_else>

            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <patch sinceversion="2">
            <create_list name="$DockSizes"/>
          </patch>
          <cues>
            <cue name="GenerateGenericMission_Variant_2_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <cues>
                <cue name="GenerateGenericMission_Variant_2_Ref" ref="Start">
                  <param name="OfferObject"   value="$OfferStation"/>
                  <param name="MissionLevel"  value="$MissionLevel"/>
                  <param name="Difficulty"    value="$Difficulty"/>

                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace"      value="$Sector"/>

                  <!--Mission text-->
                  <param name="Page"          value="30101"/>
                  <param name="TextOffset"    value="$TextOffset"/>

                  <!--Mission specific params-->
                  <param name="UseClient"                 value="true"/>
                  <param name="StartContainer"            value="$OfferStation"/>
                  <param name="TargetContainer"           value="$TargetShip"/>
                  <param name="DockSizes"                 value="$DockSizes"/>

                  <param name="ReportSignalCue"           value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance"               value="@GenerateGenericMission.$DebugChance"/>
                  <param name="DurationUntilBonusDecay"   value="$DurationUntilBonusDecay"  comment="Mission duration until the bonus reward credits start to decay" />
                  <param name="DurationUntilBonusExpiry"  value="$DurationUntilBonusExpiry" comment="Mission duration until the bonus reward credits expire completely" />
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <!--event.param = table[
    $Sector,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnSectorChange (Optional, defaults to true)
    $DebugChance (Optional)]-->
    <cue name="GenerateNPCMission" instantiate="true" namespace="this" version="2">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Location"         exact="event.param.$Location"/>
        <set_value name="$ReportSignalCue"  exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant"   exact="@event.param.$MissionVariant"/>

        <do_if value="event.param.$RemoveOnDespawn?">
          <set_value name="$RemoveOnDespawn"  exact="event.param.$RemoveOnDespawn"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnDespawn"  exact="true"/>
        </do_else>

        <set_value name="$DebugChance"      exact="@event.param.$DebugChance"/>
        <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>

        <set_value name="$FeedbackManager" exact="FeedbackValueManager"/>
        <assert value="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT?" text="'Required error code does not exist. Was the FeedbackValueManager not updated for stand-alone missions? [Owen/Roger]'"/>

        <debug_text text="'Attempting to generate a NPC mission'" chance="$DebugChance"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <do_if value="$ReportSignalCue.exists">
          <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        </do_if>
        <do_else>
          <debug_text text="'cancelling dead GM instance'" filter="savegame"/>
          <cancel_cue cue="this"/>
        </do_else>
      </patch>
      <cues>
        <cue name="GenerateNPCMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>

            <set_value name="$LocationOwner" exact="$Location.owner"/>

            <!--Set up some common variables first so that the variants don't have to do things multiple times-->

            <do_if value="$MissionVariant">
              <!--A specific MissionVariant ID was requested-->
              <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
              <do_if value="$MissionVariant == 1">
                <signal_cue_instantly cue="GenerateNPCMission_Variant_1"/>
              </do_if>
              <do_else>
                <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [Owen]'"/>
              </do_else>
            </do_if>
            <do_else>
              <!--Attempt to a mission variant at random-->
              <signal_cue_instantly cue="GenerateNPCMission_Variant_1"/>
            </do_else>

            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateNPCMission"/>
            </do_else>
          </actions>
        </cue>

        <!-- Passenger transport from Station to Station -->
        <cue name="GenerateNPCMission_Variant_1" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateNPCMission-->
            <set_value name="$Location" exact="GenerateNPCMission.$Location"/>
            <set_value name="$DebugChance" exact="GenerateNPCMission.$DebugChance"/>

            <set_value name="$DockSizes" exact="[]"/>
            <set_value name="$OfferStation" exact="$Location"/>
            <set_value name="$Faction" exact="$OfferStation.owner"/>
            <set_value name="$Sector" exact="$OfferStation.sector"/>
            <set_value name="$TargetStation" exact="null"/>
            <set_value name="$Faction" exact="$OfferStation.owner"/>

            <set_value name="$SearchSpace" exact="$OfferStation.sector"/>
            
            <set_value name="$DockSize_M" exact="false"/>
            <set_value name="$DockSize_S" exact="false"/>

            <set_value name="$Difficulty" exact="level.veryeasy"/>
            <set_value name="$MissionLevel" exact="1"/>

            <set_value name="$DurationUntilBonusDecay" exact="false"/>
            <set_value name="$DurationUntilBonusExpiry" exact="false"/>

            <set_value name="$Valid" exact="false"/>

            <do_any>
              <set_value name="$CheckOutside" exact="true" weight="10"/>
              <set_value name="$CheckOutside" exact="false" weight="50"/>
            </do_any>

            <do_if value="[0,1].random">
              <do_all exact="2" comment="2 passes for checking within the sector or outside.">
                <do_if value="$CheckOutside">
                  <find_cluster_in_range name="$NearClusters" object="$OfferStation" mindistance="1" maxdistance="1" multiple="true"/>
                  <shuffle_list list="$NearClusters"/>

                  <do_all exact="$NearClusters.count" counter="$i">
                    <find_station name="$TargetStation" space="$NearClusters.{$i}">
                      <match_relation_to faction="faction.player" comparison="not" relation="enemy" />
                      <match_relation_to faction="$OfferStation.owner" comparison="not" relation="enemy" />
                    </find_station>
                    <do_if value="$TargetStation">
                      <break/>
                    </do_if>
                  </do_all>
                </do_if>
                <do_else>
                  <find_station name="$TargetStations" space="$OfferStation.cluster" multiple="true">
                    <match_relation_to faction="faction.player" comparison="not" relation="enemy" />
                    <match_relation_to faction="$OfferStation.owner" comparison="not" relation="enemy" />
                  </find_station>
                  <do_if value="$TargetStations.indexof.{$OfferStation}">
                    <remove_value name="$TargetStations.{$TargetStations.indexof.{$OfferStation}}"/>
                  </do_if>
                  <do_if value="$TargetStations.count">
                    <set_value name="$TargetStation" exact="$TargetStations.random"/>
                  </do_if>
                </do_else>

                <do_if value="$TargetStation">
                  <break/>
                </do_if>

                <set_value name="this.$CheckOutside" exact="not this.$CheckOutside"/>
              </do_all>

              <!-- $MissionLevel depending on distance -->
              <do_if value="$TargetStation">
                <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel, $OfferStation, $TargetStation / $TargetShip; output: $MissionLevel"/>
                <set_value name="$TargetContainer" exact="$TargetStation"/>
                <set_value name="$Valid" exact="true"/>
              </do_if>

              <do_if value="md.$SplitPatriarchyFactions.indexof.{$Faction}" chance="30">
                <set_value name="$TextOffset" exact="700"/>
              </do_if>
              <do_if value="md.$SplitFactions.indexof.{$Faction}" chance="30">
                <set_value name="$TextOffset" exact="900"/>
              </do_if>
              <do_else>
                <do_any>
                  <set_value name="$TextOffset" exact="100"/>
                  <set_value name="$TextOffset" exact="200"/>
                </do_any>
              </do_else>
            </do_if>
            <do_else>
              <do_all exact="2" comment="2 passes for checking within the sector or outside.">
                <do_if value="$CheckOutside">
                  <find_cluster_in_range name="$NearClusters" object="$OfferStation" mindistance="1" maxdistance="1" multiple="true"/>
                  <shuffle_list list="$NearClusters"/>

                  <do_all exact="$NearClusters.count" counter="$i">
                    <find_ship name="$TargetShip" owner="$OfferStation.owner" space="$NearClusters.{$i}">
                      <match_any>
                        <match_content checkoperational="true">
                          <match_dock size="tag.dock_s"/>
                        </match_content>
                        <match_content checkoperational="true">
                          <match_dock size="tag.dock_m"/>
                        </match_content>
                      </match_any>
                    </find_ship>
                    <do_if value="$TargetShip">
                      <break/>
                    </do_if>
                  </do_all>
                </do_if>
                <do_else>
                  <find_ship name="$TargetShip" owner="$OfferStation.owner" space="$OfferStation.cluster">
                    <match_any>
                      <match_content checkoperational="true">
                        <match_dock size="tag.dock_s"/>
                      </match_content>
                      <match_content checkoperational="true">
                        <match_dock size="tag.dock_m"/>
                      </match_content>
                    </match_any>
                  </find_ship>
                </do_else>

                <do_if value="$TargetShip">
                  <break/>
                </do_if>

                <set_value name="this.$CheckOutside" exact="not this.$CheckOutside"/>
              </do_all>

              <do_if value="$TargetShip">
                <find_object_component name="$ShipDocks" object="$TargetShip" class="class.dockingbay" multiple="true"/>
                <do_all exact="$ShipDocks.count" counter="$counter_docks">
                  <do_all exact="$ShipDocks.{$counter_docks}.docksize.count" counter="$dock_i">
                    <do_if value="$ShipDocks.{$counter_docks}.docksize.{$dock_i}" exact="tag.dock_m">
                      <set_value name="$DockSize_M" exact="true"/>
                    </do_if>
                    <do_elseif value="$ShipDocks.{$counter_docks}.docksize.{$dock_i}" exact="tag.dock_s">
                      <set_value name="$DockSize_S" exact="true"/>
                    </do_elseif>
                  </do_all>
                </do_all>
                <do_if value="$DockSize_M and $DockSize_S">
                  <append_to_list name="$DockSizes" exact="'Size_M'"/>
                  <append_to_list name="$DockSizes" exact="'Size_S'"/>
                </do_if>
                <do_elseif value="not $DockSize_M">
                  <set_value name="$MissionLevel" operation="add" exact="2" comment="Added because of fewer possible ships the player can use and for having to land on a smaller ship"/>
                  <append_to_list name="$DockSizes" exact="'Size_S'"/>
                </do_elseif>
                <do_elseif value="not $DockSize_S">
                  <append_to_list name="$DockSizes" exact="'Size_M'"/>
                </do_elseif>
                <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel, $OfferStation, $TargetStation / $TargetShip; output: $MissionLevel"/>
                <set_value name="$TargetContainer" exact="$TargetShip"/>
                <set_value name="$Valid" exact="true"/>
              </do_if>
              
              <remove_value name="$DockSize_S"/>
              <remove_value name="$DockSize_M"/>

              <debug_text text="'Targetship Docksizes: ' + $DockSizes" chance="$DebugChance"/>

              <do_if value="md.$SplitFactions.indexof.{$Faction}" chance="30">
                <set_value name="$TextOffset" exact="800"/>
              </do_if>
              <do_else>
                <do_any>
                  <set_value name="$TextOffset" exact="400"/>
                  <set_value name="$TextOffset" exact="500"/>
                </do_any>
                <set_value name="$DurationUntilBonusDecay" exact="120s"/>
                <set_value name="$DurationUntilBonusExpiry" exact="0.167h"/>
              </do_else>
            </do_else>

            <do_if value="$Valid">
              <append_to_list name="GenerateNPCMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateNPCMission_Variant_1_Selected">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <actions>
                <set_value name="$Client" exact="null"/>
                <set_value name="$SceneInstance" exact="null"/>
              </actions>
              <cues>
                <cue name="GenerateNPCMission_Variant_1_Select_Scene">
                  <actions>
                    <!--Attempt to create the NPC scene-->
                    <!--TODO @Owen selection of scene-->
                    <set_value name="$Scenes" exact="[md.NPC_Missions.Scene__Friendly_Client_Via_Comm_1]"/>
                    <shuffle_list list="$Scenes"/>

                    <do_all exact="$Scenes.count" counter="$i">
                      <do_if value="$Scenes.{$i} == md.NPC_Missions.Scene__Friendly_Client_Via_Comm_1">
                        <set_value name="$Scene_Definition" exact="table[
                                              $CallerCue = namespace,
                                              $Location = $Location,
                                              $Client = $Client,
                                              $ClientOwner = $Location.owner,
                                              $CallerEventCue = GenerateNPCMission_Variant_1_GM_Signal]"/>

                        <signal_cue_instantly cue="$Scenes.{$i}" param="$Scene_Definition"/>

                        <do_if value="@$Scene_Definition.$Result == 'SUCCESS'">
                          <set_value name="$SceneInstance" exact="$Scene_Definition.$SceneInstance"/>
                          <set_value name="$Client" exact="$Scene_Definition.$Client"/>
                          <set_entity_role entity="$Client" role="entityrole.service"/>
                          <set_value name="$Client.$role_object" exact="$Location"/>
                          <signal_cue cue="GenerateNPCMission_Variant_1_Trigger"/>
                          <break/>
                        </do_if>
                      </do_if>
                    </do_all>
                    <debug_text text="'Client is: ' + $Client + ' SceneInstance is: ' + $SceneInstance" chance="$DebugChance"/>
                    <do_if value="not $Client or not $SceneInstance">
                      <set_value name="$FeedbackData" exact="FeedbackValueManager.$FeedbackValues.$MISSION_NO_NPC_SCENE.clone"/>
                      <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_NPC_SCENE'"/>
                      <set_value name="GenerateNPCMission.$ReportSignalCue.$FeedbackValue" exact="$FeedbackData" comment="Can't set up NPC scene"/>
                      <signal_cue_instantly cue="GenerateNPCMission.$ReportSignalCue"/>
                      <cancel_cue cue="this"/>
                    </do_if>
                  </actions>
                  <cues>
                    <cue name="GenerateNPCMission_Variant_1_Scene_Ended">
                      <conditions>
                        <event_cue_cancelled cue="$SceneInstance"/>
                      </conditions>
                      <actions>
                        <do_if value="@$MissionAccepted">
                          <debug_text text="'Scene ended due to mission being accepted'" chance="$DebugChance"/>
                        </do_if>
                        <do_else>
                          <set_value name="$FeedbackData" exact="FeedbackValueManager.$FeedbackValues.$OFFER_REMOVED.clone"/>
                          <set_value name="$FeedbackData.$ID" exact="'$OFFER_REMOVED'"/>
                          <set_value name="GenerateNPCMission.$ReportSignalCue.$FeedbackValue" exact="$FeedbackData"/>
                          <signal_cue_instantly cue="GenerateNPCMission.$ReportSignalCue"/>
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <!--Cue which the scene is listening to. There are several standard -->
                <!--This cue is to be signalled by the GM when certain events happen e.g. mission accepted / mission failed / error
                A feedback table is saved to either:
                static.$FeedbackValue
                or 
                static.$EndFeedbackValue (in the event that the GM will end)
                This cue will pass the feedback table onto the caller of the GM (GenerateNPCMission.$ReportSignalCue), so the GM can be managed
                The scene can also listen to this cue to react to certain events e.g. mission accepted-->
                <cue name="GenerateNPCMission_Variant_1_GM_Signal" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="@static.$EndFeedbackValue" comment="Evaluate return-value of GM (success/failure)">
                      <debug_text text="'Mission ended. feedback' + static.$EndFeedbackValue" chance="$DebugChance"/>

                      <do_if value="$Client.isclass.npc">
                        <do_if value="$Client.parent">
                          <!--Set entity to temporary so they are cleaned up-->
                          <set_entity_traits entity="$Client" temporary="true"/>
                          <!--TODO @Owen better cleanup. Have them walk to despawn-->
                        </do_if>
                        <do_else>
                          <destroy_object object="$Client"/>
                        </do_else>
                      </do_if>

                      <!--This will cause this instance to end-->
                      <set_value name="GenerateNPCMission.$ReportSignalCue.$EndFeedbackValue" exact="static.$EndFeedbackValue"/>
                      <signal_cue_instantly cue="GenerateNPCMission.$ReportSignalCue" param="@event.param"/>
                    </do_if>
                    <do_elseif value="@static.$FeedbackValue">
                      <debug_text text="'Mission signalled with feedback' + static.$FeedbackValue" chance="$DebugChance"/>
                      <set_value name="GenerateNPCMission.$ReportSignalCue.$FeedbackValue" exact="static.$FeedbackValue"/>
                      <signal_cue_instantly cue="GenerateNPCMission.$ReportSignalCue" param="@event.param"/>
                    </do_elseif>
                  </actions>
                </cue>

                <cue name="GenerateNPCMission_Variant_1_Trigger" version="2">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>

                    <set_value name="$SpokeToClient" exact="false"/>
                    <set_value name="$Client.$MissionOfferState" exact="'offering'"/>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="GenerateNPCMission_Variant_1_Ref.state == cuestate.complete">
                      <set_value name="GenerateNPCMission_Variant_1_Ref.$ReportSignalCue" exact="GenerateNPCMission_Variant_1_GM_Signal"/>
                      <debug_text text="'Setting missing $ReportSignalCue parameter'" filter="savegame"/>
                    </do_if>
                    <do_else>
                      <debug_text text="'Signalling NPC based mission instance to end'" filter="savegame"/>
                      <set_value name="GenerateNPCMission_Variant_1_GM_Signal.$EndFeedbackValue" exact="FeedbackValueManager.$FeedbackValues.$OFFER_REMOVED.clone"/>
                      <signal_cue cue="GenerateNPCMission_Variant_1_GM_Signal"/>
                    </do_else>
                  </patch>
                  <cues>

                    <cue name="GenerateNPCMission_Variant_1_Ref" ref="Start">
                      <param name="OfferObject"   value="$OfferStation"/>
                      <param name="MissionLevel"  value="$MissionLevel"/>
                      <param name="Difficulty"    value="$Difficulty"/>
                      <param name="Client"        value="$Client"/>

                      <!--Mission offer-->
                      <param name="ConversationOffer"       value="true"/>
                      <param name="ConversationTriggerCue"  value="GenerateNPCMission_Variant_1_Show_Briefing"/>

                      <!--Mission text-->
                      <param name="Page"          value="30101"/>
                      <param name="TextOffset"    value="$TextOffset"/>

                      <!--Mission specific params-->
                      <param name="UseClient"           value="true"/>
                      <param name="StartContainer"      value="$OfferStation"/>
                      <param name="TargetContainer"     value="$TargetContainer"/>
                      <param name="DockSizes"           value="$DockSizes"/>

                      <param name="ReportSignalCue"     value="GenerateNPCMission_Variant_1_GM_Signal"/>
                      <param name="DebugChance"         value="@GenerateGenericMission.$DebugChance"/>
                      <param name="DurationUntilBonusDecay"   value="$DurationUntilBonusDecay"  comment="Mission duration until the bonus reward credits start to decay" />
                      <param name="DurationUntilBonusExpiry"  value="$DurationUntilBonusExpiry" comment="Mission duration until the bonus reward credits expire completely" />
                    </cue>

                    <cue name="GenerateNPCMission_Variant_1_Debug_Guidance" onfail="cancel">
                      <conditions>
                        <check_value value="$DebugChance == 100"/>
                      </conditions>
                      <actions>
                        <create_mission cue="this" name="'Guidance to mission'" description="'Helper guidance to mission NPC'" difficulty="level.trivial" faction="faction.player" type="missiontype.destroy">
                          <briefing>
                            <objective step="1" action="objective.talkto" object="$Client"/>
                          </briefing>
                          <objective step="1" action="objective.talkto" object="$Client"/>
                        </create_mission>
                      </actions>
                      <cues>
                        <cue name="GenerateNPCMission_Variant_1_Debug_Guidance_Abort">
                          <conditions>
                            <event_mission_aborted cue="parent"/>
                          </conditions>
                          <actions>
                            <remove_mission cue="parent"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                    <!--Conversation handlers-->
                    <cue name="GenerateNPCMission_Variant_1_Next_Section" instantiate="true">
                      <conditions>
                        <event_conversation_next_section actor="$Client" section="g_askformission"/>
                      </conditions>
                      <actions>
                        <add_npc_line speaker="$Client" line="1000103" comment="You'll need your wits about you for this."/>
                        <set_conversation_return_section section="g_goodbye" />
                        <signal_cue_instantly cue="GenerateNPCMission_Variant_1_Show_Briefing"/>
                      </actions>
                    </cue>

                    <cue name="GenerateNPCMission_Variant_1_Show_Briefing" instantiate="true">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                    </cue>

                    <!--We need this cue here reacting to this event to set the blackboard variable as soon as possible-->
                    <cue name="GenerateNPCMission_Variant_1_Mission_Accepted">
                      <conditions>
                        <event_object_signalled object="$Client" param="'accept'" />
                      </conditions>
                      <actions>
                        <set_value name="$Client.$MissionOfferState" exact="'accepted'"/>
                      </actions>
                    </cue>

                    <!--This cue will trigger slightly later than the one setting the $Client.$MissionOfferState blackboard variable to 'accepted'-->
                    <cue name="GenerateNPCMission_Variant_1_Mission_Accepted_2">
                      <conditions>
                        <event_cue_signalled cue="GenerateNPCMission_Variant_1_GM_Signal"/>
                        <check_value value="@GenerateNPCMission_Variant_1_GM_Signal.$FeedbackValue.$ID == '$MISSION_ACCEPTED'"/>
                      </conditions>
                      <actions>
                        <assert value="$Client.$MissionOfferState == 'accepted'" text="'The mission offer state of the client is not - accepted -. State: ' + $Client.$MissionOfferState"/>
                        <set_value name="$MissionAccepted" exact="true"/>
                        <!--Set actor to not-temporary so that it will not automatically be destroyed in low attention-->
                        <set_entity_traits entity="$Client" missionactor="true" temporary="false"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

          </cues>
        </cue>

      </cues>
    </cue>
  </cues>
</mdscript>
