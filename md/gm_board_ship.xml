<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GM_BoardShip" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>

    <!--Base Mission information-->
    <!--
    Generic Mission name:    Board ship - intended for Master Missions
                             Note: This GM is for boarding both a specified ship (GM_BoardShip) and non-specified ship (HL_BoardRare)
    -->
    <!--The Feedback Manager contains a table of feedback values related to this Generic Mission. 
		This table is 'const' during the mission (the table itself doesn't change anymore after inialization)

	There are several maintypes of feedback:
    event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
    removed:  The mission offer was removed before acceptance
    success:  The mission was successfully completed by the player
    failure:  The player failed the mission
    error:    Something went wrong with the mission set-up or during the mission-->
    <cue name="FeedbackValueManager" namespace="this" version="4">
      <actions>
        <set_value name="$FeedbackValues" exact="table[
                   $MISSION_GENERATED         = table[$type = 'event',    $text = 'Mission variation generated successfully'],
                   $MISSION_ACCEPTED          = table[$type = 'event',    $text = 'Mission accepted'],
                   $MISSION_NO_VARIANT        = table[$type = 'event',    $text = 'No mission variant currently possible'],
                   
                   $OFFER_REMOVED             = table[$type = 'removed',  $text = 'Offer removed'],
                   $DECLINED_OFFER            = table[$type = 'removed',  $text = 'Player declined Event Offer'],
                   $EVENT_OFFER_TIMEOUT       = table[$type = 'removed',  $text = 'Event Offer timeout'],
                   $SIGNAL_LEAK_REMOVED       = table[$type = 'removed',  $text = 'Signal leak offer removed'],
                   $TARGET_KILLED_EARLY       = table[$type = 'removed',  $text = 'Object was destroyed during the offer'],
                   
                   $MISSION_SUCCEEDED         = table[$type = 'success',  $text = 'Mission succeeded'],
                   
                   $MISSION_ABORTED           = table[$type = 'failure',  $text = 'Mission aborted by player'],
                   $FORCED_CLEANUP            = table[$type = 'failure',  $text = 'Forced to end from outside'],
                   $MISSION_TIMEOUT           = table[$type = 'failure',  $text = 'Mission timeout'],
                   $RML_FAILED                = table[$type = 'failure',  $text = 'RML failure'],
                   
                   $NO_VALID_CLIENT_OWNER     = table[$type = 'error',    $text = 'No valid ClientOwner parameter provided'],
                   $INVALID_OFFER_TYPE        = table[$type = 'error',    $text = 'No offer parameters were valid'],
                   $NO_TEXT_OFFSET            = table[$type = 'error',    $text = 'No TextOffset set'],
                   $INVALID_TARGET_PARAM      = table[$type = 'error',    $text = 'Specify either targetobject or targetspec'],
                   $INVALID_TARGETOBJ_PARAM   = table[$type = 'error',    $text = 'Invalid targetobject param'],
                   $INVALID_TARGETSPEC_PARAM  = table[$type = 'error',    $text = 'Invalid TargetSpec Param'],
                   $INVALID_FACTION_PARAM     = table[$type = 'error',    $text = 'Invalid Faction param'],
                   $INVALID_FORCE_CLEANUP     = table[$type = 'error',    $text = 'ForceCleanup cue invalid'],
                   $INVALID_SIGNALLEAKVOICELINE_PARAM = table[$type = 'error',    $text = 'Invalid SignalLeakVoiceLine param'],
                   $RML_ERROR                 = table[$type = 'error',    $text = 'RML error']
                   ]"/>
      </actions>
      <patch sinceversion="4">
        <!--To patch new feedback values, increment 'version' and 'sinceversion' number-->
        <force_cue cue="FeedbackValueManager"/>
      </patch>
    </cue>

    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternatively, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname
        2 = $TextTable.$description
        3 = $TextTable.$objective-->
        <do_if value="$TargetShip and $TargetShip.pilot">
          <substitute_text text="$TextTable.$missionname" source="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100">
            <replace string="'$NPCNAME$'" with="$TargetShip.pilot.knownname"/>
          </substitute_text>
        </do_if>
        <do_else>
          <set_value name="$TextTable.$missionname" exact="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100"/>
        </do_else>


        <set_value name="$TextTable.$objective"   exact="readtext.{$Page}.{$TextOffset + 3}" chance="if $TextTable.$objective? then 0 else 100"/>

        <!-- Build string listing all required ships, for the briefing -->
        <do_if value="$TargetSpec">
          <set_value name="$FleetText" exact="$TargetSpec.$macro.name"/>

          <do_if value="$TargetSpec.$equipment?">
            <do_all exact="$TargetSpec.$equipment.count" counter="$j">
              <set_value name="$FleetText" exact="$FleetText + '\n  ' + $TargetSpec.$equipment.{$j}.name"/>
            </do_all>
          </do_if>
          <do_if value="$TargetSpec.$ammo?">
            <do_all exact="$TargetSpec.$ammo.keys.count" counter="$j">
              <set_value name="$ammo" exact="$TargetSpec.$ammo.keys.{$j}" />
              <set_value name="$FleetText" exact="$FleetText + '\n  ' + $TargetSpec.$ammo.{$ammo} + 'x ' + $ammo.name"/>
            </do_all>
          </do_if>
          <do_if value="$TargetSpec.$wares?">
            <do_all exact="$TargetSpec.$wares.keys.count" counter="$j">
              <set_value name="$ware" exact="$TargetSpec.$wares.keys.{$j}" />
              <set_value name="$FleetText" exact="$FleetText + '\n  ' + $TargetSpec.$wares.{$ware} + 'x ' + $ware.name"/>
            </do_all>
          </do_if>
          <do_if value="$TargetSpec.$mods?">
            <do_all exact="$TargetSpec.$mods.count" counter="$j">
              <set_value name="$FleetText" exact="$FleetText + '\n  ' + $TargetSpec.$mods.{$j}.name"/>
            </do_all>
          </do_if>

          <substitute_text text="$TextTable.$description" source="readtext.{$Page}.{$TextOffset + 2}" chance="if $TextTable.$description? then 0 else 100">
            <replace string="'$SHIP$'"     with="'\n' + $FleetText"/>
          </substitute_text>

        </do_if>

        <do_elseif value="$TargetShip and $TargetShip.pilot">
          <substitute_text text="$TextTable.$description" source="readtext.{$Page}.{$TextOffset + (if $TargetShip.pilot.isfemale then 4 else 2)}" chance="if $TextTable.$description? then 0 else 100">
            <replace string="'$NPCNAME$'"  with="$TargetShip.pilot.knownname"/>
          </substitute_text>
        </do_elseif>
        <do_else>

          <!--Target ship, no pilot-->
          <set_value name="$TextTable.$description" exact="readtext.{$Page}.{$TextOffset + 2}" chance="if $TextTable.$description? then 0 else 100"/>
        </do_else>

        <do_if value="$FleetSize == 1">
          <set_value name="$TextTable.$warning" exact="readtext.{30004}.{1508}" comment="WARNING: Ship is part of a fleet"/>
          <set_value name="$TextTable.$description" exact="$TextTable.$description + '\n\n' + $TextTable.$warning"/>
        </do_if>
        <do_elseif value="$FleetSize == 2">
          <set_value name="$TextTable.$warning" exact="readtext.{30004}.{1509}" comment="WARNING: Ship is part of a large fleet"/>
          <set_value name="$TextTable.$description" exact="$TextTable.$description + '\n\n' + $TextTable.$warning"/>
        </do_elseif>
      </actions>
    </library>

    <!--TODO @Owen Simple example mission variant shortcut for testing-->

    <library name="Start" version="4">
      <params>
        <!-- required parameters -->
        <param name="OfferObject"             default="null" comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client"                  default="null" comment="Pre-existing client"/>
        <param name="ClientOwner"             default="null" comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionCue"              default="null" comment="Cue the mission is attached to. Defaults to Start (this)."/>
        <param name="MissionThread"           default="null" comment="Mission thread for the offer and mission"/>
        <param name="GenerateReward"          default="true" comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr"                default="null" comment="If the reward for this mission is credits, the number of credits should be set to this variable." />
        <param name="RewardObj"               default="null" comment="If the reward for this mission is not credits, and is an object, it should be set to this variable." />
        <param name="RewardNotoriety"         default="null"/>
        <param name="RewardText"              default="null"  comment="Any text needed to define the reward for this mission - may be used in conjunction with $RewardCr and $RewardObj." />
        <param name="MissionDuration"         default="null"/>
        <param name="MissionType"             default="missiontype.board" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"/>
        <param name="Difficulty"/>

        <!--Offer location and conversation-->
        <param name="WithoutOffer"            default="false" comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue"     default="null" comment="Do not create a mission offer but wait for this cue to be completed before running the mission"/>
        <param name="DeclineButton"           default="true" comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer"              default="false" comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer"       default="false" comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue"  default="null" comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance"        default="null"/>
        <param name="HideFromBBS"             default="false" comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange"    default="true"/>
        <param name="OfferDistance" default="50km" comment="Distance to the offer location before it becomes visible on the map or BBS (unless otherwise hidden)"/>

        <!--BBS only params-->
        <param name="BBSObject"     default="null"/>
        <param name="BBSDistance"   default="null"/>
        <param name="BBSTimeoutMin" default="null"/>
        <param name="BBSTimeoutMax" default="null"/>
        <param name="BBSSpace"      default="null"/>

        <!--Mission text-->
        <param name="Page"          comment="Allows a different text page to be used instead of the generic one. Text IDs must be mapped similarly."/>
        <param name="TextOffset"    comment="The text offset for this variant's text on the page. Each variant starts at a different offset, but the entries[] within that offset have to match for all variants."/>
        <param name="TextTable"     default="table[]" comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi' Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>
        <param name="SignalLeakVoiceLine" default="null" comment="The line that should be used for signal leak introductions to this mission" />

        <!--Mission specific params-->
        <param name="Faction"       comment="The faction which asked us to board the ship"/>
        <param name="TargetShip"    comment="pass either TargetShip or TargetSpecs!"/>
        <param name="TargetSpec"    comment="pass either TargetShip or TargetSpecs!"/>
        <param name="FleetSize"     default="0" comment="To warn the player of large fleets"/>

        <param name="ReportSignalCue" default="null" comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue"  default="null" comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup"    default="null" comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance"     default="0"/>
      </params>
      <actions>
        <!--Feedback value setup-->
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GM_BoardShip.FeedbackValueManager"/>

        <assert value="$WithoutOffer or not $MissionCue or (not $MissionCue.hasmission and not $MissionCue.hasmissionoffer)"
                text="'Mission is set to create an offer but provided MissionCue: ' + $MissionCue + ' already has an offer or is a running mission [Owen]'"/>

        <assert value="not $MissionThread or $WithoutOffer" text="'Thread sub-mission is also set to create an offer which is not supported.\n
                The mission thread offer should be populated with mission details suitable for this mission, but not from an actual mission. Thread: ' + $MissionThread + ' [Owen]'"/>

        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>

        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [Owen]'"/>
            </do_if>

            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
            <do_else>
              <!--Mission specific param checks-->
              <do_if value="typeof $Faction != datatype.faction">
                <set_value name="$Feedback" exact="'$INVALID_FACTION_PARAM'"/>
              </do_if>
              <do_elseif value="($TargetShip and $TargetSpec) or (not $TargetShip and not $TargetSpec)">
                <set_value name="$Feedback" exact="'$INVALID_TARGET_PARAM'"/>
              </do_elseif>
              <do_elseif value="(not $TargetShip and $TargetSpec) and ((typeof $TargetSpec != datatype.table) or (not $TargetSpec.keys.count))">
                <set_value name="$Feedback" exact="'$INVALID_TARGETSPEC_PARAM'"/>
              </do_elseif>
              <do_if value="(not $TargetSpec and $TargetShip) and not $TargetShip.isclass.ship">
                <set_value name="$Feedback" exact="'$INVALID_TARGETOBJ_PARAM'"/>
              </do_if>

            </do_else>
          </do_else>
        </do_if>
      </actions>
      <patch sinceversion="2" state="complete">
        <do_if value="$TargetSpec">
          <!--Patching $TargetSpec from a list to a table. However, this means that the caller (if they passed a list ref) would still have the old specs as we can't modify it from here. Shouldn't adversly affect current cases.
          The RML will patch its own specs-->
          <set_value name="$OldSpecs" exact="$TargetSpec"/>
          <set_value name="$TargetSpec" exact="table[]"/>
          <do_if value="$OldSpecs.{1}? and $OldSpecs.{1}">
            <set_value name="$TargetSpec.$macro" exact="$OldSpecs.{1}"/>
          </do_if>
          <do_if value="$OldSpecs.{2}? and $OldSpecs.{2}.count">
            <set_value name="$TargetSpec.$equipment" exact="$OldSpecs.{2}.clone"/>
          </do_if>
          <do_if value="$OldSpecs.{3}? and $OldSpecs.{3}.count">
            <do_all exact="$OldSpecs.{3}.count" counter="$i">
              <do_if value="$OldSpecs.{3}.{$i}.isammo">
                <do_if value="not $TargetSpec.$ammo?">
                  <set_value name="$TargetSpec.$ammo" exact="table[]"/>
                </do_if>
                <set_value name="$TargetSpec.$ammo.{$OldSpecs.{3}.{$i}.objectmacro}" exact="1" comment="OldSpecs had no ware amount data. Default to 1"/>
              </do_if>
              <do_else>
                <do_if value="not $TargetSpec.$wares?">
                  <set_value name="$TargetSpec.$wares" exact="table[]"/>
                </do_if>
                <set_value name="$TargetSpec.$wares.{$OldSpecs.{3}.{$i}}" exact="1" comment="OldSpecs had no ware amount data. Default to 1"/>
              </do_else>
            </do_all>
          </do_if>
          <do_if value="$OldSpecs.{4}? and $OldSpecs.{4}.count">
            <set_value name="$TargetSpec.$mods" exact="$OldSpecs.{4}.clone"/>
          </do_if>
          <debug_text text="'Patch: Target specs converted from list: ' + $OldSpecs + ' to table: ' + $TargetSpec" filter="savegame"/>
          <!--Do not remove $OldSpecs, for patch validation-->
        </do_if>
      </patch>
      <patch sinceversion="3" state="complete" comment="ship was already destroyed (wasn't checked for pre 2.0)">
        <do_if value="not $TargetShip.exists and not $TargetSpec">
          <debug_text text="'Patch: Cancelling mission because of dead target'" filter="savegame"/>
          <do_if value="MissionAccepted.state == cuestate.complete">
            <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, {30004,6027}]"/>
          </do_if>
          <set_value name="$Feedback" exact="'$TARGET_KILLED_EARLY'"/>
          <signal_cue cue="CleanUp"/>
        </do_if>
      </patch>
      <patch sinceversion="4" state="complete" comment="to account for added $FleetSize">
        <set_value name="$FleetSize" exact="0"/>
      </patch>
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>

        <cue name="Do_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="not $Feedback"/>
          </conditions>
          <actions>
            <do_if value="not $MissionCue">
              <set_value name="$MissionCue" exact="Start"/>
            </do_if>

            <do_if value="not $PreexistingClient?">
              <!-- No pre-existing client, create a temporary client for this mission -->
              <!-- This auto-assigns a 'matching' text-page using the metadata (id=0) specified in the text-files. Speak commands for this actor will then refer to the selected text-page-->
              <!-- Possibly we'll need to add additional filters (in case some topics aren't supported by all generic text-pages) -->
              <create_cue_actor cue="Start" name="$Client" comment="temporary cue-actor will be cleaned up in the Cleanup-cue, see destroy_object on $Client">
                <select faction="$ClientOwner"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>

            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>
              <do_any>
                <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]" comment="basic reward credits"/>
                  <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                  <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied"/>
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardModWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_ModPart" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_ModPart__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardSeminarWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Seminar" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_Seminar__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
              </do_any>

              <do_if value="not $RewardNotoriety">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
              </do_if>
            </do_if>

            <include_actions ref="GenerateTextTable"/>

            <do_if value="$ReportSignalCue">
              <!--Signal the $ReportSignalCue that the mission has been successfully generated-->
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
              <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
              <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
              <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText]"/>
            </do_if>
          </actions>
          <cues>

            <!--***MISSION OFFER***-->
            <cue name="With_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <cues>
                <!--Cue which creates the offer, when signalled. To be signalled from the GenericMissions.OfferMission library, referenced below-->
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">

                      <!-- TODO: For creating your own custom GM, you want to change the below briefing details/objective -->
                      <!-- Briefing details -->
                      <create_offer cue="$MissionCue" location="$OfferObject" distance="$OfferDistance" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" actor="$Client"
                                  faction="$ClientOwner" opposingfaction="@$TargetShip.owner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" duration="$MissionDuration" hidden="$HideFromBBS" space="$BBSSpace">
                        <briefing>
                          <!--TODO @Owen @Roger more suitable action?-->
                          <objective step="1" action="objective.board" text="$TextTable.$objective"/>
                        </briefing>
                      </create_offer>
                    </do_if>

                    <do_if value="$OfferObject.isclass.signalleak">
                      <do_if value="readtext.{$Client.page}.{$SignalLeakVoiceLine}?">
                        <update_signal_leak_voice object="$OfferObject" page="$Client.page" lines="$SignalLeakVoiceLine" />
                      </do_if>
                      <do_else>
                        <set_value name="$Feedback" exact="'$INVALID_SIGNALLEAKVOICELINE_PARAM'" />
                        <signal_cue cue="CleanUp" />
                      </do_else>
                    </do_if>

                    <set_value name="$OfferCreated" exact="true"/>
                  </actions>
                </cue>

                <!--The majority of the offer logic is within this library. The parameters we pass down below, specify in which way this mission is going to be offered to the player (i.e. BBS, Signal-Leak, ...)
                Some of the mission specific handling is still contained in this file but triggered via the library via a signal e.g. setting up the briefing details via the 'CreateOffer' cue above.-->
                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType"     value="$OfferType"/>
                  <param name="OfferCue"      value="$MissionCue"/>
                  <param name="CleanupCue"    value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName"   value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue" value="$CancelOfferCue"/>

                  <!--Object based params (offered by Station/Ship/Signal-leak)-->
                  <param name="TimeoutMin"  value="8min" comment="Minimum time the offer remains valid"/>
                  <param name="TimeoutMax"  value="12min"/>
                  <param name="MaxDistance" value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>

                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject" value="$OfferObject"/>

                  <!--BBS based offers-->
                  <param name="BBSObject"     value="@$BBSObject"/>
                  <param name="BBSDistance"   value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>

                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>

                  <!--Client-->
                  <param name="Client"                 value="$Client"/>
                  <param name="Line_EventOffer"        value="1000101" comment="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_StartConversation" value="null" comment ="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_Goodbye"           value="null" comment="Client speaks this line from his generic-npc-page"/>

                  <param name="DebugChance" value="$DebugChance"/>
                </cue>

                <!--Cue signalled when the offer library is finished-->
                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the cases where a mission is automatically accepted on creation-->
            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
              </conditions>
              <actions>
                <signal_cue cue="MissionAccepted" />
              </actions>
            </cue>

            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="not event.param? or event.param == $MissionCue"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <signal_cue_instantly cue="MissionAccepted" />
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)
            note: play_cutscene action should not be in the actions of the cue with a event_briefing_submission_selected condition. It must be delayed-->
            <cue name="BriefingStarted">
              <conditions>
                <check_any>
                  <event_briefing_started cue="$MissionCue"/>
                  <event_briefing_submission_selected cue="$MissionCue"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$RenderTarget" exact="event.param.{1}"/>
                <set_value name="$StartBriefingCutscene"/>
                <set_value name="$stationindex" exact="1"/>
                <debug_text text="'Briefing started'" chance="$DebugChance"/>
              </actions>
              <cues>
                <cue name="DisplayCutscene" onfail="cancel">
                  <conditions>
                    <check_value value="$StartBriefingCutscene?"/>
                  </conditions>
                  <actions>
                    <do_if value="$TargetShip">
                      <set_value name="$CutsceneObject" exact="$TargetShip" />
                      <set_value name="$BriefingCutsceneStarted"/>
                      <set_value name="$CutsceneKey" exact="'OrbitIndefinitelySlow'"/>
                      <play_cutscene key="$CutsceneKey" rendertarget="$RenderTarget">
                        <param name="targetobject" object="$CutsceneObject"/>
                      </play_cutscene>
                    </do_if>
                    <do_elseif value="$TargetSpec">
                      <!-- TODO -->
                    </do_elseif>
                  </actions>
                </cue>

                <cue name="BriefingStopped">
                  <conditions>
                    <check_any>
                      <event_briefing_cancelled cue="$MissionCue"/>
                      <event_briefing_submission_unselected cue="$MissionCue"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="$BriefingCutsceneStarted?">
                      <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                      <remove_value name="$BriefingCutsceneStarted"/>
                      <stop_cutscene key="$CutsceneKey"/>
                    </do_if>

                    <do_if value="$HoloMap?">
                      <remove_holomap />
                      <remove_value name="$HoloMap"/>
                    </do_if>

                    <debug_text text="'Briefing canceled'" chance="$DebugChance"/>
                    <reset_cue cue="BriefingStarted"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="TargetShipDestroyedPrematurely" onfail="cancel">
              <conditions>
                <check_value value="$TargetShip" comment="Only for the $TargetShip-case, not for the $TargetSpec-case"/>
              </conditions>
              <cues>
                <cue name="TargetShipDestroyedPrematurelyCheck">
                  <conditions>
                    <event_object_destroyed object="$TargetShip"/>
                  </conditions>
                  <actions>
                    <!-- If ship to be rescued got destroyed early, the mission fails -->
                    <do_if value="MissionAccepted.state == cuestate.complete">
                      <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, {30004,6027}]"/>
                    </do_if>
                    <set_value name="$Feedback" exact="'$TARGET_KILLED_EARLY'"/>
                    <signal_cue cue="CleanUp"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--This cue creates the mission itself, either from scratch or via an existing mission offer-->
            <cue name="MissionAccepted">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <actions>
                <do_if value="not $WithoutOffer">
                  <speak actor="$Client" line="1000204" comment="(player accepted mission offer)" />
                  <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = 1000204]"/>
                </do_if>

                <debug_text text="'Mission accepted!'" chance="$DebugChance"/>
                <set_value name="stat.missions_accepted" operation="add"/>

                <do_if value="$WithoutOffer">
                  <!--$MissionCue may already be a mission cue passed in as a parameter-->
                  <do_if value="not $MissionCue.hasmission">
                    <do_if value="$MissionThread">
                      <create_mission cue="$MissionCue" missionthread="$MissionThread" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_if>
                    <do_else>
                      <create_mission cue="$MissionCue" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_else>
                  </do_if>

                  <update_mission cue="$MissionCue">
                    <briefing>
                      <objective step="1" action="objective.board" text="$TextTable.$objective"/>
                    </briefing>
                  </update_mission>
                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="$MissionCue" offercue="$MissionCue" missionthread="$MissionThread"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="$MissionCue" offercue="$MissionCue"/>
                  </do_else>
                  <remove_offer cue="$MissionCue"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>

                <!-- TODO: For creating your own custom GM, the below code consists of the actual mission-logic, this will likely need major changes -->
                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>

                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>
              </actions>
              <cues>
                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>

                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{$MissionCue}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{$MissionCue}"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="ActivateMission" version="2">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <cancel_cue cue="TargetShipDestroyedPrematurely"/>
                    <set_value name="$StartStep" exact="1"/>
                    <do_if value="$MissionDuration">
                      <update_mission cue="$MissionCue" endtime="player.age + $MissionDuration"/>
                    </do_if>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <set_value name="$CheckInstanceActivation" exact="true"/>
                  </patch>
                  <cues>

                    <!--Pre 3.0, this cue was onfail=cancel when not $TargetShip. Now, activate the boarding RML automatically-->
                    <cue name="ActivateMission_NoTargetShip">
                      <actions>
                        <signal_cue cue="ReachedLocation"/>
                      </actions>
                    </cue>

                    <cue name="Patch_SignalRML" onfail="cancel">
                      <conditions>
                        <check_value value="@$CheckInstanceActivation and not @$InstanceIsActive"/>
                      </conditions>
                      <actions>
                        <debug_text text="'The FlyTo RML has been disabled but the boarding RML still needs to be signalled. Do that now.'" filter="savegame"/>
                        <signal_cue cue="ReachedLocation"/>
                      </actions>
                    </cue>

                    <cue name="Aborted_V2">
                      <conditions>
                        <event_mission_aborted cue="$MissionCue"/>
                      </conditions>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                        <remove_mission cue="$MissionCue" type="aborted"/>
                        <signal_cue cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="ReachedLocation" instantiate="true" version="2" comment="shouldn't have been instantiated, but changing it breaks savegames">
                      <conditions>
                        <event_cue_signalled />
                      </conditions>
                      <actions>
                        <do_if value="$TargetShip">
                          <set_value name="$StartStep" exact="2"/>
                        </do_if>
                      </actions>
                      <patch sinceversion="2" state="complete">
                        <do_if value="@$InstanceIsActive">
                          <debug_text text="'Another instance of the boarding RML is active. End this one.'" filter="savegame"/>
                          <cancel_cue cue="this"/>
                        </do_if>
                        <do_else>
                          <set_value name="$InstanceIsActive" exact="true"/>
                        </do_else>
                      </patch>
                      <cues>
                        <!-- Trigger the RML, which will check the win/lose conditions and report back -->
                        <cue name="BoardShip_Ref" ref="md.RML_BoardShip.BoardShip">
                          <!-- always pass these -->
                          <param name="EndSignalCue"    value="MissionEnded"/>
                          <param name="MissionCue"      value="$MissionCue"/>
                          <param name="StartStep"       value="$StartStep" comment="Briefing step to start the mission on"/>
                          <param name="UpdateBriefing"  value="true" comment="Update the briefing objective step when the objective is updated"/>
                          <param name="DebugChance"     value="$DebugChance"/>
                          <param name="ObjectiveText"   value="$TextTable.$objective"/>
                          <!-- mission-related parameters -->
                          <param name="TargetShip"      value="$TargetShip"/>
                          <param name="TargetSpec"      value="$TargetSpec"/>
                        </cue>

                        <cue name="MissionTimeout" onfail="cancel">
                          <conditions>
                            <check_value value="typeof $MissionDuration == datatype.time"/>
                            <check_value value="$MissionDuration" min="1s"/>
                          </conditions>
                          <delay exact="$MissionDuration"/>
                          <actions>
                            <signal_cue_instantly cue="md.GenericMissions.GenericTimeoutLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                            <remove_mission cue="$MissionCue" type="failed"/>
                            <set_value name="$Feedback" exact="'$MISSION_TIMEOUT'"/>
                            <signal_cue_instantly cue="CleanUp" />
                          </actions>
                        </cue>

                        <cue name="MissionEnded">
                          <!-- TODO: For creating your own custom GM, you want to handle the end-feedback (usually originating from the RML used above) -->
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <!-- Failure case -->
                            <do_if value="MissionEnded.$EndFeedbackValue" max="0">
                              <debug_text text="'This mission has failed. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                              <set_value name="$Feedback" exact="'$RML_FAILED'"/>
                              <speak actor="$Client" line="1000403" comment="(failed mission)" />
                              <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>

                              <remove_mission cue="$MissionCue" type="failed" reason="@MissionEnded.$EndFeedbackText"/>
                            </do_if>

                            <!-- Success case -->
                            <do_else>
                              <!--TODO: Partial success-->
                              <debug_text text="'This mission has ended. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                              <do_if value="$RewardNotoriety and $ClientOwner">
                                <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                                <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted" />
                                <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                              </do_if>

                              <do_if value="$RewardCr">
                                <reward_player money="$RewardCr" />
                              </do_if>
                              <do_elseif value="$RewardObj">
                                <do_if value="$RewardObj.isinventory">
                                  <add_inventory entity="player.entity" ware="$RewardObj" />
                                  <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received" />
                                </do_if>
                              </do_elseif>
                              <set_value name="stat.missions_completed" operation="add"/>
                              <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'"/>
                              <speak actor="$Client" line="1000401" comment="(successful mission)" />
                              <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>

                              <remove_mission cue="$MissionCue" type="completed" activate="next" />
                            </do_else>
                            <signal_cue cue="CleanUp" />
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="ForceCleanup" onfail="cancel">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="not event.param? or event.param == $MissionCue"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
            <do_if value="$BriefingCutsceneStarted?">
              <remove_value name="$BriefingCutsceneStarted"/>
              <stop_cutscene key="$CutsceneKey"/>
            </do_if>
            <do_if value="$HoloMap?">
              <remove_holomap />
              <remove_value name="$HoloMap"/>
            </do_if>


            <!--***Cleanup objects***-->

            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and (not $PreexistingClient?)">
              <destroy_object object="$Client" comment="cleanup the client we created with create_cue_actor"/>
            </do_if>

            <!--***Evaluate result***-->

            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']" comment="feedback = id, type and error-text from the above FeedbackValues-table"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [Owen]'" break="1"/>
              </do_else>

              <do_if value="$ReportSignalCue" comment ="The cue which called us">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData" comment="return feedback-data to calling cue"/>
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>

            <cancel_cue cue="Start"/>
          </actions>
        </cue>
      </cues>
    </library>


    <!-- MISSION SETUP HELPERS -->

    <!-- input: $MissionLevel, $TargetShip / $TargetSpec; output: $MissionLevel -->
    <library name="ConfigureDifficulty">
      <actions>
        <set_value name="$MissionLevel" exact="if not $MissionLevel? then 1 else $MissionLevel"/>
        <debug_text text="'Missing $MissionLevel input. Set to: ' + $MissionLevel" chance="$DebugChance"/>

        <do_if value="$TargetShip">
          <!-- Use base mission level -->
        </do_if>
        <do_elseif value="$TargetSpec">
          <set_value name="$MissionLevel" exact="3" operation="add" comment="Finding a ship with a specific spec takes more time."/>
        </do_elseif>
      </actions>
    </library>

    <!-- 2.5: Board Ship Missions (Variant 1) are offered by Scale Plate & Hatikvah Stations, whose enemies are by default Xenon, Khaak, Criminals, Smugglers who don't have boardable ships; this lib chooses anyone else as the target -->
    <!-- input: $Station or $Faction, Output: $EnemyFaction -->
    <library name="Setup_DetermineEnemyFaction_OfPirates">
      <actions>
        <do_if value="(@$Station and $Station.owner == faction.scaleplate) or (@$Faction and $Faction == faction.scaleplate)">
          <set_value name="$EnemyFaction" exact="[faction.hatikvah, faction.alliance, faction.antigone, faction.argon, faction.holyorder, faction.ministry, faction.paranid, faction.teladi].random"/>
        </do_if>
        <do_elseif value="(@$Station and $Station.owner == faction.hatikvah) or (@$Faction and $Faction == faction.hatikvah)">
          <set_value name="$EnemyFaction" exact="[faction.scaleplate, faction.alliance, faction.antigone, faction.argon, faction.holyorder, faction.ministry, faction.paranid, faction.teladi].random"/>
        </do_elseif>
        <do_else>
          <assert value="false" text="'Faction or Station have not been set, or Faction and Station Owner are neither Scale Plate nor Hatikvah. ' + 'Faction:' + $Faction + ' Station Owner: ' + $Station.owner" break="1"/>
        </do_else>
      </actions>
    </library>

    <!-- input: $Station or $Faction, Output: $EnemyFaction (anyone except the offering faction) -->
    <library name="Setup_DetermineEnemyFaction_AnyoneElse">
      <actions>
        <set_value name="$ValidEnemyFactions" exact="[faction.alliance, faction.antigone, faction.argon, faction.hatikvah, faction.holyorder, faction.ministry, faction.paranid, faction.scaleplate, faction.teladi]"/>
        <do_if value="@$Station">
          <remove_from_list name="$ValidEnemyFactions" exact="$Station.owner" />
        </do_if>
        <do_elseif value="@$Faction">
          <remove_from_list name="$ValidEnemyFactions" exact="$Faction" />
        </do_elseif>

        <!-- Teladi and Ministry won't sponsor boarding missions against each other -->
        <do_if value="(@$Station and $Station.owner == faction.teladi) or (@$Faction and $Faction == faction.teladi) or (@$Station and $Station.owner == faction.ministry) or (@$Faction and $Faction == faction.ministry)">
          <remove_from_list name="$ValidEnemyFactions" exact="faction.ministry" />
          <remove_from_list name="$ValidEnemyFactions" exact="faction.teladi" />
        </do_if>
        <set_value name="$EnemyFaction" exact="$ValidEnemyFactions.random"/>
      </actions>
    </library>

    <!-- input: $EnemyFaction, $PrimaryPurpose, Output: $TargetShip (and $TargetSpec null), $Difficulty -->
    <library name="Setup_FindEnemyShip">
      <actions>
        <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="2" multiple="true"/>
        <shuffle_list list="$LocalClusters"/>
        <do_all exact="$LocalClusters.count" counter="$cluster_i">
          <do_if value="$PrimaryPurpose">
            <find_ship name="$TargetShip" class="class.ship_l" primarypurpose="$PrimaryPurpose" space="$LocalClusters.{$cluster_i}" owner="$EnemyFaction" capturable="true" multiple="false" docked="false"/>
          </do_if>
          <do_else>
            <find_ship name="$TargetShip" class="class.ship_l" space="$LocalClusters.{$cluster_i}" owner="$EnemyFaction" capturable="true" multiple="false" docked="false">
              <match_any>
                <match primarypurpose="purpose.trade"/>
                <match primarypurpose="purpose.mine"/>
                <match primarypurpose="purpose.build"/>
              </match_any>
            </find_ship>
          </do_else>
          <set_value name="$TargetSpec" exact="null"/>
          <do_if value="$TargetShip">
            <break/>
          </do_if>
        </do_all>
        <remove_value name="$LocalClusters"/>
      </actions>
    </library>

    <!-- Previous version, specifies only Sonra Vanguard -->
    <!-- input: -, Output: $TargetSpec (and $TargetShip null), $Difficulty -->
    <!--<library name="Setup_FindSpecShip_Merchant">
      <actions>
        <set_value name="$TargetSpec" exact="table[$macro = macro.ship_arg_l_trans_container_05_a_macro]"/>
        <set_value name="$TargetShip" exact="null"/>
        <set_value name="$Difficulty" exact="level.veryhard"/>
      </actions>
    </library>-->

    <library name="Setup_FindSpecShip_Merchant">
      <actions>
        <set_value name="$TargetSpec" exact="null"/>
        <set_value name="$TargetShip" exact="null"/>
        <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="2" multiple="true"/>
        <shuffle_list list="$LocalClusters"/>
        <do_all exact="$LocalClusters.count" counter="$cluster_i">
          <find_ship name="$PotentialShip" class="class.ship_l" primarypurpose="purpose.trade" space="$LocalClusters.{$cluster_i}" owner="$EnemyFaction" capturable="true" multiple="false" docked="false"/>
          <do_if value="$PotentialShip">
            <set_value name="$TargetSpec" exact="table[$macro = $PotentialShip.macro]"/>
            <break/>
          </do_if>
        </do_all>
        <remove_value name="$PotentialShip"/>
        <remove_value name="$LocalClusters"/>
      </actions>
    </library>

    <!--GENERIC MISSION VARIANTS-->

    <cue name="Force_Generic_Var_1" instantiate="true">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers" />
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 1, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_BoardShip_Var_1" />
    </cue>

    <!--event.param = table[
    $Sector,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnSectorChange (Optional, defaults to true)
    $DebugChance (Optional)]-->
    <cue name="GenerateGenericMission" instantiate="true" namespace="this" version="2">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Sector"           exact="event.param.$Sector"/>
        <set_value name="$ReportSignalCue"  exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant"   exact="@event.param.$MissionVariant"/>
        <do_if value="event.param.$RemoveOnSectorChange?">
          <set_value name="$RemoveOnSectorChange" exact="event.param.$RemoveOnSectorChange"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnSectorChange" exact="true"/>
        </do_else>

        <set_value name="$DebugChance"      exact="@event.param.$DebugChance"/>
        <do_if value="$ReportSignalCue">
          <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        </do_if>

        <set_value name="$FeedbackManager" exact="FeedbackValueManager"/>
        <assert value="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT?" text="'Required error code does not exist. Was the FeedbackValueManager not updated for stand-alone missions? [Owen/Roger]'"/>

        <debug_text text="'Attempting to generate a generic mission'" chance="$DebugChance"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <do_if value="$ReportSignalCue.exists">
          <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        </do_if>
        <do_else>
          <debug_text text="'cancelling dead GM instance'" filter="savegame"/>
          <cancel_cue cue="this"/>
        </do_else>
      </patch>
      <cues>
        <cue name="GenerateGenericMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>

            <!--Set up some common variables first so that the variants don't have to do things multiple times-->

            <!--Find potential offer pirate-stations in the sector-->
            <!--Find potential offer stations in the sector-->

            <!--TODO @Owen @Roger. What were these actions supposed to do? Commented out by Owen and replaced with the find_station action below. Is it correct?-->
            <!--<find_station name="$PotentialOfferStations" space="$Sector" multiple="true">
              <match owner="[faction.player, faction.xenon, faction.ownerless]" negate="true"/>
              <match_relation_to object="player.entity" comparison="not" relation="enemy" />
            </find_station>

            <find_station name="$PotentialOfferStations" space="$Sector" multiple="true">
              <match owner="[faction.scaleplate, faction.hatikvah]" negate="true"/>
              <match_relation_to object="player.entity" comparison="not" relation="enemy" />
            </find_station>-->

            <!--find_station name="$PotentialOfferStations" owner="[faction.scaleplate, faction.hatikvah]" space="$Sector" multiple="true">
              <match_relation_to object="player.entity" comparison="not" relation="enemy" />
            </find_station-->

            <!--<do_if value="$PotentialOfferStations.count">-->

            <do_if value="$MissionVariant">
              <!--A specific MissionVariant ID was requested-->
              <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
              <do_if value="$MissionVariant == 1">
                <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
              </do_if>
              <do_elseif value="$MissionVariant == 2">
                <signal_cue_instantly cue="GenerateGenericMission_Variant_2"/>
              </do_elseif>
              <do_else>
                <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [Owen]'"/>
              </do_else>
            </do_if>
            <do_else>
              <!--Attempt to a mission variant at random-->
              <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
              <signal_cue_instantly cue="GenerateGenericMission_Variant_2"/>
            </do_else>
            <!--</do_if>-->

            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateGenericMission"/>
            </do_else>
          </actions>
        </cue>

        <!-- Variation_1: PIRATE-missions (these are also offered via signal leaks) -->
        <cue name="GenerateGenericMission_Variant_1" namespace="this" version="2">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>

            <!-- Variation_1 is limited to Pirate Stations -->
            <find_station name="$OfferStations" owner="[faction.scaleplate, faction.hatikvah]" space="$Sector" multiple="true">
              <!--match_relation_to object="player.entity" comparison="not" relation="enemy" /-->
            </find_station>

            <set_value name="$Valid" exact="false"/>
            <set_value name="$Difficulty" exact="level.hard"/>
            <set_value name="$MissionLevel" exact="1"/>

            <do_if value="$OfferStations.count">

              <shuffle_list list="$OfferStations"/>

              <set_value name="$Station" exact="$OfferStations.random"/>
              <set_value name="$Faction" exact="$Station.owner"/>
              <set_value name="$PrimaryPurpose" exact="null"/>
              <set_value name="$FleetSize" exact="0"/>


              <include_actions ref="Setup_DetermineEnemyFaction_OfPirates"/>

              <do_any>
                <!-- Board specific ship -->
                <do_all>
                  <set_value name="$TextOffset" exact="4000"/>
                  <include_actions ref="Setup_FindEnemyShip"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="4100"/>
                  <set_value name="$PrimaryPurpose" exact="purpose.mine"/>
                  <include_actions ref="Setup_FindEnemyShip"/>
                </do_all>
                <!-- Board ship matching specs -->
                <do_all>
                  <set_value name="$TextOffset" exact="5000"/>
                  <include_actions ref="Setup_FindSpecShip_Merchant"/>
                </do_all>
                <do_all>
                  <set_value name="$TextOffset" exact="5100"/>
                  <include_actions ref="Setup_FindSpecShip_Merchant"/>
                </do_all>
              </do_any>
              <do_if value="$TargetShip or $TargetSpec">
                <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel, $TargetShip / $TargetSpec; output: $MissionLevel"/>
                <do_if value="$TargetShip">
                  <do_if value="$TargetShip.commander">
                    <set_value name="$numfleetmembers" exact="$TargetShip.toplevelcommander.allsubordinates.count + 1"/>
                    <do_if value="$numfleetmembers ge 5">
                      <set_value name="$Difficulty" exact="level.veryhard"/>
                      <set_value name="$FleetSize" exact="2"/>
                    </do_if>
                    <do_elseif value="$numfleetmembers le 5">
                      <set_value name="$MissionLevel" exact="4" operation="add"/>
                      <set_value name="$FleetSize" exact="1"/>
                    </do_elseif>
                  </do_if>
                </do_if>
                <set_value name="$Valid" exact="true"/>
              </do_if>
            </do_if>

            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <patch sinceversion="2">
            <set_value name="$FleetSize" exact="0"/>
          </patch>
          <cues>
            <cue name="GenerateGenericMission_Variant_1_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <cues>
                <cue name="GenerateGenericMission_Variant_1_Ref" ref="Start">
                  <param name="OfferObject"   value="$Station"/>
                  <param name="MissionLevel"  value="$MissionLevel"/>
                  <param name="Difficulty"    value="$Difficulty"/>

                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>

                  <!--Mission text-->
                  <param name="Page"              value="30152"/>
                  <param name="TextOffset"        value="$TextOffset"/>

                  <!--Mission specific params-->
                  <param name="Faction"           value="$Faction"/>
                  <param name="TargetShip"        value="$TargetShip" comment="pass either TargetShip or TargetSpecs!"/>
                  <param name="TargetSpec"        value="$TargetSpec"/>
                  <param name="FleetSize"         value="$FleetSize"/>

                  <param name="ReportSignalCue"   value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance"       value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <!-- Variation_2: Non-PIRATE-missions -->
        <cue name="GenerateGenericMission_Variant_2" namespace="this" version="2">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>

            <set_value name="$OfferStationFactions" exact="[faction.alliance, faction.antigone, faction.argon, faction.holyorder, faction.ministry, faction.paranid, faction.teladi]"/>
            <append_list_elements name="$OfferStationFactions" other="md.$SplitFactions"/>
            <append_list_elements name="$OfferStationFactions" other="md.$TerranFactions"/>

            <find_station name="$OfferStations" owner="$OfferStationFactions" space="$Sector" multiple="true">
              <match_relation_to object="player.entity" comparison="not" relation="enemy" />
            </find_station>

            <set_value name="$Valid" exact="false"/>
            <set_value name="$Difficulty" exact="level.hard"/>
            <set_value name="$MissionLevel" exact="1" comment="Boarded ship is already a big reward."/>

            <do_if value="$OfferStations.count">

              <shuffle_list list="$OfferStations"/>

              <set_value name="$Station" exact="$OfferStations.random"/>
              <set_value name="$Faction" exact="$Station.owner"/>
              <set_value name="$PrimaryPurpose" exact="null"/>
              <set_value name="$FleetSize" exact="0"/>

              <include_actions ref="Setup_DetermineEnemyFaction_AnyoneElse" comment="input: $Faction or $Station, output: $EnemyFaction"/>

              <!-- Create a list of valid offsets, so that each mission text has the same likelihood of appearing, no matter if it's faction-specific or not  -->
              <set_value name="$ValidOffsets" exact="[1000]"/>
              <do_if value="$Station.owner == faction.argon or $Station.owner == faction.antigone">
                <append_to_list name="$ValidOffsets" exact="1100"/>
                <append_to_list name="$ValidOffsets" exact="1200"/>
                <append_to_list name="$ValidOffsets" exact="1300"/>
                <!--<append_to_list name="$ValidOffsets" exact="2000"/>-->
              </do_if>
              <do_if value="$Station.owner == faction.paranid or $Station.owner == faction.holyorder">
                <append_to_list name="$ValidOffsets" exact="1100"/>
                <!--<append_to_list name="$ValidOffsets" exact="2100"/>-->
              </do_if>
              <do_if value="$Station.owner == faction.teladi or $Station.owner == faction.ministry">
                <append_to_list name="$ValidOffsets" exact="1200"/>
                <append_to_list name="$ValidOffsets" exact="1400"/>
              </do_if>
              <do_if value="md.$SplitPatriarchyFactions.indexof.{$Faction}" chance="80">
                <append_to_list name="$ValidOffsets" exact="6000"/>
              </do_if>

              <!-- Shuffle list and pick a valid offset at random -->
              <do_if value="$ValidOffsets.count">
                <set_value name="$TextOffset" exact="$ValidOffsets.random"/>

                <!-- Board specific ship -->
                <do_if value="$TextOffset == 1000">
                  <include_actions ref="Setup_FindEnemyShip"/>
                </do_if>
                <do_elseif value="$TextOffset == 1100">
                  <include_actions ref="Setup_FindEnemyShip"/>
                </do_elseif>
                <do_elseif value="$TextOffset == 1200">
                  <include_actions ref="Setup_FindEnemyShip"/>
                </do_elseif>
                <do_elseif value="$TextOffset == 1300">
                  <do_if value="$Station.owner == faction.argon">
                    <set_value name="$EnemyFaction" exact="[faction.antigone, faction.hatikvah].random"/>
                  </do_if>
                  <do_elseif value="$Station.owner == faction.antigone">
                    <set_value name="$EnemyFaction" exact="[faction.argon, faction.hatikvah].random"/>
                  </do_elseif>
                  <set_value name="$PrimaryPurpose" exact="purpose.trade"/>
                  <include_actions ref="Setup_FindEnemyShip"/>
                </do_elseif>
                <do_elseif value="$TextOffset == 1400">
                  <include_actions ref="Setup_FindEnemyShip"/>
                </do_elseif>
                <do_elseif value="$TextOffset == 6000">
                  <set_value name="$EnemyFaction" exact="faction.argon"/>
                  <include_actions ref="Setup_FindEnemyShip"/>
                </do_elseif>
                <!-- Board ship matching specs -->
                <!--<do_elseif value="$TextOffset == 2000">
                  <include_actions ref="Setup_FindSpecShip_Merchant"/>
                </do_elseif>
                <do_elseif value="$TextOffset == 2100">
                  <include_actions ref="Setup_FindSpecShip_Merchant"/>
                </do_elseif>-->

                <do_if value="$TargetShip or $TargetSpec">
                  <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel, $TargetShip / $TargetSpec; output: $MissionLevel"/>
                  <do_if value="$TargetShip">
                    <do_if value="$TargetShip.commander">
                      <set_value name="$numfleetmembers" exact="$TargetShip.toplevelcommander.allsubordinates.count + 1"/>
                      <do_if value="$numfleetmembers ge 5">
                        <set_value name="$Difficulty" exact="level.veryhard"/>
                        <set_value name="$FleetSize" exact="2"/>
                      </do_if>
                      <do_elseif value="$numfleetmembers le 5">
                        <set_value name="$MissionLevel" exact="4" operation="add"/>
                        <set_value name="$FleetSize" exact="1"/>
                      </do_elseif>
                    </do_if>
                  </do_if>
                  <set_value name="$Valid" exact="true"/>
                </do_if>

              </do_if>
            </do_if>

            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <patch sinceversion="2">
            <set_value name="$FleetSize" exact="0"/>
          </patch>
          <cues>
            <cue name="GenerateGenericMission_Variant_2_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <cues>
                <cue name="GenerateGenericMission_Variant_2_Ref" ref="Start">
                  <param name="OfferObject"   value="$Station"/>
                  <param name="MissionLevel"  value="$MissionLevel"/>
                  <param name="Difficulty"    value="$Difficulty"/>

                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>

                  <!--Mission text-->
                  <param name="Page"              value="30152"/>
                  <param name="TextOffset"        value="$TextOffset"/>

                  <!--Mission specific params-->
                  <param name="Faction"           value="$Faction"/>
                  <param name="TargetShip"        value="$TargetShip" comment="pass either TargetShip or TargetSpecs!"/>
                  <param name="TargetSpec"        value="$TargetSpec"/>
                  <param name="FleetSize"         value="$FleetSize"/>

                  <param name="ReportSignalCue"   value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance"       value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

  </cues>
</mdscript>