<?xml version="1.0" encoding="utf-8"?>
<mdscript name="Guidance" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <cue name="Start">
      <cues>
        <!--[$Component, $Offset, $TextOffset(optional)]-->
        <!--This cue only triggers if GuidanceMission is waiting. Otherwise UpdateTarget is triggered-->
        <cue name="NewTarget" instantiate="true">
          <conditions>
            <check_any>
              <event_cue_signalled comment="arugments passed with param" />
              <event_object_signalled object="player.entity" param="'set guidance'" comment="arguments passed with param2" />
            </check_any>
            <cue_is_waiting cue="GuidanceMission"/>
          </conditions>
          <actions>
            <do_if value="event.name == 'event_cue_signalled'">
              <set_value name="$Arguments" exact="event.param"/>
            </do_if>
            <do_else>
              <set_value name="$Arguments" exact="event.param2"/>
            </do_else>
            <set_value name="$Component" exact="null"/>
            <set_value name="$Offset" exact="$Arguments.{2}"/>

            <!--Text-->
            <set_value name="$Page" exact="30004"/>
            <do_if value="@$Arguments.{3}">
              <set_value name="$TextOffset" exact="$Arguments.{3}"/>
            </do_if>
            <do_else>
              <set_value name="$TextOffset" exact="5500"/>
            </do_else>
            <set_value name="$Target" exact="$Arguments.{1}"/>
            <do_if value="typeof $Target" exact="datatype.component">
              <do_if value="$Target.exists">
                <set_value name="$Component" exact="$Target"/>
                <signal_cue_instantly cue="GuidanceMission"/>
              </do_if>
            </do_if>
            <remove_value name="$Arguments"/>
          </actions>
        </cue>

        <!--param = [Aborted?, $Target]-->
        <cue name="EndGuidanceToTarget" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'EndGuidanceToTarget signalled - event.param.{2} == ' + event.param.{2}.name + ', $Target == ' + $Target.name" />
            <do_if value="event.param.{2} == $Target">
              <signal_cue_instantly cue="EndGuidance" param="event.param.{1}" />
            </do_if>
          </actions>
        </cue>

        <!--param = Aborted?-->
        <cue name="EndGuidance" instantiate="true">
          <conditions>
            <check_any>
              <event_cue_signalled comment="arugments passed with param" />
              <event_object_signalled object="player.entity" param="'end guidance'" comment="arguments passed with param2" />
            </check_any>
          </conditions>
          <actions>
            <debug_text text="'Ending Guidance'"/>
            <do_if value="event.name == 'event_cue_signalled'">
              <set_value name="$Arguments" exact="event.param"/>
            </do_if>
            <do_else>
              <set_value name="$Arguments" exact="event.param2"/>
            </do_else>
            <cancel_cue cue="GuidanceLost"/>
            <do_if value="@$Arguments">
              <remove_mission cue="GuidanceMission" type="aborted" activate="previous" />
            </do_if>
            <do_else>
              <remove_mission cue="GuidanceMission" activate="previous" />
            </do_else>
            <signal_objects object="player.computer" param="'guidance_ended'" />
            <reset_cue cue="GuidanceMission"/>
            <remove_value name="$Arguments"/>
          </actions>
        </cue>

        <cue name="GuidanceMission">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$Objective" exact="objective.guidance" />
            <do_if value="$Component.isclass.entity">
              <set_value name="$Objective" exact="objective.find" />
            </do_if>
            <create_mission cue="GuidanceMission" name="readtext.{$Page}.{$TextOffset + 1}" faction="faction.player" type="missiontype.guidance">
              <briefing>
                <objective step="1" action="$Objective" object="$Target" offset="if $Offset then $Offset else position.[0,0,0]" checkunknown="true" />
              </briefing>
              <objective step="1" action="$Objective" object="$Target" offset="if $Offset then $Offset else position.[0,0,0]" checkunknown="true" />
            </create_mission>
            <do_if value="$Target.isclass.space">
              <debug_text text="'Guidance set to space: ' + $Target.knownname"/>
            </do_if>
            <do_else>
              <debug_text text="'Guidance set to component: ' + $Target + ' ' + $Target.knownname + ' of size: ' + $Target.size"/>
            </do_else>
          </actions>
          <cues>

            <cue name="UpdateTarget" instantiate="true">
              <conditions>
                <check_any>
                  <event_cue_signalled cue="NewTarget" comment="arugments passed with param" />
                  <event_object_signalled object="player.entity" param="'set guidance'" comment="arguments passed with param2" />
                </check_any>
              </conditions>
              <actions>
                <do_if value="event.name == 'event_cue_signalled'">
                  <set_value name="$Arguments" exact="event.param"/>
                </do_if>
                <do_else>
                  <set_value name="$Arguments" exact="event.param2"/>
                </do_else>
                <debug_text text="$Arguments"/>
                <do_if value="$Arguments.{1}.exists">
                  <do_if value="typeof $Arguments.{1}" exact="datatype.component">
                    <set_value name="this.$Success" exact="false"/>
                    <set_value name="$Target" exact="$Arguments.{1}"/>

                    <set_value name="$Component" exact="$Target"/>
                    <set_value name="this.$Success" exact="true"/>

                    <do_if value="this.$Success">
                      <set_value name="$Offset" exact="$Arguments.{2}"/>
                      <cancel_cue cue="ComponentDestroyed"/>
                      <cancel_cue cue="GuidanceLost"/>
                      <remove_mission cue="GuidanceMission"/>
                      <set_value name="$Objective" exact="objective.guidance" />
                      <do_if value="typeof $Target" exact="datatype.componentslot">
                        <!--ComponentSlot target case-->
                        <create_mission cue="GuidanceMission" name="readtext.{$Page}.{$TextOffset + 1}" faction="faction.player" type="missiontype.guidance">
                          <briefing>
                            <objective step="1" action="$Objective" slot="$Target" offset="if $Offset then $Offset else position.[0,0,0]" checkunknown="true" />
                          </briefing>
                          <objective step="1" action="$Objective" slot="$Target" offset="if $Offset then $Offset else position.[0,0,0]" checkunknown="true" />
                        </create_mission>
                        <debug_text text="'Guidance set to slot: ' + $Target + ' on component: ' + $Component.knownname + ' of size: ' + $Component.size"/>
                      </do_if>
                      <do_elseif value="typeof $Target" exact="datatype.component">
                        <!--Component target case-->
                        <do_if value="$Component.isclass.entity">
                          <set_value name="$Objective" exact="objective.find" />
                        </do_if>
                        <create_mission cue="GuidanceMission" name="readtext.{$Page}.{$TextOffset + 1}" faction="faction.player" type="missiontype.guidance">
                          <briefing>
                            <objective step="1" action="$Objective" object="$Target" offset="if $Offset then $Offset else position.[0,0,0]" checkunknown="true" />
                          </briefing>
                          <objective step="1" action="$Objective" object="$Target" offset="if $Offset then $Offset else position.[0,0,0]" checkunknown="true" />
                        </create_mission>
                        <debug_text text="'Guidance set to: ' + $Target.knownname + ' of size: ' + $Target.size"/>
                      </do_elseif>
                      <signal_objects object="player.computer" param="'guidance_updated'" param2="$Component" />
                      <reset_cue cue="ComponentDestroyed"/>
                      <reset_cue cue="GuidanceLost"/>
                      <reset_cue cue="CheckArrival" />
                    </do_if>
                  </do_if>
                </do_if>
                <remove_value name="$Arguments"/>
              </actions>
            </cue>

            <cue name="Aborted">
              <conditions>
                <event_mission_aborted cue="GuidanceMission"/>
              </conditions>
              <actions>
                <debug_text text="'Aborted'"/>
                <signal_cue_instantly cue="EndGuidance" param="true"/>
              </actions>
            </cue>

            <cue name="ComponentDestroyed">
              <conditions>
                <event_object_destroyed object="$Component"/>
              </conditions>
              <actions>
                <debug_text text="'ComponentDestroyed'"/>
                <signal_cue_instantly cue="EndGuidance" />
              </actions>
            </cue>

            <!--For the case of another mission becoming active, abort the Guidance Mission-->
            <cue name="GuidanceLost">
              <conditions>
                <event_guidance_disabled cue="GuidanceMission"/>
              </conditions>
              <actions>
                <debug_text text="'GuidanceLost'"/>
                <signal_cue_instantly cue="EndGuidance" />
              </actions>
            </cue>

            <cue name="CheckArrival">
              <cues>
                <cue name="FlyToSpaceContext" onfail="cancel">
                  <conditions>
                    <!--Is a space without an offset-->
                    <check_value value="$Component.isclass.space"/>
                    <check_value value="not $Offset"/>
                  </conditions>
                  <cues>
                    <cue name="AtSpace" onfail="cancel">
                      <conditions>
                        <check_value value="player.entity.hascontext.{$Component}"/>
                      </conditions>
                      <actions>
                        <debug_text text="'Player was already in context of: ' + $Component.knownname"/>
                        <signal_cue_instantly cue="EndGuidance"/>
                      </actions>
                    </cue>

                    <cue name="ChangedSpace">
                      <conditions>
                        <event_object_changed_zone object="player.entity" />
                        <check_value value="player.entity.hascontext.{$Component}"/>
                      </conditions>
                      <actions>
                        <debug_text text="'Player has entered: ' + $Component.knownname"/>
                        <signal_cue_instantly cue="EndGuidance"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="FlyToPosition" onfail="cancel">
                  <conditions>
                    <!--Is not a space or a space with an offset-->
                    <check_any>
                      <check_value value="not $Component.isclass.space"/>
                      <check_value value="$Offset"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="not $Offset">
                      <set_value name="$Offset" exact="position.[0,0,0]"/>
                    </do_if>
                    <do_if value="$Component.isclass.entity">
                      <set_value name="$NearDistance" exact="3m" />
                    </do_if>
                    <do_elseif value="$Component.isclass.dockingbay and not $Component.isstorage">
                      <set_value name="$NearDistance" exact="100m" />
                    </do_elseif>
                    <do_elseif value="$Component.isclass.ship and $Component.dock and not $Component.dock.isstorage">
                      <set_value name="$NearDistance" exact="100m" />
                    </do_elseif>
                    <do_else>
                      <set_value name="$NearDistance" exact="1km" />
                    </do_else>
                  </actions>
                  <cues>
                    <cue name="NearComponent" checkinterval="1s">
                      <conditions>
                        <check_value value="(if $Component.isclass.space
                                                then player.entity.distanceto.[$Target, $Offset]
                                             else
                                                $Component.bboxdistanceto.{player.entity}
                                             )                                                    
                                             le (if (not player.occupiedship and $Component.isclass.ship) then 1m else $NearDistance)"/>
                      </conditions>
                      <delay exact="3s"/>
                      <actions>
                        <debug_text text="'Distance to target was: ' + player.entity.distanceto.{$Component}"/>
                        <signal_cue_instantly cue="EndGuidance"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

          </cues>
        </cue>
      </cues>
    </cue>
  </cues>
</mdscript>