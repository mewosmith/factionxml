<?xml version="1.0" encoding="utf-8"?>
<mdscript name="RML_RepairSignalLeaks" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>

    <!--
    This RML is intended for use in Master-Missions. 
    It handles checking if the player transported (any) ware to the specified station
    
    $feedbackvalue:
    -103 $TargetTable did not contain any valid targets
    -102 invalid $TargetTable parameter
    -101 Cue parameters not defined
    -100: Undefined failure. Defaulted to -100
    -2: Player scanned signalleak (while he should repair)
    -1: No leaks fixed
    1: All leaks fixed
    2: At least half leaks fixed
    3: At least one leak fixed-->

    <library name="RepairSignalLeaks">
      <params>
        <param name="EndSignalCue"/>
        <param name="MissionCue"/>
        <param name="StartStep"       default="1"     comment="Briefing step to start the mission on"/>
        <param name="UpdateBriefing"  default="true"  comment="Update the briefing objective step when the objective is updated"/>
        <param name="DebugChance"     default="0" />
        <param name="Text_SingleLeak"                 comment="Unresolved objective text for a single leak on an object e.g. 'Dataleak on - $OBJECTNAME$'"/>
        <param name="Text_MultiLeak"                  comment="Unresolved objective text for multiple leaks on an object e.g. '$COUNT$ Dataleaks on - $OBJECTNAME$'"/>
        <param name="Text_MultiObject"                comment="Unresolved objective text for multiple leak on multiple objects e.g. '$LEAKCOUNT$ Dataleaks on $OBJECTCOUNT$ objects'"/>

        <param name="TargetTable_Ref"                 comment="Table reference defining which objects need to have leaks repaired and how many e.g.
               table[
               {object1} = table[$amount = 5],
               {object2} = table[$amount = 3],
               ]"/>
        <!--NOTE: Currently only supporting one object. Keeping parameter as a table to help with future patching.-->
        <!--TODO @Owen support more than one object in the table-->
      </params>
      <actions>
        <set_value name="$feedbackvalue" exact="0"/>
        <create_list name="$ErrorList"/>
        <create_group groupname="$ObjectiveTargets"/>

        <do_if value="not $EndSignalCue or not $MissionCue">
          <append_to_list name="$ErrorList" exact="-101"/>
        </do_if>
        <do_if value="typeof $TargetTable_Ref != datatype.table">
          <append_to_list name="$ErrorList" exact="-102"/>
        </do_if>
        <do_else>
          <set_value name="$TargetTable" exact="table[]"/>
          <create_group groupname="$LeakGroup"/>
          <create_group groupname="$TargetGroup"/>
          <do_all exact="$TargetTable_Ref.keys.count" counter="$i">
            <set_value name="$Object" exact="$TargetTable_Ref.keys.{$i}"/>
            <do_if value="$Object.isrealclass.object" comment="ADD WHEN ZONES ARE SUPPORTED > $Object.isclass.zone">
              <set_value name="$TargetTable.{$Object}" exact="$TargetTable_Ref.{$Object}.clone"/>
            </do_if>
          </do_all>
          <debug_text text="$TargetTable" chance="$DebugChance"/>
          <assert value="$TargetTable.keys.count == 1" text="'Mission curretly only supports 1 target. Mission instead has: ' + $TargetTable.keys.count + ' [Owen]'"/>

          <do_if value="not $TargetTable.keys.count">
            <append_to_list name="$ErrorList" exact="-103"/>
          </do_if>
        </do_else>

      </actions>
      <cues>

        <cue name="Signal_Cleanup" onfail="cancel">
          <conditions>
            <check_value value="$ErrorList.count" min="1"/>
          </conditions>
          <actions>
            <signal_cue cue="Cleanup"/>
          </actions>
        </cue>

        <cue name="StartMission" onfail="cancel">
          <conditions>
            <check_value value="$ErrorList.count" min="0"/>
          </conditions>
          <cues>
            <cue name="InitBriefing">
              <actions>
                <set_value name="$SilentUpdate" exact="false"/>
                <signal_cue cue="UpdateBriefing"/>
              </actions>
            </cue>

            <cue name="LeakRepaired" instantiate="true">
              <conditions>
                <event_player_repaired_signal_leak/>
              </conditions>
              <actions>
                <debug_text text="'Repaired ' + event.param + ' which has object ' + @event.param2" chance="$DebugChance"/>
                <set_value name="$Object" exact="@$TargetTable.keys.{1}"/>
                <do_if value="$Object">
                  <do_if value="event.param2 == $Object or event.param2.hascontext.{$Object}">
                    <debug_text text="'It was a mission dataleak for ' + $Object.knownname" chance="$DebugChance"/>
                    <set_value name="$TargetTable.{$Object}.$fixedcount" operation="add"/>
                  </do_if>
                </do_if>

                <!--Multi-object version-->
                <!--<do_all exact="$TargetTable.keys.count" counter="$i">
                  <set_value name="$Object" exact="$TargetTable.keys.{$i}"/>
                  <do_if value="event.param2 == $Object and ($TargetTable.{$Object}.$amount - @$TargetTable.{$Object}.$fixedcount gt 0)">
                    <debug_text text="'It was a mission dataleak for ' + $Object.knownname" chance="$DebugChance"/>
                    <set_value name="$TargetTable.{$Object}.$fixedcount" operation="add"/>
                    <break/>
                  </do_if>
                </do_all>-->

                <!--Check if any other leaks need to be fixed-->

                <set_value name="$SilentUpdate" exact="false"/>
                <signal_cue cue="UpdateBriefing"/>
              </actions>
            </cue>

            <cue name="CheckMissionFailureUnlock" instantiate="true">
              <conditions>
                <event_player_signal_unlock_finished/>
                <check_value value="$ObjectiveTargets.indexof.{event.param}"/>
              </conditions>
              <actions>
                <set_value name="$feedbackvalue" exact="-2" comment="Player cheated"/>
                <signal_cue cue="Cleanup"/>
              </actions>
            </cue>

            <cue name="CheckMissionFailure" instantiate="true">
              <conditions>
                <event_object_destroyed group="$ObjectiveTargets"/>
              </conditions>
              <delay exact="1ms"/>
              <actions>
                <signal_cue cue="UpdateBriefing"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="ObjectiveTicker" instantiate="true" checkinterval="5s">
          <actions>
            <signal_cue cue="UpdateBriefing"/>
          </actions>
        </cue>

        <!--TODO @Owen @Roger if the player scans a data leak on a object, fail the mission-->

        <!--Not currently called. Untested-->
        <library name="CheckStatus_Multiple">
          <actions>
            <do_all exact="$TargetTable.keys.count" counter="$i">
              <set_value name="$Object" exact="$TargetTable.keys.{$i}"/>
              <do_if value="@$TargetTable.{$Object}.$fixedcount ge $TargetTable.{$Object}.$amount">
                <!--Target amount was achieved-->
                <set_value name="$TotalFixedLeaks" operation="add" exact="@$TargetTable.{$Object}.$fixedcount"/>
                <set_value name="$TotalLeaks" operation="add" exact="$TargetTable.{$Object}.$amount"/>
              </do_if>
              <do_else>
                <do_if value="$Object.isoperational">
                  <set_value name="$NewLeakGroupCount" exact="$NewLeakGroupList.count"/>
                  <set_value name="$WantedLeakCount" exact="$TargetTable.{$Object}.$amount - @$TargetTable.{$Object}.$fixedcount"/>
                  <do_all exact="$LeakGroup.count" counter="$k">
                    <do_if value="$WantedLeakCount gt 0">
                      <do_if value="$LeakGroup.{$k}.hascontext.{$Object}">
                        <append_to_list name="$NewLeakGroupList" exact="$LeakGroup.{$k}"/>
                        <set_value name="$WantedLeakCount" operation="subtract"/>
                      </do_if>
                    </do_if>
                  </do_all>
                  <do_if value="$WantedLeakCount gt 0">
                    <find_object_component name="$Leaks" object="$Object" signalleaktype="signalleaktype.data" multiple="true"/>
                    <debug_text text="'There are ' + $Leaks.count + ' dataleaks on this station'" chance="$DebugChance"/>
                    <do_all exact="$Leaks.count" counter="$k">
                      <do_if value="$WantedLeakCount gt 0">
                        <do_if value="not $NewLeakGroupList.indexof.{$Leaks.{$k}}">
                          <append_to_list name="$NewLeakGroupList" exact="$Leaks.{$k}"/>
                          <set_value name="$WantedLeakCount" operation="subtract"/>
                        </do_if>
                      </do_if>
                    </do_all>
                  </do_if>
                  <do_if value="$NewLeakGroupCount == $NewLeakGroupList.count">
                    <!--No new leaks were found for this object-->
                    <do_if value="md.Signal_Leaks.Manager.$ObjectsWithLeaks.indexof.{$Object}">
                      <debug_text text="$Object + ' ' + $Object.knownname + ' is being tracked by the signal leak manager'" chance="$DebugChance"/>
                      <set_value name="$TargetTable.{$Object}.$amount" exact="0"/>
                    </do_if>
                    <do_else>
                      <!--Have object as an objective target to fly to-->
                      <add_to_group groupname="$ObjectiveTargets" object="$Object"/>
                      <append_to_list name="$ExistingObjects" exact="$Object"/>
                    </do_else>
                  </do_if>
                  <do_else>
                    <set_value name="$TotalFixedLeaks" operation="add" exact="@$TargetTable.{$Object}.$fixedcount"/>
                    <!--Set the target amount to the number of leaks the station actually has left for the mission-->
                    <set_value name="$TargetTable.{$Object}.$amount" exact="@$TargetTable.{$Object}.$fixedcount + $NewLeakGroupList.count - $NewLeakGroupCount"/>
                    <set_value name="$TotalLeaks" operation="add" exact="$TargetTable.{$Object}.$amount"/>
                    <append_to_list name="$ExistingObjects" exact="$Object"/>
                  </do_else>
                </do_if>
                <do_else>
                  <!--Object is dead. Take the fixed count as the total-->
                  <set_value name="$TotalFixedLeaks" operation="add" exact="@$TargetTable.{$Object}.$fixedcount"/>
                  <set_value name="$TotalLeaks" operation="add" exact="$TotalFixedLeaks"/>
                </do_else>
              </do_else>
            </do_all>
          </actions>
        </library>

        <cue name="UpdateBriefing" instantiate="true" comment="Called each time a briefing-update is needed">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$TotalLeaks" exact="0"/>
            <set_value name="$TotalFixedLeaks" exact="0"/>
            <set_value name="$ExistingObjects" exact="[]"/>

            <set_value name="$NewLeakGroupList" exact="[]"/>
            <clear_group group="$ObjectiveTargets"/>

            <!--<include_actions ref="CheckStatus_Multiple"/>-->

            <!--Simple single object case-->
            <set_value name="$Object" exact="@$TargetTable.keys.{1}"/>
            <set_value name="$TotalFixedLeaks" exact="@$TargetTable.{$Object}.$fixedcount"/>
            <set_value name="$TotalLeaks" exact="$TargetTable.{$Object}.$amount"/>
            
            <do_if value="@$TargetTable.{$Object}.$fixedcount ge $TargetTable.{$Object}.$amount">
              <!--Target amount was achieved-->
              <!--<set_value name="$TotalFixedLeaks" exact="@$TargetTable.{$Object}.$fixedcount"/>
              <set_value name="$TotalLeaks" exact="$TargetTable.{$Object}.$amount"/>-->
            </do_if>
            <do_else>
              <do_if value="$Object.isoperational">
                <!--Attempt to find leaks that already exist. Be aware of leaks already used as objective targets.-->
                <set_value name="$NewLeakGroupCount" exact="$NewLeakGroupList.count"/>
                <set_value name="$WantedLeakCount" exact="$TargetTable.{$Object}.$amount - @$TargetTable.{$Object}.$fixedcount"/>
                <debug_text text="'Mission is looking for ' + $WantedLeakCount + ' leaks for Object ' + $Object.knownname" chance="$DebugChance"/>
                <do_all exact="$LeakGroup.count" counter="$k">
                  <do_if value="$WantedLeakCount gt 0">
                    <!--Check that the leaks in the $LeakGroup are still vaid for this object. If so, include them.-->
                    <do_if value="$LeakGroup.{$k}.hascontext.{$Object}">
                      <append_to_list name="$NewLeakGroupList" exact="$LeakGroup.{$k}"/>
                      <set_value name="$WantedLeakCount" operation="subtract"/>
                    </do_if>
                  </do_if>
                </do_all>
                <do_if value="$WantedLeakCount gt 0">
                  <!--Attempt to find new leaks-->
                  <find_object_component name="$Leaks" object="$Object" signalleaktype="signalleaktype.data" multiple="true"/>
                  <debug_text text="'There are ' + $Leaks.count + ' dataleaks on this station'" chance="$DebugChance"/>
                  <do_all exact="$Leaks.count" counter="$k">
                    <do_if value="$WantedLeakCount gt 0">
                      <do_if value="not $NewLeakGroupList.indexof.{$Leaks.{$k}}">
                        <append_to_list name="$NewLeakGroupList" exact="$Leaks.{$k}"/>
                        <set_value name="$WantedLeakCount" operation="subtract"/>
                      </do_if>
                    </do_if>
                  </do_all>
                </do_if>
                <do_if value="$NewLeakGroupCount == $NewLeakGroupList.count">
                  <!--No new leaks were found for this object-->
                  <do_if value="md.Signal_Leaks.Manager.$ObjectsWithLeaks.indexof.{$Object} and $NewLeakGroupCount == 0">
                    <!--Object is tracked by the signal leak manager but has no more leaks.-->
                    <debug_text text="$Object + ' ' + $Object.knownname + ' is being tracked by the signal leak manager but has no leaks'" chance="$DebugChance"/>
                    <do_if value="$LeakGenerationWaitTime?">
                      <do_if value="player.age gt $LeakGenerationWaitTime + 8s">
                        <!--Waited but there are no more leaks to be generated. Set target amount as the fixed amount and end the mission.-->
                        <set_value name="$TargetTable.{$Object}.$amount" exact="@$TargetTable.{$Object}.$fixedcount"/>
                      </do_if>
                      <do_else>
                        <add_to_group groupname="$ObjectiveTargets" object="$Object"/>
                        <append_to_list name="$ExistingObjects" exact="$Object"/>
                      </do_else>
                    </do_if>
                    <do_else>
                      <!--Mark the time and wait for some leaks to potentially be added in the next few seconds-->
                      <set_value name="$LeakGenerationWaitTime" exact="player.age"/>
                      <add_to_group groupname="$ObjectiveTargets" object="$Object"/>
                      <append_to_list name="$ExistingObjects" exact="$Object"/>
                    </do_else>
                  </do_if>
                  <do_else>
                    <!--Have object as an objective target to fly to-->
                    <add_to_group groupname="$ObjectiveTargets" object="$Object"/>
                    <append_to_list name="$ExistingObjects" exact="$Object"/>
                  </do_else>
                </do_if>
                <do_else>
                  <set_value name="$TotalFixedLeaks" operation="add" exact="@$TargetTable.{$Object}.$fixedcount"/>
                  <!--Set the target amount to the number of leaks the station actually has left for the mission-->
                  <set_value name="$TargetTable.{$Object}.$amount" exact="@$TargetTable.{$Object}.$fixedcount + $NewLeakGroupList.count - $NewLeakGroupCount"/>
                  <set_value name="$TotalLeaks" exact="$TargetTable.{$Object}.$amount"/>
                  <append_to_list name="$ExistingObjects" exact="$Object"/>
                </do_else>
              </do_if>
              <do_else>
                <!--Object is dead-->
                <!--<set_value name="$TotalFixedLeaks" exact="@$TargetTable.{$Object}.$fixedcount"/>
                <set_value name="$TotalLeaks" exact="$TargetTable.{$Object}.$amount"/>-->
              </do_else>
            </do_else>

            <clear_group group="$LeakGroup"/>
            <add_to_group groupname="$LeakGroup" list="$NewLeakGroupList"/>
            <add_to_group groupname="$ObjectiveTargets" group="$LeakGroup"/>
            <debug_text text="'$TotalFixedLeaks ' + $TotalFixedLeaks" chance="$DebugChance"/>
            <debug_text text="'$TotalLeaks ' + $TotalLeaks" chance="$DebugChance"/>

            <do_if value="$ObjectiveTargets.count and $TotalFixedLeaks lt $TotalLeaks">
              <!--There is something to either fly to or repair-->
              <set_value name="$ObjectiveText" exact="null"/>
              <do_if value="$ExistingObjects.count gt 1">
                <!--Multiple objects-->
                <substitute_text text="$ObjectiveText" source="$Text_MultiObject">
                  <replace string="'$OBJECTCOUNT$'" with="$ExistingObjects.count"/>
                  <replace string="'$LEAKCOUNT$'" with="$TotalLeaks"/>
                </substitute_text>
              </do_if>
              <do_elseif value="$ExistingObjects.count == 1">
                <do_if value="$TotalLeaks - $TotalFixedLeaks == 1">
                  <!--Only one object with one leak to fix-->
                  <set_value name="$ObjectiveText" exact="$Text_SingleLeak"/>
                  <substitute_text text="$ObjectiveText" source="$Text_SingleLeak">
                    <replace string="'$OBJECTNAME$'" with="$ExistingObjects.{1}.knownname"/>
                  </substitute_text>
                </do_if>
                <do_else>
                  <!--One object with multiple leak to fix-->
                  <substitute_text text="$ObjectiveText" source="$Text_MultiLeak">
                    <replace string="'$OBJECTNAME$'" with="$ExistingObjects.{1}.knownname"/>
                    <replace string="'$COUNT$'" with="$TotalLeaks - $TotalFixedLeaks"/>
                  </substitute_text>
                </do_else>
              </do_elseif>

              <do_if value="$UpdateBriefing">
                <update_mission cue="$MissionCue">
                  <briefing>
                    <objective step="$StartStep" action="objective.repair" text="$ObjectiveText"/>
                  </briefing>
                </update_mission>
              </do_if>

              <do_if value="$TotalLeaks == 1">
                <set_objective cue="$MissionCue" step="$StartStep" action="objective.repair" text="$ObjectiveText" group="$ObjectiveTargets" silent="$SilentUpdate"/>
              </do_if>
              <do_else>
                <set_objective cue="$MissionCue" step="$StartStep" action="objective.repair" text="$ObjectiveText" group="$ObjectiveTargets" silent="$SilentUpdate">
                  <progress progress="$TotalFixedLeaks" max="$TotalLeaks" text="{30004,1004}"/>
                </set_objective>
              </do_else>
              <set_value name="$SilentUpdate" exact="true"/>
            </do_if>
            <do_else>
              <do_if value="$TotalFixedLeaks ge $TotalLeaks">
                <set_value name="$feedbackvalue" exact="1" comment="All leaks fixed"/>
              </do_if>
              <do_elseif value="$TotalFixedLeaks ge ($TotalLeaks / 2)">
                <set_value name="$feedbackvalue" exact="2" comment="At least half leaks fixed"/>
              </do_elseif>
              <do_elseif value="$TotalFixedLeaks">
                <set_value name="$feedbackvalue" exact="3" comment="At least one leak fixed"/>
              </do_elseif>
              <do_else>
                <set_value name="$feedbackvalue" exact="-1" comment="No leaks fixed"/>
              </do_else>

              <signal_cue cue="Cleanup"/>
            </do_else>
          </actions>
        </cue>

        <cue name="Cleanup">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--TODO remove_objective-->

            <do_if value="$feedbackvalue" exact="0">
              <do_if value="$ErrorList.count" exact="0">
                <debug_text text="'ERROR: RML_RepairSignalLeaks.Cleanup - Feedback value is 0 and no error values were set. Defaulting to -100'"/>
                <set_value name="$feedbackvalue" exact="-100"/>
              </do_if>
              <do_else>
                <set_value name="$feedbackvalue" exact="$ErrorList.{1}"/>

                <do_if value="md.$RML_Debugging">
                  <do_all exact="$ErrorList.count" counter="$Counter">
                    <do_if value="$ErrorList.{$Counter}" exact="-103">
                      <set_value name="$FeedbackText" exact="'$TargetTable did not contain any valid targets'"/>
                    </do_if>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-102">
                      <set_value name="$FeedbackText" exact="'invalid $TargetTable parameter'"/>
                    </do_elseif>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-101">
                      <set_value name="$FeedbackText" exact="'Cue parameters not defined'"/>
                    </do_elseif>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-100">
                      <set_value name="$FeedbackText" exact="'Undefined failure. Defaulted to -100'"/>
                    </do_elseif>
                    <do_else>
                      <set_value name="$FeedbackText" exact="'Error: Unknown error value'"/>
                    </do_else>

                    <debug_text text="'Mission Error. Feedback id: ' + $ErrorList.{$Counter} + ' - ' + $FeedbackText" filter="error"/>
                  </do_all>
                </do_if>
              </do_else>
            </do_if>
            <do_else>

              <do_if value="$feedbackvalue" exact="-1">
                <set_value name="$FeedbackText" exact="{30004,6029}" comment="'No leaks fixed'"/>
              </do_if>
              <do_elseif value="$feedbackvalue" exact="-2">
                <set_value name="$FeedbackText" exact="{30004,6130}"/>
              </do_elseif>
              <do_elseif value="$feedbackvalue" exact="1">
                <set_value name="$FeedbackText" exact="'success - All leaks fixed'"/>
              </do_elseif>
              <do_elseif value="$feedbackvalue" exact="2">
                <set_value name="$FeedbackText" exact="'success - At least half leaks fixed'"/>
              </do_elseif>
              <do_elseif value="$feedbackvalue" exact="3">
                <set_value name="$FeedbackText" exact="'success - At least one leak fixed'"/>
              </do_elseif>

              <do_if value="$feedbackvalue" min="1">
                <debug_text text="'Mission Successful. Feedback id: ' + $feedbackvalue + ' - ' + $FeedbackText" chance="md.$RML_Debugging * $DebugChance"/>
              </do_if>
              <do_elseif value="@$FeedbackText">
                <set_value name="$EndSignalCue.$EndFeedbackText" exact="$FeedbackText"/>
                <debug_text text="'Mission Failed. Feedback id: ' + $feedbackvalue + ' - ' + $FeedbackText" chance="md.$RML_Debugging * $DebugChance"/>
              </do_elseif>
              <do_else>
                <debug_text text="'WARNING: Unhandled feedback value ' + $feedbackvalue" chance="$DebugChance"/>
              </do_else>

            </do_else>

            <set_value name="$EndSignalCue.$EndFeedbackValue" exact="$feedbackvalue"/>
            <signal_cue cue="$EndSignalCue"/>
            <cancel_cue cue="RepairSignalLeaks"/>
          </actions>
        </cue>
      </cues>
    </library>
  </cues>
</mdscript>
