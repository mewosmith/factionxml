<?xml version="1.0" encoding="utf-8"?>
<mdscript name="RML_ClaimPlot" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    
    <!--
    This RML is intended for use in Master-Missions. 
    It handles checking if the player built a plot of the specified size in the specified location.
    It cannot fail with an error, because either the player did claim the plot, or he did not yet claim it (and the RML keeps running waiting for a valid plot to be built)
    
    $feedbackvalue:
    -105 $PlotSector left undefined
    -104 $Faction parameter left undefined
    -103 $PlotSize is incorrectly defined.
    -102 $PlotOffset is incorrectly defined.
    -101 Cue parameters not defined
    -100: Undefined failure. Defaulted to -100
    1: Plot claimed
    -->
    <library name="ClaimPlot">
      <params>
        <param name="EndSignalCue"/>
        <param name="MissionCue"/>
        <param name="StartStep" default="1" comment="Briefing step to start the mission on"/>
        <param name="UpdateBriefing" default="true" comment="Update the briefing objective step when the objective is updated"/>
        <param name="DebugChance" default="0" />

        <param name="ObjectiveText"                   comment="The text for the mission objective."/>
        <param name="PlotSector"                      comment="Location in which to claim a plot"/>
        <param name="PlotOffset"                      comment="Location in which to claim a plot"/>
        <param name="PlotRange"                       comment="Maximum distance from the location"/>
        <param name="PlotSize"                        comment="x/y/z minimum plot size"/>
        <param name="Faction"                         comment="The faction to which it needs to be delivered"/>
      </params>
      <actions>
        <set_value name="$feedbackvalue" exact="0"/>
        <create_list name="$ErrorList"/>
        
        <do_if value="not $EndSignalCue or not $MissionCue">
          <append_to_list name="$ErrorList" exact="-101"/>
        </do_if>
        <do_if value="not $PlotOffset">
          <append_to_list name="$ErrorList" exact="-102"/>
        </do_if>
        <do_if value="not $PlotSize">
          <append_to_list name="$ErrorList" exact="-103"/>
        </do_if>
        <do_if value="not $Faction">
          <append_to_list name="$ErrorList" exact="-104"/>
        </do_if>
        <do_if value="not $PlotSector">
          <append_to_list name="$ErrorList" exact="-105"/>
        </do_if>

      </actions>
      <cues>

        <cue name="Signal_Cleanup" onfail="cancel">
          <conditions>
            <check_value value="$ErrorList.count" min="1"/>
          </conditions>
          <actions>
            <signal_cue cue="Cleanup"/>
          </actions>
        </cue>

        <cue name="StartMission" onfail="cancel">
          <conditions>
            <check_value value="$ErrorList.count" min="0"/>
          </conditions>
          <actions>
            <signal_cue cue="UpdateBriefing"/>
          </actions>
          <cues>
            <cue name="CheckMissionStatus" instantiate="true">
              <conditions>
                <event_player_paid_build_plot_changed/>
              </conditions>
              <actions>

                <set_value name="$Station" exact="event.param"/>
                <set_value name="$ExtentsOld" exact="event.param2" comment="Old Plot size"/>
                <set_value name="$ExtentsNew" exact="$Station.paidbuildplot.max" comment="New Plot size"/>
                <set_value name="$PlotCenter" exact="event.param3"/>
                <set_value name="$EndSignalCue.$StationBuilt" exact="$Station" comment="return value out of RML into GM"/>

                <!-- Check if plot is close enough to specified location. 
                Note: Could make this more accurate by using $PlotCenter (relative to $Station.offset) and check if plot-bbox is in range of specified sphere ($PlotSector,$PlotOffset), $PlotRange.
                -->
                
                <do_if value="(($ExtentsNew.x * 2) ge $PlotSize.x) and (($ExtentsNew.y * 2) ge $PlotSize.y) and (($ExtentsNew.z * 2) ge $PlotSize.z)">
                  <do_if value="$Station.sector == $PlotSector">
                    <do_if value="$Station.distanceto.[$PlotSector, $PlotOffset]" max="$PlotRange + $ExtentsNew.length">
                      <set_value name="$feedbackvalue" exact="1" comment="ClaimPlot completed"/>
                      <signal_cue cue="Cleanup" />
                    </do_if>
                    <do_else>
                      <debug_text text="'ClaimPlot: ignoring, too far away (dist=' + $Station.distanceto.[$PlotSector, $PlotOffset]+' max-range: ' + $PlotRange + ')'" chance="$DebugChance"/>
                    </do_else>
                  </do_if>
                  <do_else>
                    <debug_text text="'ClaimPlot: ignoring, not in requested sector'" chance="$DebugChance"/>
                  </do_else>
                </do_if>
                <do_else>
                  <debug_text text="'ClaimPlot: ignoring, plot too small (%s,%s,%s required %s,%s,%s)'.[$ExtentsNew.x, $ExtentsNew.y, $ExtentsNew.z, $PlotSize.x, $PlotSize.y, $PlotSize.z]" chance="$DebugChance"/>
                </do_else>

              </actions>
            </cue>
            
          </cues>
        </cue>

        <cue name="UpdateBriefing" instantiate="true" comment="Called each time a briefing-update is needed">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>

            <do_if value="$UpdateBriefing">
              <update_mission cue="$MissionCue">
                <briefing>
                  <objective step="$StartStep" action="objective.buy" text="$ObjectiveText"/>
                </briefing>
              </update_mission>
              <set_objective cue="$MissionCue" step="$StartStep" action="objective.buy" text="$ObjectiveText"  object="$PlotSector" offset="$PlotOffset" radius="$PlotRange"/>
            </do_if>

          </actions>
        </cue>

        <cue name="Cleanup">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--TODO remove_objective-->

            <do_if value="$feedbackvalue" exact="0">
              <do_if value="$ErrorList.count" exact="0">
                <debug_text text="'ERROR: RML_ClaimPlot.Cleanup - Feedback value is 0 and no error values were set. Defaulting to -100'"/>
                <set_value name="$feedbackvalue" exact="-100"/>
              </do_if>
              <do_else>
                <set_value name="$feedbackvalue" exact="$ErrorList.{1}"/>

                <do_if value="md.$RML_Debugging">
                  <do_all exact="$ErrorList.count" counter="$Counter">
                    <do_if value="$ErrorList.{$Counter}" exact="-105">
                      <set_value name="$FeedbackText" exact="'$PlotSector parameter left undefined'"/>
                    </do_if>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-104">
                      <set_value name="$FeedbackText" exact="'$Faction parameter left undefined'"/>
                    </do_elseif>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-103">
                      <set_value name="$FeedbackText" exact="'$PlotSize parameter left undefined'"/>
                    </do_elseif>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-102">
                      <set_value name="$FeedbackText" exact="'$PlotOffset parameter left undefined'"/>
                    </do_elseif>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-101">
                      <set_value name="$FeedbackText" exact="'Cue parameters not defined'"/>
                    </do_elseif>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-100">
                      <set_value name="$FeedbackText" exact="'Undefined failure. Defaulted to -100'"/>
                    </do_elseif>
                    <do_else>
                      <set_value name="$FeedbackText" exact="'Error: Unknown error value'"/>
                    </do_else>

                    <debug_text text="'Mission Error. Feedback id: ' + $ErrorList.{$Counter} + ' - ' + $FeedbackText" filter="error"/>
                </do_all>
                </do_if>
              </do_else>
            </do_if>
            <do_else>

              <do_if value="$feedbackvalue" exact="1">
                <set_value name="$FeedbackText" exact="'ClaimPlot success'"/>
              </do_if>

              <do_if value="$feedbackvalue" min="1">
                <debug_text text="'Mission Successful. Feedback id: ' + $feedbackvalue + ' - ' + $FeedbackText" chance="md.$RML_Debugging * $DebugChance"/>
              </do_if>
              <do_elseif value="@$FeedbackText">
                <set_value name="$EndSignalCue.$EndFeedbackText" exact="$FeedbackText"/>
                <debug_text text="'Mission Failed. Feedback id: ' + $feedbackvalue + ' - ' + $FeedbackText" chance="md.$RML_Debugging * $DebugChance"/>
              </do_elseif>
              <do_else>
                <debug_text text="'WARNING: Unhandled feedback value ' + $feedbackvalue" chance="$DebugChance"/>
              </do_else>

            </do_else>
            
            <set_value name="$EndSignalCue.$EndFeedbackValue" exact="$feedbackvalue"/>
            <signal_cue cue="$EndSignalCue"/>
            <cancel_cue cue="ClaimPlot"/>
          </actions>
        </cue>
      </cues>
    </library>
  </cues>
</mdscript>
