<?xml version="1.0" encoding="utf-8"?>
<mdscript name="FactionSubgoal_BuildStation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--event.param = table[
    $OwnerGoal                (cue - Cue of calling faction goal),
    $OwnerStandbyShipsTable   (table - optional - Table reference to standby ships. Key = Ship, Value = GameTime they were set to standby),
    $DesiredEndTime           (time  - optional - Gametime in which to attempt and fullfil the subgoal),
    $StationMacro             (macro - macro of the station to build),
    $ConstructionPlan         (constructionsequence - plan of the station to build),
    $StationRawName           (string - raw name of the station which can be a text reference),
    $DeployImmediate          (bool - if true, have the subgoal start in the 'build' phase. Otherwise, it begins in the 'prepare' phase),
    $FindShipSpaces           (list - list of spaces in which to find ships to commandeer),
    $Target                   (space - sector the station is to be built in),
    $Position                 (position - position to build the station, in $Target space),
    $EntryPoint               (object - entry point to wait at in the 'prepare' phase),
    $EntryPointPosition       (position - position to wait at relative to $EntryPoint)
    $DebugChance              (int),
    $DebugChance2             (int)]-->
    <cue name="Start" instantiate="true" namespace="this" version="3">
      <conditions>
        <event_cue_signalled/>
        <check_value value="typeof event.param == datatype.table"/>
      </conditions>
      <actions>
        <set_value name="$OwnerGoal"                exact="event.param.$OwnerGoal"/>
        <set_value name="$Descriptor"               exact="event.param.$Descriptor"/>
        <set_value name="$OwnerStandbyShipsTable"   exact="@event.param.$OwnerStandbyShipsTable"/>
        <set_value name="$DesiredEndTime"           exact="@event.param.$DesiredEndTime"/>
        <set_value name="$Faction"                  exact="$OwnerGoal.$Faction"/>
        <set_value name="$StationMacro"             exact="event.param.$StationMacro"/>
        <set_value name="$ConstructionPlan"         exact="event.param.$ConstructionPlan"/>
        <set_value name="$StationRawName"           exact="@event.param.$StationRawName"/>
        <set_value name="$DeployImmediate"          exact="event.param.$DeployImmediate"/>
        <!--TODO @Owen remove $DesiredCVs-->
        <set_value name="$DesiredCVs"               exact="0"/>
        <set_value name="$FindShipSpaces"           exact="event.param.$FindShipSpaces"/>
        <set_value name="$Target"                   exact="event.param.$Target"/>
        <set_value name="$Position"                 exact="event.param.$Position"/>
        <!--TODO @Owen - just have a gather position? Doesn't necessarily have to be an 'entry point'-->
        <set_value name="$EntryPoint"               exact="@event.param.$EntryPoint"/>
        <set_value name="$EntryPointPosition"       exact="@event.param.$EntryPointPosition"/>

        <!--***Debug***-->
        <set_value name="$DebugChance"              exact="@event.param.$DebugChance"/>
        <set_value name="$DebugChance2"             exact="@event.param.$DebugChance2"/>

        <do_if value="$DebugChance or $DebugChance2 or player.debugfilteractive.economy_verbose">
          <include_actions ref="GenerateDebugTextWithCueID"/>
          <!--curtime, output_id, goal_id, subgoal_id, object_name, object_idcode, sector_name, faction_id, enemy_faction_id-->
          <debug_text filter="economy_verbose" text="'#FL#;%1;Started;%2;%3;%4;%5;%6;%7;%8'.[player.age, $DebugGoalText, $DebugText, null, null, $Target.knownname, $Faction.id, @$OwnerGoal.$EnemyFaction.id]" context="false"/>
        </do_if>
        <do_else>
          <set_value name="$DebugText" exact="'(' + $Faction.id + ') Build station: ' + $StationMacro.id + ' in ' + $Target.knownname + ' ' + $Target + ' - '"/>
        </do_else>
        <debug_text text="'triggering ' + $DebugText" chance="$DebugChance"/>

        <assert value="$FindShipSpaces.count" text="'No local areas defined to acquire ships to commandeer or order. Target: ' + $Target + ' ' + $Target.knownname + ' [Owen]'"/>

        <set_value name="$Station" exact="null"/>
        <create_group groupname="$Ships"/>
        <create_list name="$RequestedShips"/>
        <set_value name="$BuildOrders" exact="[]"/>
        <set_value name="$Phase" exact="if $DeployImmediate then 'build' else 'prepare'"/>
        <set_value name="$EvaluationResult" exact="'unknown'"/>
        <set_value name="$EvaluationDelay" exact="1ms"/>
        <set_value name="$InStandby" exact="false"/>
        <set_value name="$StationConstructed" exact="false"/>
        <set_value name="$AllowedShipRequests" exact="2"/>
        <!--TODO @Owen make Overtime a parameter?-->
        <!--TODO @Owen check if $DesiredEndTime is valid-->
        <set_value name="$OverTime" exact="if $DesiredEndTime then $DesiredEndTime + 10min else null"/>

        <!--<set_value name="$InitialNeededResources" exact="table[]"/>
        <set_value name="$TotalNeededResources" exact="table[]"/>
        <do_if value="$ConstructionPlan.count">
          <set_value name="$ModuleWare" exact="null"/>
          <set_value name="$ModuleResource" exact="null"/>
          <do_all exact="$ConstructionPlan.count" counter="$i">
            <set_value name="$ModuleWare" exact="$ConstructionPlan.{$i}.macro.ware"/>
            <set_value name="$ModuleWare_Resources" exact="$ModuleWare.resources.list"/>
            <do_all exact="$ModuleWare_Resources.count" counter="$k">
              <set_value name="$ModuleResource" exact="$ModuleWare_Resources.{$k}"/>
              <do_if value="$i == 1">
                <set_value name="$InitialNeededResources.{$ModuleResource}" exact="$ModuleWare.resources.{$ModuleResource}.count"/>
              </do_if>
              <set_value name="$TotalNeededResources.{$ModuleResource}" exact="$ModuleWare.resources.{$ModuleResource}.count" operation="add"/>
            </do_all>
          </do_all>
          <remove_value name="$ModuleWare"/>
          <remove_value name="$ModuleResource"/>
        </do_if>-->

        <!--This table is the primary way the faction goal accesses data from this subgoal. Some duplicated data, but better than attempting to retrieve variables directly from a cue-->
        <set_value name="$RegistryTable" exact="table[]"/>
        <set_value name="$RegistryTable.$Cue" exact="this"/>
        <set_value name="$RegistryTable.$StartTime" exact="player.age"/>
        <set_value name="$RegistryTable.$Phase" exact="$Phase"/>
        <set_value name="$RegistryTable.$EvaluationResult" exact="$EvaluationResult"/>
        <set_value name="$RegistryTable.$StationMacro" exact="$StationMacro"/>
        <set_value name="$RegistryTable.$Station" exact="$Station"/>
        <signal_cue_instantly cue="$OwnerGoal" param="['add_subgoal', $RegistryTable]"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <set_value name="$StationRawName" exact="null"/>
      </patch>
      <patch sinceversion="3" state="complete">
        <do_if value="$Loadouts?">
          <remove_value name="$Loadouts"/>
          <remove_value name="$ConstructionPlan"/>
        </do_if>
      </patch>
      <cues>
        <cue name="Init" onfail="cancel">
          <conditions>
            <!--Some faction goal activity may cause them to remove their subgoals before they are finished initialising. $SetToShutdown prevents the subgoal from performing initialisation in that case.-->
            <check_value value="not @$SetToShutdown"/>
          </conditions>
          <actions>
            <set_value name="$RegistryTable.$GenerateReportCue" exact="Generate_Report"/>
            <set_value name="$RegistryTable.$UpdateSubgoalCue" exact="Update_Sub_Goal"/>
            <set_value name="$RegistryTable.$EvaluateCue" exact="Force_Evaluation"/>

            <include_actions ref="SetFindShipFocusSpace"/>
            <signal_cue_instantly cue="On_Phase_Change"/>
          </actions>
        </cue>

        <cue name="Generate_Report" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'SUBGOAL (' + $EvaluationResult + ') ' + $DebugText + 'Station: ' + $Station + ' Active Ships: ' + $Ships.count + ' Requested: ' + $RequestedShips.count + ' Station: ' + $Station" context="false"/>
            <do_if value="$Ships.count">
              <debug_text text="'Active ships '" context="false"/>
              <do_all exact="$Ships.count" counter="$i">
                <debug_text text="$Ships.{$i} + ' ' + $Ships.{$i}.knownname + ' ' + $Ships.{$i}.idcode" context="false"/>
              </do_all>
            </do_if>
            <do_if value="$RequestedShips.count">
              <debug_text text="'Requested ships '" context="false"/>
              <do_all exact="$RequestedShips.count" counter="$i">
                <debug_text text="$RequestedShips.{$i} + ' ' + $RequestedShips.{$i}.knownname + ' ' + $RequestedShips.{$i}.idcode" context="false"/>
              </do_all>
            </do_if>
          </actions>
        </cue>

        <!--event.param.{1} == update ID-->
        <cue name="Update_Sub_Goal" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="$DebugText + 'Update request: ' + event.param.{1}" chance="$DebugChance"/>
            <do_if value="event.param.{1} == 'cleanup'">
              <!--Clean up, including releasing all commandeered ships-->
              <signal_cue_instantly cue="Cleanup" param="[false]"/>
            </do_if>

            <do_elseif value="event.param.{1} == 'handoff'">
              <!--Clean up, but pass commandeered ships to Faction Goal-->
              <signal_cue_instantly cue="Cleanup" param="[true]"/>
            </do_elseif>

            <do_elseif value="event.param.{1} == 'standby'">
              <!--The subgoal does not activly commandeer or request ships but does not care about time.
              The subgoal should not be in this state for too long. The faction goal should either dismiss it or make use of it in the next state.-->
              <set_value name="$InStandby" exact="true"/>
            </do_elseif>

            <do_elseif value="event.param.{1} == 'reactivate'">
              <assert value="$InStandby" text="$DebugText + 'subgoal was not in standby when asked to reactivate [Owen]'" break="1"/>
              <!--event.param.{2} == New Phase ID-->
              <set_value name="$InStandby" exact="false"/>
              <signal_cue_instantly cue="$OwnerGoal" param="['reactivate_subgoal', $RegistryTable]"/>
              <set_value name="$NewPhase" exact="@event.param.{2}"/>
              <do_if value="$NewPhase">
                <include_actions ref="ProcessNewPhaseRequest"/>
              </do_if>
            </do_elseif>

            <do_elseif value="event.param.{1} == 'change_phase'">
              <!--event.param.{2} == New Phase ID-->
              <set_value name="$NewPhase" exact="event.param.{2}"/>
              <include_actions ref="ProcessNewPhaseRequest"/>
            </do_elseif>

            <do_else>
              <assert value="event.param.{1}" text="$DebugText + 'Unknown update request [Owen]'" break="1"/>
            </do_else>

          </actions>
        </cue>

        <!--Requires $NewPhase to be set to the phase ID-->
        <library name="ProcessNewPhaseRequest">
          <actions>
            <do_if value="$NewPhase == 'prepare'">
              <assert value="$NewPhase == 'prepare'" text="$DebugText + 'Attempting change into prepare state which currently should not be transitioned into [Owen]'" break="1"/>
              <set_value name="$NewPhase" exact="null"/>
            </do_if>
            <do_elseif value="event.param.{2} == 'build'">
              <!--Valid-->
            </do_elseif>
            <do_else>
              <assert value="false" text="'Unknown phase request ' + $NewPhase + ' [Owen]'" break="1"/>
              <set_value name="$NewPhase" exact="null"/>
            </do_else>
            <do_if value="$NewPhase">
              <set_value name="$Phase" exact="$NewPhase"/>
              <signal_cue_instantly cue="On_Phase_Change"/>
            </do_if>
            <remove_value name="$NewPhase"/>
          </actions>
        </library>

        <cue name="On_Phase_Change" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <do_if value="$Phase == 'prepare'">
              <!--Do nothing-->
            </do_if>
            <do_elseif value="$Phase == 'build'">
              <!-- Create 'invisible' station (We depend on the CV-AI to eventually come and start construction) -->
              <create_station name="$Station" sector="$Target" owner="$Faction" macro="$StationMacro" rawname="$StationRawName">
                <safepos value="$Position" includeplotbox="true"/>
              </create_station>
              <generate_loadout sequence="$ConstructionPlan" level="0.9" result="$Loadouts" faction="$Faction"/>
              <do_all exact="$Loadouts.count" counter="$l">
                <apply_loadout sequence="$ConstructionPlan" index="$l" loadout="$Loadouts.{$l}"  />
              </do_all>
              <remove_value name="$Loadouts"/>
              <set_value name="$RegistryTable.$Station" exact="$Station"/>
              <add_build_to_expand_station object="$Station.buildstorage" buildobject="$Station" constructionplan="$ConstructionPlan" result="$BuildID"/>
              <remove_value name="$ConstructionPlan"/>
              <debug_text text="$DebugText + 'Started construction of station ' + $Station.knownname + ' ' + $Station + ' - Build ID: ' + $BuildID" context="false" chance="$DebugChance"/>
              <do_if value="player.debugfilteractive.economy_verbose">
                <include_actions ref="GenerateDebugTextWithCueID"/>
                <!--curtime, output_id, goal_id, subgoal_id, object_name, object_idcode, sector_name, faction_id, enemy_faction_id-->
                <debug_text filter="economy_verbose" text="'#FL#;%1;CreateStation;%2;%3;%4;%5;%6;%7;%8'.[player.age, $DebugGoalText, $DebugText, $Station.knownname, $Station.idcode, $Target.knownname, $Faction.id, @$OwnerGoal.$EnemyFaction.id]" context="false"/>
              </do_if>
              <signal_cue cue="Station_Management"/>

              <include_actions ref="SetFindShipFocusSpace"/>

              <!-- TODO: @Owen - $Ships.count is always 0 -->
              <do_all exact="$Ships.count" counter="$i">
                <signal_cue_instantly cue="Set_Ship_Order" param="$Ships.{$i}"/>
              </do_all>

              <signal_cue_instantly cue="Force_Evaluation"/>
            </do_elseif>
          </actions>
        </cue>

        <cue name="Force_Evaluation" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$EvaluationDelay" exact="0s"/>
            <reset_cue cue="Evaluate"/>
          </actions>
        </cue>

        <library name="Validate_Requested_Ships">
          <actions>
            <do_all exact="$RequestedShips.count" counter="$i" reverse="true">
              <do_if value="not $RequestedShips.{$i}.isrealclass.ship">
                <assert value="false" text="'Requested ship is no longer valid. ID: ' + $RequestedShips.{$i} + ' - It should have been removed from this list by other means. [Owen]'" break="1"/>
                <signal_cue_instantly cue="Remove_Requested_Ship" param="$RequestedShips.{$i}"/>
              </do_if>
            </do_all>
          </actions>
        </library>

        <library name="SetFindShipFocusSpace">
          <actions>
            <set_value name="$FindShipFocusSpace" exact="null"/>
            <do_all exact="$FindShipSpaces.count" counter="$i">
              <do_if value="$Phase == 'prepare'">
                <do_if value="$EntryPoint">
                  <do_if value="$EntryPoint.hascontext.{$FindShipSpaces.{$i}}">
                    <set_value name="$FindShipFocusSpace" exact="$FindShipSpaces.{$i}"/>
                    <break/>
                  </do_if>
                  <do_else>
                    <do_if value="$Target== $FindShipSpaces.{$i} or $Target.hascontext.{$FindShipSpaces.{$i}}">
                      <set_value name="$FindShipFocusSpace" exact="$FindShipSpaces.{$i}"/>
                      <break/>
                    </do_if>
                  </do_else>
                </do_if>
              </do_if>
              <do_elseif value="$Phase == 'build'">
                <do_if value="$Target == $FindShipSpaces.{$i} or $Target.hascontext.{$FindShipSpaces.{$i}}">
                  <set_value name="$FindShipFocusSpace" exact="$FindShipSpaces.{$i}"/>
                  <break/>
                </do_if>
              </do_elseif>
            </do_all>
          </actions>
        </library>

        <!--Result saved to $RegistryTable.$EvaluationResult
        - 'unknown'    (subgoal is either initialising or in an erronious state)
        - 'preparing'  (subgoal is working within its desired timeframe and is attempting to ready itself to perform its task)
        - 'overtime'   (subgoal is working past its desired timeframe but expects it can be ready to perform its task)
        - 'failed'     (subgoal was unable to perform its task and should be dismissed)
        - 'performing' (subgoal is in its desired state)
        - 'achieved'   (subgoal has achieved construction the station)-->
        <cue name="Evaluate">
          <delay exact="$EvaluationDelay"/>
          <actions>
            <set_value name="$OldResult" exact="$EvaluationResult"/>
            <set_value name="$EvaluationResult" exact="'unknown'"/>

            <include_actions ref="Validate_Requested_Ships"/>

            <!--TODO @Owen remove $DesiredCVs. There should only really be a need for one.-->
            <!--TODO @Owen drop the pre-build phases as the CVs should only be active once wares are provided for the build?-->
            <do_if value="not $InStandby and $Ships.count + $RequestedShips.count lt $DesiredCVs and (not $Station or not $Station.buildstorage.buildmodule.constructionvessel)">

              <!--TODO @Owen Request goal for a suitable ship which may be spared-->
              <do_if value="$FindShipSpaces.count">
                <!--Always search in the $FindShipFocusSpace first, if it exists-->
                <do_all exact="$FindShipSpaces.count" counter="$i">
                  <do_if value="not $FindShipFocusSpace">
                    <do_if value="$i == 1">
                      <!--If there is no FocusSpace, just shuffle all spaces on the first iteration-->
                      <shuffle_list list="$FindShipSpaces"/>
                    </do_if>
                    <set_value name="this.$FindSpace" exact="$FindShipSpaces.{$i}"/>
                  </do_if>
                  <do_elseif value="$i == 1">
                    <!--Use the FocusSpace on the first iteration, no need to shuffle yet-->
                    <set_value name="this.$FindSpace" exact="$FindShipFocusSpace"/>
                  </do_elseif>
                  <do_else>
                    <do_if value="$i == 2">
                      <!--No suitable ship found in the FocusSpace, shuffle the space list and iterate over them-->
                      <shuffle_list list="$FindShipSpaces"/>
                    </do_if>
                    <do_if value="$FindShipSpaces.{$i} == $FindShipFocusSpace">
                      <!--As the first iteration dealt with $FindShipFocusSpace, if found in this iteration, actually use the first element-->
                      <set_value name="this.$FindSpace" exact="$FindShipSpaces.{1}"/>
                    </do_if>
                    <do_else>
                      <set_value name="this.$FindSpace" exact="$FindShipSpaces.{$i}"/>
                    </do_else>
                  </do_else>
                  <find_ship_by_true_owner name="$PotentialShips" faction="$Faction" commandeerable="true" primarypurpose="purpose.build" multiple="true" space="this.$FindSpace"/>

                  <set_value name="$NewShipCount" exact="0"/>
                  <shuffle_list list="$PotentialShips"/>
                  <do_all exact="$PotentialShips.count" counter="$k">
                    <set_value name="$Ship" exact="$PotentialShips.{$k}"/>
                    <add_to_group groupname="$Ships" object="$Ship"/>
                    <set_value name="$NewShipCount" operation="add"/>
                    <commandeer_object object="$Ship"/>

                    <debug_text text="$DebugText + ' commandeered ' + $Ship.knownname + ' ' + $Ship" context="false" chance="$DebugChance"/>

                    <signal_cue_instantly cue="Set_Ship_Order" param="$Ship"/>

                    <do_if value="$Ships.count + $RequestedShips.count ge $DesiredCVs">
                      <break/>
                    </do_if>

                  </do_all>

                  <debug_text text="$DebugText + 'found ' + $NewShipCount + ' ships in space: ' + this.$FindSpace.knownname" context="false" chance="$DebugChance2"/>

                  <!--<debug_text text="$DebugText + 'found ' + $NewShipCount + ' ships in space: ' + this.$FindSpace.knownname" context="false" chance="if $NewShipCount then $DebugChance2 else 0"/>-->

                  <!--secondary break out of the first loop-->
                  <do_if value="$Ships.count + $RequestedShips.count ge $DesiredCVs">
                    <break/>
                  </do_if>
                </do_all>
              </do_if>

              <do_if value="$Ships.count + $RequestedShips.count lt $DesiredCVs and $RequestedShips.count lt $AllowedShipRequests">
                <get_suitable_job result="$Suitable_Jobs" faction="$Faction" tags="[tag.factionlogic, tag.builder]" multiple="true"/>
                <!--#HACK @Owen for Xenon who don't currently have construction vessels-->
                <do_if value="$Faction != faction.xenon" chance="$DebugChance">
                  <debug_text text="$DebugText + $Suitable_Jobs.count + ' suitable jobs found'" context="false" chance="$DebugChance"/>
                </do_if>
                <do_if value="$Suitable_Jobs.count">
                  <set_value name="$SelectedJob" exact="$Suitable_Jobs.random"/>
                  <set_value name="$JobMainZone" exact="if $EntryPoint then $EntryPoint.zone else null"/>
                  <!--TODO @Owen, do we need a requester-->
                  <debug_text text="$DebugText + 'Requested job ship to be created. Job ' + $SelectedJob + '; Job zone: ' + $JobMainZone + ' ' + if $JobMainZone then $JobMainZone.knownname else 'none'" context="false" chance="$DebugChance"/>
                  <signal_cue_instantly cue="Request_Job_Ship" param="[$SelectedJob, $JobMainZone]"/>
                  <remove_value name="$SelectedJob"/>
                </do_if>
                <debug_text text="$DebugText + $RequestedShips.count + ' ships are currently requested'" context="false" chance="$DebugChance2"/>
              </do_if>
            </do_if>

            <do_if value="$StationConstructed">
              <set_value name="$EvaluationResult" exact="'achieved'"/>
            </do_if>
            <do_else>
              <do_if value="$Phase == 'build' and not $Station.exists">
                <set_value name="$EvaluationResult" exact="'failed'"/>
              </do_if>
              <do_else>
                <create_list name="$ArrivedShips"/>
                <do_all exact="$Ships.count" counter="$i">
                  <set_value name="$Ship" exact="$Ships.{$i}"/>
                  <do_if value="$Phase == 'prepare'">
                    <do_if value="not $EntryPoint or $Ship.sector == $EntryPoint.sector">
                      <append_to_list name="$ArrivedShips" exact="$Ship"/>
                    </do_if>
                  </do_if>
                  <do_elseif value="$Phase == 'build'">
                    <!--TODO @Owen should this be a check if the ship is connected to the construction?-->
                    <do_if value="$Ship.hascontext.{$Target}">
                      <append_to_list name="$ArrivedShips" exact="$Ship"/>
                    </do_if>
                  </do_elseif>
                </do_all>

                <do_if value="$ArrivedShips.count ge $DesiredCVs">
                  <set_value name="$EvaluationResult" exact="'performing'"/>
                </do_if>
                <do_elseif value="not $DesiredEndTime">
                  <set_value name="$EvaluationResult" exact="'preparing'"/>
                </do_elseif>
                <do_elseif value="not $InStandby and player.age gt $DesiredEndTime">
                  <!--Over the desired time-->
                  <do_if value="not $OverTime or player.age gt $OverTime">
                    <set_value name="$EvaluationResult" exact="'failed'"/>
                  </do_if>
                  <do_elseif value="$Ships.count ge $DesiredCVs">
                    <!--Give the ships time to get into position-->
                    <set_value name="$EvaluationResult" exact="'overtime'"/>
                  </do_elseif>
                  <do_else>
                    <!--Unlikely that the non-existant ships will make it in time-->
                    <set_value name="$EvaluationResult" exact="'failed'"/>
                  </do_else>
                </do_elseif>
                <do_else>
                  <set_value name="$EvaluationResult" exact="'preparing'"/>
                </do_else>
              </do_else>
            </do_else>

            <debug_text text="$DebugText + 'Evaluation result changed from ' + $OldResult + ' to ' + $EvaluationResult" context="false" chance="if $EvaluationResult == $OldResult then 0 else $DebugChance"/>

            <set_value name="$RegistryTable.$EvaluationResult" exact="$EvaluationResult"/>
            <assert value="$EvaluationResult != 'unknown'" text="'Subgoal is in an invalid state [Owen]'"/>
            <set_value name="$EvaluationDelay" min="10s" max="20s"/>
            <reset_cue cue="Evaluate"/>
          </actions>
        </cue>

        <!--Param: [$JobID, $JobMainZone] Request the job-engine to build a new ship for us, when completed commandeer and give order -->
        <cue name="Request_Job_Ship" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <request_job_ship name="this.$Requested_Job_Ship" job="event.param.{1}" requester="$Target" zone="event.param.{2}"/>
            <do_if value="this.$Requested_Job_Ship">
              <debug_text filter="economy_verbose" text="'#FLS#;%1;BuildStation_RequestShip;%2;%3;%4;%5;%6;%7;%8'.[player.age, [$OwnerGoal.static], this.$Requested_Job_Ship.knownname, this.$Requested_Job_Ship, this.$Requested_Job_Ship.idcode, $Target.knownname, $Faction.id, null]" context="false"/>
              <debug_text text="$DebugText + 'Requested ship ' + this.$Requested_Job_Ship + ' ' + this.$Requested_Job_Ship.knownname + ' ordered'" context="false" chance="$DebugChance"/>
              <append_to_list name="$RequestedShips" exact="this.$Requested_Job_Ship"/>
            </do_if>
            <do_else>
              <cancel_cue cue="Request_Job_Ship"/>
            </do_else>
          </actions>
          <cues>
            <!-- Called when a requested jobship finished construction -->
            <cue name="Requested_Job_Ship_Built">
              <conditions>
                <event_object_signalled object="parent.$Requested_Job_Ship" param="'build.shiptrader'" param2="'requested_ship_built'"/>
              </conditions>
              <actions>
                <debug_text filter="economy_verbose" text="'#FLS#;%1;BuildStation_ShipBuilt;%2;%3;%4;%5;%6;%7;%8'.[player.age, [$OwnerGoal.static], parent.$Requested_Job_Ship.knownname, parent.$Requested_Job_Ship, parent.$Requested_Job_Ship.idcode, $Target.knownname, $Faction.id, parent.$Requested_Job_Ship.sector.knownname]" context="false"/>
                <debug_text text="$DebugText + 'Requested ship ' + parent.$Requested_Job_Ship + ' ' + parent.$Requested_Job_Ship.knownname + ' built'" context="false" chance="$DebugChance"/>
                <add_to_group groupname="$Ships" object="parent.$Requested_Job_Ship"/>
                <remove_value name="$RequestedShips.{$RequestedShips.indexof.{parent.$Requested_Job_Ship}}"/>
                <set_requested_job_ship_timeout ship="parent.$Requested_Job_Ship" timeout="player.age + 2h"/>
                <commandeer_object object="parent.$Requested_Job_Ship"/>
                <signal_cue_instantly cue="Set_Ship_Order" param="parent.$Requested_Job_Ship"/>
                <cancel_cue cue="Request_Job_Ship"/>
              </actions>
            </cue>
            <!-- Called when a requested jobship was destroyed (while being built in shipyard) -->
            <cue name="Requested_Job_Ship_Destroyed">
              <conditions>
                <event_object_destroyed object="parent.$Requested_Job_Ship"/>
              </conditions>
              <actions>
                <remove_value name="$RequestedShips.{$RequestedShips.indexof.{parent.$Requested_Job_Ship}}"/>
                <cancel_cue cue="Request_Job_Ship"/>
              </actions>
            </cue>
            <!-- Called when jobship-order was cancelled -->
            <cue name="Requested_Job_Ship_Unregistered">
              <conditions>
                <event_cue_signalled cue="Remove_Requested_Ship"/>
                <check_value value="event.param == parent.$Requested_Job_Ship"/>
              </conditions>
              <actions>
                <debug_text filter="economy_verbose" text="'#FLS#;%1;BuildStation_RemoveRequest;%2;%3;%4;%5;%6;%7;%8'.[player.age, [$OwnerGoal.static], parent.$Requested_Job_Ship.knownname, parent.$Requested_Job_Ship, parent.$Requested_Job_Ship.idcode, $Target.knownname, $Faction.id, null]" context="false"/>
                <cancel_cue cue="Request_Job_Ship"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <!-- Param: [event.param == ship] Cancel request for construction of JobShip -->
        <cue name="Remove_Requested_Ship">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <remove_value name="$RequestedShips.{$RequestedShips.indexof.{event.param}}"/>
          </actions>
        </cue>

        <!--TODO: @Owen, not used? (part of the CV's ai-behaviour is to look for stations needing construction) -->
        <cue name="Set_Ship_Order" instantiate="true">
          <conditions>
            <event_cue_signalled/>
            <check_value value="event.param.exists" comment="$OrderShip"/>
          </conditions>
          <actions>
            <!--TODO @Owen fallback orders-->
            <set_value name="this.$OrderShip" exact="event.param"/>
            <debug_text text="$DebugText + 'Attempting to find order for ' + this.$OrderShip + ' ' + this.$OrderShip.knownname" context="false" chance="$DebugChance2"/>

            <!--TODO @Owen - improve - use more orders at different phases?-->

            <do_if value="$Phase == 'prepare'">
              <do_if value="$EntryPoint">
                <create_position name="this.$Position" object="$EntryPoint.zone" value="$EntryPointPosition" space="$EntryPoint.sector"/>
                <create_order id="'MoveWait'" object="this.$OrderShip" default="true">
                  <param name="destination" value="[$EntryPoint.sector, this.$Position]"/>
                  <param name="withdraw" value="true"/>
                </create_order>
              </do_if>
              <do_else>
                <!--TODO: Find better position if entry point was not defined-->
                <create_position name="this.$Position" object="$Target" value="$Position" min="5km" max="10km"/>
                <create_order id="'MoveWait'" object="this.$OrderShip" default="true">
                  <param name="destination" value="[$Target, this.$Position]"/>
                  <param name="withdraw" value="true"/>
                </create_order>
              </do_else>
            </do_if>
            <do_elseif value="$Phase == 'build'">
              <do_if value="$Station.exists">
                <debug_text text="'Ordering ' + this.$OrderShip + ' ' + this.$OrderShip.knownname + ' to build ' + $Station.knownname" chance="$DebugChance"/>
                <create_order id="'DeployToStation'" name="$BuildOrder" object="this.$OrderShip" immediate="true">
                  <param name="station" value="$Station"/>
                </create_order>
                <append_to_list name="$BuildOrders" exact="$BuildOrder"/>
              </do_if>
              <do_else>
                <!--TODO @Owen what to do if the station does not exist in this phase-->
              </do_else>
            </do_elseif>

          </actions>
        </cue>

        <cue name="Ship_Order_Ended" instantiate="true">
          <conditions>
            <check_any>
              <event_object_order_cancelled group="$Ships" immediate="true"/>
              <event_object_order_finished group="$Ships"/>
            </check_any>
            <check_value value="$BuildOrders.indexof.{event.param}"/>
          </conditions>
          <actions>
            <debug_text text="$DebugText + 'Releasing ' + event.object + ' ' + event.object.knownname + ' due to ' + event.name" context="false" chance="$DebugChance"/>
            <do_if value="event.object.isoperational">
              <release_commandeered_object object="event.object"/>
            </do_if>
            <remove_from_group group="$Ships" object="event.object"/>
            <remove_value name="$BuildOrders.{$BuildOrders.indexof.{event.param}}"/>
          </actions>
        </cue>

        <cue name="Ship_Changed_Owner" instantiate="true">
          <conditions>
            <check_any>
              <event_object_changed_owner group="$Ships"/>
            </check_any>
          </conditions>
          <actions>
            <release_commandeered_object object="event.object"/>
            <remove_from_group group="$Ships" object="event.object"/>
          </actions>
        </cue>

        <cue name="Station_Management">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--TODO @Owen better check the different stages of building. e.g first module, last module-->
            <set_value name="$StationConstructed" exact="false"/>
            <do_if value="$Station.exists">

            </do_if>
            <do_else>
              <!--TODO @Owen This assert fired after an old savegame was loaded. Check-->
              <assert value="$Station.exists" text="'Station does not exist. This cue should not have been signalled. [Owen]'"/>
              <reset_cue cue="this"/>
            </do_else>
          </actions>
          <cues>

            <!-- first module being built (CV-AI decided it's going to work on this station, it reached the station and started construction) -->
            <cue name="Station_UnderConstruction" comment="not instantiated intentionally, so it triggers only once - even if multiple modules are being built!">
              <conditions>
                <event_build_started object="$Station.buildstorage"/>
              </conditions>
              <actions>
                <do_if value="$Station.sector.isknown and ((not namespace.static.$subgoal_lastnotification?) or (player.age gt namespace.static.$subgoal_lastnotification + 60s))">
                  <substitute_text text="$reason" source="{30004,8301}" comment="$FACTION$ station under construction in $DESTINATION$">
                    <replace string="'$FACTION$'" with="$Faction.name"/>
                    <replace string="'$DESTINATION$'" with="$Station.sector.knownname"/>
                  </substitute_text>
                  <do_if value="md.$DebuggingNotifications">
                    <set_value name="$reason" exact="$reason + '\n' + $DebugText + ' phase=' + $Phase + ' station: ' + $Station.knownname + ' sector: ' + $Station.sector.knownname"/>
                  </do_if>
                  <signal_cue_instantly cue="md.GenericMissions.GenericNewsLogbookEntry" param="['', {1015,301}, $reason]"/>
                  <set_value name="namespace.static.$subgoal_lastnotification" exact="player.age"/>
                </do_if>
                <do_if value="player.debugfilteractive.economy_verbose">
                  <include_actions ref="GenerateDebugTextWithCueID"/>
                  <!--curtime, output_id, goal_id, subgoal_id, object_name, object_idcode, sector_name, faction_id, enemy_faction_id-->
                  <debug_text filter="economy_verbose" text="'#FL#;%1;StationStartedConstruction;%2;%3;%4;%5;%6;%7;%8'.[player.age, $DebugGoalText, $DebugText, $Station.knownname, $Station.idcode, $Target.knownname, $Faction.id, @$OwnerGoal.$EnemyFaction.id]" context="false"/>
                </do_if>
              </actions>
            </cue>

            <cue name="Station_Destroyed">
              <conditions>
                <event_object_destroyed object="$Station"/>
              </conditions>
              <actions>
                <!--TODO @Owen - better notification conditions-->
                <do_if value="$Station.sector.isknown" comment="should be rare enough not to need a time-trigger-limitation">
                  <substitute_text text="$reason" source="{30004,8303}" comment="station was destroyed">
                    <replace string="'$FACTION$'" with="$Faction.name"/>
                    <replace string="'$DESTINATION$'" with="$Station.sector.knownname"/>
                  </substitute_text>
                  <do_if value="md.$DebuggingNotifications">
                    <set_value name="$reason" exact="$reason + '\n' + $DebugText + ' phase=' + $Phase + ' station: ' + $Station.knownname + ' sector: ' + $Station.sector.knownname"/>
                  </do_if>
                  <signal_cue_instantly cue="md.GenericMissions.GenericNewsLogbookEntry" param="['', {1015,301}, $reason]"/>
                </do_if>

                <set_value name="$Station" exact="null"/>
                <do_all exact="$Ships.count" counter="$i">
                  <signal_cue_instantly cue="Set_Ship_Order" param="$Ships.{$i}"/>
                </do_all>
                <reset_cue cue="Station_Management"/>
                <!--TODO @Owen put this goal into a failed state?-->
              </actions>
            </cue>

            <!-- first module finished building -->
            <cue name="Station_Completed">
              <conditions>
                <event_build_finished object="$Station.buildstorage"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + player.age + ': Station ' + $Station.knownname + ' ' + $Station + ' has finished building.'" context="false" chance="$DebugChance"/>
                <set_value name="$StationConstructed" exact="true"/>

                <do_if value="$Station.sector.isknown" comment="should be rare enough not to need a time-trigger-limitation">
                  <substitute_text text="$reason" source="{30004,8302}" comment="Construction of Enemy station was completed">
                    <replace string="'$FACTION$'" with="$Faction.name"/>
                    <replace string="'$DESTINATION$'" with="$Station.sector.knownname"/>
                  </substitute_text>
                  <do_if value="md.$DebuggingNotifications">
                    <set_value name="$reason" exact="$reason + '\n' + $DebugText + ' phase=' + $Phase + ' station: ' + $Station.knownname + ' sector: ' + $Station.sector.knownname"/>
                  </do_if>
                  <signal_cue_instantly cue="md.GenericMissions.GenericNewsLogbookEntry" param="['', {1015,301}, $reason]"/>
                </do_if>

                <do_if value="player.debugfilteractive.economy_verbose">
                  <include_actions ref="GenerateDebugTextWithCueID"/>
                  <!--curtime, output_id, goal_id, cue_id, object_name, object_idcode, sector_name, faction_id, enemy_faction_id-->
                  <debug_text filter="economy_verbose" text="'#FL#;%1;StationComplete;%2;%3;%4;%5;%6;%7;%8'.[player.age, $DebugGoalText, $DebugText, $Station.knownname, $Station.idcode, $Target.knownname, $Faction.id, @$OwnerGoal.$EnemyFaction.id]" context="false"/>
                </do_if>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="Cleanup">
          <conditions>
            <check_any>
              <event_cue_cancelled cue="$OwnerGoal"/>
              <event_cue_signalled/>
              <!-- NOTE: if other conditions are added, check whether $OwnerGoal needs to be signalled with remove_subgoal to avoid dead entries in the $RegistryTable! -->
            </check_any>
          </conditions>
          <actions>
            <do_if value="$Ships.count">
              <do_if value="event.name == 'event_cue_signalled' and @event.param.{1} and $OwnerStandbyShipsTable and $OwnerGoal.exists">
                <!--This list ref is passed to the goal when attempting to add a standby ship to it. If successful, the element at index 1 will be set to true. If not, release the ship for safety.-->
                <set_value name="this.$ResultFeedbackList" exact="[false]"/>
                <do_all exact="$Ships.count" counter="$i">
                  <signal_cue_instantly cue="$OwnerGoal" param="['add_standby_ship', $Ships.{$i}, this.$ResultFeedbackList]"/>
                  <do_if value="this.$ResultFeedbackList.{1}">
                    <set_value name="this.$ResultFeedbackList.{1}" exact="false"/>
                  </do_if>
                  <do_else>
                    <assert value="this.$ResultFeedbackList.{1}" text="'Attempted to add ship as a faction goal standby ship but it was rejected [Owen]'" break="1"/>
                    <release_commandeered_object object="$Ships.{$i}"/>
                  </do_else>
                </do_all>
              </do_if>
              <do_else>
                <do_all exact="$Ships.count" counter="$i">
                  <debug_text text="$DebugText + '%1 resuming prior orders.'.[$Ships.{$i}.knownname]" context="false" chance="$DebugChance"/>
                  <!--May not immediatly remove the build order if still in a critical order-->
                  <release_commandeered_object object="$Ships.{$i}"/>
                </do_all>
              </do_else>
            </do_if>

            <do_all exact="$RequestedShips.count" counter="$i">
              <!--Requested ship being built-->
              <debug_text text="$DebugText + 'Removing requested ship ' + $RequestedShips.{$i} + ' ' + $RequestedShips.{$i}.knownname" context="false" chance="$DebugChance"/>
              <do_if value="$RequestedShips.{$i}.exists">
                <!--TODO @Owen - recycle?-->
                <set_requested_job_ship_timeout ship="$RequestedShips.{$i}" timeout="player.age"/>
              </do_if>
              <do_else>
                <remove_job_ship_request ship="$RequestedShips.{$i}"/>
              </do_else>
            </do_all>

            <do_if value="$EvaluationResult == 'failed'">
              <!--TODO @Owen check if a build is currently happening. Have the build storage recycle the station?-->
              <do_if value="$Station.exists">
                <debug_text text="$DebugText + 'Failed. Removing station ' + $Station.knownname + ' ' + $Station" context="false" chance="$DebugChance"/>
                <destroy_object object="$Station.buildstorage"/>
                <destroy_object object="$Station"/>
              </do_if>
            </do_if>

            <do_if value="player.debugfilteractive.economy_verbose">
              <include_actions ref="GenerateDebugTextWithCueID"/>
              <!--curtime, output_id, goal_id, subgoal_id, object_name, object_idcode, sector_name, faction_id, enemy_faction_id-->
              <debug_text filter="economy_verbose" text="'#FL#;%1;Cleanup;%2;%3;%4;%5;%6;%7;%8'.[player.age, $DebugGoalText, $DebugText, null, null, $Target.knownname, $Faction.id, @$OwnerGoal.$EnemyFaction.id]" context="false"/>
            </do_if>

            <do_if value="event.name != 'event_cue_cancelled'">
              <signal_cue_instantly cue="$OwnerGoal" param="['remove_subgoal', $RegistryTable]"/>
            </do_if>
            <cancel_cue cue="Start"/>
          </actions>
        </cue>
      </cues>
    </cue>

    <library name="GenerateDebugTextWithCueID">
      <actions>
        <!--Simply want the cue instance ID to help differentiate in debug texts. Remove the cue path. @Klaus, please don't kill me-->
        <set_value name="$CueInstanceString" exact="'' + [namespace]"/>
        <substitute_text source="$CueInstanceString" text="$DebugID">
          <replace string="'md.'" with="''"/>
          <replace string="'.Start'" with="''"/>
          <replace string="'['" with="''"/>
          <replace string="']'" with="''"/>
        </substitute_text>
        <set_value name="$DebugText" exact="'(' + $Faction.id + ') ' + $DebugID + ': ' + $StationMacro.id + ' in ' + $Target.knownname + ' ' + $Target"/>
        <remove_value name="$DebugID"/>

        <!--Also get the cue ID of the goal-->
        <set_value name="$CueInstanceString" exact="'' + [$OwnerGoal]"/>
        <substitute_text source="$CueInstanceString" text="$DebugGoalText">
          <replace string="'md.'" with="''"/>
          <replace string="'.Start'" with="''"/>
          <replace string="'['" with="''"/>
          <replace string="']'" with="''"/>
        </substitute_text>
        <remove_value name="$CueInstanceString"/>
      </actions>
    </library>
  </cues>
</mdscript>