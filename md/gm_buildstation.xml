<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GM_BuildStation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>

    <!--Base Mission information-->
    <!--
    Generic Mission name:    Build specified station - intended for Master Missions
    Primary 'missiontype':   e.g missiontype.deliver
    -->

    <!--The Feedback Manager contains a table of feedback values related to this Generic Mission. 
		This table is 'const' during the mission (the table itself doesn't change anymore after inialization)

	There are several maintypes of feedback:
    event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
    removed:  The mission offer was removed before acceptance
    success:  The mission was successfully completed by the player
    failure:  The player failed the mission
    error:    Something went wrong with the mission set-up or during the mission-->
    <cue name="FeedbackValueManager" namespace="this" version="3">
      <actions>
        <set_value name="$FeedbackValues" exact="table[
                   $MISSION_GENERATED           = table[$type = 'event',    $text = 'Mission variation generated successfully'],
                   $MISSION_ACCEPTED            = table[$type = 'event',    $text = 'Mission accepted'],
                   $MISSION_NO_VARIANT          = table[$type = 'event',    $text = 'No mission variant currently possible'],
                   
                   $OFFER_REMOVED               = table[$type = 'removed',  $text = 'Offer removed'],
                   $DECLINED_OFFER              = table[$type = 'removed',  $text = 'Player declined Event Offer'],
                   $EVENT_OFFER_TIMEOUT         = table[$type = 'removed',  $text = 'Event Offer timeout'],
                   $SIGNAL_LEAK_REMOVED         = table[$type = 'removed',  $text = 'Signal leak offer removed'],
                   
                   $MISSION_SUCCEEDED           = table[$type = 'success',  $text = 'Mission succeeded'],
                   
                   $MISSION_ABORTED             = table[$type = 'failure',  $text = 'Mission aborted by player'],
                   $FORCED_CLEANUP              = table[$type = 'failure',  $text = 'Forced to end from outside'],
                   $MISSION_TIMEOUT             = table[$type = 'failure',  $text = 'Mission timeout'],
                   $BUILD_RML_FAILED            = table[$type = 'failure',  $text = 'RML_BuildStation failed'],
                   
                   $NO_VALID_CLIENT_OWNER       = table[$type = 'error',    $text = 'No valid ClientOwner parameter provided'],
                   $INVALID_OFFER_TYPE          = table[$type = 'error',    $text = 'No offer parameters were valid'],
                   $NO_TEXT_OFFSET              = table[$type = 'error',    $text = 'No TextOffset set'],
                   $INVALID_LOCATION_PARAM      = table[$type = 'error',    $text = 'Invalid StationLocation param'],
                   $INVALID_PLOTSIZE_PARAM      = table[$type = 'error',    $text = 'Invalid Plotsize param'],
                   $INVALID_STATIONSPECS_PARAM  = table[$type = 'error',    $text = 'Invalid StationSpecs param'],
                   $INVALID_FACTION_PARAM       = table[$type = 'error',    $text = 'Invalid Faction param'],
                   $INVALID_FORCE_CLEANUP       = table[$type = 'error',    $text = 'ForceCleanup cue invalid']
                   ]"/>
      </actions>
      <patch sinceversion="3">
        <!--To patch new feedback values, increment 'version' and 'sinceversion' number-->
        <force_cue cue="FeedbackValueManager"/>
      </patch>
    </cue>

    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternatively, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname
        2 = $TextTable.$description
        3 = $TextTable.$objective1 (deprecated)
        4 = $TextTable.$objective2
        5 = $TextTable.$objective3
        6 = $TextTable.$objective4 (deprecated)
        -->
        <set_value name="$TextTable.$missionname" exact="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100"/>
        <!--set_value name="$TextTable.$description" exact="readtext.{$Page}.{$TextOffset + 2}" chance="if $TextTable.$description? then 0 else 100"/-->
        <!--<set_value name="$TextTable.$objective1"   exact="readtext.{$Page}.{$TextOffset + 3}" chance="if $TextTable.$objective1? then 0 else 100"/>-->
        <set_value name="$TextTable.$objective2"   exact="readtext.{$Page}.{$TextOffset + 4}" chance="if $TextTable.$objective2? then 0 else 100"/>
        <set_value name="$TextTable.$objective3"   exact="readtext.{$Page}.{$TextOffset + 5}" chance="if $TextTable.$objective3? then 0 else 100"/>
        <!--set_value name="$TextTable.$objective4"   exact="readtext.{$Page}.{$TextOffset + 6}" chance="if $TextTable.$objective4? then 0 else 100"/-->

        <run_actions ref="ConstructRequirementsText" result="$RequirementsText">
          <param name="PlotSector"              value="$PlotSector" />
          <param name="PlotSize"                value="$PlotSize" />
          <param name="StationSpecs"            value="$StationSpecs" />
          <param name="DestinationDBString"     value="readtext.{$Page}.{$TextOffset + 7}" />
        </run_actions>

        <set_value name="$TextTable.$description" exact="readtext.{$Page}.{$TextOffset + 2}" chance="if $TextTable.$description? then 0 else 100"/>
        <set_value name="$TextTable.$description" exact="$TextTable.$description + '\n\n' + $RequirementsText"/>

        <do_if value="$DefenceStation">
          <set_value name="$TextTable.$description" exact="$TextTable.$description + '\n\n' + {30120, 300}"/>
        </do_if>

      </actions>
    </library>

    <!--Text Construction moved to seperate libraries to allow precise text generation for plot purposes-->
    <library name="ConstructRequirementsText" purpose="run_actions">
      <params>
        <param name="PlotSector"/>
        <param name="PlotSize"/>
        <param name="StationSpecs"/>
        <param name="DestinationDBString"/>
      </params>
      <actions>

        <run_actions ref="GeneratePlotSizeText" result="$PlotSizeText">
          <param name="PlotSize" value="$PlotSize"/>
        </run_actions>

        <run_actions ref="GenerateDestinationString" result="$DestinationString">
          <param name="PlotSector"          value="$PlotSector"/>
          <param name="DestinationDBString" value="$DestinationDBString" />
        </run_actions>

        <run_actions ref="GenerateConstructsText" result="$ConstructsText">
          <param name="StationSpecs" value="$StationSpecs"/>
        </run_actions>

        <run_actions ref="GenerateProductionsText" result="$ProductionsText">
          <param name="StationSpecs" value="$StationSpecs"/>
        </run_actions>

        <run_actions ref="GenerateStorageText" result="$StorageText">
          <param name="StationSpecs" value="$StationSpecs"/>
        </run_actions>

        <run_actions ref="AssembleRequirementsText" result="$RequirementsText">
          <param name="ConstructsText"    value="$ConstructsText"/>
          <param name="ProductionsText"   value="$ProductionsText"/>
          <param name="StorageText"       value="$StorageText"/>
          <param name="PlotSizeText"      value="$PlotSizeText"/>
          <param name="DestinationString" value="$DestinationString"/>
        </run_actions>

        <return value="$RequirementsText"/>
      </actions>
    </library>

    <library name="GeneratePlotSizeText" purpose="run_actions">
      <params>
        <param name="PlotSize"/>
      </params>
      <actions>
        <set_value name="$PlotSizeText" exact="''"/>
        
        <do_if value="($PlotSize.x gt 1) and ($PlotSize.y gt 1) and ($PlotSize.z gt 1)" comment="don't show, if default/minimum plot-size">
          <substitute_text text="$PlotSizeText" source="{30004, 2010}" comment="Minimum plot size: $X$ x $Y$ x $Z$ km">
            <replace string="'$X$'"     with="$PlotSize.x / 1000.0"/>
            <replace string="'$Y$'"     with="$PlotSize.y / 1000.0"/>
            <replace string="'$Z$'"     with="$PlotSize.z / 1000.0"/>
          </substitute_text>
        </do_if>
        <return value="$PlotSizeText"/>
      </actions>
    </library>

    <library name="GenerateDestinationString" purpose="run_actions">
      <params>
        <param name="PlotSector"/>
        <param name="DestinationDBString"/>
      </params>
      <actions>
        <substitute_text text="$DestinationString" source="$DestinationDBString">
          <replace string="'$DESTINATION$'"     with="$PlotSector.knownname"/>
        </substitute_text>
        <return value="$DestinationString"/>
      </actions>
    </library>

    <library name="GenerateConstructsText" purpose="run_actions">
      <params>
        <param name="StationSpecs"/>
      </params>
      <actions>
        <set_value name="$ConstructsText" exact="null" comment="Required constructs:"/>
       
        <set_value name="this.$UsedNames" exact="[]"/>
        <do_if value="$StationSpecs.$containedmacros? and $StationSpecs.$containedmacros.count">
          <do_all exact="$StationSpecs.$containedmacros.count" counter="$gtt_i">
            <set_value name="this.$MacroDef" exact="$StationSpecs.$containedmacros.{$gtt_i}"/>
            <do_if value="this.$MacroDef.{1} gt 0" comment="Check that the definition wants a positive amount">
              <assert value="typeof this.$MacroDef.{2} == datatype.macro" text="'Invalid macro definition. ' + this.$MacroDef.{2} + ' is not a macro.'"/>
              <do_if value="typeof this.$MacroDef.{2} == datatype.macro">
                <do_if value="$ConstructsText">
                  <set_value name="$ConstructsText" exact="$ConstructsText + ','"/>
                </do_if>
                <do_else>
                  <set_value name="$ConstructsText" exact="{30004, 2001}"/>
                </do_else>
                <set_value name="$ConstructsText" exact="$ConstructsText + ' ' + this.$MacroDef.{1} + ' x ' + this.$MacroDef.{2}.name"/>
                <assert value="not this.$UsedNames.indexof.{this.$MacroDef.{2}.name}" text="'A macro with name ' + this.$MacroDef.{2}.name + ' was already used as a build specification for this mission. Avoid specifiying macros which share names. [Owen]'"/>
                <append_to_list name="this.$UsedNames" exact="this.$MacroDef.{2}.name"/>
              </do_if>
            </do_if>
          </do_all>
        </do_if>

        <do_if value="$StationSpecs.$containedclasses? and $StationSpecs.$containedclasses.count">
          <do_all exact="$StationSpecs.$containedclasses.count" counter="$gtt_i">
            <set_value name="this.$ClassDef" exact="$StationSpecs.$containedclasses.{$gtt_i}"/>
            <do_if value="this.$ClassDef.{1} gt 0" comment="Check that the definition wants a positive amount">
              <assert value="typeof this.$ClassDef.{2} == datatype.class" text="'Invalid class definition. ' + this.$ClassDef.{2} + ' is not a class.'"/>
              <do_if value="typeof this.$ClassDef.{2} == datatype.class">
                <do_if value="$ConstructsText">
                  <set_value name="$ConstructsText" exact="$ConstructsText + ','"/>
                </do_if>
                <do_else>
                  <set_value name="$ConstructsText" exact="{30004, 2001}"/>
                </do_else>
                <do_if value="this.$ClassDef.{1} == 1">
                  <!--Singular-->
                  <set_value name="$ConstructsText" exact="$ConstructsText + ' ' + this.$ClassDef.{1} + ' x ' + this.$ClassDef.{3}"/>
                </do_if>
                <do_else>
                  <!--Multiple-->
                  <set_value name="$ConstructsText" exact="$ConstructsText + ' ' + this.$ClassDef.{1} + ' x ' + this.$ClassDef.{4}"/>
                </do_else>
              </do_if>
            </do_if>
          </do_all>
        </do_if>

        <return value="$ConstructsText"/>
      </actions>
    </library>

    <library name="GenerateProductionsText" purpose="run_actions">
      <params>
        <param name="StationSpecs"/>
      </params>
      <actions>
        <set_value name="$ProductionsText" exact="null" comment="Productions:"/>
        
        <do_if value="$StationSpecs.$products? and $StationSpecs.$products.count">
          <do_all exact="$StationSpecs.$products.count" counter="$gtt_i">
            <set_value name="this.$ProductDef" exact="$StationSpecs.$products.{$gtt_i}"/>
            <do_if value="this.$ProductDef.{1} gt 0" comment="Check that the definition wants a positive amount">
              <assert value="typeof this.$ProductDef.{2} == datatype.ware" text="'Invalid product definition. ' + this.$ProductDef.{2} + ' is not a ware.'"/>
              <do_if value="typeof this.$ProductDef.{2} == datatype.ware">
                <do_if value="$ProductionsText">
                  <set_value name="$ProductionsText" exact="$ProductionsText + ','"/>
                </do_if>
                <do_else>
                  <set_value name="$ProductionsText" exact="{30004, 2002}"/>
                </do_else>
                <set_value name="$ProductionsText" exact="$ProductionsText + ' ' + this.$ProductDef.{1} + ' x ' + this.$ProductDef.{2}.name"/>
              </do_if>
            </do_if>
          </do_all>
        </do_if>
        <return value="$ProductionsText"/>
      </actions>
    </library>

    <library name="GenerateStorageText" purpose="run_actions">
      <params>
        <param name="StationSpecs"/>
      </params>
      <actions>
        <set_value name="$StorageText" exact="null"/>
        
        <do_if value="$StationSpecs.$solidstorage? and (typeof $StationSpecs.$solidstorage).isnumeric and $StationSpecs.$solidstorage gt 0">
          <set_value name="$StorageText" exact="{30004, 2003} + ' ' + $StationSpecs.$solidstorage"/>
        </do_if>

        <do_if value="$StationSpecs.$containerstorage? and (typeof $StationSpecs.$containerstorage).isnumeric and $StationSpecs.$containerstorage gt 0">
          <do_if value="$StorageText">
            <set_value name="$StorageText" exact="$StorageText + '\n'"/>
          </do_if>
          <do_else>
            <set_value name="$StorageText" exact="''"/>
          </do_else>
          <set_value name="$StorageText" exact="$StorageText + {30004, 2004} + ' ' + $StationSpecs.$containerstorage"/>
        </do_if>

        <do_if value="$StationSpecs.$liquidstorage? and (typeof $StationSpecs.$liquidstorage).isnumeric and $StationSpecs.$liquidstorage gt 0">
          <do_if value="$StorageText">
            <set_value name="$StorageText" exact="$StorageText + '\n'"/>
          </do_if>
          <do_else>
            <set_value name="$StorageText" exact="''"/>
          </do_else>
          <set_value name="$StorageText" exact="$StorageText + {30004, 2005} + ' ' + $StationSpecs.$liquidstorage"/>
        </do_if>
        <return value="$StorageText"/>
      </actions>
    </library>

    <library name="AssembleRequirementsText" purpose="run_actions">
      <params>
        <param name="ConstructsText"  default="null"/>
        <param name="ProductionsText" default="null"/>
        <param name="StorageText"     default="null"/>
        <param name="PlotSizeText"    />
        <param name="DestinationString"/>
      </params>
      <actions>
        <set_value name="$RequirementsText" exact="$DestinationString + '\n' + $PlotSizeText"/>

        <do_if value="$ConstructsText">
          <set_value name="$RequirementsText" exact="$RequirementsText + '\n' + $ConstructsText"/>
        </do_if>

        <do_if value="$ProductionsText">
          <do_if value="$RequirementsText">
            <set_value name="$RequirementsText" exact="$RequirementsText + '\n'"/>
          </do_if>
          <do_else>
            <set_value name="$RequirementsText" exact="''"/>
          </do_else>
          <set_value name="$RequirementsText" exact="$RequirementsText + $ProductionsText"/>
        </do_if>

        <do_if value="$StorageText">
          <do_if value="$RequirementsText">
            <set_value name="$RequirementsText" exact="$RequirementsText + '\n'"/>
          </do_if>
          <do_else>
            <set_value name="$RequirementsText" exact="''"/>
          </do_else>
          <set_value name="$RequirementsText" exact="$RequirementsText + $StorageText"/>
        </do_if>
        <return value="$RequirementsText"/>
      </actions>
    </library>

    <library name="Start" version="2">
      <params>
        <!-- TODO: For creating your own custom GM, you might need to change _some_ of the below parameters -->
        <param name="OfferObject" default="null" comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client" default="null" comment="Pre-existing client"/>
        <param name="ClientOwner" default="null" comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionCue" default="null" comment="Cue the mission is attached to. Defaults to Start (this)."/>
        <param name="MissionThread" default="null" comment="Mission thread for the offer and mission"/>

        <param name="GenerateReward" default="true" comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr" default="null" comment="If the reward for this mission is credits, the number of credits should be set to this variable." />
        <param name="RewardObj" default="null" comment="If the reward for this mission is not credits, and is an object, it should be set to this variable." />
        <param name="RewardNotoriety" default="null"/>
        <param name="RewardText" default="null"  comment="Any text needed to define the reward for this mission - may be used in conjunction with $RewardCr and $RewardObj." />
        <param name="MissionDuration" default="null"/>
        <param name="MissionType" default="missiontype.build" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"/>
        <param name="Difficulty"/>

        <!--Offer location and conversation-->
        <param name="WithoutOffer" default="false" comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue" default="null" comment="Do not create a mission offer but wait for this cue to be completed before running the mission"/>
        <param name="DeclineButton" default="true" comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer" default="false" comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer" default="false" comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue" default="null" comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance" default="null"/>
        <param name="HideFromBBS" default="false" comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange" default="true"/>
        <param name="OfferDistance" default="50km" comment="Distance to the offer location before it becomes visible on the map or BBS (unless otherwise hidden)"/>

        <!--BBS only params-->
        <param name="BBSObject" default="null"/>
        <param name="BBSDistance" default="null"/>
        <param name="BBSTimeoutMin" default="null"/>
        <param name="BBSTimeoutMax" default="null"/>
        <param name="BBSSpace"      default="null"/>

        <!--Mission text-->
        <param name="Page"        comment="Allows a different text page to be used instead of the generic one. Text IDs must be mapped similarly."/>
        <param name="TextOffset"  comment="The text offset for this variant's text on the page.
               Each variant starts at a different offset, but the entries[] within that offset have to match for all variants."/>
        <param name="TextTable" default="table[]" comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi'
               Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>

        <!-- Optional mission setup overrides -->
        <param name="PlotSector"                                        comment="Where to claim the plot"/>
        <param name="PlotOffset"                                        comment="Where to claim the plot"/>
        <param name="PlotRange"       default="10km"                    comment="How far away from PlotLocation do we accept"/>
        <param name="PlotSize"        default="vector.[1km, 1km, 1km]"  comment="How large should the plot be in x/y/z"/>
        <param name="Faction"                                           comment="The faction which asked us to build a station"/>
        <param name="DefenceStation"  default="false"                   comment="For potential additional briefing text"/>
        <param name="StationSpecs"                                      comment="Table containing the specifications of the station:"/>
        <!--StationSpecs table: Contains lists of specifications under keys:
        $products = [ [wantedamount, productware] ]
        $containedmacros = [ [wantedamount, containedmacro] ]
        $containedclasses = [ [wantedamount, containedclass, singuartext, pluraltext] ]
        $solidstorage = <int>
        $containerstorage = <int>
        $liquidstorage = <int>
        
        e.g. table[ $products = [[2, ware.energycells], [1, ware.foodrations]], $containedmacros = [[1, macro.storage_tel_m_container_01_macro], [2, macro.storage_arg_m_container_01_macro]], $containedclasses = [[5, class.turret, 'Turret', 'Turrets']], $containerstorage = 123 ]
        ***WARNING***
        When specifying $containedmacros, do not use macros which may share names with other macros e.g. Solid Storage M. In general, $containedmacros should only be used for very specific situations-->

        <!--Result variables-->
        <param name="ResultTable" default="null" comment="Result keys:
               $BuiltStation = (component) The built station"/>

        <param name="ReportSignalCue" default="null" comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue" default="null" comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup" default="null" comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance" default="0"/>
      </params>
      <actions>
        <!--Feedback value setup-->
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GM_BuildStation.FeedbackValueManager"/>

        <assert value="$WithoutOffer or not $MissionCue or (not $MissionCue.hasmission and not $MissionCue.hasmissionoffer)"
                text="'Mission is set to create an offer but provided MissionCue: ' + $MissionCue + ' already has an offer or is a running mission [Owen]'"/>

        <assert value="not $MissionThread or $WithoutOffer" text="'Thread sub-mission is also set to create an offer which is not supported.\n
                The mission thread offer should be populated with mission details suitable for this mission, but not from an actual mission. Thread: ' + $MissionThread + ' [Owen]'"/>

        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>

        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [Owen]'"/>
            </do_if>

            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
            <do_else>
              <!--Mission specific param checks-->
              <do_if value="not $PlotSector.isclass.space">
                <set_value name="$Feedback" exact="'$INVALID_LOCATION_PARAM'"/>
              </do_if>
              <do_elseif value="$PlotRange le 0m">
                <set_value name="$Feedback" exact="'$INVALID_PLOTSIZE_PARAM'"/>
              </do_elseif>
              <do_elseif value="typeof $StationSpecs != datatype.table or $StationSpecs.keys.count == 0">
                <set_value name="$Feedback" exact="'$INVALID_STATIONSPECS_PARAM'"/>
              </do_elseif>
              <do_elseif value="typeof $Faction != datatype.faction">
                <set_value name="$Feedback" exact="'$INVALID_FACTION_PARAM'"/>
              </do_elseif>
            </do_else>
          </do_else>
        </do_if>
      </actions>
      <patch sinceversion="2">
        <set_value name="$DefenceStation" exact="false"/>
      </patch>
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>

        <cue name="Do_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="not $Feedback"/>
          </conditions>
          <actions>
            <do_if value="not $MissionCue">
              <set_value name="$MissionCue" exact="Start"/>
            </do_if>

            <do_if value="not $PreexistingClient?">
              <!-- No pre-existing client, create a temporary client for this mission -->
              <!-- This auto-assigns a 'matching' text-page using the metadata (id=0) specified in the text-files. Speak commands for this actor will then refer to the selected text-page-->
              <!-- Possibly we'll need to add additional filters (in case some topics aren't supported by all generic text-pages) -->
              <create_cue_actor cue="Start" name="$Client" comment="temporary cue-actor will be cleaned up in the Cleanup-cue, see destroy_object on $Client">
                <select faction="$ClientOwner"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>

            <set_value name="$CutsceneObject" exact="null"/>

            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>
              <do_any>
                <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]" comment="basic reward credits"/>
                  <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                  <signal_cue_instantly cue="CalculateResourceCost" param="[Start, $PlotSize, $StationSpecs]"/>
                  <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied + $ResourceCost__Result"/>
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardModWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_ModPart" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_ModPart__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardSeminarWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Seminar" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_Seminar__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
              </do_any>

              <do_if value="not $RewardNotoriety">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
              </do_if>
            </do_if>

            <include_actions ref="GenerateTextTable"/>

            <do_if value="$ReportSignalCue">
              <!--Signal the $ReportSignalCue that the mission has been successfully generated-->
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
              <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
              <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
              <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText]"/>
            </do_if>
          </actions>
          <cues>

            <!--***MISSION OFFER***-->
            <cue name="With_Offer" onfail="cancel" version="2">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <patch sinceversion="2" state="complete">
                <do_if value="MissionAccepted.state == cuestate.waiting">
                  <update_offer cue="$MissionCue">
                    <briefing replace="true">
                      <objective step="1" action="objective.buy" text="$TextTable.$objective2"/>
                      <objective step="2" action="objective.build_station" text="$TextTable.$objective3"/>
                    </briefing>
                  </update_offer>
                </do_if>
              </patch>
              <cues>
                <!--Cue which creates the offer, when signalled. To be signalled from the GenericMissions.OfferMission library, referenced below-->
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">

                      <!-- TODO: For creating your own custom GM, you want to change the below briefing details/objective -->
                      <!-- Briefing details -->
                      <create_offer cue="$MissionCue" location="$OfferObject" distance="$OfferDistance" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" actor="$Client"
                                  faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" duration="$MissionDuration" hidden="$HideFromBBS" space="$BBSSpace">
                        <briefing comment="duplicated, see MissionAccepted!">
                          <objective step="1" action="objective.buy" text="$TextTable.$objective2"/>
                          <objective step="2" action="objective.build_station" text="$TextTable.$objective3"/>
                          <!--objective step="4" action="objective.deliver" text="$TextTable.$objective3"/-->
                        </briefing>
                      </create_offer>
                    </do_if>
                    <set_value name="$OfferCreated" exact="true"/>
                  </actions>
                </cue>

                <!--The majority of the offer logic is within this library. The parameters we pass down below, specify in which way this mission is going to be offered to the player (i.e. BBS, Signal-Leak, ...)
                Some of the mission specific handling is still contained in this file but triggered via the library via a signal e.g. setting up the briefing details via the 'CreateOffer' cue above.-->
                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType"     value="$OfferType"/>
                  <param name="OfferCue"      value="$MissionCue"/>
                  <param name="CleanupCue"    value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName"   value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue" value="$CancelOfferCue"/>

                  <!--Object based params (offered by Station/Ship/Signal-leak)-->
                  <param name="TimeoutMin"  value="8min" comment="Minimum time the offer remains valid"/>
                  <param name="TimeoutMax"  value="12min"/>
                  <param name="MaxDistance" value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>

                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject" value="$OfferObject"/>

                  <!--BBS based offers-->
                  <param name="BBSObject"     value="@$BBSObject"/>
                  <param name="BBSDistance"   value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>

                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>

                  <!--Client-->
                  <param name="Client"                 value="$Client"/>
                  <param name="Line_EventOffer"        value="1000101" comment="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_StartConversation" value="null" comment ="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_Goodbye"           value="null" comment="Client speaks this line from his generic-npc-page"/>

                  <param name="DebugChance" value="$DebugChance"/>
                </cue>

                <!--Cue signalled when the offer library is finished-->
                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the cases where a mission is automatically accepted on creation-->
            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
              </conditions>
              <actions>
                <signal_cue cue="MissionAccepted" />
              </actions>
            </cue>

            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="not event.param? or event.param == $MissionCue"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <signal_cue_instantly cue="MissionAccepted" />
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)
            note: play_cutscene action should not be in the actions of the cue with a event_briefing_submission_selected condition. It must be delayed-->
            <cue name="BriefingStarted">
              <conditions>
                <check_any>
                  <event_briefing_started cue="$MissionCue"/>
                  <event_briefing_submission_selected cue="$MissionCue"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$RenderTarget" exact="event.param.{1}"/>
                <set_value name="$StartBriefingCutscene"/>
                <set_value name="$stationindex" exact="1"/>
                <debug_text text="'Briefing started'" chance="$DebugChance"/>
              </actions>
              <cues>
                <cue name="DisplayCutscene" onfail="cancel">
                  <conditions>
                    <check_value value="$StartBriefingCutscene?"/>
                  </conditions>
                  <actions>
                    <do_if value="$CutsceneObject != null">
                      <set_value name="$BriefingCutsceneStarted"/>
                      <set_value name="$CutsceneKey" exact="'OrbitIndefinitely'"/>
                      <play_cutscene key="$CutsceneKey" rendertarget="$RenderTarget">
                        <param name="targetobject" object="$CutsceneObject"/>
                      </play_cutscene>
                    </do_if>
                  </actions>
                </cue>

                <cue name="BriefingStopped">
                  <conditions>
                    <check_any>
                      <event_briefing_cancelled cue="$MissionCue"/>
                      <event_briefing_submission_unselected cue="$MissionCue"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="$BriefingCutsceneStarted?">
                      <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                      <remove_value name="$BriefingCutsceneStarted"/>
                      <stop_cutscene key="$CutsceneKey"/>
                    </do_if>

                    <do_if value="$HoloMap?">
                      <remove_holomap />
                      <remove_value name="$HoloMap"/>
                    </do_if>

                    <debug_text text="'Briefing canceled'" chance="$DebugChance"/>
                    <reset_cue cue="BriefingStarted"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--This cue creates the mission itself, either from scratch or via an existing mission offer-->
            <cue name="MissionAccepted" version="2">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <actions>
                <do_if value="not $WithoutOffer">
                  <speak actor="$Client" line="1000204" comment="(player accepted mission offer)" />
                  <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = 1000204]"/>
                </do_if>

                <debug_text text="'Mission accepted!'" chance="$DebugChance"/>
                <set_value name="stat.missions_accepted" operation="add"/>

                <do_if value="$WithoutOffer">
                  <!--$MissionCue may already be a mission cue passed in as a parameter-->
                  <do_if value="not $MissionCue.hasmission">
                    <do_if value="$MissionThread">
                      <create_mission cue="$MissionCue" missionthread="$MissionThread" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_if>
                    <do_else>
                      <create_mission cue="$MissionCue" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_else>
                  </do_if>

                  <update_mission cue="$MissionCue">
                    <briefing comment="duplicated, see CreateOffer!">
                      <objective step="1" action="objective.buy" text="$TextTable.$objective2"/>
                      <objective step="2" action="objective.build_station" text="$TextTable.$objective3"/>
                      <!--objective step="4" action="objective.deliver" text="$TextTable.$objective4"/-->
                    </briefing>
                  </update_mission>
                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="$MissionCue" offercue="$MissionCue" missionthread="$MissionThread"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="$MissionCue" offercue="$MissionCue"/>
                  </do_else>
                  <remove_offer cue="$MissionCue"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>

                <!-- TODO: For creating your own custom GM, the below code consists of the actual mission-logic, this will likely need major changes -->
                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>

                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>
              </actions>
              <patch sinceversion="2" state="complete">
                <update_mission cue="$MissionCue">
                  <briefing replace="true">
                    <objective step="1" action="objective.buy" text="$TextTable.$objective2"/>
                    <objective step="2" action="objective.build_station" text="$TextTable.$objective3"/>
                  </briefing>
                </update_mission>
              </patch>
              <cues>
                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>

                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{$MissionCue}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{$MissionCue}"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="ActivateMission">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionDuration">
                      <update_mission cue="$MissionCue" endtime="player.age + $MissionDuration"/>
                    </do_if>
                  </actions>
                  <cues>

                    <cue name="Aborted_V2">
                      <conditions>
                        <event_mission_aborted cue="$MissionCue"/>
                      </conditions>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                        <remove_mission cue="$MissionCue" type="aborted"/>
                        <signal_cue cue="CleanUp" />
                      </actions>
                    </cue>

                    <!--We removed the usage of RML_FlyTo which used to signal ReachedLocation.
                    Due to it potentially being instantiated, we check to see if an instance has set $Patch_InstanceRunning. If not, signal it.-->
                    <cue name="ReachedLocation_Signal" onfail="cancel">
                      <conditions>
                        <check_value value="not @$Patch_InstanceRunning"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ReachedLocation"/>
                      </actions>
                    </cue>

                    <!--NOTE: This shouldn't need to be instantiated but do not change due to savegame compatibility.-->
                    <cue name="ReachedLocation" instantiate="true" version="2">
                      <conditions>
                        <event_cue_signalled />
                      </conditions>
                      <actions>
                        <set_value name="$StartStep" exact="1"/>
                      </actions>
                      <patch sinceversion="2" state="complete">
                        <set_value name="$Patch_InstanceRunning" exact="true"/>
                      </patch>
                      <cues>
                        <cue name="ClaimPlot_Trigger" onfail="cancel">
                          <conditions>
                            <cue_is_waiting cue="ClaimPlot_Done"/>
                          </conditions>
                          <actions>
                            <!--Triggers in two cases. A fresh run of the mission or when ReachedLocation was patched to version 2 and the RML_ClaimPlot call was restructured.-->
                            <debug_text text="'Signalling ClaimPlot cue: ' + ClaimPlot" filter="savegame" chance="if @$Patch_InstanceRunning then 100 else 0"/>
                            <signal_cue cue="ClaimPlot"/>
                          </actions>
                        </cue>

                        <cue name="ClaimPlot">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <cues>
                            <cue name="ClaimPlot_Ref_V2" ref="md.RML_ClaimPlot.ClaimPlot">
                              <!-- always pass these -->
                              <param name="EndSignalCue" value="ClaimPlot_Done" comment="RML returns $StationBuilt in this cue"/>
                              <param name="MissionCue" value="$MissionCue"/>
                              <param name="StartStep" value="$StartStep" comment="Briefing step to start the mission on"/>
                              <param name="UpdateBriefing" value="true" comment="Update the briefing objective step when the objective is updated"/>
                              <param name="DebugChance" value="$DebugChance"/>
                              <!-- mission-related parameters -->
                              <param name="Faction"           value="$Faction"/>
                              <param name="PlotSector"        value="$PlotSector"/>
                              <param name="PlotOffset"        value="$PlotOffset"/>
                              <param name="PlotRange"         value="$PlotRange"/>
                              <param name="PlotSize"          value="$PlotSize"/>
                              <param name="ObjectiveText"     value="$TextTable.$objective2"/>
                            </cue>

                            <cue name="ClaimPlot_KeepAlive">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                            </cue>
                          </cues>
                        </cue>

                        <!--TODO @Roger @Owen correct the feedback values of the different RMLs used in this mission. Handle errors or failure cases-->

                        <cue name="ClaimPlot_Done">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <set_value name="$StartStep"      exact="2"/>
                            <set_value name="$CutsceneObject" exact="ClaimPlot_Done.$StationBuilt" />
                            <set_value name="$RML_Result_Table" exact="table[]"/>
                            <!--Reset ClaimPlot so that is can be signalled again if the station becomes invalid-->
                            <reset_cue cue="ClaimPlot"/>
                          </actions>
                          <cues>
                            <!-- Trigger the RML, which will check the win/lose conditions and report back -->
                            <cue name="BuildStation_Ref" ref="md.RML_BuildStation.BuildStation">
                              <!-- always pass these -->
                              <param name="EndSignalCue" value="MissionEnded"/>
                              <param name="MissionCue" value="$MissionCue"/>
                              <param name="StartStep" value="$StartStep" comment="Briefing step to start the mission on"/>
                              <param name="UpdateBriefing" value="true" comment="Update the briefing objective step when the objective is updated"/>
                              <param name="DebugChance" value="$DebugChance"/>
                              <!-- mission-related parameters -->
                              <param name="Faction"           value="$Faction"/>
                              <param name="Station"           value="ClaimPlot_Done.$StationBuilt"/>
                              <param name="StationSpecs"      value="$StationSpecs"/>
                              <param name="PlotSector"        value="$PlotSector"/>
                              <param name="PlotOffset"        value="$PlotOffset"/>
                              <param name="PlotRange"         value="$PlotRange"/>
                              <param name="PlotSize"          value="$PlotSize"/>
                              <param name="ObjectiveText"     value="$TextTable.$objective3"/>
                              <param name="ResultTable"       value="$RML_Result_Table"/>
                              <param name="DefenceStation"    value="$DefenceStation"/>
                            </cue>

                            <cue name="MissionEnded">
                              <!-- TODO: For creating your own custom GM, you want to handle the end-feedback (usually originating from the RML used above) -->
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!--Station plot was moved - restart the claim plot objective-->
                                <do_if value="MissionEnded.$EndFeedbackValue" exact="-3">
                                  <set_value name="$StartStep" exact="1"/>
                                  <set_value name="ClaimPlot_Done.$StationBuilt" exact="null"/>
                                  <signal_cue cue="ClaimPlot"/>
                                  <reset_cue cue="ClaimPlot_Done"/>
                                </do_if>

                                <!-- Failure case -->
                                <do_elseif value="MissionEnded.$EndFeedbackValue" max="0">
                                  <debug_text text="'This mission has failed. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                                  <set_value name="$Feedback" exact="'$BUILD_RML_FAILED'"/>
                                  <speak actor="$Client" line="1000403" comment="(failed mission)" />
                                  <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>

                                  <remove_mission cue="$MissionCue" type="failed" reason="@MissionEnded.$EndFeedbackText"/>
                                  <signal_cue cue="CleanUp" />
                                </do_elseif>

                                <!-- Success case -->
                                <do_else>
                                  <do_if value="$ResultTable">
                                    <set_value name="$ResultTable.$BuiltStation" exact="@$RML_Result_Table.$BuiltStation"/>
                                  </do_if>
                                  <!--TODO: Partial success-->
                                  <debug_text text="'This mission has ended. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                                  <do_if value="$RewardNotoriety and $ClientOwner">
                                    <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                                    <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted" />
                                    <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                                  </do_if>

                                  <do_if value="$RewardCr">
                                    <reward_player money="$RewardCr" />
                                  </do_if>
                                  <do_elseif value="$RewardObj">
                                    <do_if value="$RewardObj.isinventory">
                                      <add_inventory entity="player.entity" ware="$RewardObj" />
                                      <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received" />
                                    </do_if>
                                  </do_elseif>
                                  <set_value name="stat.missions_completed" operation="add"/>
                                  <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'"/>
                                  <speak actor="$Client" line="1000401" comment="(successful mission)" />
                                  <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>

                                  <remove_mission cue="$MissionCue" type="completed" activate="next" />
                                  <signal_cue cue="CleanUp" />
                                </do_else>
                              </actions>
                            </cue>
                          </cues>
                        </cue>

                        <cue name="MissionTimeout" onfail="cancel">
                          <conditions>
                            <check_value value="typeof $MissionDuration == datatype.time"/>
                            <check_value value="$MissionDuration" min="1s"/>
                          </conditions>
                          <delay exact="$MissionDuration"/>
                          <actions>
                            <signal_cue_instantly cue="md.GenericMissions.GenericTimeoutLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                            <remove_mission cue="$MissionCue" type="failed"/>
                            <set_value name="$Feedback" exact="'$MISSION_TIMEOUT'"/>
                            <signal_cue_instantly cue="CleanUp" />
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="ForceCleanup" onfail="cancel">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="not event.param? or event.param == $MissionCue"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
            <do_if value="$BriefingCutsceneStarted?">
              <remove_value name="$BriefingCutsceneStarted"/>
              <stop_cutscene key="$CutsceneKey"/>

              <do_if value="$CutsceneCluster.exists">
                <destroy_object object="$CutsceneCluster"/>
              </do_if>
              <do_if value="$CutsceneShip.exists">
                <destroy_object object="$CutsceneShip"/>
              </do_if>
            </do_if>
            <do_if value="$HoloMap?">
              <remove_holomap />
              <remove_value name="$HoloMap"/>
            </do_if>


            <!--***Cleanup objects***-->

            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and (not $PreexistingClient?)">
              <destroy_object object="$Client" comment="cleanup the client we created with create_cue_actor"/>
            </do_if>

            <!--***Evaluate result***-->

            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']" comment="feedback = id, type and error-text from the above FeedbackValues-table"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [Owen]'" break="1"/>
              </do_else>

              <do_if value="$ReportSignalCue" comment ="The cue which called us">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData" comment="return feedback-data to calling cue"/>
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>

            <cancel_cue cue="Start"/>
          </actions>
        </cue>

        <!-- [cue, $PlotSize and $StationSpecs] returns cue.$ResourceCost__Result -->
        <cue name="CalculateResourceCost" instantiate="true" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!-- TODO: @Owen, @Roger: Improve reward calculation (loop over containerclasses-count etc )-->
            <do_if value="event.param.{2}" comment="plotsize">
              <set_value name="$PlotSizeKm3" exact="((event.param.{2}.x)/1000 * (event.param.{2}.y)/1000 * (event.param.{2}.z)/1000)f" comment="Known engine limitation: units remain in meters so cast them away"/>
              <set_value name="$RewardCostPlotCr" exact="$PlotSizeKm3 * (150000)Cr"/>
              <!--debug_text text="'RewardPlot:' + $RewardCostPlotCr + ' for ' + $PlotSizeKm3 + 'km^3'"/-->
            </do_if>

            <do_if value="event.param.{3}" comment="station-specs">
              <do_if value="event.param.{3}.$containedmacros? and event.param.{3}.$containedmacros.count">
                <set_value name="$RewardCostMacroCr" exact="event.param.{3}.$containedmacros.count * (100000)Cr"/>
              </do_if>
              <do_if value="event.param.{3}.$containedclasses? and event.param.{3}.$containedclasses.count">
                <set_value name="$RewardCostContainedCr" exact="event.param.{3}.$containedclasses.count * (250000)Cr"/>
              </do_if>
              <do_if value="event.param.{3}.$products? and event.param.{3}.$products.count">
                <set_value name="$RewardCostProductsCr" exact="event.param.{3}.$products.count * (500000)Cr"/>
              </do_if>
              <set_value name="$StorageTotal" exact="0"/>
              <do_if value="event.param.{3}.$solidstorage? and (typeof event.param.{3}.$solidstorage).isnumeric and event.param.{3}.$solidstorage gt 0">
                <set_value name="$StorageTotal" exact="$StorageTotal + event.param.{3}.$solidstorage"/>
              </do_if>
              <do_if value="event.param.{3}.$containerstorage? and (typeof event.param.{3}.$containerstorage).isnumeric and event.param.{3}.$containerstorage gt 0">
                <set_value name="$StorageTotal" exact="$StorageTotal + event.param.{3}.$containerstorage"/>
              </do_if>
              <do_if value="event.param.{3}.$liquidstorage? and (typeof event.param.{3}.$liquidstorage).isnumeric and event.param.{3}.$liquidstorage gt 0">
                <set_value name="$StorageTotal" exact="$StorageTotal + event.param.{3}.$liquidstorage"/>
              </do_if>
              <set_value name="$RewardStorageCr" exact="$StorageTotal * (35)Cr"/>
              <!--debug_text text="'RewardSpecs:' + ' (macros)' + @$RewardCostMacroCr + ' (classes)' + @$RewardCostContainedCr + ' (products)' + @$RewardCostProductsCr + ' (storage)' + @$RewardStorageCr"/-->
            </do_if>

            <set_value name="event.param.{1}.$ResourceCost__Result"  exact="((@$RewardCostPlotCr + @$RewardCostMacroCr + @$RewardCostContainedCr + @$RewardCostProductsCr + @$RewardStorageCr) / (1000Cr)) * (1000Cr)" comment="round"/>
            <!--debug_text text="'rewardCr ' + event.param.{1}.$ResourceCost__Result"/-->
          </actions>
        </cue>

      </cues>
    </library>

    <!-- MISSION SETUP HELPERS -->

    <!-- input: $TargetSector, $Faction output: $StationSpecs, $PlotOffset, $PlotRange, $PlotSize -->
    <library name="Setup_BuildMilitary">
      <actions>
        <do_if value="$TargetSector">
          <!-- try and find a location near a gate -->
          <find_object name="$Gates" class="class.gate" active="true" space="player.sector" multiple="true"/>
          <do_if value="$Gates.count">
            <set_value name="$RandomGate" exact="$Gates.random"/>
            <create_position name="$TargetOffset" space="$TargetSector" object="$RandomGate" min="10km" max="20km"/>
            <get_safe_pos result="$PlotOffset" sector="$TargetSector" x="$TargetOffset.x" y="$RandomGate.position.y" z="$TargetOffset.z" radius="10km" allowyaxis="false" max="15km"/>
          </do_if>
          <do_else>
            <create_position name="$TargetOffset" space="$TargetSector" max="300km" comment="fallback"/>
            <get_safe_pos result="$PlotOffset" sector="$TargetSector" x="$TargetOffset.x" y="[-5000m, -2500m, 0m, 2500m, 5000m].random" radius="10km" allowyaxis="false" z="$TargetOffset.z" max="15km"/>
          </do_else>

          <set_value name="$PlotRange"     exact="10km"/>
          <set_value name="$PlotSize"      exact="vector.[[2km,4km].random,[3km,4km].random,[5km,6km].random]"/>
          <do_any>
            <!-- defense platform I -->
            <set_value name="$StationSpecs" exact="table[
              $containedclasses = [
                  [[2,3,4].random, class.defencemodule,   {30120,101}, {30120,102}],
                  [[    1].random, class.dockarea,        {30120,103}, {30120,104}], 
                  [[ 8,16].random, class.turret,          {30120,105}, {30120,106}],
                  [[ 8,12].random, class.missileturret,   {30120,107}, {30120,108}],
                  [[ 5,10].random, class.shieldgenerator, {30120,109}, {30120,110}],
              ],
            ]"/>
            <!-- defense platform II -->
            <set_value name="$StationSpecs" exact="table[
              $containedclasses = [
                  [[  3,4].random, class.defencemodule,   {30120,101}, {30120,102}],
                  [[    1].random, class.dockarea,        {30120,103}, {30120,104}], 
                  [[20,30].random, class.turret,          {30120,105}, {30120,106}],
                  [[ 6,12].random, class.shieldgenerator, {30120,109}, {30120,110}],
              ],
            ]"/>
          </do_any>
          <debug_text text="'Selected ' + $TargetSector + ' ' + $TargetSector.knownname + ' to be the sector to build the station in'" chance="$DebugChance"/>
        </do_if>
      </actions>
    </library>

    <!-- input: $TargetSector, $Faction output: $StationSpecs, $PlotOffset, $PlotRange, $PlotSize, might modify $TextOffset -->
    <library name="Setup_BuildFactory">
      <actions>
        <do_if value="$TargetSector">
          <!-- configure a factory -->
          <create_position name="$TargetOffset" space="$TargetSector" max="300km"/>
          <get_safe_pos result="$PlotOffset" sector="$TargetSector" x="$TargetOffset.x" y="[-5000m, -2500m, 0, 2500m, 5000m].random" z="$TargetOffset.z" allowyaxis="false" includeplotbox="true" radius="25km"  max="15km" comment="not to far off y=0"/>
          <set_value name="$PlotRange"     exact="10km"/>
          <set_value name="$PlotSize"      exact="vector.[[2km,3km].random,[2km,3km].random,[2km,3km].random]"/>

          <do_any>
            <!-- energycells/ore->refined-metals -->
            <do_all>
              <set_value name="$StationSpecs" exact="table[
                $containedclasses = [ [ 1, class.dockarea,        {30120,103}, {30120,104}] ],
                $products = [[2, if [faction.teladi, faction.ministry].indexof.{$Faction} then ware.teladianium else ware.refinedmetals]],
                $containerstorage = [15000, 35000, 70000].random,
                $solidstorage = [20000, 50000, 75000].random,
                ]"/>
              <set_value name="$TextOffset" exact="2200" comment="High-Quality Metal Needed"/>
            </do_all>
            <!-- energycells/graphene/teladianium|refined-metals->hullparts -->
            <do_all>
              <set_value name="$StationSpecs" exact="table[
                $containedclasses = [ [ 1, class.dockarea,        {30120,103}, {30120,104}] ],
                $products = [[1, ware.hullparts]],
                $containerstorage = [20000, 400000, 60000].random,
                ]"/>
              <set_value name="$TextOffset" exact="2300" comment="Ship-Building Material Shortages"/>
            </do_all>
            <!-- energycells/helium->superfluid-coolant, energycells/methane->graphene -->
            <set_value name="$StationSpecs" exact="table[
                $containedclasses = [ [ 1, class.dockarea,        {30120,103}, {30120,104}] ],
                $products = [[1, ware.graphene], [1, ware.superfluidcoolant]],
                $liquidstorage = [22000, 40000, 79000].random,
                $containerstorage = [23000, 44000, 76000].random,
                ]"/>
            <!-- energycells/silicon-wafers->smart-chips -->
            <do_all>
              <set_value name="$StationSpecs" exact="table[
                $containedclasses = [ [ 1, class.dockarea,        {30120,103}, {30120,104}] ],
                $products = [[1, ware.smartchips]],
                $containerstorage = [9500, 28000, 37500].random,
                ]"/>
              <set_value name="$TextOffset" exact="2400" comment="Low-Grade Smart Chips Flooding the Market"/>
            </do_all>
            <!-- refinedmetals/energycells/antimattercells->engineparts -->
            <do_all>
              <set_value name="$StationSpecs" exact="table[
                $containedclasses = [ [ 1, class.dockarea,        {30120,103}, {30120,104}] ],
                $products = [[1, ware.engineparts]],
                $containerstorage = [50000, 85000, 120000].random,
                ]"/>
              <set_value name="$TextOffset" exact="2300" comment="Ship-Building Material Shortages"/>
            </do_all>

          </do_any>

          <debug_text text="'Selected ' + $TargetSector + ' ' + $TargetSector.knownname + ' to be the sector to build the station in'" chance="$DebugChance"/>
        </do_if>
      </actions>
    </library>

    <!-- input: $TargetSector, $Faction output: $StationSpecs, $PlotOffset, $PlotRange, $PlotSize -->
    <library name="Setup_BuildInstallation">
      <actions>
        <!-- use factory, for now -->
        <include_actions ref="Setup_BuildFactory"/>
      </actions>
    </library>




    <!--GENERIC MISSION VARIANTS-->

    <cue name="Force_Generic_Var_1" instantiate="true">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers" />
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 1, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_BuildStation_Var_1" />
    </cue>

    <cue name="Force_Generic_Var_2" instantiate="true">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers" />
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 2, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_BuildStation_Var_2" />
    </cue>

    <cue name="Force_Generic_Var_3" instantiate="true">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers" />
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 3, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_BuildStation_Var_3" />
    </cue>

    <!--event.param = table[
    $Sector,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnSectorChange (Optional, defaults to true)
    $DebugChance (Optional)]-->
    <cue name="GenerateGenericMission" instantiate="true" namespace="this" version="2">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Sector"           exact="event.param.$Sector"/>
        <set_value name="$ReportSignalCue"  exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant"   exact="@event.param.$MissionVariant"/>
        <do_if value="event.param.$RemoveOnSectorChange?">
          <set_value name="$RemoveOnSectorChange" exact="event.param.$RemoveOnSectorChange"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnSectorChange" exact="true"/>
        </do_else>

        <set_value name="$DebugChance"      exact="@event.param.$DebugChance"/>
        <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>

        <set_value name="$FeedbackManager" exact="FeedbackValueManager"/>
        <assert value="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT?" text="'Required error code does not exist. Was the FeedbackValueManager not updated for stand-alone missions? [Owen/Roger]'"/>

        <debug_text text="'Attempting to generate a generic mission'" chance="$DebugChance"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <do_if value="$ReportSignalCue.exists">
          <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        </do_if>
        <do_else>
          <debug_text text="'cancelling dead GM instance'" filter="savegame"/>
          <cancel_cue cue="this"/>
        </do_else>
      </patch>
      <cues>
        <cue name="GenerateGenericMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>

            <!--Set up some common variables first so that the variants don't have to do things multiple times-->

            <!--Find potential offer stations in the sector-->
            <find_station name="$PotentialOfferStations" space="$Sector" multiple="true">
              <match owner="[faction.player, faction.xenon, faction.ownerless]" negate="true"/>
              <match_relation_to object="player.entity" comparison="not" relation="enemy" />
            </find_station>

            <do_if value="$PotentialOfferStations.count">

              <do_if value="$MissionVariant">
                <!--A specific MissionVariant ID was requested-->
                <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
                <do_if value="$MissionVariant == 1">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
                </do_if>
                <do_elseif value="$MissionVariant == 2">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_2"/>
                </do_elseif>
                <do_elseif value="$MissionVariant == 3">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_3"/>
                </do_elseif>
                <do_else>
                  <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [Owen]'"/>
                </do_else>
              </do_if>
              <do_else>
                <!--Attempt to a mission variant at random-->
                <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
                <signal_cue_instantly cue="GenerateGenericMission_Variant_2"/>
                <signal_cue_instantly cue="GenerateGenericMission_Variant_3"/>
              </do_else>
            </do_if>

            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateGenericMission"/>
            </do_else>
          </actions>
        </cue>

        <cue name="GenerateGenericMission_Variant_1" namespace="this" version="2">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>
            <shuffle_list list="$OfferStations"/>

            <set_value name="$Valid" exact="false"/>
            <set_value name="$MissionLevel" exact="1"/>
            <set_value name="$Difficulty" exact="level.hard"/>
            <set_value name="$Station" exact="$OfferStations.random"/>
            <set_value name="$Faction" exact="$Station.owner"/>
            <set_value name="$TargetSector" exact="player.sector" comment="TODO: @Owen, @Roger - sensible location"/>
            <set_value name="$StationSpecs" exact="null"/>
            <set_value name="$DefenceStation" exact="true"/>


            <do_if value="md.$SplitPatriarchyFactions.indexof.{$Faction}" chance="30">
              <set_value name="$TextOffset" exact="1500"/>
            </do_if>
            <do_elseif value="md.$SplitFactions.indexof.{$Faction}" chance="30">
              <set_value name="$TextOffset" exact="1600"/>
            </do_elseif>
            <do_else>
              <set_value name="$TextOffset" exact="[1000, 1100].random"/>
            </do_else>

            <include_actions ref="Setup_BuildMilitary"/>

            <do_if value="$StationSpecs">
              <set_value name="$Valid" exact="true"/>
            </do_if>

            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <patch sinceversion="2">
            <set_value name="$DefenceStation" exact="true"/>
          </patch>
          <cues>
            <cue name="GenerateGenericMission_Variant_1_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <actions>
                <create_cue_actor cue="GenerateGenericMission_Variant_1_Trigger" name="$MissionActor">
                  <select faction="$Faction"/>
                </create_cue_actor>
              </actions>
              <cues>
                <cue name="GenerateGenericMission_Variant_1_Ref" ref="Start">
                  <param name="OfferObject"   value="$Station"/>
                  <param name="MissionLevel"  value="$MissionLevel"/>
                  <param name="Difficulty"    value="$Difficulty"/>

                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>

                  <!--Mission text-->
                  <param name="Page"              value="30120"/>
                  <param name="TextOffset"        value="$TextOffset"/>

                  <!--Mission specific params-->
                  <param name="Faction"           value="$Faction"/>
                  <param name="PlotSector"        value="$TargetSector"/>
                  <param name="PlotOffset"        value="$PlotOffset"/>
                  <param name="PlotRange"         value="$PlotRange"/>
                  <param name="PlotSize"          value="$PlotSize"/>
                  <param name="StationSpecs"      value="$StationSpecs"/>
                  <param name="DefenceStation"    value="$DefenceStation"/>

                  <param name="ReportSignalCue"   value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance"       value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="GenerateGenericMission_Variant_2" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>
            <shuffle_list list="$OfferStations"/>

            <set_value name="$Valid" exact="false"/>
            <set_value name="$MissionLevel" exact="1"/>
            <set_value name="$Difficulty" exact="level.hard"/>
            <set_value name="$Station" exact="$OfferStations.random"/>
            <set_value name="$Faction" exact="$Station.owner"/>
            <set_value name="$TargetSector" exact="player.sector" comment="TODO: @Owen, @Roger - sensible location"/>
            <set_value name="$StationSpecs" exact="null"/>
            <set_value name="$TextOffset" exact="[2000, 2100].random"/>

            <!-- factory/economic style station (standalone or trade-subscription) -->
            <include_actions ref="Setup_BuildFactory"/>

            <do_if value="$StationSpecs">
              <set_value name="$Valid" exact="true"/>
            </do_if>

            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_2_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <actions>
                <create_cue_actor cue="GenerateGenericMission_Variant_2_Trigger" name="$MissionActor">
                  <select faction="$Faction"/>
                </create_cue_actor>
              </actions>
              <cues>
                <cue name="GenerateGenericMission_Variant_2_Ref" ref="Start">
                  <param name="OfferObject"   value="$Station"/>
                  <param name="MissionLevel"  value="$MissionLevel"/>
                  <param name="Difficulty"    value="$Difficulty"/>

                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>

                  <!--Mission text-->
                  <param name="Page"              value="30120"/>
                  <param name="TextOffset"        value="$TextOffset"/>

                  <!--Mission specific params-->
                  <param name="Faction"           value="$Faction"/>
                  <param name="PlotSector"        value="$TargetSector"/>
                  <param name="PlotOffset"        value="$PlotOffset"/>
                  <param name="PlotRange"         value="$PlotRange"/>
                  <param name="PlotSize"          value="$PlotSize"/>
                  <param name="StationSpecs"      value="$StationSpecs"/>

                  <param name="ReportSignalCue"   value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance"       value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="GenerateGenericMission_Variant_3" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>
            <shuffle_list list="$OfferStations"/>

            <set_value name="$Valid" exact="false"/>
            <set_value name="$MissionLevel" exact="1"/>
            <set_value name="$Difficulty" exact="level.hard"/>
            <set_value name="$Station" exact="$OfferStations.random"/>
            <set_value name="$Faction" exact="$Station.owner"/>
            <set_value name="$TargetSector" exact="player.sector" comment="TODO: @Owen, @Roger - sensible location"/>
            <set_value name="$StationSpecs" exact="null"/>
            <set_value name="$TextOffset" exact="[3000,3100].random"/>

            <include_actions ref="Setup_BuildInstallation"/>

            <do_if value="$StationSpecs">
              <set_value name="$Valid" exact="true"/>
            </do_if>

            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_3_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <actions>
                <create_cue_actor cue="GenerateGenericMission_Variant_3_Trigger" name="$MissionActor">
                  <select faction="$Faction"/>
                </create_cue_actor>
              </actions>
              <cues>
                <cue name="GenerateGenericMission_Variant_3_Ref" ref="Start">
                  <param name="OfferObject"   value="$Station"/>
                  <param name="MissionLevel"  value="$MissionLevel"/>
                  <param name="Difficulty"    value="$Difficulty"/>

                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>

                  <!--Mission text-->
                  <param name="Page"              value="30120"/>
                  <param name="TextOffset"        value="$TextOffset"/>

                  <!--Mission specific params-->
                  <param name="Faction"           value="$Faction"/>
                  <param name="PlotSector"        value="$TargetSector"/>
                  <param name="PlotOffset"        value="$PlotOffset"/>
                  <param name="PlotRange"         value="$PlotRange"/>
                  <param name="PlotSize"          value="$PlotSize"/>
                  <param name="StationSpecs"      value="$StationSpecs"/>

                  <param name="ReportSignalCue"   value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance"       value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

  </cues>
</mdscript>