<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GMC_Assisted_Task" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--Generic Mission Chain - Assisted Task-->

    <!--Base Mission information-->
    <!--
    Generic Mission name:    Assisted Task
    Primary 'missiontype':   missiontype.transport -->

    <!--The Feedback Manager contains a table of feedback values related to this Generic Mission. 
		This table is 'const' during the mission (the table itself doesn't change anymore after inialization)

	There are several maintypes of feedback:
    event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
    removed:  The mission offer was removed before acceptance
    success:  The mission was successfully completed by the player
    failure:  The player failed the mission
    error:    Something went wrong with the mission set-up or during the mission-->
    <cue name="FeedbackValueManager" namespace="this">
      <actions>
        <set_value name="$FeedbackValues" exact="table[
                   $MISSION_GENERATED             = table[$type = 'event',    $text = 'Mission variation generated successfully'],
                   $MISSION_ACCEPTED              = table[$type = 'event',    $text = 'Mission accepted'],
                   $MISSION_NO_VARIANT            = table[$type = 'event',    $text = 'No mission variant currently possible'],
                   
                   $OFFER_REMOVED                 = table[$type = 'removed',  $text = 'Offer removed'],
                   $DECLINED_OFFER                = table[$type = 'removed',  $text = 'Player declined Event Offer'],
                   $EVENT_OFFER_TIMEOUT           = table[$type = 'removed',  $text = 'Event Offer timeout'],
                   $SIGNAL_LEAK_REMOVED           = table[$type = 'removed',  $text = 'Signal leak offer removed'],
                   $NPCCONTACT_KILLED_EARLY       = table[$type = 'removed',  $text = 'Delivery NPC was killed early'],
                   $STARTOBJECT_DESTROYED_EARLY   = table[$type = 'removed',  $text = 'Deliver station destroyed early'],
                   
                   $MISSION_SUCCEEDED             = table[$type = 'success',  $text = 'Mission succeeded'],
                   
                   $MISSION_ABORTED               = table[$type = 'failure',  $text = 'Mission aborted by player'],
                   $FORCED_CLEANUP                = table[$type = 'failure',  $text = 'Forced to end from outside'],
                   $MISSION_TIMEOUT               = table[$type = 'failure',  $text = 'Mission timeout'],
                   $MISSION_FAILED                = table[$type = 'failure',  $text = 'Mission failure'],
                   $NPCCONTACT_KILLED             = table[$type = 'failure',  $text = 'Delivery NPC was killed'],
                   $DELIVERY_OBJECT_DESTROYED     = table[$type = 'failure',  $text = 'Deliver station destroyed'],
                   
                   $NO_VALID_CLIENT_OWNER         = table[$type = 'error',    $text = 'No valid ClientOwner parameter provided'],
                   $INVALID_OFFER_TYPE            = table[$type = 'error',    $text = 'No offer parameters were valid'],
                   $NO_TEXT_OFFSET                = table[$type = 'error',    $text = 'No TextOffset set'],
                   $INVALID_NPCCONTACT_PARAM      = table[$type = 'error',    $text = 'Invalid NPCContact param'],
                   $INVALID_STARTOBJECT_PARAM     = table[$type = 'error',    $text = 'Invalid StartObject param'],
                   $INVALID_INTERIOR_PARAMS       = table[$type = 'error',    $text = 'Invalid delivery room params. Either InteriorRoomMacro, InteriorCorridorMacro, Doors or InteriorName'],
                   $INVALID_DELIVERYITEM_PARAM    = table[$type = 'error',    $text = 'Invalid DeliveryItem param'],
                   $INVALID_FORCE_CLEANUP         = table[$type = 'error',    $text = 'ForceCleanup cue invalid']
                   ]"/>
      </actions>
    </cue>

    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternatively, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname
        2 = $TextTable.$description1
        3 = $TextTable.$description2
        
        4 = $TextTable.$logbook
        
        5 = $TextTable.$description0      Description for the optional Deliver_Items objective -->

        <!-- MISSION NAME -->
        <set_value name="$TextTable.$missionname"    exact="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100"/>

        <!-- MISSION PROLOGUE BRIEFING (optional) -->
        <do_if value="$DeliveryItemsTable.keys.count" chance="if $TextTable.$description0? then 0 else 100">
          <set_value name="$TextTable.$description0" exact="readtext.{$Page}.{$TextOffset + 5}"/>

          <do_all exact="$DeliveryItemsTable.keys.count" counter="$DITcounter" chance="if $TextTable.$requirements0? then 0 else 100">
            <substitute_text text="$TextTable.$requirements0inv" source="readtext.{$Page}.{103}">
              <replace string="'$AMOUNT$'"    with="$DeliveryItemsTable.{$DeliveryItemsTable.keys.{$DITcounter}}"/>
              <replace string="'$WARE$'"      with="$DeliveryItemsTable.keys.{$DITcounter}"/>
            </substitute_text>
            <do_if value="$TextTable.$requirements0?">
              <set_value name="$TextTable.$requirements0" exact="$TextTable.$requirements0 + '\n' + $TextTable.$requirements0inv"/>
            </do_if>
            <do_else>
              <set_value name="$TextTable.$requirements0" exact="$TextTable.$requirements0inv"/>
            </do_else>
          </do_all>

          <set_value name="$TextTable.$description0" exact="$TextTable.$description0 + '\n\n' + $TextTable.$requirements0"/>
        </do_if>

        <!-- MISSION BRIEFING 1 -->

        <!-- Requirements for VARIANT 1: Mineral Specialist -->
        <do_if value="not $TextTable.$description1?">

          <!-- Required equipment -->
          <do_if value="not $TextTable.$requirements1?">
            <substitute_text text="$TextTable.$requirements1"    source="readtext.{$Page}.{101}">
              <replace string="'$REQUIREMENT$'" with="macro.eq_arg_resourceprobe_01_macro.name"/>
            </substitute_text>

            <!-- Required ship -->
            <do_if value="$PlayerShipPurpose">
              <do_if value="$PlayerShipPurpose == purpose.mine">
                <set_value name="$TextTable.$requiredshiptype" exact="readtext.{20204}.{5601}" comment="'Mineral Miner', also used by undock menu"/>
                <substitute_text text="$TextTable.$requiredshiptext" source="readtext.{$Page}.{102}">
                  <replace string="'$REQUIREMENT$'" with="$TextTable.$requiredshiptype"/>
                </substitute_text>
                <set_value name="$TextTable.$requirements1" exact="$TextTable.$requiredshiptext + '\n' + $TextTable.$requirements1"/>
              </do_if>
              <do_else>
                <debug_text text="'Selected $PlayerShipPurpose (' + $PlayerShipPurpose + ') is not handled in mission briefing of variant 1'" chance="$DebugChance"/>
              </do_else>
            </do_if>
            <do_else>
              <debug_text text="'No $PlayerShipPurpose set for mission briefing of variant 1'" chance="$DebugChance"/>
            </do_else>
          </do_if>

          <set_value name="$TextTable.$description1"   exact="readtext.{$Page}.{$TextOffset + 2} + '\n\n' + $TextTable.$requirements1"/>
        </do_if>

        <!-- MISSION BRIEFING 2 -->
        <set_value name="$TextTable.$description2"   exact="readtext.{$Page}.{$TextOffset + 3}" chance="if $TextTable.$description2? then 0 else 100"/>

        <!-- LOGBOOK -->
        <do_if value="readtext.{$Page}.{$TextOffset + 4}?">
          <substitute_text text="$TextTable.$logbook" source="readtext.{$Page}.{$TextOffset + 4}" chance="if $TextTable.$logbook? then 0 else 100">
            <replace string="'$FACTION$'" with="$NPCContact.faction"/>
          </substitute_text>
        </do_if>

        <!--
        ***briefing objective text***
        201 = $TextTable.$offer_pickupobjective           Text shown in the mission offer describing the pick up NPC step
        202 = $TextTable.$offer_findobjective             Text shown in the mission offer describing the find resources step
        203 = $TextTable.$offer_collectobjective          Text shown in the mission offer describing the harvest resources step
        204 = $TextTable.$offer_dropoffobjective          Text shown in the mission offer describing the drop off NPC step
        205 or 206 = $TextTable.$offer_deliverobjective   Text shown in the mission offer describing the deliver wares step-->

        <substitute_text text="$TextTable.$offer_pickupobjective"      source="readtext.{$Page}.{201}" chance="if $TextTable.$offer_pickupobjective? then 0 else 100">
          <replace string="'$NPC$'"        with="$NPCContact.knownname"/>
          <replace string="'$OBJECT$'"     with="$StartObject.knownname"/>
        </substitute_text>

        <do_if value="not $TextTable.$resourceyield?">
          <set_value name="$YieldDensity" exact="$ResourceYieldList.{1} / (32*32*32)" comment="in 1/kmÂ³"/>
          <set_value name="$TextTable.$resourceyield" exact="'%.2s'.[$YieldDensity] + ' / ' + readtext.{1001}.{114}"/>
        </do_if>

        <substitute_text text="$TextTable.$offer_findobjective"        source="readtext.{$Page}.{202}" chance="if $TextTable.$offer_findobjective? then 0 else 100">
          <replace string="'$WARE$'"       with="$ResourceList.{1}"/>
          <replace string="'$SPACE$'"      with="$FindResourcesSpace.knownname"/>
          <replace string="'$YIELD$'"      with="$TextTable.$resourceyield"/>
        </substitute_text>

        <substitute_text text="$TextTable.$offer_collectobjective"     source="readtext.{$Page}.{203}" chance="if $TextTable.$offer_collectobjective? then 0 else 100">
          <replace string="'$AMOUNT$'"     with="$HarvestWaresTable.{$HarvestWaresTable.keys.{1}}"/>
          <replace string="'$WARE$'"       with="$HarvestWaresTable.keys.{1}"/>
        </substitute_text>

        <substitute_text text="$TextTable.$offer_dropoffobjective"     source="readtext.{$Page}.{204}" chance="if $TextTable.$offer_dropoffobjective? then 0 else 100">
          <replace string="'$NPC$'"        with="$NPCContact.knownname"/>
          <replace string="'$OBJECT$'"     with="$EndObject.knownname"/>
        </substitute_text>

        <do_if value="$DeliveryItemsTable.keys.count" chance="if $TextTable.$offer_deliverobjective? then 0 else 100">
          <!-- More than one item to deliver: 'Deliver items to NPC' -->
          <do_if value="$DeliveryItemsTable.keys.count ge 2">
            <substitute_text text="$TextTable.$offer_deliverobjective" source="readtext.{$Page}.{206}">
              <replace string="'$NPC$'"    with="$NPCContact.knownname"/>
            </substitute_text>
          </do_if>
          <!-- One item to deliver: detailed objective -->
          <do_else>
            <substitute_text text="$TextTable.$offer_deliverobjective" source="readtext.{$Page}.{205}">
              <replace string="'$AMOUNT$'" with="$DeliveryItemsTable.{$DeliveryItemsTable.keys.{1}}"/>
              <replace string="'$WARE$'"   with="$DeliveryItemsTable.keys.{1}"/>
              <replace string="'$NPC$'"    with="$NPCContact.knownname"/>
            </substitute_text>
          </do_else>
        </do_if>
        <do_else>
          <set_value name="$TextTable.$offer_deliverobjective" exact="''"/>
        </do_else>

        <!--
        ***transport passenger mission text***
        301 = $TextTable.$transport_comeonboard           Text used for the conversation option to tell the NPC to come on board
        302 = $TextTable.$transport_wrongship             Text used for the undock menu info that there's no suitable player ship at the dock
        303 = $TextTable.$conversation_briefing_update    Text used for the conversation option to ask for a briefing update before starting the transport
        -->

        <set_value name="$TextTable.$transport_comeonboard"        exact="readtext.{$Page}.{301}" chance="if $TextTable.$transport_comeonboard? then 0 else 100"/>

        <do_if value="$TextTable.$requiredshiptype">
          <set_value name="$TextTable.$transport_wrongship"        exact="readtext.{$Page}.{302} + $TextTable.$requiredshiptype" chance="if $TextTable.$transport_wrongship? then 0 else 100"/>
        </do_if>

        <set_value name="$TextTable.$conversation_briefing_update" exact="readtext.{$Page}.{303}" chance="if $TextTable.$conversation_briefing_update? then 0 else 100"/>

        <!--
        ***miscellaneous mission text***
        401 = $TextTable.$ticker_insufficient      Text used for the insufficient resources notification: "Insufficient resource levels detected by probe: $WARENAME$"
        402 = $TextTable.$ticker_sufficient        Text used for the sufficient resources notification: Parameter required by RML_Find_Resources, but unused-->

        <substitute_text text="$TextTable.$ticker_insufficient"   source="readtext.{$Page}.{401}" chance="if $TextTable.$ticker_insufficient? then 0 else 100">
          <replace string="'$WARENAME$'" with="$ResourceList.{1}"/>
        </substitute_text>

        <set_value name="$TextTable.$ticker_sufficient"            exact="readtext.{$Page}.{402}" chance="if $TextTable.$ticker_sufficient? then 0 else 100"/>

        <set_value name="$TextTable.$cutscene_briefing_update"     exact="readtext.{$Page}.{403}" chance="if $TextTable.$cutscene_briefing_update? then 0 else 100"/>

        <!--
        ***collect wares mission text***
        generated by RML_Harvest_Resources-->

        <!--
        ***drop off passenger mission text***
        generated by RML_Transport_Passengers_V2-->

        <!--
        ***deliver items mission text***
        501 = $TextTable.$deliver_conversationoption      Used to substitute current amount and warename. Table value only used for substitution. example: "Deliver: $AMOUNT$x $WARE$"
        502 = $TextTable.$deliver_tooltip                   Conversation option tooltip if not selectable
        503 = $TextTable.$deliver_progress                  Used to display the progress for the delivery objective-->

        <do_if value="$DeliveryItemsTable.keys.count">
          <set_value name="$TextTable.$deliver_conversationoption" exact="readtext.{$Page}.{501}" chance="if $TextTable.$deliver_conversationoption? then 0 else 100"/>
          <set_value name="$TextTable.$deliver_tooltip"            exact="readtext.{$Page}.{502}" chance="if $TextTable.$deliver_tooltip? then 0 else 100"/>
          <set_value name="$TextTable.$deliver_progress"           exact="readtext.{$Page}.{503}" chance="if $TextTable.$deliver_progress? then 0 else 100"/>
        </do_if>

      </actions>
    </library>

    <library name="Start">
      <params>
        <!-- For creating your own custom GM, you might need to change _some_ of the below parameters -->
        <param name="OfferObject"             default="null"  comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client"                  default="null"  comment="Pre-existing client"/>
        <param name="ClientOwner"             default="null"  comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionCue"              default="null"  comment="Cue the mission is attached to. Defaults to Start (this)."/>
        <param name="MissionThread"           default="null"  comment="Mission thread for the offer and mission"/>

        <param name="GenerateReward"          default="true"  comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr"                default="null"  comment="If the reward for this mission is credits, the number of credits should be set to this variable." />
        <param name="RewardObj"               default="null"  comment="If the reward for this mission is not credits, and is an object, it should be set to this variable." />
        <param name="RewardNotoriety"         default="null"/>
        <param name="RewardText"              default="null"  comment="Any text needed to define the reward for this mission - may be used in conjunction with $RewardCr and $RewardObj." />
        <param name="MissionDuration"         default="null"/>
        <param name="MissionType"             default="missiontype.transport" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"            default="1"/>
        <param name="Difficulty"              default="level.medium"/>

        <!--Offer location and conversation-->
        <param name="WithoutOffer"            default="false" comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue"     default="null"  comment="Do not create a mission offer but wait for this cue to be completed before running the mission"/>
        <param name="DeclineButton"           default="true"  comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer"              default="false" comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer"       default="false" comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue"  default="null"  comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance"        default="null"/>
        <param name="HideFromBBS"             default="false" comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange"    default="true"/>
        <param name="OfferDistance"           default="50km"  comment="Distance to the offer location before it becomes visible on the map or BBS (unless otherwise hidden)"/>

        <!--BBS only params-->
        <param name="BBSObject"               default="null"/>
        <param name="BBSDistance"             default="null"/>
        <param name="BBSTimeoutMin"           default="null"/>
        <param name="BBSTimeoutMax"           default="null"/>
        <param name="BBSSpace"                default="null"/>

        <!--Mission text-->
        <param name="Page"                        comment="Allows a different text page to be used instead of the generic one. Text IDs must be mapped similarly."/>
        <param name="TextOffset"                  comment="The text offset for this variant's text on the page."/>
        <param name="TextTable" default="table[]" comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi'
               Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>

        <!--************************* Mission specific params *************************-->
        <param name="SignalLeakVoiceLine"   default="null"  comment="The line that should be used for signal leak introductions to this mission" />

        <!--Deliver Inventory Mission-->
        <!--TODO @Owen @Lennart DeliveryNPC is unused. Remove?-->
        <param name="DeliveryNPC"           default="null"  comment="The NPC to which the items should be delivered" />
        <param name="DeliveryItemsTable"    default="null"  comment="Table of ware amounts. Key = ware. Value = amount. Inventory wares only."/>

        <!-- ************************************************************************************************************************************************************************ -->
        <!-- If the mission is to manage placing the delivery NPC, DeliveryObject must be set.-->
        <param name="PlaceNPC"              default="true"  comment="Does the mission handle the placement and removal of the delivery NPC? If false, some other system must be in charge of doing so." />
        <param name="DeliveryObject"        default="null"  comment="The object on which to create the interior" />
        <!-- Interior parameters. If either is provided, all must be valid. -->
        <param name="DeliveryRoomMacro"     default="null"  comment="The dynamic interior room the DeliveryNPC should be placed in, if not placed already" />
        <param name="DeliveryCorridorMacro" default="null"  comment="The dynamic interior corridor leading to DeliveryRoomMacro" />
        <param name="DeliveryDoors"         default="null"  comment="The possible dynamic interior doors used to connect the room and corridor. When defining a room or corridor macro, this is is the variable saved in the doors parameter" />
        <param name="DeliveryInteriorName"  default="null"  comment="The name of the dynamic interior the DeliveryNPC should used, if not placed already" />

        <!--Transport Passenger Mission-->
        <param name="StartObject"                           comment="The object (e.g. station) to initially pick the NPC up on"/>
        <param name="PlayerShipPurpose"     default="null"  comment="The ship type required to pick up the passenger"/>
        <param name="NPCContact"                            comment="The NPC who accompanies the player during the mission"/>

        <param name="ContactNPCPlacementTable"  default="table[$cue = namespace, $priority = 50]"  comment="Table containing the owning cue and priority of placing the NPC vs other missions"/>
        <param name="ContactNPCSlotTags"        default="[tag.service]"   comment="NPC slot tags to help position the NPCContact" />
        <param name="StartRoomMacro"                        comment="The dynamic interior room the NPCContact should be placed in, if not placed already" />
        <param name="StartCorridorMacro"                    comment="The dynamic interior corridor leading to InteriorRoomMacro" />
        <param name="StartDoors"                            comment="The possible dynamic interior doors used to connect the room and corridor. When defining a room or corridor macro, this is is the variable saved in the doors parameter" />
        <param name="StartInteriorName"                     comment="The name of the dynamic interior the NPCContact should used, if not placed already" />

        <!--Find Resources Mission-->
        <param name="FindResourcesSpace"                    comment="Space (e.g. sector) the player has to find resources in"/>
        <param name="ResourceList"                          comment="List of resources to find (currently any will do)"/>
        <param name="ResourceYieldList"                     comment="Minimum Yield we are looking for"/>

        <!--Collect Wares Mission-->
        <param name="HarvestWaresTable"                     comment="The wares which need to be collected after the find resources step (e.g. a certain amount of said resources)"/>

        <!--Drop off Passenger Mission-->
        <param name="EndObject"                             comment="The object (e.g. station) to drop the NPC off at"/>

        <param name="ReportSignalCue"       default="null"  comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue"        default="null"  comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup"          default="null"  comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance"           default="0"/>
      </params>
      <actions>
        <!--Feedback value setup-->
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GMC_Assisted_Task.FeedbackValueManager"/>

        <assert value="$WithoutOffer or not $MissionCue or (not $MissionCue.hasmission and not $MissionCue.hasmissionoffer)"
                text="'Mission is set to create an offer but provided MissionCue: ' + $MissionCue + ' already has an offer or is a running mission [Owen]'"/>

        <assert value="not $MissionThread or $WithoutOffer" text="'Thread sub-mission is also set to create an offer which is not supported.\n
                The mission thread offer should be populated with mission details suitable for this mission, but not from an actual mission. Thread: ' + $MissionThread + ' [Owen]'"/>

        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>

        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [Owen]'"/>
            </do_if>

            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
            <do_else>
              <!--TODO @Lennart: Mission specific param checks-->
              <do_if value="not $NPCContact.isclass.npc">
                <set_value name="$Feedback" exact="'$INVALID_NPCCONTACT_PARAM'"/>
              </do_if>
              <do_elseif value="not (($StartObject.isclass.station or $StartObject.isclass.ship) and $StartObject.isoperational)">
                <set_value name="$Feedback" exact="'$INVALID_STARTOBJECT_PARAM'" />
              </do_elseif>
              <!--TODO @Owen - DeliveryItemsTable evaluation-->
              <!--<do_elseif value="typeof $DeliveryItem != datatype.ware">
                <set_value name="$Feedback" exact="'$INVALID_DELIVERYITEM_PARAM'"/>
              </do_elseif>
              <do_elseif value="typeof $DeliveryAmount != datatype.integer or $DeliveryAmount le 0">
                <set_value name="$Feedback" exact="'$INVALID_ENEMY_SPAWNZONE_PARAM'"/>
              </do_elseif>-->
              <do_elseif value="not ($StartRoomMacro and $StartCorridorMacro and $StartDoors and $StartInteriorName) and 
                       not (not $StartRoomMacro and not $StartCorridorMacro and not $StartDoors and not $StartInteriorName)">
                <!--Interior parameters were incomplete-->
                <set_value name="$Feedback" exact="'$INVALID_INTERIOR_PARAMS'"/>
              </do_elseif>
            </do_else>
          </do_else>
        </do_if>
      </actions>
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>

        <cue name="Do_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="not $Feedback"/>
          </conditions>
          <actions>
            <do_if value="not $MissionCue">
              <set_value name="$MissionCue" exact="Start"/>
            </do_if>

            <do_if value="not $PreexistingClient?">
              <!-- No pre-existing client, create a temporary client for this mission -->
              <create_cue_actor cue="Start" name="$Client">
                <select faction="$ClientOwner"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>

            <!-- Change briefing objectives according to mission variation -->
            <do_if value="$DeliveryItemsTable.keys.count">
              <set_value name="$DeliverObjectiveStep" exact="1"/>
              <set_value name="$PickupObjectiveStep"  exact="2"/>
              <set_value name="$FindObjectiveStep"    exact="3"/>
              <set_value name="$CollectObjectiveStep" exact="4"/>
              <set_value name="$DropoffObjectiveStep" exact="5"/>
            </do_if>
            <do_else>
              <set_value name="$DeliverObjectiveStep" exact="1" comment="Gets overwritten by the objective below"/>
              <set_value name="$PickupObjectiveStep"  exact="1"/>
              <set_value name="$FindObjectiveStep"    exact="2"/>
              <set_value name="$CollectObjectiveStep" exact="3"/>
              <set_value name="$DropoffObjectiveStep" exact="4"/>
            </do_else>

            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>
              <do_any>
                <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]" comment="basic reward credits"/>
                  <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                  <include_actions ref="CalculateResourceCost"/>
                  <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied + $ResourceCost__Result"/>
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardModWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_ModPart" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_ModPart__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardSeminarWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Seminar" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_Seminar__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
              </do_any>

              <do_if value="not $RewardNotoriety">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
              </do_if>
            </do_if>

            <include_actions ref="GenerateTextTable"/>

            <do_if value="$ReportSignalCue">
              <!--Signal the $ReportSignalCue that the mission has been successfully generated-->
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
              <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
              <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
              <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText]"/>
            </do_if>
          </actions>
          <cues>

            <!--***MISSION OFFER***-->
            <cue name="With_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <cues>
                <!--Cue which creates the offer, when signalled. To be signalled from the GenericMissions.OfferMission library, referenced below-->
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">

                      <!-- TODO: For creating your own custom GM, you want to change the below briefing details/objective -->
                      <!-- Briefing details -->
                      <create_offer cue="$MissionCue" location="$OfferObject" distance="$OfferDistance" name="$TextTable.$missionname" description="if $TextTable.$description0? then $TextTable.$description0 else $TextTable.$description1" difficulty="$Difficulty" actor="$Client"
                                  faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" duration="$MissionDuration" hidden="$HideFromBBS" space="$BBSSpace">
                        <briefing>
                          <objective step="$DeliverObjectiveStep"  action="objective.deliver"       text="$TextTable.$offer_deliverobjective"/>
                          <objective step="$PickupObjectiveStep"   action="objective.pickup_person" text="$TextTable.$offer_pickupobjective"/>
                          <objective step="$FindObjectiveStep"     action="objective.find"          text="$TextTable.$offer_findobjective"/>
                          <objective step="$CollectObjectiveStep"  action="objective.collect"       text="$TextTable.$offer_collectobjective"/>
                          <objective step="$DropoffObjectiveStep"  action="objective.transport"     text="$TextTable.$offer_dropoffobjective"/>
                        </briefing>
                      </create_offer>
                    </do_if>
                    <set_value name="$OfferCreated" exact="true"/>

                    <do_if value="$OfferObject.isclass.signalleak">
                      <do_if value="readtext.{$Client.page}.{$SignalLeakVoiceLine}?">
                        <update_signal_leak_voice object="$OfferObject" page="$Client.page" lines="$SignalLeakVoiceLine" />
                      </do_if>
                      <do_else>
                        <set_value name="$Feedback" exact="'$INVALID_SIGNALLEAKVOICELINE_PARAM'" />
                        <signal_cue cue="CleanUp" />
                      </do_else>
                    </do_if>
                  </actions>
                </cue>

                <!--The majority of the offer logic is within this library. The parameters we pass down below, specify in which way this mission is going to be offered to the player (i.e. BBS, Signal-Leak, ...)
                Some of the mission specific handling is still contained in this file but triggered via the library via a signal e.g. setting up the briefing details via the 'CreateOffer' cue above.-->
                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType"        value="$OfferType"/>
                  <param name="OfferCue"         value="$MissionCue"/>
                  <param name="CleanupCue"       value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName"      value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue"   value="$CancelOfferCue"/>

                  <!--Object based params (offered by Station/Ship/Signal-leak)-->
                  <param name="TimeoutMin"           value="8min" comment="Minimum time the offer remains valid"/>
                  <param name="TimeoutMax"           value="12min"/>
                  <param name="MaxDistance"          value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>

                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject"   value="$OfferObject"/>

                  <!--BBS based offers-->
                  <param name="BBSObject"     value="@$BBSObject"/>
                  <param name="BBSDistance"   value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>

                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>

                  <!--Client-->
                  <param name="Client"                 value="$Client"/>
                  <param name="Line_EventOffer"        value="1000101" comment="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_StartConversation" value="null" comment ="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_Goodbye"           value="null" comment="Client speaks this line from his generic-npc-page"/>

                  <param name="DebugChance" value="$DebugChance"/>
                </cue>

                <!--Cue signalled when the offer library is finished-->
                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the cases where a mission is automatically accepted on creation-->
            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
              </conditions>
              <actions>
                <signal_cue cue="MissionAccepted" />
              </actions>
            </cue>

            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="not event.param? or event.param == $MissionCue"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <signal_cue_instantly cue="MissionAccepted" />
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)-->
            <cue name="BriefingStarted">
              <conditions>
                <check_any>
                  <event_briefing_started cue="$MissionCue"/>
                  <event_briefing_submission_selected cue="$MissionCue"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$RenderTarget" exact="event.param.{1}"/>

                <set_value name="$BriefingCutsceneStarted" />
                <debug_text text="'Briefing started'" chance="$DebugChance"/>
              </actions>
              <cues>

                <cue name="DisplayCutscene" onfail="cancel">
                  <conditions>
                    <check_value value="$BriefingCutsceneStarted?"/>
                  </conditions>
                  <actions>
                    <set_value name="$CutsceneObject" exact="$NPCContact" />
                    <set_value name="$CutsceneKey" exact="'ShowCharacter'" />
                    <play_cutscene key="$CutsceneKey" rendertarget="$RenderTarget">
                      <param name="npcref" object="$CutsceneObject" />
                    </play_cutscene>
                  </actions>
                </cue>

                <cue name="BriefingStopped">
                  <conditions>
                    <check_any>
                      <event_briefing_cancelled cue="$MissionCue"/>
                      <event_briefing_submission_unselected cue="$MissionCue"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                    <do_if value="$BriefingCutsceneStarted?">
                      <remove_value name="$BriefingCutsceneStarted"/>
                      <stop_cutscene key="$CutsceneKey"/>
                    </do_if>

                    <debug_text text="'Briefing cancelled'" chance="$DebugChance"/>
                    <reset_cue cue="BriefingStarted"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="NPC_Contact_Killed_Early">
              <conditions>
                <event_object_destroyed object="$NPCContact"/>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$NPCCONTACT_KILLED_EARLY'"/>
                <signal_cue cue="CleanUp"/>
              </actions>
            </cue>

            <cue name="StartObject_Destroyed_Early">
              <conditions>
                <event_object_destroyed object="$StartObject"/>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$STARTOBJECT_DESTROYED_EARLY'"/>
                <signal_cue cue="CleanUp"/>
              </actions>
            </cue>

            <!--This cue creates the mission itself, either from scratch or via an existing mission offer-->
            <cue name="MissionAccepted">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <actions>
                <do_if value="not $WithoutOffer">
                  <speak actor="$Client" line="5020" comment="(Come and find me.)" />
                  <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = 5020]"/>
                </do_if>

                <debug_text text="'Mission accepted!'" chance="$DebugChance"/>
                <set_value name="stat.missions_accepted" operation="add"/>

                <do_if value="$WithoutOffer">
                  <!--$MissionCue may already be a mission cue passed in as a parameter-->
                  <do_if value="not $MissionCue.hasmission">
                    <do_if value="$MissionThread">
                      <create_mission cue="$MissionCue" missionthread="$MissionThread" name="$TextTable.$missionname" description="$TextTable.$description1" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_if>
                    <do_else>
                      <create_mission cue="$MissionCue" name="$TextTable.$missionname" description="if $TextTable.$description0? then $TextTable.$description0 else $TextTable.$description1" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_else>
                  </do_if>

                  <update_mission cue="$MissionCue">
                    <briefing>
                      <objective step="$DeliverObjectiveStep"  action="objective.deliver"       text="$TextTable.$offer_deliverobjective"/>
                      <objective step="$PickupObjectiveStep"   action="objective.pickup_person" text="$TextTable.$offer_pickupobjective"/>
                      <objective step="$FindObjectiveStep"     action="objective.find"          text="$TextTable.$offer_findobjective"/>
                      <objective step="$CollectObjectiveStep"  action="objective.collect"       text="$TextTable.$offer_collectobjective"/>
                      <objective step="$DropoffObjectiveStep"  action="objective.transport"     text="$TextTable.$offer_dropoffobjective"/>
                    </briefing>
                  </update_mission>
                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="$MissionCue" offercue="$MissionCue" missionthread="$MissionThread"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="$MissionCue" offercue="$MissionCue"/>
                  </do_else>
                  <remove_offer cue="$MissionCue"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>

                <!-- TODO: For creating your own custom GM, the below code consists of the actual mission-logic, this will likely need major changes -->
                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>

                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>
              </actions>
              <cues>
                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>

                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{$MissionCue}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{$MissionCue}"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="ActivateMission">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <cancel_cue cue="NPC_Contact_Killed_Early"/>
                    <cancel_cue cue="StartObject_Destroyed_Early"/>

                    <set_value name="$StartStep" exact="1"/>

                    <do_if value="$NPCContact.type == entitytype.shadyguy">
                      <!-- If this is the mission variant working with a shady guy, check to see whether they require unlocking -->
                      <debug_text text="'We are working with a shady guy - look to see whether they require unlocking'" chance="$DebugChance" />
                      <do_if value="not $NPCContact.tradesvisible">
                        <debug_text text="'Registering this mission ' + $MissionCue + ' as a requester for shady guy instantiation of ' + $NPCContact" chance="$DebugChance" />
                        <do_if value="not $NPCContact.$InstantiationRequesters?">
                          <set_value name="$NPCContact.$InstantiationRequesters" exact="[]"/>
                        </do_if>
                        <append_to_list name="$NPCContact.$InstantiationRequesters" exact="$MissionCue"/>
                        <signal_objects object="$Station" param="'npc_instantiation__mission'" comment="Make sure the shady guy is actually properly instantiated on the station" />
                      </do_if>
                    </do_if>
                  </actions>
                  <cues>

                    <!-- This only adds the items for the deliver inventory step -->
                    <cue name="Debug_AddNecessaryItems" instantiate="true">
                      <conditions>
                        <event_cue_signalled />
                      </conditions>
                      <actions>
                        <do_all exact="$DeliveryItemsTable.keys.count" counter="$i">
                          <set_value name="this.$Ware" exact="$DeliveryItemsTable.keys.{$i}"/>
                          <do_if value="typeof $DeliveryItemsTable.{this.$Ware} == datatype.list">
                            <add_inventory entity="player.entity" ware="this.$Ware" exact="$DeliveryItemsTable.{this.$Ware}.{1}" />
                            <debug_text text="$DeliveryItemsTable.{this.$Ware}.{1} + ' ' + this.$Ware + ' added to player inventory'" />
                          </do_if>
                          <do_else>
                            <add_inventory entity="player.entity" ware="this.$Ware" exact="$DeliveryItemsTable.{this.$Ware}" />
                            <debug_text text="$DeliveryItemsTable.{this.$Ware} + ' ' + this.$Ware + ' added to player inventory'" />
                          </do_else>
                        </do_all>
                      </actions>
                    </cue>

                    <!--At this point, the mission is accepted and activated, ready for objectives to be set.
                    These are usually done by triggering a RML, but there could also be other objectives until then e.g. talk to mission actor.-->
                    <cue name="Initialise_Mission">
                      <actions>
                        <!-- Set start steps according to mission variant -->
                        <do_if value="$DeliveryItemsTable?">
                          <set_value name="$DeliverStartStep"             exact="$StartStep"/>
                          <set_value name="$PickupStartStep"              exact="$DeliverStartStep + $DeliveryItemsTable.keys.count"/>
                        </do_if>
                        <do_else>
                          <set_value name="$PickupStartStep"              exact="$StartStep"/>
                        </do_else>
                        <set_value name="$FindResourcesStartStep"         exact="$PickupStartStep + 1"/>
                        <set_value name="$HarvestStartStep"               exact="$FindResourcesStartStep + 1"/>
                        <set_value name="$DropoffStartStep"               exact="$HarvestStartStep + $HarvestWaresTable.keys.count"/>

                        <!-- Create variables which are set later -->
                        <set_value name="$PassengerShip" exact="null" comment="set by Passenger_Transport, used by Harvest_Resources"/>

                        <do_if value="$DeliveryItemsTable.keys.count">
                          <signal_cue cue="Deliver_Inventory"/>
                        </do_if>
                        <do_else>
                          <signal_cue cue="Passenger_Transport"/>
                        </do_else>
                      </actions>
                    </cue>

                    <cue name="Deliver_Inventory">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!--Update the briefing to add the next mission objective after the ones which will be generated for the deliver inventory RML
                        Also update the briefing description if needed-->
                        <update_mission cue="$MissionCue" description="$TextTable.$description0">
                          <briefing>
                            <objective step="$DeliverStartStep"             action="objective.deliver"       text="$TextTable.$offer_deliverobjective"/>
                            <objective step="$PickupStartStep"              action="objective.pickup_person" text="$NPCContact.knownname"/>
                            <objective step="$FindResourcesStartStep"       action="objective.find"          text="$TextTable.$offer_findobjective"/>
                            <objective step="$HarvestStartStep"             action="objective.collect"       text="$TextTable.$offer_collectobjective"/>
                            <objective step="$DropoffStartStep"             action="objective.transport"     text="$TextTable.$offer_dropoffobjective"/>
                          </briefing>
                        </update_mission>
                      </actions>
                      <cues>
                        <cue name="Deliver_Inventory_Ref" ref="md.RML_Deliver_Inventory.Deliver_Inventory">
                          <param name="EndSignalCue"            value="Deliver_Inventory_End"/>
                          <param name="MissionCue"              value="$MissionCue"/>
                          <param name="StartStep"               value="$DeliverStartStep"                         comment="Briefing step to start the mission on"/>
                          <param name="UpdateBriefing"          value="true"                                      comment="Update the briefing objective step when the objective is updated"/>

                          <!--Delivery params-->
                          <param name="WaresTableParam"         value="$DeliveryItemsTable"/>
                          <param name="DeliveryNPC"             value="$NPCContact"                               comment="The NPC to which the items should be delivered." />
                          <param name="DeliveryObject"          value="$DeliveryObject"                           comment="The object on which to point to before the NPC is placed. Also used to create the interior with the below parameters" />
                          <param name="ProgressBarText"         value="$TextTable.$deliver_progress"              comment="Text to be displayed next to the ware delivery progress bar e.g. ('Delivered')"/>
                          <param name="ConversationOptionText"  value="$TextTable.$deliver_conversationoption"/>
                          <param name="ConversationTipText"     value="$TextTable.$deliver_tooltip"/>

                          <param name="PlaceNPC"                value="true"/>
                          <param name="DeliveryRoomMacro"       value="$StartRoomMacro"                           comment="The dynamic interior room the NPC should be placed in, if not placed already" />
                          <param name="DeliveryCorridorMacro"   value="$StartCorridorMacro"                       comment="The dynamic interior corridor leading to DeliveryRoomMacro" />
                          <param name="DeliveryDoor"            value="$StartDoors.random"                        comment="Door macro slot connection" />
                          <param name="DeliveryInteriorName"    value="$StartInteriorName"                        comment="The name of the dynamic interior the DeliveryNPC should used, if not placed already" />

                          <param name="DebugChance"             value="$DebugChance"/>
                        </cue>
                        <cue name="Deliver_Inventory_End">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <!-- Failure case -->
                            <do_if value="this.$EndFeedbackValue" max="0">
                              <debug_text text="'This mission has failed. Feedback: ' + this.$EndFeedbackValue" chance="$DebugChance"/>
                              <do_if value="this.$EndFeedbackValue == -3">
                                <set_value name="$Feedback" exact="'$DELIVERY_STATION_DESTROYED'"/>
                              </do_if>
                              <do_elseif value="this.$EndFeedbackValue == -2">
                                <set_value name="$Feedback" exact="'$DELIVERYNPC_KILLED'"/>
                              </do_elseif>
                              <do_else>
                                <set_value name="$Feedback" exact="'$MISSION_FAILED'"/>
                                <speak actor="$Client" line="1000403" comment="(failed mission)" />
                              </do_else>
                              <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @this.$EndFeedbackText]"/>

                              <remove_mission cue="$MissionCue" type="failed" reason="@this.$EndFeedbackText"/>
                              <signal_cue cue="CleanUp" />
                            </do_if>
                            <!-- Success case -->
                            <do_else>
                              <add_npc_line speaker="$NPCContact" line="1000204" comment="(I knew I could count on you.)" />
                              <!-- Tell the next mission step to not place the NPC again -->
                              <set_value name="$MissionCue.$PlaceNPC" exact="false"/>
                              <!-- Give the player the option to review the updated mission briefing in the next mission step -->
                              <set_value name="$MissionCue.$UpdateBriefingOnPassengerTransport" exact="true"/>
                              <!-- Signal the next stage of the mission -->
                              <signal_cue cue="Passenger_Transport"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="Passenger_Transport">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <set_value name="$NPCContactTemplate" exact="$NPCContact.npctemplate"/>
                        <update_mission cue="$MissionCue" description="$TextTable.$description1"/>
                      </actions>
                      <cues>
                        <!--This RML will end when the NPC is on a ship docked at the destination. It is up to the caller to decide what to do with the NPC after that e.g. move them off the ship.-->
                        <cue name="Passenger_Transport_Ref" ref="md.RML_Transport_Passengers_V2.TransportPassengers_V2">
                          <param name="EndSignalCue"    value="Passenger_Transport_End"/>
                          <param name="MissionCue"      value="$MissionCue"/>
                          <param name="StartStep"       value="$PickupStartStep"          comment="Briefing step to start the mission on"/>
                          <param name="UpdateBriefing"  value="true"                      comment="Update the briefing objective step when the objective is updated"/>

                          <param name="Passenger"       value="$NPCContact"/>
                          <param name="Destination"     value="null"                      comment="Destination object to drop off the passenger"/>
                          <param name="DropOff"         value="false"                     comment="If set to false, RML will complete once the NPC in on board"/>

                          <!-- ************************************************************************************************************************************************************************ -->
                          <!-- If the mission is to manage placing the delivery NPC, StartObject and NPCPlacementCue must be set.-->
                          <param name="PlaceNPC"              value="$PlaceNPC"           comment="Should the NPC be placed by this library? If true, the following should be set."/>
                          <param name="PlacementTable"        value="$ContactNPCPlacementTable"/>
                          <param name="StartObject"           value="$StartObject"        comment="Object to place the NPC on and to create the dynamic interior in"/>
                          <param name="NPCStartSlotTags"      value="$ContactNPCSlotTags"/>

                          <!-- Interior parameters. If either is provided, all must be valid. -->
                          <param name="StartRoomMacro"        value="$StartRoomMacro"     comment="The dynamic interior room the NPC should be placed in, if not placed already" />
                          <param name="StartCorridorMacro"    value="$StartCorridorMacro" comment="The dynamic interior corridor leading to DeliveryRoomMacro" />
                          <param name="StartDoor"             value="$StartDoors.random"  comment="Door macro slot connection" />
                          <param name="StartInteriorName"     value="$StartInteriorName"  comment="The name of the dynamic interior the DeliveryNPC should used, if not placed already" />
                          <!-- ************************************************************************************************************************************************************************ -->
                          <param name="DebugChance"           value="$DebugChance"/>
                        </cue>

                        <cue name="Passenger_Transport_Conversation_Handler" instantiate="true">
                          <conditions>
                            <check_any>
                              <event_conversation_started actor="$NPCContact" />
                              <event_conversation_returned_to_section actor="$NPCContact" />
                            </check_any>
                          </conditions>
                          <actions>
                            <set_value name="$NPCContact.$PassengerConvHandlerExists" exact="true" comment="Validation blackboard variable so the RML can know something is looking after the conversation."/>
                            <do_if value="not $AlreadyGreeted?">
                              <add_npc_line line="2001" comment="(Greeting - neutral)"/>
                              <set_value name="$AlreadyGreeted" exact="true"/>
                            </do_if>
                            <do_if value="not $PassengerShip">
                              <add_player_choice text="$TextTable.$transport_comeonboard" position="left" section="passenger_onboard" />
                            </do_if>
                            <do_if value="$UpdateBriefingOnPassengerTransport?">
                              <add_player_choice text="$TextTable.$conversation_briefing_update" position="top_right" section="passenger_mission_update" comment="Show updated mission briefing"/>
                            </do_if>
                            <add_player_choice text="{1002,2}" position="bottom_right" section="g_finish" comment="Goodbye"/>
                          </actions>
                        </cue>

                        <cue name="Passenger_Transport_Conversation_Update_Briefing" instantiate="true">
                          <conditions>
                            <event_conversation_next_section actor="$NPCContact"/>
                            <check_value value="event.param == 'passenger_mission_update'"/>
                          </conditions>
                          <actions>
                            <open_conversation_menu menu="MissionBriefingMenu" param="[0, 0, $MissionCue, false]"/>
                          </actions>
                        </cue>

                        <cue name="Passenger_Transport_NextSection_SelectShip" instantiate="true">
                          <conditions>
                            <event_conversation_next_section actor="$NPCContact" />
                            <check_value value="event.param == 'passenger_onboard'" />
                          </conditions>
                          <actions>
                            <create_list name="this.$ValidPlayerShips"/>
                            <!-- Check for docked player ship of the appropriate type (if such a type has been set by the the mission variant) -->
                            <do_if value="$PlayerShipPurpose">
                              <find_object_component name="this.$PlayerShips" object="$NPCContact.container" owner="faction.player" class="[class.ship_s, class.ship_m, class.ship_l, class.ship_xl]" primarypurpose="$PlayerShipPurpose" recursive="true" multiple="true" />
                              <!-- Mining ship -->
                              <do_if value="$PlayerShipPurpose == purpose.mine">
                                <do_all exact="this.$PlayerShips.count" counter="$PScounter">
                                  <do_if value="this.$PlayerShips.{$PScounter}.macro.cargo.capacity.solid gt 0">
                                    <append_to_list name="this.$ValidPlayerShips" exact="this.$PlayerShips.{$PScounter}"/>
                                  </do_if>
                                </do_all>
                              </do_if>
                            </do_if>
                            <!-- No specified ship type -->
                            <do_else>
                              <find_object_component name="this.$ValidPlayerShips" object="$NPCContact.container" owner="faction.player" class="[class.ship_s, class.ship_m, class.ship_l, class.ship_xl]" recursive="true" multiple="true" />
                            </do_else>

                            <do_if value="not this.$PlayerShips.count">
                              <debug_text text="'No player ships on $NPCContact\'s ship or station'" chance="$DebugChance" />
                            </do_if>
                            <do_elseif value="not this.$ValidPlayerShips.count">
                              <debug_text text="'Player ship(s) on $NPCContact\'s ship or station are not of valid type'" chance="$DebugChance" />
                            </do_elseif>

                            <open_conversation_menu menu="PlatformUndockMenu" param="[0, 0, $NPCContact.container, 'movepassenger', [this.$ValidPlayerShips, $TextTable.$transport_wrongship] ]" />
                          </actions>
                        </cue>

                        <cue name="Passenger_Transport_Check_Ship" instantiate="true">
                          <conditions>
                            <event_conversation_next_section actor="$NPCContact" />
                            <check_value value="event.param == 'c_movepassenger_destinationselected'" />
                          </conditions>
                          <actions>
                            <!--people.free does not count control entity slots, which is fine for this case
                            Inbound people should be flagged as 'intransit' and included in the current total of people-->
                            <debug_text text="'$PassengerShip ' + event.param2 + ' has ' + event.param2.people.free + ' free people slots'" chance="$DebugChance"/>
                            <do_if value="event.param2.people.free">
                              <!--Ship has enough space for the passenger. Add them to the ship's people list and attempt to have them walk to it.-->
                              <set_value name="$PassengerShip" exact="event.param2" />
                              <!-- Make NPC walk to selected ship. As their destination slot is a NPC transport slot, they will become 'hidden' on arrival. They will continue to exist. -->
                              <find_npc_waypoint name="this.$DespawnWaypoints" object="$PassengerShip" tags="tag.npctransport" multiple="true"/>
                              <assert value="this.$DespawnWaypoints.count" text="'No waypoints on ' + $PassengerShip + ' ' + $PassengerShip.knownname + ' tagged ' + tag.npctransport + '. No place to despawn passengers.'"/>
                              <debug_text text="'Attempting to add ' + $NPCContact + ' to ' + $PassengerShip + ' ' +$PassengerShip.knownname + ' as a passenger'" chance="$DebugChance"/>
                              <create_npc_template name="this.$Template" object="$PassengerShip" entity="$NPCContact" role="entityrole.passenger"/>
                              <assert value="$NPCContactTemplate == this.$Template" text="'Template of passenger added to the ship ' + this.$Template + ' does not match that stored earlier ' + $NPCContactTemplate + ' [Owen]'"/>
                              <assert value="this.$Template" text="'Attempted to add passenger to the selected ship but it failed. [Owen]'"/>
                              <do_if value="this.$Template">
                                <do_if value="this.$DespawnWaypoints.count">
                                  <signal_cue_instantly cue="md.NPC_Instantiation.NPC_Placement_Manager" param="['add_definition', $NPCContact, 
                                          table[
                                          $requestercue = $ContactNPCPlacementTable.$cue,
                                          $priority = $ContactNPCPlacementTable.$priority,
                                          $location = this.$DespawnWaypoints.random,
                                          $debugchance = $DebugChance,
                                          $debugcaller = if $DebugChance == 100 then this else null]
                                          ]"/>
                                </do_if>
                                <do_else>
                                  <assert value="this.$DespawnWaypoints.count" text="'No place for the NPC was found on the selected ship ' + $PassengerShip + ' ' + $PassengerShip.macro.id + ' - This will fail the RML. [Owen]'"/>
                                  <remove_actor_from_room actor="$NPCContact"/>
                                </do_else>
                                <!-- TODO @Lennart: this doesn't work -->
                                <speak actor="$NPCContact" line="5019" comment="(On the way.)" />
                              </do_if>
                              <signal_objects object="$NPCContact" param="'passenger_transport_ship_selected'" param2="$PassengerShip"/>
                            </do_if>
                            <do_else>
                              <add_npc_line speaker="$NPCContact" line="11803" comment="(No room on selected ship)" />
                            </do_else>
                          </actions>
                        </cue>

                        <cue name="Passenger_Transport_End">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <!-- Failure case -->
                            <do_if value="this.$EndFeedbackValue" max="0">
                              <debug_text text="'This mission has failed. Feedback: ' + this.$EndFeedbackValue" chance="$DebugChance"/>
                              <set_value name="$Feedback" exact="'$MISSION_FAILED'"/>

                              <signal_cue_instantly cue="md.NPC_Instantiation.NPC_Placement_Manager" param="['remove_request', $NPCContact, $ContactNPCPlacementTable.$cue]"/>
                              <signal_cue_instantly cue="md.NPC_Missions.Disembark_Passenger" param="table[
                                         $passenger = $NPCContact,
                                         $object = $PassengerShip,
                                         $debugchance = $DebugChance]"/>
                              <!--TODO - don't speak if NPC was killed-->
                              <speak actor="$NPCContact" line="1000403" comment="(failed mission)" />
                              <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @this.$EndFeedbackText]"/>

                              <remove_mission cue="$MissionCue" type="failed" reason="@this.$EndFeedbackText"/>
                              <signal_cue cue="CleanUp" />
                            </do_if>
                            <!-- Success case -->
                            <do_else>
                              <!--The passenger has successfully come on board-->
                              <assert value="$NPCContact.hascontext.{$PassengerShip}" text="'Passenger ' + $NPCContact + ' ' + $NPCContact.knownname + ' exists but is not on the expected ship. Their object is ' + $NPCContact.object + ' ' + @$NPCContact.object.knownname + ' [Owen]'"/>
                            </do_else>
                          </actions>
                          <cues>
                            <cue name="Passenger_Transport_End_Delay">
                              <!--TODO @Owen see why this fails so often-->
                              <!--Slight delay after the passenger transport mission to have a better chance of the walkable navmeshes being generated-->
                              <delay exact="5s"/>
                              <actions>
                                <speak actor="$NPCContact" line="11801" comment="I'm aboard your ship and ready to go."/>
                                <!-- Pass $PassengerShip into parent cue to be used in later steps -->
                                <set_value name="$MissionCue.$PassengerShip" exact="$PassengerShip"/>
                                <!--Signal the next stage of the mission-->
                                <signal_cue cue="Find_Resources"/>
                              </actions>
                            </cue>
                          </cues>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="Find_Resources">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <set_value name="$RML_ResultTable" exact="table[]"/>
                        <update_mission cue="$MissionCue" description="$TextTable.$description1"/>
                      </actions>
                      <cues>
                        <cue name="Find_Resources_Ref" ref="md.RML_Find_Resources.FindResources">
                          <param name="EndSignalCue"              value="Find_Resources_End"/>
                          <param name="MissionCue"                value="$MissionCue"/>
                          <param name="StartStep"                 value="$FindResourcesStartStep" comment="Briefing step to start the mission on"/>
                          <param name="UpdateBriefing"            value="true" comment="Update the briefing objective step when the objective is updated"/>

                          <param name="Space"                     value="$FindResourcesSpace"/>
                          <param name="ResourceList"              value="$ResourceList"/>
                          <param name="ResourceYieldList"         value="$ResourceYieldList"/>
                          <param name="Text_Ticker_Insufficient"  value="$TextTable.$ticker_insufficient"/>
                          <param name="Text_Ticker_Sufficient"    value="$TextTable.$ticker_sufficient"/>

                          <param name="ResultTable"               value="$RML_ResultTable"/>

                          <param name="DebugChance"               value="$DebugChance"/>
                        </cue>
                        <cue name="Find_Resources_End">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <!-- Failure case -->
                            <do_if value="this.$EndFeedbackValue" max="0">
                              <do_if value="this.$EndFeedbackValue le -100">
                                <set_value name="$Feedback" exact="'$RML_ERROR'"/>
                              </do_if>
                              <do_else>
                                <set_value name="$Feedback" exact="'$RML_FAILED'"/>
                              </do_else>
                              <debug_text text="'This mission has failed. RML Feedback: ' + this.$EndFeedbackValue" chance="$DebugChance"/>
                              <speak actor="$Client" line="1000403" comment="(failed mission)" />
                              <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>

                              <remove_mission cue="$MissionCue" type="failed" reason="@MissionEnded.$EndFeedbackText"/>
                              <signal_cue cue="CleanUp" />
                            </do_if>

                            <!-- Success case -->
                            <do_else>
                              <!-- Pass along location of the probe -->
                              <set_value name="$MissionCue.$FindResourcesResultTable" exact="$RML_ResultTable" comment="$ResultTable[ $ware = [$Sector = $Probe.sector, $Offset = $ProbePosition] ]"/>
                              <!--Signal the next stage of the mission-->
                              <signal_cue cue="Harvest_Resources"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="Harvest_Resources">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!-- Copy position data from the last probe placed in Find_Resources -->
                        <set_value name="$HarvestSpace"  exact="$FindResourcesResultTable.{$FindResourcesResultTable.keys.{1}}.$Sector"/>
                        <set_value name="$HarvestOffset" exact="$FindResourcesResultTable.{$FindResourcesResultTable.keys.{1}}.$Offset"/>
                        <!--<set_value name="$HarvestOffset" exact="position.[$HarvestOffset.x, 0, $HarvestOffset.z]" comment="see explanation below"/>-->
                        <!-- Resource probes detect what's in their 32km region square, no matter where they are placed within it, so we need to cover the most extreme case (diagonal is 45.25km)-->
                        <!-- Currently, the y axis doesn't matter for detection, which means the probe might be too far up or down. Placing an accurate "collection" sphere around it is impossible -->
                        <set_value name="$HarvestRadius" exact="100km" comment="extremely generous, but still doesn't cover deliberate placement at, say, y=500km"/>
                        <update_mission cue="$MissionCue" description="$TextTable.$description1">
                          <briefing>
                            <objective step="$HarvestStartStep" action="objective.collect" text="$TextTable.$offer_collectobjective"/>
                          </briefing>
                        </update_mission>
                        <speak actor="$NPCContact" line="11701" comment="(Begin resource collection.)"/>
                      </actions>
                      <cues>
                        <cue name="Harvest_Resources_Ref" ref="md.RML_Harvest_Resources.HarvestResources">
                          <param name="EndSignalCue"      value="Harvest_Resources_End"/>
                          <param name="MissionCue"        value="$MissionCue"/>
                          <param name="StartStep"         value="$HarvestStartStep"  comment="Briefing step to start the mission on"/>
                          <param name="UpdateBriefing"    value="true"               comment="Update the briefing objective step when the objective is updated"/>

                          <param name="CollectorObjects"  value="$PassengerShip"     comment="Container objects which need to be collecting the resources (null = any player owned object can collect)"/>
                          <param name="HarvestSpace"      value="$HarvestSpace"      comment="The space where the player must mine"/>
                          <param name="HarvestWaresTable" value="$HarvestWaresTable" comment="Wares to be harvested from a set space"/>

                          <!-- The FlyTo is a hint in the right direction. Harvest_Resources itself only checks for the correct sector -->
                          <param name="PlayerFlyTo"       value="true"               comment="Must the player fly to the space?"/>
                          <param name="HarvestOffset"     value="$HarvestOffset"/>
                          <param name="HarvestRadius"     value="$HarvestRadius"/>

                          <param name="DebugChance"       value="$DebugChance"/>
                        </cue>
                        <cue name="Harvest_Resources_End">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <signal_cue cue="Passenger_Dropoff"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="Passenger_Dropoff">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <update_mission cue="$MissionCue" description="$TextTable.$description2"/>
                        <signal_cue cue="Briefing_Update_Cutscene"/>
                        <set_value name="$NPCContactTemplate" exact="$NPCContact.npctemplate"/>
                      </actions>
                      <cues>
                        <!--This RML will end when the NPC is on a ship docked at the destination. It is up to the caller to decide what to do with the NPC after that e.g. move them off the ship.-->
                        <cue name="Passenger_Dropoff_Ref" ref="md.RML_Transport_Passengers_V2.TransportPassengers_V2">
                          <param name="EndSignalCue"    value="Passenger_Dropoff_End"/>
                          <param name="MissionCue"      value="$MissionCue"/>
                          <param name="StartStep"       value="$DropoffStartStep"  comment="Briefing step to start the mission on"/>
                          <param name="UpdateBriefing"  value="true"        comment="Update the briefing objective step when the objective is updated"/>

                          <param name="Passenger"       value="$NPCContact"/>
                          <param name="Destination"     value="$EndObject"  comment="Destination object to drop off the passenger"/>
                          <param name="PlaceNPC"        value="false"/>

                          <param name="DebugChance"     value="$DebugChance"/>
                        </cue>

                        <cue name="Passenger_Dropoff_End">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <!-- Failure case -->
                            <do_if value="this.$EndFeedbackValue" max="0">
                              <debug_text text="'This mission has failed. Feedback: ' + this.$EndFeedbackValue" chance="$DebugChance"/>
                              <set_value name="$Feedback" exact="'$MISSION_FAILED'"/>
                              <!--TODO - don't speak if NPC was killed-->
                              <speak actor="$NPCContact" line="1000403" comment="(failed mission)" />
                              <signal_cue_instantly cue="md.NPC_Instantiation.NPC_Placement_Manager" param="['remove_request', $NPCContact, $ContactNPCPlacementTable.$cue]"/>
                              <signal_cue_instantly cue="md.NPC_Missions.Disembark_Passenger" param="table[
                                         $passenger = $NPCContact,
                                         $object = $PassengerShip,
                                         $debugchance = $DebugChance]"/>
                              <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $NPCContact, @this.$EndFeedbackText]"/>
                              <remove_mission cue="$MissionCue" type="failed" reason="@this.$EndFeedbackText"/>
                              <signal_cue cue="CleanUp" />
                            </do_if>
                            <!-- Success case -->
                            <do_else>
                              <!--The passenger has successfully been delivered to the station.-->
                              <assert value="$NPCContact.hascontext.{$PassengerShip}" text="'Passenger ' + $NPCContact + ' ' + $NPCContact.knownname + ' exists but is not on the expected ship. Their object is ' + $NPCContact.object + ' ' + @$NPCContact.object.knownname + ' [Owen]'"/>
                            </do_else>
                          </actions>
                          <cues>
                            <cue name="Passenger_Dropoff_End_Delay">
                              <!--TODO @Owen see why this fails so often-->
                              <!--Slight delay after the passenger transport mission to have a better chance of the walkable navmeshes being generated-->
                              <!--The RML already has a 5s delay built in, so this shouldn't be necessary-->
                              <actions>
                                <signal_cue_instantly cue="md.NPC_Instantiation.NPC_Placement_Manager" param="['remove_request', $NPCContact, $ContactNPCPlacementTable.$cue]"/>
                              </actions>
                              <delay exact="5s"/>
                              <actions>
                                <signal_cue_instantly cue="md.NPC_Missions.Disembark_Passenger" param="table[
                                         $passenger = $NPCContact,
                                         $object = $PassengerShip,
                                         $debugchance = $DebugChance]"/>
                                <signal_cue cue="MissionEnded"/>
                              </actions>
                            </cue>
                          </cues>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="Briefing_Update_Cutscene">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <play_cutscene key="'ShowPilot'" targetmonitor="true" timeout="10s">
                          <interaction text="$TextTable.$cutscene_briefing_update" param="$NPCContact" param2="'accept_interaction'"/>
                          <param name="npcref" object="$NPCContact" />
                        </play_cutscene>
                        <speak actor="$NPCContact" priority="100">
                          <text line="2113" comment="Excellent."/>
                        </speak>
                      </actions>
                      <cues>

                        <cue name="Briefing_Update_Cutscene_Interact">
                          <conditions>
                            <event_player_interaction param="$NPCContact" param2="'accept_interaction'"/>
                          </conditions>
                          <actions>
                            <stop_cutscene key="'ShowPilot'"/>
                            <open_menu menu="MissionBriefingMenu" param="[0, 0, $MissionCue, false]"/>
                          </actions>
                        </cue>

                      </cues>
                    </cue>

                    <cue name="Aborted">
                      <conditions>
                        <event_mission_aborted cue="$MissionCue"/>
                      </conditions>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                        <remove_mission cue="$MissionCue" type="aborted"/>
                        <signal_cue cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="MissionTimeout" onfail="cancel">
                      <conditions>
                        <check_value value="typeof $MissionDuration == datatype.time"/>
                        <check_value value="$MissionDuration" min="1s"/>
                      </conditions>
                      <delay exact="$MissionDuration"/>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericTimeoutLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <remove_mission cue="$MissionCue" type="failed"/>
                        <set_value name="$Feedback" exact="'$MISSION_TIMEOUT'"/>
                        <signal_cue_instantly cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="MissionEnded">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <do_if value="$RewardNotoriety and $ClientOwner">
                          <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                          <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted" />
                          <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                        </do_if>

                        <do_if value="$RewardCr">
                          <reward_player money="$RewardCr" />
                        </do_if>
                        <do_elseif value="$RewardObj">
                          <do_if value="typeof $RewardObj == datatype.ware and $RewardObj.isinventory">
                            <add_inventory entity="player.entity" ware="$RewardObj" />
                            <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received" />
                          </do_if>
                          <do_elseif value="$RewardObj.isclass.npc and $RewardObj.isshadyguy">
                            <set_entity_traits entity="$RewardObj" tradesvisible="true"/>
                          </do_elseif>
                        </do_elseif>
                        <set_value name="stat.missions_completed" operation="add"/>
                        <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'"/>
                        <!--<speak actor="$Client" line="1000401" comment="(successful mission)" comment="TODO @Lennart: Overlaps with docking announcement"/>-->
                        <do_if value="$TextTable.$logbook?">
                          <write_to_logbook category="missions" title="$TextTable.$missionname" text="$TextTable.$logbook" entity="$Client" money="$RewardCr" />
                        </do_if>
                        <do_else>
                          <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>
                        </do_else>
                        <remove_mission cue="$MissionCue" type="completed" activate="next" />

                        <signal_cue_instantly cue="CleanUp" />
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="ForceCleanup" onfail="cancel">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="not event.param? or event.param == $MissionCue"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
            <do_if value="$BriefingCutsceneStarted?">
              <remove_value name="$BriefingCutsceneStarted"/>
              <stop_cutscene key="$CutsceneKey"/>

              <do_if value="$CutsceneCluster.exists">
                <destroy_object object="$CutsceneCluster"/>
              </do_if>
              <do_if value="$CutsceneShip.exists">
                <destroy_object object="$CutsceneShip"/>
              </do_if>
            </do_if>
            <do_if value="$HoloMap?">
              <remove_holomap />
              <remove_value name="$HoloMap"/>
            </do_if>


            <!--***Cleanup objects***-->
            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and (not $PreexistingClient?)">
              <signal_cue_instantly cue="md.GenericMissions.CleanupActor" param="[$Client]" />
            </do_if>

            <do_if value="@$NPCContact.$InstantiationRequesters.indexof.{$MissionCue}">
              <remove_value name="$NPCContact.$InstantiationRequesters.{$NPCContact.$InstantiationRequesters.indexof.{$MissionCue}}"/>
              <do_if value="$NPCContact.$InstantiationRequesters.count == 0">
                <remove_value name="$NPCContact.$InstantiationRequesters"/>
              </do_if>
            </do_if>

            <do_if value="@$PassengerShip.exists and $NPCContact.hascontext.{$PassengerShip}">
              <signal_cue_instantly cue="md.NPC_Instantiation.NPC_Placement_Manager" param="['remove_request', $NPCContact, $ContactNPCPlacementTable.$cue]"/>
              <signal_cue_instantly cue="md.NPC_Missions.Disembark_Passenger" param="table[
                                         $passenger = $NPCContact,
                                         $object = $PassengerShip,
                                         $debugchance = $DebugChance]"/>
            </do_if>

            <!--***Evaluate result***-->
            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']" comment="feedback = id, type and error-text from the above FeedbackValues-table"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [Owen]'" break="1"/>
              </do_else>

              <do_if value="$ReportSignalCue" comment ="The cue which called us">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData" comment="return feedback-data to calling cue"/>
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>

            <cancel_cue cue="Start"/>
          </actions>
        </cue>
      </cues>
    </library>


    <!-- MISSION SETUP HELPERS -->


    <!-- input: $DeliveryItem and $DeliveryAmount, output: $ResourceCost__Result -->
    <library name="CalculateResourceCost">
      <actions>
        <set_value name="$ResourceCost__Result" exact="0Cr"/>
        <!-- reimburse cost of required inventory items -->
        <do_all exact="$DeliveryItemsTable.keys.count" counter="$i">
          <set_value name="this.$Ware" exact="$DeliveryItemsTable.keys.{$i}"/>
          <do_if value="typeof $DeliveryItemsTable.{this.$Ware} == datatype.list">
            <set_value name="$ResourceCost__Result" exact="(this.$Ware.maxprice * $DeliveryItemsTable.{this.$Ware}.{1}) / (10Cr) * (10Cr)" comment="round"/>
          </do_if>
          <do_else>
            <set_value name="$ResourceCost__Result" exact="(this.$Ware.maxprice * $DeliveryItemsTable.{this.$Ware}) / (10Cr) * (10Cr)" comment="round"/>
          </do_else>
        </do_all>
      </actions>
    </library>


    <!--GENERIC MISSION VARIANTS-->

    <cue name="Force_Generic_Var_1" instantiate="true">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers" />
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 1, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_AssistedTask_Var_1" />
    </cue>

    <!--event.param = table[
    $Sector,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnSectorChange (Optional, defaults to true)
    $DebugChance (Optional)]-->
    <cue name="GenerateGenericMission" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Sector"           exact="event.param.$Sector"/>
        <set_value name="$ReportSignalCue"  exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant"   exact="@event.param.$MissionVariant"/>
        <do_if value="event.param.$RemoveOnSectorChange?">
          <set_value name="$RemoveOnSectorChange" exact="event.param.$RemoveOnSectorChange"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnSectorChange" exact="true"/>
        </do_else>

        <set_value name="$DebugChance"      exact="@event.param.$DebugChance"/>
        <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>

        <set_value name="$FeedbackManager" exact="FeedbackValueManager"/>
        <assert value="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT?" text="'Required error code does not exist. Was the FeedbackValueManager not updated for stand-alone missions? [Owen/Roger]'"/>

        <debug_text text="'Attempting to generate a generic mission'" chance="$DebugChance"/>
      </actions>
      <cues>
        <cue name="GenerateGenericMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>

            <!--Set up some common variables first so that the variants don't have to do things multiple times-->

            <!--Find potential offer stations in the sector-->
            <create_list name="$PotentialOfferStations"/>
            <do_if value="player.exists">
              <find_station name="$PotentialOfferStations" space="$Sector" multiple="true">
                <match owner="[faction.player, faction.xenon, faction.khaak, faction.ownerless]" negate="true"/>
                <match_relation_to object="player.entity" comparison="not" relation="enemy" />
              </find_station>
            </do_if>

            <do_if value="$PotentialOfferStations.count">

              <do_if value="$MissionVariant">
                <!--A specific MissionVariant ID was requested-->
                <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
                <do_if value="$MissionVariant == 1">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [Lennart]'"/>
                </do_else>
              </do_if>
              <do_else>
                <!--Attempt to a mission variant at random-->
                <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
              </do_else>
            </do_if>

            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateGenericMission"/>
            </do_else>
          </actions>
        </cue>

        <!-- VARIANT 1: Mineral Specialist
        (Deliver Items), Pickup Passenger, Find Resources, Harvest Resources, Drop Off Passenger -->
        <cue name="GenerateGenericMission_Variant_1" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>

            <set_value name="$Valid" exact="null"/>

            <!--Filter for stations which are handled by the variant-->
            <create_list name="$RefineryStations"/>
            <shuffle_list list="$OfferStations"/>
            <do_all exact="$OfferStations.count" counter="$OScounter">
              <do_if value="$OfferStations.{$OScounter}.istradestation">
                <set_value name="$TradeStation" exact="$OfferStations.{$OScounter}"/>
                <append_to_list name="$RefineryStations" exact="$OfferStations.{$OScounter}"/>
              </do_if>
              <do_else>
                <check_object result="$Refinery" object="$OfferStations.{$OScounter}">
                  <match_resources wares="[ware.helium, ware.hydrogen, ware.ice, ware.methane, ware.ore, ware.silicon]"/>
                </check_object>
                <do_if value="$Refinery">
                  <append_to_list name="$RefineryStations" exact="$OfferStations.{$OScounter}"/>
                </do_if>
              </do_else>
            </do_all>

            <!-- Choose variation -->
            <do_if value="$RefineryStations.count">
              <set_value name="$OfferStation" exact="$RefineryStations.random"/>
              <set_value name="$Faction" exact="$OfferStation.owner"/>
              <set_value name="$TextOffset" exact="null"/>
              <set_value name="$HarvestWaresTable" exact="table[]" comment="Wares for main objective"/>
              <set_value name="$DeliveryItemsTable" exact="table[]" comment="Wares for delivery in prologue"/>
              <set_value name="$StartRoomTag" exact="null"/>
              <set_value name="$StartInteriorName" exact="null"/>
              <!-- TODO @Lennart: RML_Find_Resources needs a specified sector the player has to find resources in -->
              <set_value name="$FindResourcesSpace" exact="$OfferStation.sector"/>

              <set_value name="$Difficulty" exact="level.medium" comment="Player needs a mining ship to complete the mission."/>
              <set_value name="$MissionLevel" exact="1" comment="Short mission chain would warrant a higher level, but it's very easy except for the mining ship requirement."/>
              <set_value name="$StartObject" exact="$OfferStation"/>
              <set_value name="$EndObject" exact="$OfferStation"/>
              <set_value name="$PlayerShipPurpose" exact="purpose.mine"/>

              <!--Nividium-->
              <do_if value="$OfferStation == @$TradeStation">
                <set_value name="$TextOffset" exact="1000"/>
                <set_value name="$MissionLevel" exact="2" operation="add" comment="Nividium is a lot more rare, but shows as pink on the scanner (+1). Added delivery mission (+1)."/>
                <set_value name="$TryResource" exact="ware.nividium"/>
                <set_value name="$DeliveryItemsTable.{ware.inv_crystal_01}" min="3" max="7"/>
                <set_value name="$DeliveryItemsTable.{ware.inv_crystal_02}" min="2" max="4"/>
                <set_value name="$Valid" exact="1"/>
              </do_if>
              <do_else>
                <do_any>
                  <set_value name="$TextOffset" exact="1100" weight="if $OfferStation.resources.{ware.ore}.exists then 100 else 0"/>
                  <set_value name="$TextOffset" exact="1200" weight="if $OfferStation.resources.{ware.silicon}.exists then 100 else 0"/>
                  <set_value name="$TextOffset" exact="1300" weight="if $OfferStation.resources.{ware.ice}.exists then 100 else 0"/>
                </do_any>
                <!-- Ore -->
                <do_if value="$TextOffset == 1100">
                  <set_value name="$TryResource" exact="ware.ore"/>
                  <set_value name="$Valid" exact="1"/>
                </do_if>
                <!-- Silicon -->
                <do_elseif value="$TextOffset == 1200">
                  <set_value name="$TryResource" exact="ware.silicon"/>
                  <set_value name="$MissionLevel" operation="add" comment="Silicon is slightly more rare."/>
                  <set_value name="$StartRoomTag" exact="tag.bar"/>
                  <set_value name="$StartInteriorName" exact="readtext.{20007}.{1031}" comment="Bar"/>
                  <set_value name="$Valid" exact="1"/>
                </do_elseif>
                <!-- Ice -->
                <do_elseif value="$TextOffset == 1300">
                  <set_value name="$TryResource" exact="ware.ice"/>
                  <set_value name="$Valid" exact="1"/>
                </do_elseif>
              </do_else>
            </do_if>

            <do_if value="$Valid == 1">
              <!-- Set the smallest solid storage capacity of miners as maximum for collection -->
              <get_ship_definition macro="$MiningShips" multiple="true" tags="tag.miner"/>
              <do_all exact="$MiningShips.count" counter="$MScounter">
                <do_if value="not $SmallestStorage? and $MiningShips.{$MScounter}.cargo.capacity.solid gt 0">
                  <set_value name="$SmallestStorage" exact="$MiningShips.{$MScounter}.cargo.capacity.solid"/>
                </do_if>
                <do_elseif value="$MiningShips.{$MScounter}.cargo.capacity.solid lt $SmallestStorage and $MiningShips.{$MScounter}.cargo.capacity.solid gt 0">
                  <set_value name="$SmallestStorage" exact="$MiningShips.{$MScounter}.cargo.capacity.solid"/>
                </do_elseif>
              </do_all>
              <set_value name="$HarvestWaresTable.{$TryResource}" min="$SmallestStorage / $TryResource.volume * 0.5" max="$SmallestStorage / $TryResource.volume * 0.8"/>
              <set_value name="$HarvestWaresTable.{$TryResource}" exact="($HarvestWaresTable.{$TryResource})L / 10 * 10" comment="round"/>

              <!-- Search for resource deposit -->
              <create_list name="$ResourceTryList"/>
              <do_all exact="$HarvestWaresTable.keys.count" counter="$HWTcounter">
                <append_to_list name="$ResourceTryList" exact="$HarvestWaresTable.keys.{$HWTcounter}"/>
              </do_all>
              <set_value name="$Space" exact="$FindResourcesSpace"/>
              <include_actions ref="md.GM_Find_Resources.Check_Space" comment ="input: $MissionLevel (optional), $ResourceTryList, $Space; output: $MissionLevel, $ResourceList, $ResourceYieldList, $Valid == 2"/>
              <remove_value name="$Space" comment="Generic variable name, might be reused elsewhere"/>
              <remove_value name="$ResourceTryList"/>
            </do_if>

            <do_if value="$Valid == 2">
              <!-- Create room for NPCContact -->
              <get_room_definition macro="$StartCorridorMacro" doors="$StartDoors" race="$StartObject.trueowner.primaryrace" tags="tag.corridor"/>
              <!-- TODO @Lennart: How do we get rid of the hacking terminals in the infrastructure room? -->
              <get_room_definition macro="$StartRoomMacro" tags="if $StartRoomTag then $StartRoomTag else tag.infrastructure"/>
              <do_if value="$StartCorridorMacro and $StartRoomMacro">
                <do_if value="not $StartInteriorName">
                  <set_value name="$StartInteriorName" exact="readtext.{20007}.{1171}" comment="Science Laboratory"/>
                </do_if>
                <set_value name="$Valid" exact="3"/>
              </do_if>
            </do_if>

            <!-- Report that variant is valid -->
            <do_if value="$Valid == 3">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_1_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <actions>
                <create_cue_actor cue="GenerateGenericMission_Variant_1_Trigger" name="$MissionActor">
                  <select faction="$Faction"/>
                </create_cue_actor>
                <set_entity_type entity="$MissionActor" type="entitytype.crowd"/>
                <set_entity_traits entity="$MissionActor" missionactor="true" customhandler="true"/>
              </actions>
              <cues>
                <cue name="GenerateGenericMission_Variant_1_Ref" ref="Start">

                  <param name="OfferObject"   value="$OfferStation"/>
                  <param name="MissionLevel"  value="$MissionLevel"/>
                  <param name="Difficulty"    value="$Difficulty"/>

                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>

                  <!--Mission text-->
                  <param name="Page"          value="30231"/>
                  <param name="TextOffset"    value="$TextOffset"/>

                  <!--************************* Mission specific params *************************-->
                  <!--Deliver Inventory Mission-->
                  <param name="DeliveryNPC"           value="$MissionActor"           comment="The NPC to which the items should be delivered" />
                  <param name="PlaceNPC"              value="true"                    comment="Does the mission handle the placement and removal of the delivery NPC? If false, some other system must be in charge of doing so." />
                  <param name="DeliveryItemsTable"    value="$DeliveryItemsTable"     comment="Table of ware amounts. Key = ware. Value = amount. Inventory wares only."/>

                  <!-- If the mission is to manage placing the delivery NPC, all of these parameters must be passed in together -->
                  <!-- Room, corridor and door definitions could be provided by the caller through get_room_definition -->
                  <param name="DeliveryObject"        value="$StartObject"         comment="The object on which to create the interior" />
                  <param name="DeliveryRoomMacro"     value="$StartRoomMacro"      comment="The dynamic interior room the DeliveryNPC should be placed in, if not placed already" />
                  <param name="DeliveryCorridorMacro" value="$StartCorridorMacro"  comment="The dynamic interior corridor leading to DeliveryRoomMacro" />
                  <param name="DeliveryDoors"         value="$StartDoors"          comment="The possible dynamic interior doors used to connect the room and corridor. When defining a room or corridor macro, this is is the variable saved in the doors parameter" />
                  <param name="DeliveryInteriorName"  value="$StartInteriorName"   comment="The name of the dynamic interior the DeliveryNPC should used, if not placed already" />

                  <!--Transport Passenger Mission-->
                  <param name="StartObject"           value="$StartObject"            comment="The object (e.g. station) to initially pick the NPC up on"/>
                  <param name="PlayerShipPurpose"     value="$PlayerShipPurpose"      comment="The ship type required to pick up the passenger"/>
                  <param name="NPCContact"            value="$MissionActor"           comment="The NPC who accompanies the player during the mission"/>

                  <param name="StartRoomMacro"        value="$StartRoomMacro"         comment="The dynamic interior room the NPCContact should be placed in, if not placed already"/>
                  <param name="StartCorridorMacro"    value="$StartCorridorMacro"     comment="The dynamic interior corridor leading to InteriorRoomMacro"/>
                  <param name="StartDoors"            value="$StartDoors"             comment="The possible dynamic interior doors used to connect the room and corridor. When defining a room or corridor macro, this is is the variable saved in the doors parameter"/>
                  <param name="StartInteriorName"     value="$StartInteriorName"      comment="The name of the dynamic interior the NPCContact should used, if not placed already"/>

                  <!--Find Resources Mission-->
                  <param name="FindResourcesSpace"    value="$FindResourcesSpace"     comment="Space (e.g. sector) the player has to find resources in"/>
                  <param name="ResourceList"          value="$ResourceList"           comment="List of resources to find (currently any will do)"/>
                  <param name="ResourceYieldList"     value="$ResourceYieldList"      comment="Minimum Yield we are looking for"/>

                  <!--Collect Wares Mission-->
                  <param name="HarvestWaresTable"     value="$HarvestWaresTable"      comment="The wares which need to be collected after the find resources step (e.g. a certain amount of said resources)"/>

                  <!-- Drop off Passenger Mission-->
                  <param name="EndObject"             value="$EndObject"              comment="The object (e.g. station) to drop the NPC off at"/>

                  <param name="ReportSignalCue"       value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance"           value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

  </cues>

</mdscript>
