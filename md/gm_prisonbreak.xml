<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GM_PrisonBreak" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--Base Mission information-->
    <!--
    Generic Mission name:    Prison Break
    Primary 'missiontype':   missiontype.think -->

    <!--The Feedback Manager contains a table of feedback values related to this Generic Mission. 
		This table is 'const' during the mission (the table itself doesn't change anymore after inialization)

	There are several maintypes of feedback:
    event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
    removed:  The mission offer was removed before acceptance
    success:  The mission was successfully completed by the player
    failure:  The player failed the mission
    error:    Something went wrong with the mission set-up or during the mission-->
    <cue name="FeedbackValueManager" namespace="this" version="2">
      <actions>
        <!-- TODO (@Lorraine): make sure to replace RML errors with valid errors according to what the mission needs (equivalent to $RML_FAILED) -->
        <set_value name="$FeedbackValues" exact="table[
                   $MISSION_GENERATED       = table[$type = 'event',    $text = 'Mission variation generated successfully'],
                   $MISSION_ACCEPTED        = table[$type = 'event',    $text = 'Mission accepted'],
                   
                   $OFFER_REMOVED           = table[$type = 'removed',  $text = 'Offer removed'],
                   $DECLINED_OFFER          = table[$type = 'removed',  $text = 'Player declined Event Offer'],
                   $EVENT_OFFER_TIMEOUT     = table[$type = 'removed',  $text = 'Event Offer timeout'],
                   $SIGNAL_LEAK_REMOVED     = table[$type = 'removed',  $text = 'Signal leak offer removed'],
                   
                   $MISSION_SUCCEEDED       = table[$type = 'success',  $text = 'Mission succeeded'],
                   
                   $MISSION_ABORTED         = table[$type = 'failure',  $text = 'Mission aborted by player'],
                   $FORCED_CLEANUP          = table[$type = 'failure',  $text = 'Forced to end from outside'],
                   $MISSION_TIMEOUT         = table[$type = 'failure',  $text = 'Mission timeout'],
                   $RML_FAILED              = table[$type = 'failure',  $text = 'RML failure'],
                   
                   $NO_VALID_CLIENT_OWNER   = table[$type = 'error',    $text = 'No valid ClientOwner parameter provided'],
                   $INVALID_OFFER_TYPE      = table[$type = 'error',    $text = 'No offer parameters were valid'],
                   $NO_TEXT_OFFSET          = table[$type = 'error',    $text = 'No TextOffset set'],
                   
                   $INVALID_PRISONSTATION_PARAM       = table[$type = 'error', $text = 'Invalid PrisonStation param'],
                   $INVALID_SIGNALLEAKVOICELINE_PARAM = table[$type = 'error', $text = 'Invalid SignalLeakVoiceLine param'], 
                   $INVALID_PRISONMACRO_PARAM         = table[$type = 'error', $text = 'Invalid PrisonMacro param'],
                   $INVALID_CORRIDORMACRO_PARAM       = table[$type = 'error', $text = 'Invalid CorridorMacro param'],
                   $INVALID_DYNAMICINTERIOR           = table[$type = 'error', $text = 'Invalid dynamic interior created'],
                   
                   $INVALID_FORCE_CLEANUP   = table[$type = 'error',    $text = 'ForceCleanup cue invalid'],
                   $RML_ERROR               = table[$type = 'error',    $text = 'RML error']
                   ]"/>
      </actions>
      <patch sinceversion="2">
        <!--To patch new feedback values, increment 'version' and 'sinceversion' number-->
        <force_cue cue="FeedbackValueManager"/>
      </patch>
    </cue>

    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternatively, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname
        2 = $TextTable.$description
        3 = $TextTable.$objective_collect
        4 = $TextTable.$objective_craft
        5 = $TextTable.$objective_hack
        6 = $TextTable.$prison_name-->
        <set_value name="$TextTable.$missionname" exact="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100"/>
        <set_value name="$TextTable.$description" exact="readtext.{$Page}.{$TextOffset + 2}" chance="if $TextTable.$description? then 0 else 100" />
        <set_value name="$TextTable.$objective_collect" exact="readtext.{$Page}.{$TextOffset + 3}" chance="if $TextTable.$objective_collect? then 0 else 100"/>
        <set_value name="$TextTable.$objective_craft" exact="readtext.{$Page}.{$TextOffset + 4}" chance="if $TextTable.$objective_craft? then 0 else 100"/>
        <set_value name="$TextTable.$objective_hack" exact="readtext.{$Page}.{$TextOffset + 5}" chance="if $TextTable.$objective_hack? then 0 else 100"/>
        <set_value name="$TextTable.$prison_name" exact="readtext.{$Page}.{$TextOffset + 6}" chance="if $TextTable.$prison_name? then 0 else 100" />
      </actions>
    </library>

    <!--TODO @Owen Simple example mission variant shortcut for testing-->

    <library name="Start">
      <params>
        <!-- For creating your own custom GM, you might need to change _some_ of the below parameters -->
        <param name="OfferObject" default="null" comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client" default="null" comment="Pre-existing client"/>
        <param name="ClientOwner" default="null" comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionThread" default="null" comment="Mission thread for the offer and mission"/>

        <param name="GenerateReward" default="true" comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr" default="null" comment="If the reward for this mission is credits, the number of credits should be set to this variable." />
        <param name="RewardObj" default="null" comment="If the reward for this mission is not credits, and is an object, it should be set to this variable." />
        <param name="RewardNotoriety" default="null"/>
        <param name="RewardText" default="null"  comment="Any text needed to define the reward for this mission - may be used in conjunction with $RewardCr and $RewardObj." />
        <param name="MissionDuration" default="null"/>
        <param name="MissionType" default="missiontype.destroy" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"/>
        <param name="Difficulty"/>

        <!--Offer location and conversation-->
        <param name="WithoutOffer" default="false" comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue" default="null" comment="Do not create a mission offer but wait for this cue to be completed before running the mission"/>
        <param name="DeclineButton" default="true" comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer" default="false" comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer" default="false" comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue" default="null" comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance" default="md.$MaxMissionOfferDistance"/>
        <param name="HideFromBBS" default="false" comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange" default="true"/>

        <!--BBS only params-->
        <param name="BBSObject" default="null"/>
        <param name="BBSDistance" default="null"/>
        <param name="BBSTimeoutMin" default="null"/>
        <param name="BBSTimeoutMax" default="null"/>

        <!--Mission text-->
        <param name="Page"        comment="Allows a different text page to be used instead of the generic one. Text IDs must be mapped similarly."/>
        <param name="TextOffset"  comment="The text offset for this variant's text on the page. "/>
        <param name="TextTable" default="table[]" comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi'
               Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>

        <!--Mission specific params-->
        <param name="SignalLeakVoiceLine" default="null" comment="The line that should be used for signal leak introductions to this mission" />
        <param name="PrisonStation" comment="The station to which the prison cell is attached" />
        <param name="PrisonInterior" default="null" comment="If a particular prison interior should be used, pass it in, otherwise used to store generated prison interior for clean up" />
        <param name="PrisonMacro" default="macro.room_gen_detentioncell_01_macro" />
        <param name="CorridorMacro" default="macro.room_arg_corridor_01_macro" />

        <param name="ReportSignalCue" default="null" comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue" default="null" comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup" default="null" comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance" default="0"/>
      </params>
      <actions>
        <!--Feedback value setup-->
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GM_PrisonBreak.FeedbackValueManager"/>

        <assert value="not $MissionThread or $WithoutOffer" text="'Thread sub-mission is also set to create an offer which is not supported.\n
                The mission thread offer should be populated with mission details suitable for this mission, but not from an actual mission. Thread: ' + $MissionThread + ' [Owen]'"/>

        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>

        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [Owen]'"/>
            </do_if>

            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
            <do_else>
              <!--Mission specific param checks-->
              <do_if value="not ($PrisonStation.isclass.station and $PrisonStation.exists)">
                <set_value name="$Feedback" exact="'$INVALID_PRISONSTATION_PARAM'" />
              </do_if>
              <do_elseif value="not (typeof $PrisonMacro == datatype.macro and $PrisonMacro.isclass.room)">
                <set_value name="$Feedback" exact="'$INVALID_PRISONMACRO_PARAM'" />
              </do_elseif>
              <do_elseif value="not (typeof $CorridorMacro == datatype.macro and $CorridorMacro.isclass.room)">
                <set_value name="$Feedback" exact="'$INVALID_CORRIDORMACRO_PARAM'" />
              </do_elseif>
            </do_else>
          </do_else>
        </do_if>
      </actions>
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>

        <cue name="Do_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="not $Feedback"/>
          </conditions>
          <actions>
            <do_if value="not $PreexistingClient?">
              <!-- No pre-existing client, create a temporary client for this mission -->
              <!-- This auto-assigns a 'matching' text-page using the metadata (id=0) specified in the text-files. Speak commands for this actor will then refer to the selected text-page-->
              <!-- Possibly we'll need to add additional filters (in case some topics aren't supported by all generic text-pages) -->
              <create_cue_actor cue="Start" name="$Client">
                <select faction="$ClientOwner"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>

            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>
              <do_any>
                <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]" comment="basic reward credits"/>
                  <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                  <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied"/>
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardModWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_ModPart" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_ModPart__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardSeminarWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Seminar" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_Seminar__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
              </do_any>

              <do_if value="not $RewardNotoriety">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
              </do_if>
            </do_if>

            <include_actions ref="GenerateTextTable"/>

            <do_if value="$ReportSignalCue">
              <!--Signal the $ReportSignalCue that the mission has been successfully generated-->
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
              <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
              <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
              <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText]"/>
            </do_if>
          </actions>
          <cues>

            <!--***MISSION OFFER***-->
            <cue name="With_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <cues>
                <!--Cue which creates the offer, when signalled. To be signalled from the GenericMissions.OfferMission library, referenced below-->
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">

                      <!-- Briefing details -->
                      <create_offer cue="Start" location="$OfferObject" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" actor="$Client"
                                  faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" duration="$MissionDuration" hidden="$HideFromBBS">
                        <briefing>
                          <objective step="1" action="objective.dockat" object="$PrisonStation" comment="Dock at: $StationName$" />
                          <objective step="2" action="objective.find" text="$TextTable.$objective_collect" />
                          <objective step="3" action="objective.craft" text="$TextTable.$objective_craft" />
                          <objective step="4" action="objective.hack" text="$TextTable.$objective_hack" />
                        </briefing>
                      </create_offer>
                    </do_if>
                    <set_value name="$OfferCreated" exact="true"/>

                    <do_if value="$OfferObject.isclass.signalleak">
                      <do_if value="readtext.{$Client.page}.{$SignalLeakVoiceLine}?">
                        <update_signal_leak_voice object="$OfferObject" page="$Client.page" lines="$SignalLeakVoiceLine" />
                      </do_if>
                      <do_else>
                        <set_value name="$Feedback" exact="'$INVALID_SIGNALLEAKVOICELINE_PARAM'" />
                        <signal_cue cue="CleanUp" />
                      </do_else>
                    </do_if>
                  </actions>
                </cue>

                <!--The majority of the offer logic is within this library. The parameters we pass down below, specify in which way this mission is going to be offered to the player (i.e. BBS, Signal-Leak, ...)
                Some of the mission specific handling is still contained in this file but triggered via the library via a signal e.g. setting up the briefing details via the 'CreateOffer' cue above.-->
                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType"     value="$OfferType"/>
                  <param name="OfferCue"      value="Start"/>
                  <param name="CleanupCue"    value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName"   value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue" value="$CancelOfferCue"/>

                  <!--Object based params (offered by Station/Ship/Signal-leak)-->
                  <param name="TimeoutMin"  value="8min" comment="Minimum time the offer remains valid"/>
                  <param name="TimeoutMax"  value="12min"/>
                  <param name="MaxDistance" value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>

                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject" value="$OfferObject"/>

                  <!--BBS based offers-->
                  <param name="BBSObject"     value="@$BBSObject"/>
                  <param name="BBSDistance"   value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>

                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>

                  <!--Client-->
                  <param name="Client"                 value="$Client"/>
                  <param name="Line_EventOffer"        value="1000101" comment="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_StartConversation" value="null" comment ="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_Goodbye"           value="null" comment="Client speaks this line from his generic-npc-page"/>

                  <param name="DebugChance" value="$DebugChance"/>
                </cue>

                <!--Cue signalled when the offer library is finished-->
                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the cases where a mission is automatically accepted on creation-->
            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
              </conditions>
              <actions>
                <signal_cue cue="MissionAccepted" />
              </actions>
            </cue>

            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="not event.param? or event.param == Start"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <signal_cue cue="MissionAccepted" />
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)-->
            <cue name="BriefingStarted">
              <conditions>
                <check_any>
                  <event_briefing_started cue="Start"/>
                  <event_briefing_submission_selected cue="Start"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$RenderTarget" exact="event.param.{1}"/>

                <set_value name="$BriefingCutsceneStarted" />
                <debug_text text="'Briefing started'" chance="$DebugChance"/>
              </actions>
              <cues>
                <cue name="DisplayCutscene" onfail="cancel">
                  <conditions>
                    <check_value value="$BriefingCutsceneStarted?" />
                  </conditions>
                  <actions>
                    <set_value name="$CutsceneObject" exact="$PrisonStation" />
                    <set_value name="$CutsceneKey" exact="'OrbitIndefinitely'" />
                    <play_cutscene key="$CutsceneKey" rendertarget="$RenderTarget">
                      <param name="targetobject" object="$CutsceneObject" />
                    </play_cutscene>
                  </actions>
                </cue>

                <cue name="BriefingStopped">
                  <conditions>
                    <check_any>
                      <event_briefing_cancelled cue="Start"/>
                      <event_briefing_submission_unselected cue="Start"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="$BriefingCutsceneStarted?">
                      <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                      <remove_value name="$BriefingCutsceneStarted"/>
                      <stop_cutscene key="$CutsceneKey"/>
                    </do_if>

                    <debug_text text="'Briefing cancelled'" chance="$DebugChance"/>
                    <reset_cue cue="BriefingStarted"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--This cue creates the mission itself, either from scratch or via an existing mission offer-->
            <cue name="MissionAccepted">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <actions>
                <do_if value="not $WithoutOffer">
                  <speak actor="$Client" line="1000204" comment="(player accepted mission offer)" />
                  <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = 1000204]"/>
                </do_if>

                <debug_text text="'Mission accepted!'" chance="$DebugChance"/>
                <set_value name="stat.missions_accepted" operation="add"/>

                <do_if value="$WithoutOffer">
                  <do_if value="$MissionThread">
                    <create_mission cue="Start" missionthread="$MissionThread" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="Start" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                  </do_else>

                  <update_mission cue="Start">
                    <briefing>
                      <objective step="1" action="objective.dockat" object="$PrisonStation" comment="Dock at: $StationName$" />
                      <objective step="2" action="objective.find" text="$TextTable.$objective_collect" />
                      <objective step="3" action="objective.craft" text="$TextTable.$objective_craft" />
                      <objective step="4" action="objective.hack" text="$TextTable.$objective_hack" />
                    </briefing>
                  </update_mission>
                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="Start" offercue="Start" missionthread="$MissionThread"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="Start" offercue="Start"/>
                  </do_else>
                  <remove_offer cue="Start"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>

                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>

                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>
              </actions>
              <cues>
                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>

                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{Start}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{Start}"/>
                      </conditions>
                      <actions>
                        <activate_mission cue="Start"/>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="ActivateMission" version="2">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <set_value name="$StartStep" exact="1"/>
                    <set_objective cue="Start" step="$StartStep" action="objective.dockat" object="$PrisonStation" />

                    <set_value name="$InventoryToCollect" exact="table[{ware.inv_decryptionmodule} = 1, {ware.inv_agidevice_01} = 1, {ware.inv_interfaceunit} = 1]"/>

                    <set_value name="$CrateSlots" exact="[]" />
                    <find_object_component name="$DockingBays" object="$PrisonStation" class="class.dockingbay" recursive="true" multiple="true" />
                    <do_all exact="$DockingBays.count" counter="$DockingBayCounter">
                      <set_value name="$DockingBay" exact="$DockingBays.{$DockingBayCounter}" />
                      <find_crate_slot name="$DockingBayCrateSlots" object="$DockingBay" tags="tag.crate_s" multiple="true" />
                      <do_all exact="$DockingBayCrateSlots.count" counter="$CrateSlotCounter">
                        <append_to_list name="$CrateSlots" exact="$DockingBayCrateSlots.{$CrateSlotCounter}" />
                      </do_all>
                    </do_all>

                    <set_value name="$SelectedCrateSlots" exact="[]" />
                    <set_value name="$NumSelectedCrateSlots" exact="5" comment="Balance this value to make sure the player still has to look for the crates, but they are not impossible to find" />
                    <do_if value="$CrateSlots.count">
                      <do_all exact="$NumSelectedCrateSlots">
                        <set_value name="$SelectedCrateSlot" exact="$CrateSlots.random" />
                        <do_if value="not $SelectedCrateSlots.indexof.{$SelectedCrateSlot}">
                          <append_to_list name="$SelectedCrateSlots" exact="$SelectedCrateSlot" />
                          <remove_value name="$CrateSlots.{$CrateSlots.indexof.{$SelectedCrateSlot}}" />
                        </do_if>
                      </do_all>
                    </do_if>

                    <create_group groupname="$CrateGroup"/>
                    
                    
                    <do_all exact="$SelectedCrateSlots.count" counter="$CrateSlotCounter">
                      <set_value name="$CrateSlot" exact="$SelectedCrateSlots.{$CrateSlotCounter}" />
                      <create_crate name="$Crate" macro="macro.crate_gen_s_01_macro" slot="$CrateSlot" />
                      <do_if value="$CrateSlotCounter le $InventoryToCollect.keys.count">
                        <set_value name="$Ware" exact="$InventoryToCollect.keys.{$CrateSlotCounter}"/>
                        <add_cargo object="$Crate" ware="$Ware" exact="$InventoryToCollect.{$Ware}" />
                        <add_to_group groupname="$CrateGroup" object="$Crate"/>
                      </do_if>
                      <do_else>
                        <!-- TODO (@Owen): Balance this . remove seminar-->
                        
                        <add_cargo object="$Crate" ware="[ware.inv_unstablecrystal, ware.inv_magneticmaterial, ware.inv_majaglit, ware.inv_agidevice_02,
                                                          ware.inv_spaceflyeggs].random" min="1" max="2" />
                      </do_else>
                    </do_all>
                    <remove_value name="$Ware"/>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <set_value name="$OldInventoryToCollect" exact="$InventoryToCollect"/>
                    <set_value name="$InventoryToCollect" exact="table[]"/>
                    <do_for_each in="$OldInventoryToCollect" name="$WareList">
                      <set_value name="$InventoryToCollect.{$WareList.{1}}" exact="$WareList.{2}"/>
                    </do_for_each>
                  </patch>
                  <cues>
                    <cue name="DockedAtPrisonStation">
                      <conditions>
                        <!--TODO @Owen @Lorraine - we need to bulletproof this for when the player teleports to the station or lands when not controlling the ship-->
                        <event_object_docked_at container="$PrisonStation" />
                        <check_value value="global.$PlayerControlledGroup.indexof.{event.param}" />
                      </conditions>
                      <actions>
                        <debug_text text="'Player has docked at $PrisonStation'" chance="$DebugChance" />
                        <set_value name="$StartStep" exact="2" />

                        <!-- Create dynamic mission interior for prison cell and place NPC inside the cell -->
                        <set_value name="$Race" exact="$PrisonStation.owner.primaryrace" />
                        <get_room_definition macro="$CorridorMacro" doors="$CorridorDoors" race="$Race" tags="tag.corridor" />
                        <get_room_definition macro="$RoomMacro" doors="$RoomDoors" tags="tag.prison" />
                        <set_value name="$InteriorName" exact="$TextTable.$prison_name" />
                        <create_dynamic_interior object="$PrisonStation" corridor="$CorridorMacro" room="$RoomMacro" door="$CorridorDoors.random" name="$InteriorName" interiorname="$PrisonInterior" corridorname="$Corridor" roomname="$Room" />
                        <do_if value="$PrisonInterior and $Corridor and $Room">
                          <set_dynamic_interior_private object="$PrisonStation" interior="$PrisonInterior" />
                          <debug_text text="'Prison interior could be generated'" chance="$DebugChance" />
                          <find_npc_slot name="$NPCSlot" object="$Room" tags="tag.prisoner" />
                          <do_if value="$NPCSlot">
                            <set_entity_role entity="$Client" role="entityrole.prisoner" />
                            <set_entity_traits entity="$Client" missionactor="true" customhandler="true" />
                            <add_actor_to_room actor="$Client" slot="$NPCSlot" />
                            <debug_text text="'Client added into prison cell - should be waiting for player there'" chance="$DebugChance" />

                            <set_value name="$CellGroupTag" exact="$NPCSlot.group" />
                            <debug_text text="'$CellGroupTag set to ' + $CellGroupTag" chance="$DebugChance" />
                            <set_trigger_activation_wares room="$Room" group="$CellGroupTag" ware="ware.inv_securityslicer" amount="1" consumeonuse="true" />
                          </do_if>
                          <do_else>
                            <debug_text text="'No NPC slot in prison cell could be found'" filter="error" />
                            <set_value name="$Feedback" exact="'$INVALID_DYNAMICINTERIOR'" />
                          </do_else>
                        </do_if>
                        <do_else>
                          <debug_text text="'Prison interior could not be generated using $CorridorMacro: ' + $CorridorMacro + ' and $RoomMacro: ' + $RoomMacro" filter="error" />
                          <set_value name="$Feedback" exact="'$INVALID_DYNAMICINTERIOR'" />
                        </do_else>

                        <do_if value="$Feedback">
                          <signal_cue cue="CleanUp" />
                          <cancel_cue cue="DockedAtPrisonStation" />
                        </do_if>
                      </actions>
                      <cues>
                        <cue name="CollectInventory_Ref" ref="md.RML_Collect_Inventory.CollectInventory">
                          <param name="MissionCue" value="Start" />
                          <param name="EndSignalCue" value="PlayerCollectedInventory" />
                          <param name="StartStep" value="$StartStep" />
                          <param name="ObjectiveGroup" value="$CrateGroup" />
                          <param name="WaresParam" value="$InventoryToCollect" />
                          <param name="DebugChance" value="$DebugChance"/>
                        </cue>

                        <!-- TODO (@Lorraine): Remove this before release -->
                        <cue name="Debug_CheatSecuritySlicerIngrediants" instantiate="true">
                          <conditions>
                            <event_cue_signalled />
                          </conditions>
                          <actions>
                            <add_inventory entity="player.entity" ware="ware.inv_decryptionmodule" exact="1" />
                            <add_inventory entity="player.entity" ware="ware.inv_agidevice_02" exact="5" />
                            <add_inventory entity="player.entity" ware="ware.inv_interfaceunit" exact="1" />
                          </actions>
                        </cue>

                        <cue name="PlayerCollectedInventory" version="2">
                          <conditions>
                            <event_cue_signalled />
                          </conditions>
                          <actions>
                            <debug_text text="'Player has collected items necessary to craft electronic lockpick'" chance="$DebugChance" />
                            <set_value name="$StartStep" exact="3" />
                          </actions>
                          <patch sinceversion="2" state="waiting">
                            <set_value name="CollectInventory_Ref.$ObjectiveGroup" exact="$CrateGroup"/>
                          </patch>
                          <cues>
                            <cue name="CraftLockpick_Ref" ref="md.RML_Craft_Item.CraftItem">
                              <param name="MissionCue" value="Start" />
                              <param name="EndSignalCue" value="PlayerCraftedLockpick" />
                              <param name="StartStep" value="$StartStep" />
                              <param name="CraftingObjectiveText" value="ware.inv_securityslicer.name" />
                              <param name="ItemsToCraft" value="table[{ware.inv_securityslicer} = 1]" />
                              <param name="DebugChance" value="$DebugChance" />
                            </cue>

                            <!-- TODO (@Lorraine): Remove this before release -->
                            <cue name="Debug_CheatSecurityDecryptionSystem" instantiate="true">
                              <conditions>
                                <event_cue_signalled />
                              </conditions>
                              <actions>
                                <add_inventory entity="player.entity" ware="ware.inv_securityslicer" exact="1" />
                              </actions>
                            </cue>

                            <cue name="PlayerCraftedLockpick">
                              <conditions>
                                <event_cue_signalled />
                              </conditions>
                              <actions>
                                <debug_text text="'Player has crafted lockpick'" chance="$DebugChance" />
                                <set_value name="$StartStep" exact="4" />

                                <set_objective cue="Start" step="$StartStep" action="objective.hack" text="$TextTable.$objective_hack" object="$Room" />

                                <set_value name="$Client.$StateMachine.$DebugChance" exact="100" comment="TODO (@Lorraine): Remove this before committing" />
                              </actions>
                              <cues>
                                <cue name="PlayerHackedCellDoor">
                                  <conditions>
                                    <event_player_unlocked_platform_trigger component="$Room" group="$CellGroupTag" />
                                  </conditions>
                                  <delay exact="2s" />
                                  <actions>
                                    <debug_text text="'Player has hacked cell door - mission can complete'" chance="$DebugChance" />
                                    <set_value name="MissionEnded.$EndFeedbackValue" exact="1" />
                                    <signal_cue cue="MissionEnded" />
                                  </actions>
                                </cue>
                              </cues>
                            </cue>
                          </cues>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="Aborted">
                      <conditions>
                        <event_mission_aborted cue="Start"/>
                      </conditions>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                        <remove_mission cue="Start" type="aborted"/>
                        <signal_cue cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="MissionTimeout" onfail="cancel">
                      <conditions>
                        <check_value value="typeof $MissionDuration == datatype.time"/>
                        <check_value value="$MissionDuration" min="1s"/>
                      </conditions>
                      <delay exact="$MissionDuration"/>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericTimeoutLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <remove_mission cue="Start" type="failed"/>
                        <set_value name="$Feedback" exact="'$MISSION_TIMEOUT'"/>
                        <signal_cue_instantly cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="MissionEnded">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!-- Failure case -->
                        <do_if value="MissionEnded.$EndFeedbackValue" max="0">
                          <debug_text text="'This mission has failed. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                          <set_value name="$Feedback" exact="'$RML_FAILED'"/>
                          <speak actor="$Client" line="1000403" comment="(failed mission)" />
                          <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>

                          <remove_mission cue="Start" type="failed" reason="@MissionEnded.$EndFeedbackText"/>
                        </do_if>

                        <!-- Success case -->
                        <do_else>
                          <!--TODO: Partial success-->
                          <debug_text text="'This mission has ended. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                          <do_if value="$RewardNotoriety and $ClientOwner">
                            <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                            <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted" />
                            <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                          </do_if>

                          <do_if value="$RewardCr">
                            <reward_player money="$RewardCr" />
                          </do_if>
                          <do_elseif value="$RewardObj">
                            <do_if value="$RewardObj.isinventory">
                              <add_inventory entity="player.entity" ware="$RewardObj" />
                              <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received" />
                            </do_if>
                          </do_elseif>
                          <set_value name="stat.missions_completed" operation="add"/>
                          <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'"/>

                          <set_actor_lookat actor="$Client" component="player.entity" />
                          <speak actor="$Client">
                            <text line="2111" comment="Grateful" />
                            <text line="5023" comment="reward" />
                          </speak>

                          <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>

                          <signal_objects object="$Client" param="'escape_prison'" param2="table[$Speed = $Client.runspeed]" />
                          <remove_mission cue="Start" type="completed" />
                        </do_else>
                        <signal_cue cue="CleanUp" />
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="ForceCleanup" onfail="cancel">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="not event.param? or event.param == Start"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
            <do_if value="$BriefingCutsceneStarted?">
              <remove_value name="$BriefingCutsceneStarted"/>
              <stop_cutscene key="$CutsceneKey"/>

              <do_if value="$CutsceneCluster.exists">
                <destroy_object object="$CutsceneCluster"/>
              </do_if>
              <do_if value="$CutsceneShip.exists">
                <destroy_object object="$CutsceneShip"/>
              </do_if>
            </do_if>
            <do_if value="$HoloMap?">
              <remove_holomap />
              <remove_value name="$HoloMap"/>
            </do_if>


            <!--***Cleanup objects***-->

            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and (not $PreexistingClient?)">
              <signal_cue_instantly cue="md.GenericMissions.CleanupActor" param="[$Client, player.age + 20s]" />
            </do_if>

            <!-- Make sure the dynamic interior is removed at the right time -->
            <signal_cue_instantly cue="md.GM_PrisonBreak.CleanUp_MissionDynamicInterior" param="[$PrisonStation, $PrisonInterior]" />

            <!--***Evaluate result***-->
            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']" comment="feedback = id, type and error-text from the above FeedbackValues-table"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [Owen]'" break="1"/>
              </do_else>

              <do_if value="$ReportSignalCue" comment ="The cue which called us">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData" comment="return feedback-data to calling cue"/>
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>

            <cancel_cue cue="Start"/>
          </actions>
        </cue>
      </cues>
    </library>

    <cue name="CleanUp_MissionDynamicInterior" instantiate="true" namespace="this" comment="Make sure the dynamic interior of this mission is removed when the player leaves the station">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <set_value name="$Station" exact="event.param.{1}" />
        <set_value name="$Interior" exact="event.param.{2}" />
      </actions>
      <cues>
        <cue name="InteriorsDespawning">
          <conditions>
            <event_object_interiors_despawning object="$Station" />
          </conditions>
          <actions>
            <remove_dynamic_interior object="$Station" interior="$Interior" />
          </actions>
        </cue>
      </cues>
    </cue>
  </cues>
</mdscript>