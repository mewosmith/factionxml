<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GM_Destroy_Matching_Objects" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--Generic Mission: Destroy Objects - intended for Master Missions
    missiontype.destroy-->

    <!--
    To start the mission, reference the library md.GM_Destroy_Matching_Objects.Start
    To attempt to trigger the Generic Mission, signal md.GM_Destroy_Matching_Objects.StartGeneric-->

    <!--The Feedback Manager contains a table of feedback values related to this Generic Mission. There are several maintypes of feedback:
    event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
    removed:  The mission offer was removed before acceptance
    success:  The mission was successfully completed by the player
    failure:  The player failed the mission
    error:    Something went wrong with the mission set-up or during the mission-->
    <cue name="FeedbackValueManager" namespace="this" version="5">
      <actions>
        <set_value name="$FeedbackValues" exact="table[
                   $MISSION_GENERATED       = table[$type = 'event',    $text = 'Mission variation generated successfully'],
                   $MISSION_ACCEPTED        = table[$type = 'event',    $text = 'Mission accepted'],
                   
                   $OFFER_REMOVED           = table[$type = 'removed',  $text = 'Offer removed'],
                   $DECLINED_OFFER          = table[$type = 'removed',  $text = 'Player declined Event Offer'],
                   $EVENT_OFFER_TIMEOUT     = table[$type = 'removed',  $text = 'Event Offer timeout'],
                   $SIGNAL_LEAK_REMOVED     = table[$type = 'removed',  $text = 'Signal leak offer removed'],
                   $TARGET_KILLED_EARLY     = table[$type = 'removed',  $text = 'Object was destroyed during the offer'],
                   
                   $MISSION_SUCCEEDED       = table[$type = 'success',  $text = 'Mission succeeded'],
                   
                   $MISSION_ABORTED         = table[$type = 'failure',  $text = 'Mission aborted by player'],
                   $FORCED_CLEANUP          = table[$type = 'failure',  $text = 'Forced to end from outside'],
                   $MISSION_TIMEOUT         = table[$type = 'failure',  $text = 'Mission timeout'],
                   $RML_FAILED              = table[$type = 'failure',  $text = 'RML failure'],
                   $TARGET_PLAYER_OWNED     = table[$type = 'failure',  $text = 'Object became player owned during offer'],
                   
                   $NO_VALID_CLIENT_OWNER   = table[$type = 'error',    $text = 'No valid ClientOwner parameter provided'],
                   $INVALID_OFFER_TYPE      = table[$type = 'error',    $text = 'No offer parameters were valid'],
                   $NO_TEXT_OFFSET          = table[$type = 'error',    $text = 'No TextOffset set'],
                   $INVALID_FORCE_CLEANUP   = table[$type = 'error',    $text = 'ForceCleanup cue invalid'],
                   $INVALID_TARGETS_PARAM   = table[$type = 'error',    $text = 'No objects found to destroy'],
                   $NO_VALID_TARGETS        = table[$type = 'error',    $text = 'No objects existed on the acceptance of the mission'],
                   $RML_ERROR               = table[$type = 'error',    $text = 'RML error']
                   ]"/>
      </actions>
      <patch sinceversion="5">
        <!--To patch new feedback values, increment 'version' and 'sinceversion' number-->
        <force_cue cue="FeedbackValueManager"/>
      </patch>
    </cue>

    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternativly, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname
        2 = $TextTable.$description
        3 = $TextTable.$objective-->

        <!--$TextTable.$missionname + 1-->
        <set_value name="$TextTable.$missionname" exact="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100"/>

        <!--$TextTable.$description + 2-->
        <set_value name="$TextTable.$description" exact="readtext.{$Page}.{$TextOffset + 2}" chance="if $TextTable.$description? then 0 else 100"/>

        <!--$TextTable.$objective + 3 e.g (Destroy: )Ad Signs / Enemy Ship-->
        <set_value name="$TextTable.$objective" exact="readtext.{$Page}.{$TextOffset + 3}" chance="if $TextTable.$objective? then 0 else 100"/>
      </actions>
    </library>

    <!--TODO @Owen Simple example mission variant shortcut for testing-->

    <library name="Start">
      <params>
        <param name="OfferObject" default="null" comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client" default="null" comment="Pre-existing client"/>
        <param name="ClientOwner" default="null" comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionCue" default="null" comment="Cue the mission is attached to. Defaults to Start (this)."/>
        <param name="MissionThread" default="null" comment="Mission thread for the offer and mission"/>

        <param name="GenerateReward" default="true" comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr" default="null" comment="If the reward for this mission is credits, the number of credits should be set to this variable." />
        <param name="RewardObj" default="null" comment="If the reward for this mission is not credits, and is an object, it should be set to this variable." />
        <param name="RewardNotoriety" default="null"/>
        <param name="RewardText" default="null" comment="Any text needed to define the reward for this mission - can be used in conjunction with $RewardCr and $RewardObj" />
        <param name="MissionDuration" default="null"/>
        <param name="MissionType" default="missiontype.destroy" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"/>
        <param name="Difficulty"/>

        <!--Offer params-->
        <param name="WithoutOffer" default="false" comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue" default="null" comment="Do not create a mission offer but wait for this cue to be completed before running the mission (if event.param is passed, it must match 'Start' cue)"/>
        <param name="DeclineButton" default="true" comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer" default="false" comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer" default="false" comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue" default="null" comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance" default="md.$MaxMissionOfferDistance"/>
        <param name="HideFromBBS" default="false" comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange" default="true"/>

        <!--BBS only params-->
        <param name="BBSObject" default="null"/>
        <param name="BBSDistance" default="null"/>
        <param name="BBSTimeoutMin" default="null"/>
        <param name="BBSTimeoutMax" default="null"/>

        <!--Mission text-->
        <param name="Page"        comment="Text page. Text IDs must be correctly with a text offset (see GenerateTextTable)."/>
        <param name="TextOffset"  comment="The text offset for this variant's text on the page"/>
        <param name="TextTable" default="table[]" comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi'
               Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>

        <!--Mission specific params-->
        <param name="TargetObject" default="null"/>
        <param name="NumberOfTargets" default="null" comment="The number of objects to be destroyed." />
        <param name="TargetClasses" default="[]" comment="The possible classes of the objects to be destroyed in the mission. Empty list means any." />
        <param name="TargetMacros" default="[]" comment="The possible macros of objects to be destroyed in the mission. Empty list means any." />
        <param name="TargetOwners" default="[]" comment="The possible factions to which destroyed objects belong. Empty list means any." />
        <param name="TargetsAreMassTraffic" default="'any'" comment="Any - the group of objects to be destroyed could unclude ships from the mass traffic network. True - Ships to be destroyed only include masstraffic. False - Ships to be destroyed do NOT include masstraffic." />
        <param name="TargetRaces" default="[]" comment="The possible races of the objects to be destroyed in the mission. Empty list means any." />
        <param name="TargetLocation" default="null" comment="Either a station or area of space in which the mission will take place." />
        <param name="TargetDistance" default="null" comment="An area of distance from the $TargetLocation in which the mission will continue to take place." />
        <param name="Guidance" default="true" comment="Disable it for masstraffic, to avoid constant updates when MT-objects are created/destroyed" />

        <param name="ReportSignalCue" default="null" comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue" default="null" comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup" default="null" comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance" default="0"/>
      </params>
      <actions>
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GM_Destroy_Matching_Objects.FeedbackValueManager"/>

        <assert value="$WithoutOffer or not $MissionCue or (not $MissionCue.hasmission and not $MissionCue.hasmissionoffer)"
                text="'Mission is set to create an offer but provided MissionCue: ' + $MissionCue + ' already has an offer or is a running mission [Owen]'"/>

        <assert value="not $MissionThread or $WithoutOffer" text="'Thread sub-mission is also set to create an offer which is not supported.\n
                The mission thread offer should be populated with mission details suitable for this mission, but not from an actual mission. Thread: ' + $MissionThread + ' [Owen]'"/>

        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>

        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [Owen]'"/>
            </do_if>

            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
            <do_else>
              <!--Mission specific param checks-->
              <!--do_if value="typeof $Targets != datatype.group or $Targets.count == 0">
              <set_value name="$Feedback" exact="'$INVALID_TARGETS_PARAM'"/>
            </do_if-->
            </do_else>
          </do_else>
        </do_if>
      </actions>
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>

        <cue name="Do_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="not $Feedback" />
          </conditions>
          <actions>
            <do_if value="not $MissionCue">
              <set_value name="$MissionCue" exact="Start"/>
            </do_if>

            <do_if value="not $PreexistingClient?">
              <create_cue_actor cue="Start" name="$Client">
                <select faction="$ClientOwner"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>

            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>
              <do_any>
                <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]" comment="basic reward credits"/>
                  <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                  <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied"/>
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardModWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_ModPart" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_ModPart__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardSeminarWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Seminar" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_Seminar__Result" />
                  <set_value name="$RewardText" exact="$RewardObj.name" />
                </do_if>
              </do_any>

              <do_if value="not $RewardNotoriety">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
              </do_if>
            </do_if>

            <include_actions ref="GenerateTextTable"/>

            <!--Mission has passed checks - start preparing things for the offer-->
            <do_if value="$ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
              <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
              <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
              <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText]"/>
            </do_if>
          </actions>
          <cues>
            <cue name="With_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <actions>
                <do_if value="$Difficulty" max="level.easy">
                  <set_value name="$ConversationStartLine" exact="1000102" comment="easy difficulty"/>
                </do_if>
                <do_elseif value="$Difficulty" min="level.hard">
                  <set_value name="$ConversationStartLine" exact="1000103" comment="hard difficulty"/>
                </do_elseif>
                <do_else>
                  <set_value name="$ConversationStartLine" exact="1000101" comment="other"/>
                </do_else>
              </actions>
              <cues>
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">
                      <create_offer cue="$MissionCue" location="$OfferObject" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" actor="$Client"
                                  faction="$ClientOwner" opposingfaction="$Targets.{1}.owner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"
                                  duration="$MissionDuration" hidden="$HideFromBBS">
                        <briefing>
                          <objective step="1" action="objective.destroy" text="$TextTable.$objective"/>
                        </briefing>
                      </create_offer>
                    </do_if>
                    <set_value name="$OfferCreated" exact="true"/>
                  </actions>
                </cue>

                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType"     value="$OfferType"/>
                  <param name="OfferCue"      value="$MissionCue"/>
                  <param name="CleanupCue"    value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName"   value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue" value="$CancelOfferCue"/>

                  <!--Object based params-->
                  <param name="TimeoutMin"  value="8min"/>
                  <param name="TimeoutMax"  value="12min"/>
                  <param name="MaxDistance" value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>

                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject" value="$OfferObject"/>

                  <!--BBS based offers-->
                  <param name="BBSObject"     value="@$BBSObject"/>
                  <param name="BBSDistance"   value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>

                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>

                  <!--Client-->
                  <param name="Client"                 value="$Client"/>
                  <param name="Line_EventOffer"        value="1000101"/>
                  <param name="Line_StartConversation" value="$ConversationStartLine"/>
                  <param name="Line_Goodbye"           value="2008"/>

                  <param name="DebugChance" value="$DebugChance"/>
                </cue>

                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
              </conditions>
              <actions>
                <signal_cue cue="MissionAccepted" />
              </actions>
            </cue>

            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="not event.param? or event.param == $MissionCue"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <signal_cue_instantly cue="MissionAccepted" />
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)
            note: play_cutscene action should not be in the actions of the cue with a event_briefing_submission_selected condition. It must be delayed-->
            <cue name="BriefingStarted">
              <conditions>
                <check_any>
                  <event_briefing_started cue="$MissionCue"/>
                  <event_briefing_submission_selected cue="$MissionCue"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$RenderTarget" exact="event.param.{1}"/>

                <set_value name="$OpenHolomap"/>
                <set_value name="$HolomapReplay" exact="false"/>
                <!--do_if value="$Targets.count" min="1">
                  <set_value name="$MapTarget" exact="$Targets.{1}"/>
                </do_if>
                <do_else>
                  <set_value name="$MapTarget" exact="player.zone"/>
                </do_else-->

                <debug_text text="'Briefing started'" chance="$DebugChance"/>
              </actions>
              <cues>
                <cue name="DisplayHolomap" onfail="cancel">
                  <conditions>
                    <check_value value="$OpenHolomap?"/>
                  </conditions>
                  <actions>
                    <do_if value="not $HoloMap?">
                      <add_holomap name="$HoloMap" rendertarget="$RenderTarget"/>
                    </do_if>
                    <remove_value name="$OpenHolomap" />
                  </actions>
                  <cues>
                    <!--cue name="HolomapRef" ref="md.LIB_HolomapTarget.Start">
                      <param name="EndSignalCue" value="HolomapEnd"/>

                      <param name="HoloMap" value="$HoloMap" />
                      <param name="Components" value="[player.entity, $MapTarget]"/>
                      <param name="ShowUnknown" value="true"/>
                      <param name="IsReplay" value="$HolomapReplay"/>

                      <param name="verbosedebugchance" value="$DebugChance"/>
                    </cue>
                    <cue name="HolomapEnd">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <debug_text text="'Holomap animation end'" chance="$DebugChance"/>
                      </actions>
                      <cues>
                        <cue name="PlayBriefingCutscene" onfail="cancel">
                          <conditions>
                            <check_value value="$MapTarget.isclass.ship"/>
                          </conditions>
                          <actions>
                            <do_if value="$HoloMap?">
                              <remove_holomap />
                              <remove_value name="$HoloMap"/>
                            </do_if>

                            <create_presentation_cluster name="$CutsceneCluster"/>
                            <find_zone name="$CutsceneZone" space="$CutsceneCluster"/>

                            <create_ship name="$CutsceneShip" macro="$MapTarget.macro" zone="$CutsceneZone">
                              <pilot actor="null"/>
                              <position x="0" y="0" z="0"/>
                            </create_ship>

                            <set_value name="$BriefingCutsceneStarted"/>

                            <set_value name="$CutsceneKey" exact="'OrbitIndefinitely'"/>
                            <play_cutscene key="$CutsceneKey" rendertarget="$RenderTarget">
                              <param name="targetobject" object="$CutsceneShip"/>
                            </play_cutscene>

                          </actions>
                          <cues>
                            <cue name="ReplayHoloMap">
                              <delay exact="10s"/>
                              <actions>
                                <remove_value name="$BriefingCutsceneStarted"/>

                                <stop_cutscene key="$CutsceneKey"/>

                                <do_if value="$CutsceneCluster.exists">
                                  <destroy_object object="$CutsceneCluster"/>
                                </do_if>
                                <do_if value="$CutsceneShip.exists">
                                  <destroy_object object="$CutsceneShip"/>
                                </do_if>

                                <set_value name="$HolomapReplay" exact="true"/>
                                <set_value name="$OpenHolomap"/>
                                <reset_cue cue="DisplayHolomap"/>
                              </actions>
                            </cue>
                          </cues>
                        </cue>
                      </cues>
                    </cue-->
                  </cues>
                </cue>

                <cue name="BriefingStopped">
                  <conditions>
                    <check_any>
                      <event_briefing_cancelled cue="$MissionCue"/>
                      <event_briefing_submission_unselected cue="$MissionCue"/>
                    </check_any>
                  </conditions>
                  <actions>

                    <do_if value="$HoloMap?">
                      <remove_holomap />
                      <remove_value name="$HoloMap"/>
                    </do_if>

                    <do_if value="$BriefingCutsceneStarted?">
                      <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                      <remove_value name="$BriefingCutsceneStarted"/>

                      <stop_cutscene key="$CutsceneKey"/>

                      <do_if value="$CutsceneCluster.exists">
                        <destroy_object object="$CutsceneCluster"/>
                      </do_if>
                      <do_if value="$CutsceneShip.exists">
                        <destroy_object object="$CutsceneShip"/>
                      </do_if>
                    </do_if>

                    <debug_text text="'Briefing canceled'" chance="$DebugChance"/>
                    <reset_cue cue="BriefingStarted"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="TargetDestroyedPrematurelyPre" onfail="cancel">
              <conditions>
                <check_value value="$TargetObject"/>
              </conditions>
              <cues>
                <cue name="TargetDestroyedPrematurely">
                  <conditions>
                    <event_object_destroyed object="$TargetObject"/>
                  </conditions>
                  <actions>
                    <do_if value="MissionAccepted.state == cuestate.complete">
                      <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, {30004,6027}]"/>
                    </do_if>
                    <set_value name="$Feedback" exact="'$TARGET_KILLED_EARLY'"/>
                    <signal_cue cue="CleanUp"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="MissionAccepted">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <actions>
                <debug_text text="'Mission accepted!'" chance="$DebugChance"/>
                <set_value name="stat.missions_accepted" operation="add"/>

                <do_if value="$Difficulty" min="level.hard">
                  <speak actor="$Client" line="1000205" comment="(reluctant for player to take mission - particularly hard missions, etc)" />
                  <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = 1000205]"/>
                </do_if>
                <do_else>
                  <speak actor="$Client" line="1000204" comment="(player accepted mission offer)" />
                  <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = 1000204]"/>
                </do_else>

                <do_if value="$WithoutOffer">
                  <!--$MissionCue may already be a mission cue passed in as a parameter-->
                  <do_if value="not $MissionCue.hasmission">
                    <do_if value="$MissionThread">
                      <create_mission cue="$MissionCue" missionthread="$MissionThread" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" />
                    </do_if>
                    <do_else>
                      <create_mission cue="$MissionCue" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" />
                    </do_else>
                  </do_if>

                  <update_mission cue="$MissionCue">
                    <briefing>
                      <objective step="1" action="objective.destroy" text="$TextTable.$objective"/>
                    </briefing>
                  </update_mission>
                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="$MissionCue" offercue="$MissionCue" missionthread="$MissionThread"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="$MissionCue" offercue="$MissionCue"/>
                  </do_else>
                  <remove_offer cue="$MissionCue"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>

                <!--/do_else-->
                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>

                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>

              </actions>
              <cues>
                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread and not $Feedback"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>

                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread and not $Feedback"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{$MissionCue}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{$MissionCue}"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="ActivateMission">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <cancel_cue cue="TargetDestroyedPrematurelyPre"/>
                    <set_value name="$StartStep" exact="1"/>
                    <!--do_if value="not $Targets.count">
                      <do_if value="$TargetRequestCue">
                        <signal_cue_instantly cue="$TargetRequestCue" param="this"/>
                        <add_to_group groupname="$Targets" group="this.$Targets"/>
                      </do_if>
                      <do_if value="not $Targets.count">
                        <set_value name="$Feedback" exact="'$NO_VALID_TARGETS'"/>
                        <signal_cue cue="CleanUp" />
                      </do_if>
                    </do_if-->
                  </actions>
                  <cues>
                    <cue name="DestroyMatchingObjects" ref="md.RML_Destroy_Matching_Objects.DestroyMatchingObjects">
                      <param name="EndSignalCue" value="ObjectsDestroyed" />
                      <param name="MissionCue" value="$MissionCue" />
                      <param name="EndAmount" value="$NumberOfTargets" />
                      <param name="ObjectiveText" value="$TextTable.$objective" />
                      <param name="TargetObject" value="$TargetObject" />
                      <param name="Filter_Classes" value="$TargetClasses" />
                      <param name="Filter_Macros" value="$TargetMacros" />
                      <param name="Filter_Owner" value="$TargetOwners" />
                      <param name="Filter_NPC_Race" value="$TargetRaces" />
                      <param name="Filter_Location" value="$TargetLocation" />
                      <param name="Filter_Distance" value="$TargetDistance" />
                      <param name="DebugChance" value="$DebugChance" />
                      <param name="Guidance" value="$Guidance" />
                    </cue>

                    <cue name="MissionTimeout" onfail="cancel">
                      <conditions>
                        <check_value value="typeof $MissionDuration == datatype.time"/>
                        <check_value value="$MissionDuration" min="1s"/>
                      </conditions>
                      <delay exact="$MissionDuration"/>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericTimeoutLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <remove_mission cue="$MissionCue" type="failed"/>
                        <set_value name="$Feedback" exact="'$MISSION_TIMEOUT'"/>
                        <signal_cue_instantly cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="ObjectsDestroyed">
                      <conditions>
                        <event_cue_signalled />
                      </conditions>
                      <actions>
                        <do_if value="ObjectsDestroyed.$EndFeedbackValue" max="-100">
                          <debug_text text="'GM_Destroy_Matching_Objects: There was a script or code error in RML - aborting mission: ' + ObjectsDestroyed.$EndFeedbackValue" chance="$DebugChance" />
                          <set_value name="$Feedback" exact="'$RML_ERROR'" />
                          <signal_cue cue="MissionAborted" />
                        </do_if>
                        <do_else>
                          <set_value name="MissionEnded.$EndFeedbackText" exact="@ObjectsDestroyed.$EndFeedbackText" />
                          <set_value name="MissionEnded.$EndFeedbackValue" exact="ObjectsDestroyed.$EndFeedbackValue" />
                          <signal_cue cue="MissionEnded" />
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

            <cue name="MissionAborted">
              <conditions>
                <check_any>
                  <event_mission_aborted cue="$MissionCue"/>
                  <event_cue_signalled />
                </check_any>
              </conditions>
              <actions>
                <!-- Player aborted mission -->
                <do_if value="event.object" exact="$MissionCue">
                  <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                  <debug_text text="'GM_Destroy_Matching_Objects: Mission was aborted by the player.'" chance="$DebugChance" />
                  <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>
                </do_if>

                <!-- Script / code error aborted mission -->
                <do_else>
                  <!-- Leave $FeedbackValue as it is because it has already been set in the part of the script that went wrong -->
                  <debug_text text="'GM_Destroy_Matching_Objects: Mission was aborted by script or code error.'" chance="$DebugChance" />
                  <speak actor="$Client" line="1000406" comment="(mission aborted by NPC / script error)" />
                </do_else>

                <remove_mission cue="$MissionCue" type="aborted"/>
                <signal_cue cue="CleanUp" />
              </actions>
            </cue>

            <cue name="MissionEnded">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <!-- Failure case -->
                <do_if value="MissionEnded.$EndFeedbackValue" max="0">
                  <debug_text text="'This mission has failed. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                  <set_value name="$Feedback" exact="'$RML_FAILED'"/>
                  <speak actor="$Client" line="1000403" comment="(failed mission)" />
                  <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>

                  <remove_mission cue="$MissionCue" type="failed" reason="@MissionEnded.$EndFeedbackText"/>
                </do_if>

                <!-- Success case -->
                <do_else>
                  <!--TODO: Partial success-->
                  <debug_text text="'This mission has ended. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                  <do_if value="$RewardNotoriety and $ClientOwner">
                    <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                    <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted" />
                    <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                  </do_if>

                  <do_if value="$RewardCr">
                    <reward_player money="$RewardCr" />
                  </do_if>
                  <do_elseif value="$RewardObj">
                    <do_if value="$RewardObj.isinventory">
                      <add_inventory entity="player.entity" ware="$RewardObj" />
                      <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received" />
                    </do_if>
                  </do_elseif>
                  <set_value name="stat.missions_completed" operation="add"/>
                  <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'"/>
                  <speak actor="$Client" line="1000401" comment="(successful mission)" />
                  <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>

                  <remove_mission cue="$MissionCue" type="completed" activate="next" />
                </do_else>
                <signal_cue cue="CleanUp" />
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="ForceCleanup" onfail="cancel" version="2">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="not event.param? or event.param == $MissionCue"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <do_if value="$HoloMap?">
              <remove_holomap />
              <remove_value name="$HoloMap"/>
            </do_if>

            <do_if value="$BriefingCutsceneStarted?">
              <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
              <remove_value name="$BriefingCutsceneStarted"/>

              <stop_cutscene key="$CutsceneKey"/>

              <do_if value="$CutsceneCluster.exists">
                <destroy_object object="$CutsceneCluster"/>
              </do_if>
              <do_if value="$CutsceneShip.exists">
                <destroy_object object="$CutsceneShip"/>
              </do_if>
            </do_if>


            <!--***Cleanup objects***-->

            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and (not $PreexistingClient?)">
              <destroy_object object="$Client"/>
            </do_if>

            <do_if value="$Target?">
              <signal_cue_instantly cue="md.GM_Destroy_Matching_Objects.RemoveTarget" param="[$Target, $ClientOwner]"/>
            </do_if>

            <!--***Evaluate result***-->

            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [Owen]'" break="1"/>
              </do_else>

              <do_if value="$ReportSignalCue">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData"/>
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>

            <cancel_cue cue="Start"/>

          </actions>
        </cue>
      </cues>
    </library>
  </cues>
</mdscript>