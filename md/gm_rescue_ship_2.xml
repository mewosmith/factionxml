<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GM_Rescue_Ship_2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>

    <!--Base Mission information-->
    <!--
    Generic Mission name:    Rescue ship in minefield by taking control and manually steering it out - intended for Master Missions
    Primary 'missiontype':   e.g missiontype.rescue
    
    Based on GM_Clear_Explosives (which is not MM-compatible)
    -->

    <!--The Feedback Manager contains a table of feedback values related to this Generic Mission. 
		This table is 'const' during the mission (the table itself doesn't change anymore after inialization)

	There are several maintypes of feedback:
    event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
    removed:  The mission offer was removed before acceptance
    success:  The mission was successfully completed by the player
    failure:  The player failed the mission
    error:    Something went wrong with the mission set-up or during the mission-->
    <cue name="FeedbackValueManager" namespace="this" version="4">
      <actions>
        <set_value name="$FeedbackValues" exact="table[
                   $MISSION_GENERATED       = table[$type = 'event',    $text = 'Mission variation generated successfully'],
                   $MISSION_ACCEPTED        = table[$type = 'event',    $text = 'Mission accepted'],
                   
                   $OFFER_REMOVED           = table[$type = 'removed',  $text = 'Offer removed'],
                   $DECLINED_OFFER          = table[$type = 'removed',  $text = 'Player declined Event Offer'],
                   $EVENT_OFFER_TIMEOUT     = table[$type = 'removed',  $text = 'Event Offer timeout'],
                   $SIGNAL_LEAK_REMOVED     = table[$type = 'removed',  $text = 'Signal leak offer removed'],
                   $TARGET_KILLED_EARLY     = table[$type = 'removed',  $text = 'Object was destroyed during the offer'],
                   
                   $MISSION_SUCCEEDED       = table[$type = 'success',  $text = 'Mission succeeded'],
                   
                   $MISSION_ABORTED         = table[$type = 'failure',  $text = 'Mission aborted by player'],
                   $FORCED_CLEANUP          = table[$type = 'failure',  $text = 'Forced to end from outside'],
                   $MISSION_TIMEOUT         = table[$type = 'failure',  $text = 'Mission timeout'],
                   $RML_FAILED              = table[$type = 'failure',  $text = 'RML failure'],
                   
                   $NO_VALID_CLIENT_OWNER   = table[$type = 'error',    $text = 'No valid ClientOwner parameter provided'],
                   $INVALID_OFFER_TYPE      = table[$type = 'error',    $text = 'No offer parameters were valid'],
                   $NO_TEXT_OFFSET          = table[$type = 'error',    $text = 'No TextOffset set'],
                   $INVALID_FACTION_PARAM   = table[$type = 'error',    $text = 'Invalid Faction param'],
                   $INVALID_TARGETS_PARAM   = table[$type = 'error',    $text = 'Invalid targets param'],
                   $INVALID_FORCE_CLEANUP   = table[$type = 'error',    $text = 'ForceCleanup cue invalid'],
                   $EMPTY_TARGETS_PARAM     = table[$type = 'error',    $text = 'No valid targets provided in targets param'],
                   $RML_ERROR               = table[$type = 'error',    $text = 'RML error']
                   ]"/>
      </actions>
      <patch sinceversion="4">
        <!--To patch new feedback values, increment 'version' and 'sinceversion' number-->
        <force_cue cue="FeedbackValueManager"/>
      </patch>
    </cue>

    <!--TODO @Owen @Roger - given the number of optional texts below for only one variant, should this be split into two GMs / RMLs?-->

    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternatively, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname
        2 = $TextTable.$description
        4 = $TextTable.$leaveminefield (optional)
        5 = $TextTable.$assumecontrol (optional)
        6 = $TextTable.$dockspacesuit (optional)
        7 = $TextTable.$returnship (optional)
        11 = $TextTable.$transfer_accept (optional)
        12 = $TextTable.$transfer_decline (optional)
        -->
        <set_value name="$TextTable.$missionname"   exact="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100"/>
        <set_value name="$TextTable.$hazardname"    exact="readtext.{$Page}.{$TextOffset + 3}" chance="if $TextTable.$hazardname? then 0 else 100"/>

        <do_if value="player.entity.inventory.{ware.software_scannerobjectmk3}.count">
          <substitute_text text="$TextTable.$description" source="readtext.{$Page}.{$TextOffset + 2}" chance="if $TextTable.$description? then 0 else 100">
            <replace string="'$REQUIREMENTS$'"    with="''"/>
          </substitute_text>
        </do_if>
        <do_else>
          <!-- requirement: spacesuit scanner -->
          <substitute_text text="$TextTable.$requirements" source="readtext.{30004}.{1502}" chance="if $TextTable.$requirements? then 0 else 100">
            <replace string="'$ITEM$'"    with="ware.software_scannerobjectmk3.name"/>
          </substitute_text>
          <substitute_text text="$TextTable.$description" source="readtext.{$Page}.{$TextOffset + 2}" chance="if $TextTable.$description? then 0 else 100">
            <replace string="'$REQUIREMENTS$'"    with="'\n\n' + $TextTable.$requirements"/>
          </substitute_text>
        </do_else>

        <do_if value="not $TextTable.$leaveminefield?">
          <set_value name="$TextTable.$leaveminefield" exact="@readtext.{$Page}.{$TextOffset + 4}"/>
        </do_if>

        <do_if value="not $TextTable.$assumecontrol?">
          <set_value name="$TextTable.$assumecontrol" exact="@readtext.{$Page}.{$TextOffset + 5}"/>
        </do_if>

        <do_if value="not $TextTable.$spacesuitapproach?">
          <set_value name="$TextTable.$spacesuitapproach" exact="@readtext.{$Page}.{$TextOffset + 6}" comment="Approach target"/>
        </do_if>

        <do_if value="not $TextTable.$returnship?">
          <set_value name="$TextTable.$returnship" exact="@readtext.{$Page}.{$TextOffset + 7}"/>
        </do_if>

        <do_if value="not $TextTable.$searchdock?">
          <set_value name="$TextTable.$searchdock" exact="@readtext.{$Page}.{$TextOffset + 8}"/>
        </do_if>

        <do_if value="not $TextTable.$usescanner?">
          <set_value name="$TextTable.$usescanner" exact="@readtext.{$Page}.{$TextOffset + 9}"/>
        </do_if>

        <do_if value="not $TextTable.$transfer_accept?">
          <set_value name="$TextTable.$transfer_accept" exact="@readtext.{$Page}.{$TextOffset + 11}"/>
        </do_if>

        <do_if value="not $TextTable.$transfer_decline?">
          <set_value name="$TextTable.$transfer_decline" exact="@readtext.{$Page}.{$TextOffset + 12}"/>
        </do_if>
      </actions>
    </library>

    <library name="Start">
      <params>
        <!-- For creating your own custom GM, you might need to change _some_ of the below parameters -->
        <param name="OfferObject" default="null" comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client" default="null" comment="Pre-existing client"/>
        <param name="ClientOwner" default="null" comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionCue" default="null" comment="Cue the mission is attached to. Defaults to Start (this)."/>
        <param name="MissionThread" default="null" comment="Mission thread for the offer and mission"/>

        <param name="GenerateReward" default="true" comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr" default="null" comment="If the reward for this mission is credits, the number of credits should be set to this variable." />
        <param name="RewardObj" default="null" comment="If the reward for this mission is not credits, and is an object, it should be set to this variable." />
        <param name="RewardNotoriety" default="null"/>
        <param name="RewardText" default="null"  comment="Any text needed to define the reward for this mission - may be used in conjunction with $RewardCr and $RewardObj." />
        <param name="MissionDuration" default="null"/>
        <param name="MissionType" default="missiontype.rescue" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"/>
        <param name="Difficulty"/>

        <!--Offer location and conversation-->
        <param name="WithoutOffer" default="false" comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue" default="null" comment="Do not create a mission offer but wait for this cue to be completed before running the mission"/>
        <param name="DeclineButton" default="true" comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer" default="false" comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer" default="false" comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue" default="null" comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance" default="md.$MaxMissionOfferDistance"/>
        <param name="HideFromBBS" default="false" comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange" default="true"/>

        <!--BBS only params-->
        <param name="BBSObject" default="null"/>
        <param name="BBSDistance" default="null"/>
        <param name="BBSTimeoutMin" default="null"/>
        <param name="BBSTimeoutMax" default="null"/>

        <!--Mission text-->
        <param name="Page"        comment="Allows a different text page to be used instead of the generic one. Text IDs must be mapped similarly."/>
        <param name="TextOffset"  comment="The text offset for this variant's text on the page.
               Each variant starts at a different offset, but the entries[] within that offset have to match for all variants."/>
        <param name="TextTable" default="table[]" comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi'
               Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>

        <!-- Optional mission setup overrides -->
        <param name="Faction"                            comment="" />
        <param name="SalvageShip"         default="null" comment="Ship to rescue" />
        <param name="Hostiles"            default="null" comment="Group of mines"/>
        <param name="DeliveryStation"     default="null"/>

        <param name="ReportActivateCue"   default="null" comment="Cue to signal when the Activate-cue is signalled, for creating of salvageship/mines"/>
        <param name="ReportSignalCue"     default="null" comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue"      default="null" comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup"        default="null" comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance"         default="0"/>
      </params>
      <actions>
        <!--Feedback value setup-->
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GM_Rescue_Ship.FeedbackValueManager"/>

        <assert value="$WithoutOffer or not $MissionCue or (not $MissionCue.hasmission and not $MissionCue.hasmissionoffer)"
                text="'Mission is set to create an offer but provided MissionCue: ' + $MissionCue + ' already has an offer or is a running mission [Owen]'"/>

        <assert value="not $MissionThread or $WithoutOffer" text="'Thread sub-mission is also set to create an offer which is not supported.\n
                The mission thread offer should be populated with mission details suitable for this mission, but not from an actual mission. Thread: ' + $MissionThread + ' [Owen]'"/>

        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>

        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [Owen]'"/>
            </do_if>

            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
            <do_else>
              <!--Mission specific param checks-->
              <do_if value="typeof $Faction != datatype.faction">
                <set_value name="$Feedback" exact="'$INVALID_FACTION_PARAM'"/>
              </do_if>
              <do_if value="not $Hostiles">
                <do_if value="not $ReportActivateCue" comment="Hostiles initialized later">
                  <set_value name="$Feedback" exact="'$INVALID_TARGETS_PARAM'"/>
                </do_if>
              </do_if>
              <do_else>
                <do_if value="not $ReportActivateCue" comment="Hostiles initialized later">
                  <set_value name="$HasValidObject" exact="false"/>
                  <do_all exact="$Hostiles.count" counter="$i">
                    <do_if value="$Hostiles.{$i}.isrealclass.object or $Hostiles.{$i}.object.exists">
                      <set_value name="$HasValidObject" exact="true"/>
                      <break/>
                    </do_if>
                  </do_all>
                  <do_if value="not $HasValidObject">
                    <set_value name="$Feedback" exact="'$EMPTY_TARGETS_PARAM'"/>
                  </do_if>
                </do_if>
              </do_else>
            </do_else>
          </do_else>
        </do_if>
      </actions>
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>

        <cue name="Do_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="not $Feedback"/>
          </conditions>
          <actions>
            <do_if value="not $MissionCue">
              <set_value name="$MissionCue" exact="Start"/>
            </do_if>

            <do_if value="not $PreexistingClient?">
              <!-- No pre-existing client, create a temporary client for this mission -->
              <!-- This auto-assigns a 'matching' text-page using the metadata (id=0) specified in the text-files. Speak commands for this actor will then refer to the selected text-page-->
              <!-- Possibly we'll need to add additional filters (in case some topics aren't supported by all generic text-pages) -->
              <create_cue_actor cue="Start" name="$Client" comment="temporary cue-actor will be cleaned up in the Cleanup-cue, see destroy_object on $Client">
                <select faction="$ClientOwner"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>

            <set_value name="$RewardText_Param" exact="$RewardText" comment="copy the $RewardText parameter as may append to it"/>
            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>
              <do_any>
                <!--TODO @Owen better respect $RewardText if it was passed in as a parameter-->
                <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]" comment="basic reward credits"/>
                  <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                  <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied"/>
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardModWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_ModPart" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_ModPart__Result" />
                </do_if>
                <do_if value="not $RewardObj" weight="$RewardSeminarWeight">
                  <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Seminar" param="[Start]" />
                  <set_value name="$RewardObj" exact="$Reward_Seminar__Result" />
                </do_if>
              </do_any>

              <!--If the SalvageShip doesn't exist yet, add a text about the ship value-->
              <do_if value="$SalvageShip">
                <signal_cue_instantly cue="CalculateSalvageShipReward" param="[Start, $SalvageShip]" comment="returns: $SalvageShipReward__Result"/>
                <do_if value="not $RewardCr">
                  <set_value name="$RewardCr" exact="0Cr"/>
                </do_if>
                <set_value name="$RewardCr" exact="$RewardCr + $SalvageShipReward__Result"/>
              </do_if>
              <do_else>
                <set_value name="$RewardPreviewGenerated" exact="true"/>
                <do_if value="$RewardText">
                  <set_value name="$RewardText" operation="add" exact="'\n' + readtext.{30139}.{1}" comment="A share of the ship's value"/>
                </do_if>
                <do_else>
                  <set_value name="$RewardText" exact="{30139,1}" comment="A share of the ship's value"/>
                </do_else>
              </do_else>

              <!--If there is a reward object, append its name to $RewardText-->
              <do_if value="$RewardObj">
                <!--TODO @Owen use md.LIB_Generic.GenerateRewardText?-->
                <do_if value="$RewardText">
                  <set_value name="$RewardText" operation="add" exact="'\n' + $RewardObj.name"/>
                </do_if>
                <do_else>
                  <set_value name="$RewardText" exact="$RewardObj.name"/>
                </do_else>
              </do_if>

              <do_if value="not $RewardNotoriety">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
              </do_if>
            </do_if>
              
            <include_actions ref="GenerateTextTable"/>

            <do_if value="$ReportSignalCue">
              <!--Signal the $ReportSignalCue that the mission has been successfully generated-->
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
              <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
              <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
              <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText]"/>
            </do_if>
          </actions>
          <cues>

            <!--***MISSION OFFER***-->
            <cue name="With_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <cues>
                <!--Cue which creates the offer, when signalled. To be signalled from the GenericMissions.OfferMission library, referenced below-->
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">

                      <!-- Briefing details -->
                      <create_offer cue="$MissionCue" location="$OfferObject" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" actor="$Client" faction="$ClientOwner" opposingfaction="$EnemyFaction" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" duration="$MissionDuration" hidden="$HideFromBBS">
                        <briefing comment="duplicated, see MissionAccepted!">
                          <objective step="1" action="objective.secure" text="$SalvageShip.name" />
                          <objective step="2" action="objective.deliver" text="{30004,1050}" />
                        </briefing>
                      </create_offer>

                    </do_if>
                    <set_value name="$OfferCreated" exact="true"/>
                  </actions>
                </cue>

                <!--The majority of the offer logic is within this library. The parameters we pass down below, specify in which way this mission is going to be offered to the player (i.e. BBS, Signal-Leak, ...)
                Some of the mission specific handling is still contained in this file but triggered via the library via a signal e.g. setting up the briefing details via the 'CreateOffer' cue above.-->
                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType"     value="$OfferType"/>
                  <param name="OfferCue"      value="$MissionCue"/>
                  <param name="CleanupCue"    value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName"   value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue" value="$CancelOfferCue"/>

                  <!--Object based params (offered by Station/Ship/Signal-leak)-->
                  <param name="TimeoutMin"  value="8min" comment="Minimum time the offer remains valid"/>
                  <param name="TimeoutMax"  value="12min"/>
                  <param name="MaxDistance" value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>

                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject" value="$OfferObject"/>

                  <!--BBS based offers-->
                  <param name="BBSObject"     value="@$BBSObject"/>
                  <param name="BBSDistance"   value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>

                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>

                  <!--Client-->
                  <param name="Client"                 value="$Client"/>
                  <param name="Line_EventOffer"        value="1000101" comment="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_StartConversation" value="null" comment ="Client speaks this line from his generic-npc-page"/>
                  <param name="Line_Goodbye"           value="null" comment="Client speaks this line from his generic-npc-page"/>

                  <param name="DebugChance" value="$DebugChance"/>
                </cue>

                <!--Cue signalled when the offer library is finished-->
                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the cases where a mission is automatically accepted on creation-->
            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
              </conditions>
              <actions>
                <signal_cue cue="MissionAccepted" />
              </actions>
            </cue>

            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="not event.param? or event.param == $MissionCue"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <signal_cue_instantly cue="MissionAccepted" />
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)
            note: play_cutscene action should not be in the actions of the cue with a event_briefing_submission_selected condition. It must be delayed-->
            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)
            note: play_cutscene action should not be in the actions of the cue with a event_briefing_submission_selected condition. It must be delayed-->
            <cue name="BriefingStarted">
              <conditions>
                <check_any>
                  <event_briefing_started cue="Start"/>
                  <event_briefing_submission_selected cue="Start"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$RenderTarget" exact="event.param.{1}"/>
                <set_value name="$StartBriefingCutscene"/>
                <debug_text text="'Briefing started'" chance="$DebugChance"/>
              </actions>
              <cues>
                <cue name="DisplayCutscene" onfail="cancel">
                  <conditions>
                    <check_value value="$StartBriefingCutscene?"/>
                  </conditions>
                  <actions>
                    <!--<create_presentation_cluster name="$CutsceneCluster" background="macro.cluster_black_wlight_bg_macro"/>-->
                    <create_presentation_cluster name="$CutsceneCluster"/>
                    <find_zone name="$CutsceneZone" space="$CutsceneCluster"/>

                    <!-- If the player must salvage a ship -->
                    <do_if value="$SalvageShip">
                      <set_value name="$CutsceneObject" exact="$SalvageShip"/>
                    </do_if>
                    <!-- Else, show one of the mines in the cutscene -->
                    <do_elseif value="$Hostiles.count">
                      <set_value name="$CutsceneObject" exact="$Hostiles.{1}"/>
                    </do_elseif>

                    <set_value name="$BriefingCutsceneStarted"/>

                    <set_value name="$CutsceneKey" exact="'OrbitIndefinitely'"/>
                    <play_cutscene key="$CutsceneKey" rendertarget="$RenderTarget">
                      <param name="targetobject" object="$CutsceneObject"/>
                    </play_cutscene>
                  </actions>
                </cue>

                <cue name="BriefingStopped">
                  <conditions>
                    <check_any>
                      <event_briefing_cancelled cue="Start"/>
                      <event_briefing_submission_unselected cue="Start"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="$BriefingCutsceneStarted?">
                      <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                      <remove_value name="$BriefingCutsceneStarted"/>

                      <stop_cutscene key="$CutsceneKey"/>

                      <do_if value="$CutsceneCluster.exists">
                        <destroy_object object="$CutsceneCluster"/>
                      </do_if>
                    </do_if>

                    <do_if value="$HoloMap?">
                      <remove_holomap />
                      <remove_value name="$HoloMap"/>
                    </do_if>

                    <debug_text text="'Briefing canceled'" chance="$DebugChance"/>
                    <reset_cue cue="BriefingStarted"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="TargetDestroyedPrematurely">
              <conditions>
                <event_object_destroyed object="$SalvageShip" check="false"/>
              </conditions>
              <actions>
                <!-- If ship to be rescued got destroyed early, the mission fails -->
                <do_if value="MissionAccepted.state == cuestate.complete">
                  <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, {30004,6027}]"/>
                </do_if>
                <set_value name="$Feedback" exact="'$TARGET_KILLED_EARLY'"/>
                <signal_cue cue="CleanUp"/>
              </actions>
            </cue>

            <!--This cue creates the mission itself, either from scratch or via an existing mission offer-->
            <cue name="MissionAccepted">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <actions>

                <do_if value="not $WithoutOffer">
                  <do_if value="$MissionLevel" min="4">
                    <speak actor="$Client" line="1000205" comment="Client warns the player that the mission might be risky." />
                    <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = 1000205]"/>
                  </do_if>
                  <do_else>
                    <speak actor="$Client" line="1000204" comment="(player accepted mission offer)" />
                    <signal_cue_instantly cue="md.GenericMissions.PlotMissionInterrupted" param="table[$client = $Client, $line = 1000204]"/>
                  </do_else>
                </do_if>

                <debug_text text="'Mission accepted!'" chance="$DebugChance"/>
                <set_value name="stat.missions_accepted" operation="add"/>

                <do_if value="$WithoutOffer">
                  <!--$MissionCue may already be a mission cue passed in as a parameter-->
                  <do_if value="not $MissionCue.hasmission">
                    <do_if value="$MissionThread">
                      <create_mission cue="$MissionCue" missionthread="$MissionThread" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_if>
                    <do_else>
                      <create_mission cue="$MissionCue" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_else>
                  </do_if>

                  <set_value name="$StartStep" exact="1"/>

                  <update_mission cue="$MissionCue">
                    <briefing comment="duplicated, see CreateOffer!">
                      <objective step="$StartStep" action="objective.secure" text="if $SalvageShip then $SalvageShip.knownname else {30139,2}" comment="Ship name else 'Abandoned ship'"/>
                      <objective step="$StartStep + 1" action="objective.deliver" text="{30004,1050}" />
                    </briefing>
                  </update_mission>

                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="$MissionCue" offercue="$MissionCue" missionthread="$MissionThread"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="$MissionCue" offercue="$MissionCue"/>
                  </do_else>
                  <remove_offer cue="$MissionCue"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>

                <!-- TODO: For creating your own custom GM, the below code consists of the actual mission-logic, this will likely need major changes -->
                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>

                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>
              </actions>
              <cues>
                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>

                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{$MissionCue}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{$MissionCue}"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="ActivateMission">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <cancel_cue cue="TargetDestroyedPrematurely"/>

                    <do_if value="$ReportActivateCue">
                      <signal_cue_instantly cue="$ReportActivateCue" param="this"/>
                      <!-- copy from local variables (to which the callback wrote), to "global cue" -->
                      <set_value name="$SalvageShip" exact="this.$SalvageShip"/>
                      <set_value name="$DeliveryStation" exact="this.$DeliveryStation"/>
                      <add_to_group groupname="$Hostiles" group="this.$Hostiles"/>
                      <do_if value="@$RewardPreviewGenerated">
                        <!--If reward was a preview, update it with the ship value-->
                        <signal_cue_instantly cue="CalculateSalvageShipReward" param="[Start, $SalvageShip]" comment="returns: $SalvageShipReward__Result"/>
                        <set_value name="$RewardCr" exact="$RewardCr + $SalvageShipReward__Result"/>
                        <set_value name="$RewardText" exact="@$RewardText_Param" comment="The 'RewardText' param passed to this GMs"/>

                        <do_if value="$RewardObj">
                          <!--TODO @Owen use md.LIB_Generic.GenerateRewardText?-->
                          <do_if value="$RewardText">
                            <set_value name="$RewardText" operation="add" exact="$RewardObj.name"/>
                          </do_if>
                          <do_else>
                            <set_value name="$RewardText" exact="$RewardObj.name"/>
                          </do_else>
                        </do_if>

                        <!--HACK @Owen - this is the only way to clear a reward text-->
                        <do_if value="not $RewardText">
                          <set_value name="$RewardText" exact="' '"/>
                        </do_if>
                        <update_mission cue="$MissionCue" reward="$RewardCr" rewardtext="$RewardText"/>
                      </do_if>
                    </do_if>

                    <do_if value="not $SalvageShip or not $Hostiles.count">
                      <do_if value="$SalvageShip">
                        <create_order id="'MoveDie'" object="$SalvageShip" immediate="true"/>
                      </do_if>
                      <do_if value="$Hostiles.count">
                        <destroy_group group="$Hostiles"/>
                      </do_if>
                      <set_value name="$Feedback" exact="'$INVALID_TARGETS_PARAM'"/>
                      <signal_cue cue="CleanUp" />
                    </do_if>


                    <do_if value="$MissionDuration">
                      <update_mission cue="$MissionCue" endtime="player.age + $MissionDuration"/>
                    </do_if>
                  </actions>
                  <cues>

                    <!-- Trigger the RML, which will check the win/lose conditions and report back -->
                    <cue name="RescueShip_2" ref="md.RML_RescueShip_2.RescueShip">
                      <param name="EndSignalCue"              value="MissionEnded"/>
                      <param name="MissionCue"                value="Start"/>
                      <param name="Text_LeaveMinefield"       value="$TextTable.$leaveminefield" comment="Text for the objective to leave the minefield"/>
                      <param name="Text_AssumeControl"        value="$TextTable.$assumecontrol" comment="Text for the objective to assume control of the ship"/>
                      <param name="Text_SpacesuitApproach"    value="$TextTable.$spacesuitapproach" comment="Text for the objective to fly the player spacesuit to the ship"/>
                      <param name="Text_ReturnShip"           value="$TextTable.$returnship" comment="Text for the objective to fly the player spacesuit to the ship"/>
                      <param name="Text_SearchDock"           value="$TextTable.$searchdock" comment="Text for the objective to find the spacesuit-dock"/>
                      <param name="Text_UseScanner"           value="$TextTable.$usescanner" comment="Text for the objective to hack the signal near the dock"/>
                      <param name="Text_Transfer_Accept"      value="$TextTable.$transfer_accept" comment="Text for the accept transfer conversation option"/>
                      <param name="Text_Transfer_Decline"     value="$TextTable.$transfer_decline" comment="Text for the decline transfer conversation option"/>
                      <param name="StartStep"                 value="1"/>
                      <param name="Client"                    value="$Client" />
                      <param name="Faction"                   value="$Faction" />
                      <param name="Hostiles"                  value="$Hostiles" />
                      <param name="SalvageShip"               value="$SalvageShip" />
                      <param name="DeliveryStation"           value="$DeliveryStation"/>
                      <param name="DebugChance"               value="$DebugChance"/>
                    </cue>

                    <cue name="MissionEnded">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!-- Failure case -->
                        <do_if value="MissionEnded.$EndFeedbackValue" max="0">
                          <debug_text text="'This mission has failed. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                          <set_value name="$Feedback" exact="'$RML_FAILED'"/>
                          <speak actor="$Client" line="1000403" comment="(failed mission)" />
                          <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>

                          <remove_mission cue="$MissionCue" type="failed" />
                          <signal_cue cue="CleanUp" />

                        </do_if>

                        <!-- Success case -->
                        <do_else>
                          <!--TODO: Partial success-->
                          <debug_text text="'This mission has ended. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                          <do_if value="$RewardNotoriety and $ClientOwner">
                            <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                            <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted" />
                            <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                          </do_if>

                          <do_if value="$RewardCr">
                            <reward_player money="$RewardCr" />
                          </do_if>
                          <do_if value="$RewardObj">
                            <do_if value="$RewardObj.isinventory">
                              <add_inventory entity="player.entity" ware="$RewardObj" />
                              <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received" />
                            </do_if>
                          </do_if>
                          <set_value name="stat.missions_completed" operation="add"/>
                          <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'"/>
                          <speak actor="$Client" line="1000401" comment="(successful mission)" />
                          <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>

                          <remove_mission cue="$MissionCue" type="completed" activate="next" />

                          <signal_cue cue="PilotGetToShip" comment="PilotGetToShip will signal Cleanup"/>

                        </do_else>
                      </actions>
                    </cue>

                    <cue name="Aborted">
                      <conditions>
                        <check_any comment="Race Condition between Trade_Subscriptions and GM_Abort, GM_Abort should be there 1 Frame earlier">
                          <event_mission_aborted cue="$MissionCue"/>
                          <event_mission_aborted cue="$MissionThread"/>
                        </check_any>
                      </conditions>
                      <actions>
                        <!-- IF the player took the ship, the reputation penalty is triggered -->
                        <do_if value="($SalvageShip.isplayerowned)">
                          <signal_cue_instantly cue="PlayerStoleShip"                     comment="Instantly required since the Trade_Subscription is trying to clean up"/>
                          <signal_cue_instantly cue="md.GM_Rescue_Ship_2.DestroyMinesAfterPlayerLeavesSector" param="$Hostiles" comment="Instantly required since the Trade_Subscription is trying to clean up"/>
                        </do_if>
                        <do_elseif value="$Feedback == '$MISSION_SUCCEEDED'" comment="to catch the situation where the player handed in the ship but is cancelling while the pilot is underway">
                          <signal_cue_instantly cue="md.GM_Rescue_Ship_2.CleanUpDelayed" param="[$SalvageShip, $DeliveryStation]"/>
                          <signal_cue_instantly cue="md.GM_Rescue_Ship_2.DestroyMinesAfterPlayerLeavesSector" param="$Hostiles" comment="Instantly required since the Trade_Subscription is trying to clean up"/>
                        </do_elseif>
                        <!-- IF the player did not take the ship, it explodes with the Mines -->
                        <do_else>
                          <destroy_object object="$SalvageShip" explosion="true"/>
                          <do_if value="$Hostiles.count">
                            <destroy_group group="$Hostiles" explosion="true"/>
                          </do_if>
                        </do_else>
                        
                        <do_if value="event.object == $MissionCue"  comment="CleanUp only if ">
                          <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                          <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                          <remove_mission cue="$MissionCue" type="aborted"/>
                          <signal_cue cue="CleanUp" />
                        </do_if>
                      </actions>
                    </cue>

                    <cue name="MissionTimeout" onfail="cancel">
                      <conditions>
                        <check_value value="typeof $MissionDuration == datatype.time"/>
                        <check_value value="$MissionDuration" min="1s"/>
                      </conditions>
                      <delay exact="$MissionDuration"/>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericTimeoutLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <signal_cue_instantly cue="PlayerStoleShip" />
                        
                        <remove_mission cue="$MissionCue" type="failed"/>
                        <set_value name="$Feedback" exact="'$MISSION_TIMEOUT'"/>
                        <signal_cue_instantly cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="PlayerStoleShip">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!-- Player didn't transfer back the ship (in time) to original faction (effectively stealing the object), resulting in a heavy reputation loss with that faction.  -->
                        <add_faction_relation faction="$Faction" otherfaction="faction.player" value="-0.15" reason="relationchangereason.boardedobject"/>
                      </actions>
                    </cue>

                    <cue name="PilotGetToShip" instantiate="true">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <debug_text text="'PilotGetToShip'" chance="$DebugChance"/>

                        <!-- TODO: @Owen, Bulletproofing - e.g. for the case the player flies away and all of this would run in "low attention" -->

                        <create_order id="'DockAndWait'" object="$SalvageShip" default="true">
                          <param name="destination" value="$DeliveryStation" comment="stay docked (gives player a chance to leave)"/>
                        </create_order>

                        <set_value name="$PilotReady" exact="false"/>
                        <create_cue_actor cue="PilotArrived" name="$PilotActor">
                          <select faction="$Faction"/>
                        </create_cue_actor>

                        <do_if value="$PilotActor">
                          <find_npc_slot name="$PilotSlot" object="$SalvageShip.dock.walkablemodule"/>
                          <do_if value="$PilotSlot">
                            <!-- normal case, pilot was placed on dockarea and will move towards his ship -->
                            <assign_control_entity object="$SalvageShip" actor="$PilotActor" post="controlpost.aipilot" init="false"/>
                            <add_actor_to_room actor="$PilotActor" slot="$PilotSlot"/>
                            <debug_text text="'Found slot on dockarea'" chance="$DebugChance"/>
                          </do_if>
                          <do_else>
                            <!-- fallback, in case we can't place the pilot on the dockarea -->
                            <find_npc_slot name="$PilotSlot" object="$SalvageShip" post="controlpost.aipilot"/>
                            <do_if value="$PilotSlot">
                              <assign_control_entity object="$SalvageShip" actor="$PilotActor" post="controlpost.aipilot" init="true"/>
                              <debug_text text="'Found slot on ship'" chance="$DebugChance"/>
                              <add_actor_to_room actor="$PilotActor" slot="$PilotSlot"/>
                            </do_if>
                            <do_else>
                              <!-- TODO: @Owen, @Roger: fallback in case we can't place the npc on the ship either -->
                              <assign_control_entity object="$SalvageShip" actor="$PilotActor" post="controlpost.aipilot" init="false"/>
                              <debug_text text="'Cannot place pilot on ship (will fallback through PilotArrivedTimeout)'" chance="$DebugChance"/>
                            </do_else>
                          </do_else>
                        </do_if>
                        <do_else>
                          <debug_text text="'Can not create cue-actor (will fallback through PilotArrivedTimeout'" chance="$DebugChance"/>
                        </do_else>
                      </actions>
                      <cues>

                        <!-- If SalvageShip was destroyed after finishing the RML (player already won the mission, so cleanup) -->
                        <cue name="TargetDestroyedAfterDocking" instantiate="true">
                          <conditions>
                            <event_object_destroyed object="$SalvageShip"/>
                          </conditions>
                          <actions>
                            <signal_cue cue="CleanUp"/>
                          </actions>
                        </cue>

                        <!-- Pilot arrived at the SalvageShip -->
                        <cue name="PilotArrived" checkinterval="5s">
                          <conditions>
                            <check_all>
                              <check_value value="$SalvageShip"/>
                              <check_value value="$SalvageShip.pilot == $PilotActor"/>
                            </check_all>
                          </conditions>
                          <actions>
                            <debug_text text="'Pilot arrived'" chance="$DebugChance"/>
                            <cancel_cue cue="PilotArrivedTimeout"/>
                            <set_value name="$PilotReady" exact="true"/>
                          </actions>
                        </cue>

                        <!-- TODO: @Owen, @Roger - This cue should not be needed, AI/Pathfinding should handle this -->
                        <cue name="PilotArrivedTimeout">
                          <delay exact="180s"/>
                          <actions>
                            <debug_text text="'Timeout'" chance="$DebugChance"/>
                            <cancel_cue cue="PilotArrived"/>
                            <set_value name="$PilotReady" exact="true"/>
                          </actions>
                        </cue>

                        <!-- Keep SalvageShip docked, until the player leaves -->
                        <cue name="WaitForPlayerToLeave" checkinterval="5s">
                          <conditions>
                            <check_value value="$PilotReady"/>
                            <check_value value="not player.entity.hascontext.{$SalvageShip} "/>
                          </conditions>
                          <delay exact="10s"/>
                          <actions>
                            <debug_text text="'Player left'" chance="$DebugChance"/>
                            <create_order id="'MoveDie'" object="$SalvageShip" immediate="true"/>
                            <signal_cue cue="CleanUp" />
                          </actions>

                          <!-- If there is any player-owned ships, undock them from the salvageship -->
                          <!--cues>
                            <cue name="WaitAutoUndockPlayerships">
                              <delay exact="30s"/>
                              <actions>
                                <find_object_component name="$PlayerShipsOnSalvageShip" object="$SalvageShip" owner="faction.player" multiple="true"/>
                                <do_all exact="$PlayerShipsOnSalvageShip.count" counter="$i">
                                  <create_order id="'Undock'" object="$PlayerShipsOnSalvageShip.{$i}" immediate="true"/>
                                </do_all>
                              </actions>
                            </cue>
                          </cues-->

                        </cue>
                      </cues>
                    </cue>

                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="ForceCleanup" onfail="cancel">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="not event.param? or event.param == $MissionCue"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
            <do_if value="$BriefingCutsceneStarted?">
              <remove_value name="$BriefingCutsceneStarted"/>
              <stop_cutscene key="$CutsceneKey"/>

              <do_if value="$CutsceneCluster.exists">
                <destroy_object object="$CutsceneCluster"/>
              </do_if>
              <do_if value="$CutsceneShip.exists">
                <destroy_object object="$CutsceneShip"/>
              </do_if>
            </do_if>
            <do_if value="$HoloMap?">
              <remove_holomap />
              <remove_value name="$HoloMap"/>
            </do_if>


            <!--***Cleanup objects***-->

            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and (not $PreexistingClient?)">
              <destroy_object object="$Client" comment="cleanup the client we created with create_cue_actor"/>
            </do_if>
            <signal_cue_instantly cue="md.GM_Rescue_Ship_2.DestroyMinesAfterPlayerLeavesSector" param="$Hostiles" comment="Instantly required since the Trade_Subscription is trying to clean up?"/>


            <!--***Evaluate result***-->

            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']" comment="feedback = id, type and error-text from the above FeedbackValues-table"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [Owen]'" break="1"/>
              </do_else>

              <do_if value="$ReportSignalCue" comment ="The cue which called us">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData" comment="return feedback-data to calling cue"/>
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>

            <cancel_cue cue="Start"/>
          </actions>
        </cue>

        <!-- [$ResultCue, $SalvageShip] returns cue.$SalvageShipReward__Result -->
        <cue name="CalculateSalvageShipReward" instantiate="true" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <do_if value="event.param.{2}">
              <!--TODO @Owen #MoneyFloatMaths - adjust if and when we can multiply money datatypes with floats-->
              <set_value name="$RewardShipValue" exact="((event.param.{2}.value)f * 0.10)ct"/>
            </do_if>
            <do_else>
              <set_value name="$RewardShipValue" exact="100000Cr" comment="fallback"/>
            </do_else>
            <set_value name="event.param.{1}.$SalvageShipReward__Result" exact="($RewardShipValue / (100Cr)) * (100Cr)" comment="round"/>
          </actions>
        </cue>

      </cues>
    </library>

    <!-- Destroy Ship after start cue was canceled-->
    <cue name="CleanUpDelayed" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$SalvageShip"     exact="event.param.{1}"/>
        <set_value name="$DeliveryStation" exact="event.param.{2}"/>
      </actions>
      <cues>
        <cue name="CleanUpPlayerContext" checkinterval="2s" instantiate="true">
          <conditions>
            <check_value value="not @$requestedstorage"/>
            <check_value value="not player.entity.hascontext.{$SalvageShip.dock}"/>
          </conditions>
          <actions>
            <set_value name="$requestedstorage"/>
            <request_store_ship object="$DeliveryStation" size="$SalvageShip.macro.docksize" faction="$SalvageShip.trueowner"/>
          </actions>
          <cues>
            <cue name="InStorageCleanUp">
              <conditions>
                <event_object_moved_into_internal_storage object="$SalvageShip"/>
              </conditions>
              <actions>
                <destroy_object object="$SalvageShip" explosion="false"/>
                <cancel_cue cue="CleanUpDelayed"/>
              </actions>
            </cue>

            <cue name="InStorageDestroyed">
              <conditions>
                <event_object_destroyed object="$SalvageShip"/>
              </conditions>
              <actions>
                <cancel_cue cue="CleanUpDelayed"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <!-- MISSION SETUP HELPERS -->

    <!-- input: $MissionLevel; output: $MissionLevel, $HostileAmount, $HostileRange -->
    <library name="ConfigureDifficulty">
      <actions>
        <set_value name="$MissionLevel" exact="if not $MissionLevel? then 1 else $MissionLevel"/>
        <debug_text text="'Missing $MissionLevel input. Set to: ' + $MissionLevel" chance="$DebugChance"/>

        <!-- Figure out how many mines to spawn within what distance of the rescue ship, based on $MissionLevel -->
        <set_value name="$LevelVsSpawn" exact="table[
            { 1 } = [   5, 500m  ],
            { 2 } = [  10, 750m  ],
            { 3 } = [  15, 750m  ],
            { 4 } = [  20, 1000m ],
            { 5 } = [  30, 1500m ],
          ]"/>

        <set_value name="$Level" exact="$LevelVsSpawn.keys.random"/>
        <set_value name="$HostileAmount" exact="$LevelVsSpawn.{$Level}.{1}"/>
        <set_value name="$HostileRange"  exact="$LevelVsSpawn.{$Level}.{2}"/>

        <set_value name="$MissionLevel" exact="$MissionLevel + $Level - 1"/>
      </actions>
    </library>

    <!-- [$Hostiles] -->
    <cue name="DestroyMinesAfterPlayerLeavesSector" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <check_value value="event.param.count"/>
      </conditions>
      <actions>
        <set_value name="$Hostiles" exact="event.param"/>
      </actions>
      <cues>
        <cue name="DestroyMines">
          <conditions>
            <event_object_changed_sector object="player.entity"/>
          </conditions>
          <actions>
            <do_if value="$Hostiles.count">
              <destroy_group group="$Hostiles"/>
            </do_if>
          </actions>
        </cue>
      </cues>
    </cue>
  </cues>
</mdscript>