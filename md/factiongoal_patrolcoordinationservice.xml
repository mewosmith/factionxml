<?xml version="1.0" encoding="utf-8"?>
<mdscript name="FactionGoal_PatrolCoordinationService" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--Add goal to global variable-->
    <cue name="RegisterGoal">
      <actions>
        <do_if value="not global.$FactionGoals?">
          <create_list name="global.$FactionGoals"/>
        </do_if>
        <set_value name="Start.$Name" exact="'Patrol Coordination'"/>
        <append_to_list name="global.$FactionGoals" exact="table[$EvaluationCue = Evaluate, $EvaluateEventLib = EvaluateEvent, $TriggerCue = Start]"/>
      </actions>
    </cue>

    <cue name="CentralInformationCenter">
      <actions>
        <!-- problem: would be good if the last position of the ship could be stored.
                        but if the ship's position is queried, it is usually given relative to the zone. if the zone id is also stored, it would be problematic if the ship was in a temp zone at the time of the event.
                        ideally, would store the sector and position relative to the sector and act on that. -->
        <!-- $MasterList_DistressCalls == [[$Faction, [$ObjectID, $ForceDifferential, [$Sector, $Position], player.age, [$Priority, $State]], [$ObjectID, $ForceDifferential, [$Sector, $Position], player.age, [$Priority, $State]], etc], [$Faction, [$ObjectID, $ForceDifferential, [$Sector, $Position], player.age, [$Priority, $State]], etc], etc] -->
        <create_list name="$MasterList_DistressCalls"/>

        <set_value name="$TrimInterval" exact="420s"/>
        <set_value name="$Time_DataObsolete" exact="3600s"/>
        <set_value name="$DebugChance" exact="0"/>

        <debug_text text="'MasterList_DistressCalls initialized. This should only happen once.'" chance="$DebugChance"/>
      </actions>
      <cues>

        <cue name="Register_Factions" instantiate="true">
          <conditions>
            <event_cue_signalled/>
            <check_value value="typeof event.param" exact="datatype.cue"/>
          </conditions>
          <actions>
            <do_all exact="$MasterList_DistressCalls.count + 1" counter="$Counter_MasterList_DistressCalls">
              <do_if value="$Counter_MasterList_DistressCalls gt $MasterList_DistressCalls.count">
                <append_to_list name="$MasterList_DistressCalls" exact="[event.param.$Faction]"/>
                <set_value name="event.param.$PCS_FactionIndex" exact="$Counter_MasterList_DistressCalls"/>
                <set_value name="event.param.$PCS_CIC" exact="namespace"/>
                <debug_text text="$MasterList_DistressCalls.{$Counter_MasterList_DistressCalls}.{1} + ' registered with MasterList_DistressCalls. Index: ' + event.param.$PCS_FactionIndex" chance="$DebugChance"/>
              </do_if>
              <do_elseif value="$MasterList_DistressCalls.{$Counter_MasterList_DistressCalls}.{1}" exact="event.param">
                <debug_text text="'ERROR: ' + $MasterList_DistressCalls.{$Counter_MasterList_DistressCalls}.{1} + ' tried to register with MasterList_DistressCalls more than once.'"/>
                <break/>
              </do_elseif>
            </do_all>
            <debug_text text="'MasterList_DistressCalls: ' + $MasterList_DistressCalls" chance="$DebugChance"/>
          </actions>
        </cue>

        <cue name="Listen_DistressCalls" instantiate="true">
          <conditions>
            <check_any>
              <!-- fired from fight.attack.object.station: param="'station_under_attack'" param2="defending station" param3="attacking ship" -->
              <event_object_signalled object="player.galaxy" param="'station_under_attack'"/>
              <!-- fired from interrupt.attacked: param="'ship_in_distress'" param2="defending ship" param3="attacking ship" -->
              <event_object_signalled object="player.galaxy" param="'ship_in_distress'"/>
              <!--<debug_text text="'Distress call detected. Attempting to update MasterList_DistressCalls. %1 (%2) of %3 in %4, %5, %6 under attack by %7 (%8) of %9'.[event.param2.knownname, event.param2, event.param2.owner, event.param2.zone.knownname, event.param2.sector.knownname, event.param2.cluster.knownname, event.param3.knownname, event.param3, event.param3.owner]" chance="$DebugChance"/>-->
            </check_any>
          </conditions>
          <actions>
            <set_value name="this.$Run" exact="true"/>
            <!-- slight change: only update the list if the report in that sector is more than 1 minute old. -->
            <do_all exact="$MasterList_DistressCalls.count" counter="$Counter_Layer1">
              <do_if value="$MasterList_DistressCalls.{$Counter_Layer1}.{1}" exact="event.param2.owner">
                <do_all exact="$MasterList_DistressCalls.{$Counter_Layer1}.count" counter="$Counter_Layer2">
                  <!-- there might not be an entry for this sector and this faction yet, in which case this report should be written in. -->
                  <do_if value="@$MasterList_DistressCalls.{$Counter_Layer1}.{$Counter_Layer2}.{3}.{1}" exact="event.param2.sector">
                    <debug_text text="'Last report for %1 on %2 was %3 ago.'.[event.param2.owner, event.param2.knownname, player.age - $MasterList_DistressCalls.{$Counter_Layer1}.{$Counter_Layer2}.{4}]" chance="$DebugChance"/>
                    <do_if value="player.age lt ($MasterList_DistressCalls.{$Counter_Layer1}.{$Counter_Layer2}.{4} + 60s)">
                      <debug_text text="'Report for %1 on %2 will be discarded.'.[event.param2.owner, event.param2.knownname]" chance="$DebugChance"/>
                      <set_value name="this.$Run" exact="false"/>
                      <cancel_cue cue="this"/>
                    </do_if>
                  </do_if>
                </do_all>
              </do_if>
            </do_all>
            <do_if value="this.$Run">
              <set_value name="$OurSectorStrength" exact="0"/>
              <set_value name="$TheirSectorStrength" exact="0"/>
              <set_value name="$ForceDifferential" exact="0"/>

              <create_position name="$Position" object="event.param2" space="event.param2.sector"/>
              <debug_text text="player.age + ': %1 (%2) of %3 in %5, %6 [%4], is under attack by %7 (%8) of %9.'.[event.param2.knownname, event.param2, event.param2.owner, $Position, event.param2.sector.knownname, event.param2.cluster.knownname, event.param3.knownname, event.param3, event.param3.owner]" chance="$DebugChance"/>

              <do_all exact="$MasterList_DistressCalls.count" counter="$Counter_Layer1">
                <do_if value="$MasterList_DistressCalls.{$Counter_Layer1}.{1}" exact="event.param2.owner">
                  <!-- NB: the line below will limit the list to events happening in sectors owned by the affected object's faction.
                          activating this will trim the list down considerably, but will mean that factions like pirates will not be able to use this list.
                          reconsider later. -->
                  <!--<do_if value="event.param2.sector.owner" exact="$MasterList_DistressCalls.{$Counter_Layer1}.{1}">-->
                  <find_ship_by_true_owner name="$OurSectorShips" space="event.param2.sector" faction="event.param2.owner" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" primarypurpose="purpose.fight" multiple="true"/>
                  <do_all exact="$OurSectorShips.count" counter="$Counter_SectorShips">
                    <do_if value="$OurSectorShips.{$Counter_SectorShips}.isclass.ship_s">
                      <set_value name="$OurSectorStrength" operation="add" exact="1"/>
                    </do_if>
                    <do_elseif value="$OurSectorShips.{$Counter_SectorShips}.isclass.ship_m">
                      <set_value name="$OurSectorStrength" operation="add" exact="3"/>
                    </do_elseif>
                    <do_elseif value="$OurSectorShips.{$Counter_SectorShips}.isclass.ship_l">
                      <set_value name="$OurSectorStrength" operation="add" exact="11"/>
                    </do_elseif>
                    <do_elseif value="$OurSectorShips.{$Counter_SectorShips}.isclass.ship_xl">
                      <set_value name="$OurSectorStrength" operation="add" exact="23"/>
                    </do_elseif>
                  </do_all>

                  <find_ship name="$TheirSectorShips" space="event.param2.sector" owner="event.param3.owner" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" primarypurpose="purpose.fight" multiple="true"/>
                  <do_all exact="$TheirSectorShips.count" counter="$Counter_SectorShips">
                    <do_if value="$TheirSectorShips.{$Counter_SectorShips}.isclass.ship_s">
                      <set_value name="$TheirSectorStrength" operation="add" exact="1"/>
                    </do_if>
                    <do_elseif value="$TheirSectorShips.{$Counter_SectorShips}.isclass.ship_m">
                      <set_value name="$TheirSectorStrength" operation="add" exact="3"/>
                    </do_elseif>
                    <do_elseif value="$TheirSectorShips.{$Counter_SectorShips}.isclass.ship_l">
                      <set_value name="$TheirSectorStrength" operation="add" exact="11"/>
                    </do_elseif>
                    <do_elseif value="$TheirSectorShips.{$Counter_SectorShips}.isclass.ship_xl">
                      <set_value name="$TheirSectorStrength" operation="add" exact="23"/>
                    </do_elseif>
                  </do_all>
                  <set_value name="$ForceDifferential" exact="$OurSectorStrength - $TheirSectorStrength"/>
                  <!--<do_all exact="$MasterList_DistressCalls.{$Counter_Layer1}.count" counter="$Counter_Layer2">
                  <do_if value="$MasterList_DistressCalls.{$Counter_Layer1}.{$Counter_Layer2}.{3}.{1}" exact="event.param2.sector" negate="true">
                    <do_if value="(player.age - $MasterList_DistressCalls.{$Counter_Layer1}.{$Counter_Layer2}.{4}) lt 1800" negate="true">
                    </do_if>
                  </do_if>
                </do_all>-->
                  <do_all exact="$MasterList_DistressCalls.{$Counter_Layer1}.count + 1" counter="$Counter_Layer2">
                    <do_if value="$Counter_Layer2 gt $MasterList_DistressCalls.{$Counter_Layer1}.count">
                      <append_to_list name="$MasterList_DistressCalls.{$Counter_Layer1}" exact="[event.param2, $ForceDifferential, [event.param2.sector, $Position], player.age, [0, 0]]"/>
                    </do_if>
                    <do_elseif value="@$MasterList_DistressCalls.{$Counter_Layer1}.{$Counter_Layer2}.{3}.{1}" exact="event.param2.sector">
                      <set_value name="$MasterList_DistressCalls.{$Counter_Layer1}.{$Counter_Layer2}" exact="[event.param2, $ForceDifferential, [event.param2.sector, $Position], player.age, [0, 0]]"/>
                      <break/>
                    </do_elseif>
                  </do_all>
                  <debug_text text="'MasterList_DistressCalls updated for %1: %2'.[$MasterList_DistressCalls.{$Counter_Layer1}.{1}, $MasterList_DistressCalls.{$Counter_Layer1}]" chance="$DebugChance"/>
                  <break/>
                  <!--</do_if>-->
                </do_if>
              </do_all>
              <debug_text text="'MasterList_DistressCalls attempted to update. Complete MasterList: ' + $MasterList_DistressCalls" chance="$DebugChance"/>
            </do_if>
          </actions>
        </cue>
        <cue name="Trim_MasterList" checktime="$Time_DataObsolete" checkinterval="780s">
          <conditions>
            <check_value value="(player.age - @$LastTrimmed) gt $TrimInterval"/>
          </conditions>
          <actions>
            <set_value name="$LastTrimmed" exact="player.age"/>
            <do_all exact="$MasterList_DistressCalls.count" counter="$Counter_Layer1">
              <do_all exact="$MasterList_DistressCalls.{$Counter_Layer1}.count" counter="$Counter_Layer2" reverse="true">
                <do_if value="(player.age - @$MasterList_DistressCalls.{$Counter_Layer1}.{$Counter_Layer2}.{4}) gt $Time_DataObsolete and not ($Counter_Layer2 == 1)">
                  <debug_text text="'MasterList_DistressCalls trimmed. Removing %1 from the list of %2'.[$MasterList_DistressCalls.{$Counter_Layer1}.{$Counter_Layer2}, $MasterList_DistressCalls.{$Counter_Layer1}.{1}]" chance="$DebugChance"/>
                  <remove_value name="$MasterList_DistressCalls.{$Counter_Layer1}.{$Counter_Layer2}"/>
                </do_if>
              </do_all>
            </do_all>
            <debug_text text="'MasterList_DistressCalls trimmed. Complete MasterList: ' + $MasterList_DistressCalls" chance="$DebugChance"/>
            <reset_cue cue="this"/>
          </actions>
        </cue>
      </cues>
    </cue>

    <library name="Evaluate">
      <actions>
        <!-- don't bother doing this too early. -->
        <do_if value="player.age gt 1020s">
          <!-- Generate or Update Faction List of Distress Calls -->
          <do_if value="(player.age - @$PCS_LastCheck) gt 3min">
            <set_value name="$PCS_LastCheck" exact="player.age"/>

            <!-- $DistressCalls == [$Faction, [$ObjectID, $ForceDifferential, [$Sector, $ShipPosition], player.age, [$Priority, $State]], [$ObjectID, $ForceDifferential, [$Sector, $ShipPosition], player.age, [$Priority, $State]], etc] -->
            <!--<do_all exact="$PCS_CIC.$MasterList_DistressCalls.count" counter="$Counter_Layer1">
              <do_if value="$PCS_CIC.$MasterList_DistressCalls.{$Counter_Layer1}.{1}" exact="$Faction">
                <set_value name="$PCS_FactionIndex" exact="$Counter_Layer1"/>
                <break/>
              </do_if>
            </do_all>
            <debug_text text="'%1 Faction Index is %2 EVALUATE 1'.[$Faction, $PCS_FactionIndex]" chance="$DebugChance"/>-->

            <!-- If the Faction does not have a list yet, copy the entire list and delete it from the master list. -->
            <do_if value="$DistressCalls.count le 1">
              <set_value name="$DistressCalls" exact="$PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}.clone"/>
              <do_all exact="$PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}.count" counter="$Counter_Layer2" reverse="true">
                <do_if value="$Counter_Layer2 != 1">
                  <remove_value name="$PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}.{$Counter_Layer2}"/>
                </do_if>
              </do_all>
              <debug_text text="player.age + ': %1 did not yet have a local distress call list. Initialized. EVALUATE 2.1 \n Local list: %2, \n Master list: %3'.[$Faction, $DistressCalls, $PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}]" chance="$DebugChance"/>
            </do_if>
            <!-- If the Faction already has a list,
                    update data that the Faction already has,
                    and write in any new information. -->
            <do_else>
              <!-- NB: This was changed to also list reports from ships belonging to allied factions. Later, review to see if $PCS_FactionIndex can be completely discarded. -->
              <do_all exact="$PCS_CIC.$MasterList_DistressCalls.count" counter="$Counter_MasterList_Layer1">
                <do_if value="$Faction.relationto.{$PCS_CIC.$MasterList_DistressCalls.{$Counter_MasterList_Layer1}.{1}} ge 0.1">
                  <do_all exact="$PCS_CIC.$MasterList_DistressCalls.{$Counter_MasterList_Layer1}.count" counter="$Counter_MasterList_Layer2" reverse="true">
                    <do_if value="$Counter_MasterList_Layer2 != 1">
                      <do_all exact="$DistressCalls.count + 1" counter="$Counter_FactionList_Layer1">
                        <do_if value="$Counter_FactionList_Layer1 != 1">
                          <do_if value="$Counter_FactionList_Layer1 gt $DistressCalls.count">
                            <append_to_list name="$DistressCalls" exact="$PCS_CIC.$MasterList_DistressCalls.{$Counter_MasterList_Layer1}.{$Counter_MasterList_Layer2}"/>
                            <!-- remove the entry from the master list only if the report was sent by an object belonging to $Faction.
                                  this will effectively mean that more than one faction could respond to a report.
                                  if we later decide that we want only one faction to maybe respond to each report, then review this. -->
                            <do_if value="$PCS_CIC.$MasterList_DistressCalls.{$Counter_MasterList_Layer1}.{1}" exact="$Faction">
                              <remove_value name="$PCS_CIC.$MasterList_DistressCalls.{$Counter_MasterList_Layer1}.{$Counter_MasterList_Layer2}"/>
                            </do_if>
                            <debug_text text="player.age + ': %1 did not yet have information on %2. Writing it in. EVALUATE 2.2.1'.[$Faction, $DistressCalls.{$Counter_FactionList_Layer1}.{3}.{1}.knownname]" chance="$DebugChance2"/>
                          </do_if>
                          <do_elseif value="$PCS_CIC.$MasterList_DistressCalls.{$Counter_MasterList_Layer1}.{$Counter_MasterList_Layer2}.{3}.{1}" exact="$DistressCalls.{$Counter_FactionList_Layer1}.{3}.{1}">
                            <!-- Update: if $Faction is already acting upon the report, do not update it from this report. -->
                            <do_if value="$DistressCalls.{$Counter_FactionList_Layer1}.{5}.{2} lt 2">
                              <!-- if we are updating information, and it has gotten worse, this sector needs particular attention.
                                    this will be a simple flag in $DistressCalls.{$Counter_Sector}.{5}.{1} -->
                              <do_if value="$PCS_CIC.$MasterList_DistressCalls.{$Counter_MasterList_Layer1}.{$Counter_MasterList_Layer2}.{2} lt $DistressCalls.{$Counter_FactionList_Layer1}.{2}">
                                <set_value name="$PCS_CIC.$MasterList_DistressCalls.{$Counter_MasterList_Layer1}.{$Counter_MasterList_Layer2}.{5}.{1}" exact="1"/>
                                <debug_text text="player.age + ': %1: Situation in %2 has worsened. Increasing priority.'.[$Faction, $DistressCalls.{$Counter_FactionList_Layer1}.{3}.{1}.knownname]" chance="$DebugChance2"/>
                              </do_if>
                              <set_value name="$DistressCalls.{$Counter_FactionList_Layer1}" exact="$PCS_CIC.$MasterList_DistressCalls.{$Counter_MasterList_Layer1}.{$Counter_MasterList_Layer2}.clone"/>
                            </do_if>
                            <do_if value="$PCS_CIC.$MasterList_DistressCalls.{$Counter_MasterList_Layer1}.{1}" exact="$Faction">
                              <remove_value name="$PCS_CIC.$MasterList_DistressCalls.{$Counter_MasterList_Layer1}.{$Counter_MasterList_Layer2}"/>
                            </do_if>
                            <debug_text text="player.age + ': %1 information on %2 updated. EVALUATE 2.2.2'.[$Faction, $DistressCalls.{$Counter_FactionList_Layer1}.{3}.{1}.knownname]" chance="$DebugChance2"/>
                            <break/>
                          </do_elseif>
                        </do_if>
                      </do_all>
                    </do_if>
                  </do_all>
                </do_if>
              </do_all>
            </do_else>
            <!--<do_else>
              <do_all exact="$PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}.count" counter="$Counter_MasterList_Layer2" reverse="true">
                <do_if value="$Counter_MasterList_Layer2 != 1">
                  <do_all exact="$DistressCalls.count + 1" counter="$Counter_FactionList_Layer1">
                    <do_if value="$Counter_FactionList_Layer1 != 1">
                      <do_if value="$Counter_FactionList_Layer1 gt $DistressCalls.count">
                        <append_to_list name="$DistressCalls" exact="$PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}.{$Counter_MasterList_Layer2}"/>
                        <remove_value name="$PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}.{$Counter_MasterList_Layer2}"/>
                        <debug_text text="player.age + ': %1 did not yet have information on %2. Writing it in. EVALUATE 2.2.1'.[$Faction, $DistressCalls.{$Counter_FactionList_Layer1}.{3}.{1}.knownname]" chance="$DebugChance"/>
                      </do_if>
                      <do_elseif value="$PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}.{$Counter_MasterList_Layer2}.{3}.{1}" exact="$DistressCalls.{$Counter_FactionList_Layer1}.{3}.{1}">
                        <!- if we are updating information, and it has gotten worse, this sector needs particular attention.
                              this will be a simple flag in $DistressCalls.{$Counter_Sector}.{5}.{1} ->
                        <do_if value="$PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}.{$Counter_MasterList_Layer2}.{2} lt $DistressCalls.{$Counter_FactionList_Layer1}.{2}">
                          <set_value name="$PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}.{$Counter_MasterList_Layer2}.{5}.{1}" exact="1"/>
                          <debug_text text="player.age + ': %1: Situation in %2 has worsened. Increasing priority.'.[$Faction, $DistressCalls.{$Counter_FactionList_Layer1}.{3}.{1}.knownname]" chance="$DebugChance"/>
                        </do_if>
                        <set_value name="$DistressCalls.{$Counter_FactionList_Layer1}" exact="$PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}.{$Counter_MasterList_Layer2}.clone"/>
                        <remove_value name="$PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}.{$Counter_MasterList_Layer2}"/>
                        <debug_text text="player.age + ': %1 information on %2 updated. EVALUATE 2.2.2'.[$Faction, $DistressCalls.{$Counter_FactionList_Layer1}.{3}.{1}.knownname]" chance="$DebugChance"/>
                        <break/>
                      </do_elseif>
                    </do_if>
                  </do_all>
                </do_if>
              </do_all>
            </do_else>-->
            <debug_text text="player.age + ': %1 faction distress call list updated. \n Local list: %2, \n Master list: %3'.[$Faction, $DistressCalls, $PCS_CIC.$MasterList_DistressCalls.{$PCS_FactionIndex}]" chance="$DebugChance2"/>
          </do_if>

          <!-- Prioritize events for response. -->
          <do_if value="$DistressCalls.count gt 1">
            <do_all exact="$DistressCalls.count" counter="$Counter_DistressCalls" reverse="true">
              <do_if value="$Counter_DistressCalls != 1">

                <!-- if the information is ancient, discard. Ancient is one hour at the moment. -->
                <do_if value="((player.age - $DistressCalls.{$Counter_DistressCalls}.{4}) gt 3600) and ($DistressCalls.{$Counter_DistressCalls}.{5}.{2} != 2)">
                  <debug_text text="player.age + ': %1 information on %2 is way too old. Discarding.'.[$Faction, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.knownname]" chance="$DebugChance2"/>
                  <remove_value name="$DistressCalls.{$Counter_DistressCalls}"/>
                </do_if>
                <do_elseif value="$DistressCalls.{$Counter_DistressCalls}.{5}.{2} lt 2">
                  <set_value name="$EvaluatedWeight" exact="0"/>
                  <!-- Do we have any ships that can respond?
                        if the situation in that sector is worse than when last checked, prioritize by:
                          looking farther for friendly ships,
                          and assigning more weight to the target. -->
                  <do_if value="$DistressCalls.{$Counter_DistressCalls}.{5}.{1} ge 1">
                    <find_cluster_in_range name="$LocalClusters" object="$DistressCalls.{$Counter_DistressCalls}.{3}.{1}" maxdistance="$DistressCalls.{$Counter_DistressCalls}.{5}.{1}" multiple="true"/>
                    <set_value name="$OurLocalShips" exact="[]"/>
                    <do_all exact="$LocalClusters.count" counter="$Counter_Clusters">
                      <find_ship_by_true_owner name="$OurLocalShips" faction="$Faction" primarypurpose="purpose.fight" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" space="$LocalClusters.{$Counter_Clusters}" commandeerable="true" multiple="true" append="true"/>
                      <!--<find_ship groupname="$OurLocalShips_temp" owner="$Faction" primarypurpose="purpose.fight" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" space="$LocalClusters.{$Counter_Clusters}" commandeerable="true" multiple="true"/>-->
                    </do_all>
                    <!--<set_value name="$OurLocalShips" exact="$OurLocalShips_temp.list"/>
                    <clear_group group="$OurLocalShips_temp"/>
                    <remove_value name="$OurLocalShips_temp"/>-->

                    <set_value name="$EvaluatedWeight" exact="@$EvaluatedWeight + 0.2"/>
                  </do_if>
                  <do_else>
                    <find_ship_by_true_owner name="$OurLocalShips" faction="$Faction" primarypurpose="purpose.fight" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" commandeerable="true" space="$DistressCalls.{$Counter_DistressCalls}.{3}.{1}" multiple="true">
                      <match_distance value="$DistressCalls.{$Counter_DistressCalls}.{3}.{2}" space="$DistressCalls.{$Counter_DistressCalls}.{3}.{1}" max="50km"/>
                    </find_ship_by_true_owner>
                    <set_value name="$EvaluatedWeight" exact="@$EvaluatedWeight + 0.1"/>
                  </do_else>
                  <debug_text text="player.age + ': %1 evaluating reinforcement of %2, %3. Weight: %4 PRIORITIZE 1'.[$Faction, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.knownname, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.cluster.knownname, $EvaluatedWeight]" chance="$DebugChance2"/>

                  <do_if value="$OurLocalShips.count ge 1">
                    <!-- is there still someone to rescue? -->
                    <do_if value="$DistressCalls.{$Counter_DistressCalls}.{1}.isoperational">
                      <!-- slight preference to rescue ships that are still alive over stations. -->
                      <do_if value="$DistressCalls.{$Counter_DistressCalls}.{1}.isclass.ship">
                        <set_value name="$EvaluatedWeight" exact="$EvaluatedWeight + 0.2"/>
                      </do_if>
                      <do_else>
                        <set_value name="$EvaluatedWeight" exact="$EvaluatedWeight + 0.1"/>
                      </do_else>
                      <debug_text text="player.age + ': %1 evaluating reinforcement of %2, %3. %5 (%6) is still alive! Weight: %4 PRIORITIZE 2.0'.[$Faction, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.knownname, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.cluster.knownname, $EvaluatedWeight, $DistressCalls.{$Counter_DistressCalls}.{1}.knownname, $DistressCalls.{$Counter_DistressCalls}.{1}]" chance="$DebugChance2"/>

                      <do_if value="$DistressCalls.{$Counter_DistressCalls}.{1}.owner" exact="$Faction">
                        <set_value name="$EvaluatedWeight" exact="$EvaluatedWeight + 0.1"/>
                        <debug_text text="player.age + ': %1 evaluating reinforcement of %2, %3. %5 (%6) belongs to our faction. Weight: %4 PRIORITIZE 2.1'.[$Faction, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.knownname, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.cluster.knownname, $EvaluatedWeight, $DistressCalls.{$Counter_DistressCalls}.{1}.knownname, $DistressCalls.{$Counter_DistressCalls}.{1}]" chance="$DebugChance2"/>
                      </do_if>
                    </do_if>

                    <!-- is it somewhere in our space? -->
                    <do_if value="$DistressCalls.{$Counter_DistressCalls}.{3}.{1}.owner" exact="$Faction">
                      <set_value name="$EvaluatedWeight" exact="$EvaluatedWeight + 0.1"/>
                      <debug_text text="player.age + ': %1 evaluating reinforcement of %2, %3. Encounter was in our space. Weight: %4 PRIORITIZE 3'.[$Faction, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.knownname, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.cluster.knownname, $EvaluatedWeight]" chance="$DebugChance2"/>
                    </do_if>

                    <!-- NB: if more prioritization factors are added above, adjust here to cap it at 1.0, or whichever cap we decide when we balance the various goal weights. -->
                    <do_if value="$OurLocalShips.count gt 4">
                      <set_value name="$EvaluatedWeight" min="$EvaluatedWeight + 0.2" max="$EvaluatedWeight + 0.4"/>
                      <debug_text text="player.age + ': %1 evaluating reinforcement of %2, %3. Ships available: %5 Weight: %4 PRIORITIZE 4.1'.[$Faction, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.knownname, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.cluster.knownname, $EvaluatedWeight, $OurLocalShips.count]" chance="$DebugChance2"/>
                    </do_if>
                    <do_else>
                      <set_value name="$EvaluatedWeight" min="$EvaluatedWeight + ($OurLocalShips.count)f / 20.0" max="$EvaluatedWeight + ($OurLocalShips.count)f / 10.0"/>
                      <debug_text text="player.age + ': %1 evaluating reinforcement of %2, %3. Ships available: %5 Weight: %4 PRIORITIZE 4.2'.[$Faction, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.knownname, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.cluster.knownname, $EvaluatedWeight, $OurLocalShips.count]" chance="$DebugChance2"/>
                    </do_else>

                    <!-- set State flag in the local list. this goal has been evaluated. -->
                    <set_value name="$DistressCalls.{$Counter_DistressCalls}.{5}.{2}" exact="1"/>
                    <!--<set_value name="$DistressCalls.{$Counter_DistressCalls}.{5}.{2}" exact="$DistressCalls.{$Counter_DistressCalls}.{5}.{2} + 1"/>-->

                    <!-- $EvaluationReport == [$ObjectID, $ForceDifferential, [$Sector, $ShipPosition], player.age, [$Priority, $State]] -->
                    <set_value name="$EvaluationReport" exact="$DistressCalls.{$Counter_DistressCalls}.clone"/>
                    <!--<remove_value name="$DistressCalls.{$Counter_DistressCalls}"/>-->

                    <append_to_list name="$EvaluatedGoals" exact="table[
                                  $FactionCue = namespace,
                                  $Faction = $Faction,
                                  $TriggerCue = global.$FactionGoals.{$i}.$TriggerCue,
                                  $Weight = $EvaluatedWeight,
                                  $EvaluationReport = $EvaluationReport,
                                  $DebugChance = $DebugChance,
                                  $DebugChance2 = $DebugChance2]"/>

                    <!--<append_to_list name="$EvaluatedGoals" exact="[$EvaluatedWeight, global.$FactionGoals.{$i}.$TriggerCue, $EvaluationReport]"/>-->
                    <debug_text text="player.age + ': %1 evaluating reinforcement of %2, %3. Weight: %4 PRIORITIZE DONE'.[$Faction, $EvaluationReport.{3}.{1}.knownname, $EvaluationReport.{3}.{1}.cluster.knownname, $EvaluatedWeight]" chance="$DebugChance2"/>
                  </do_if>
                  <!--<do_else>
                    <debug_text text="player.age + ': %1 evaluating reinforcement of %2, %3. We have no ships that can respond. Weight: %4'.[$Faction, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.knownname, $DistressCalls.{$Counter_DistressCalls}.{3}.{1}.cluster.knownname, $EvaluatedWeight]" chance="$DebugChance"/>
                  </do_else>-->
                </do_elseif>
              </do_if>
            </do_all>
          </do_if>
        </do_if>
      </actions>
    </library>

    <library name="EvaluateEvent">
      <actions>
      </actions>
    </library>

    <!--<library name="Execute">
      <actions>
        <signal_cue_instantly cue="md.FactionGoal_PatrolCoordinationService.Start" param="[namespace, $Faction, $CurrentGoal.{1}, $CurrentGoal.{3}]"/>
      </actions>
    </library>-->

    <!--Instance the goal by passing a list.
    This cue may be signalled with other parameters to trigger child cues e.g. event.param.{1} == 'generate_report' - See Process_Signal cue-->
    <cue name="Start" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <check_value value="typeof event.param == datatype.table"/>
      </conditions>
      <actions>
        <set_value name="$FactionCue" exact="event.param.$FactionCue"/>
        <set_value name="$Faction" exact="event.param.$Faction"/>
        <set_value name="$GoalWeight" exact="event.param.$Weight"/>
        <set_value name="$FactionAggression" exact="null"/>

        <!--TODO @Owen debugchance > $DebugChance-->
        <set_value name="$DebugChance" exact="@event.param.$DebugChance"/>
        <set_value name="$DebugChance2" exact="@event.param.$DebugChance2"/>

        <append_to_list name="$FactionCue.$Goals" exact="this"/>

        <do_if value="$Faction.mood.aggression != $FactionAggression">
          <do_if value="$Faction.mood.aggression" negate="true">
            <set_value name="$FactionAggression" exact="moodlevel.normal"/>
            <debug_text text="'%1 does not have mood.aggression set.'.[$Faction]"/>
          </do_if>
          <do_else>
            <set_value name="$FactionAggression" exact="$Faction.mood.aggression"/>
          </do_else>
          <do_if value="$FactionAggression == moodlevel.verylow">
            <set_value name="$AcceptableForceDifferential" exact="3"/>
          </do_if>
          <do_elseif value="$FactionAggression == moodlevel.low">
            <set_value name="$AcceptableForceDifferential" exact="1"/>
          </do_elseif>
          <do_elseif value="$FactionAggression == moodlevel.normal">
            <set_value name="$AcceptableForceDifferential" exact="-1"/>
          </do_elseif>
          <do_elseif value="$FactionAggression == moodlevel.high">
            <set_value name="$AcceptableForceDifferential" exact="-3"/>
          </do_elseif>
          <do_elseif value="$FactionAggression == moodlevel.veryhigh">
            <set_value name="$AcceptableForceDifferential" exact="-11"/>
          </do_elseif>
        </do_if>

        <!-- event.param.$EvaluationReport == [$ObjectID, $ForceDifferential, [$Sector, $ShipPosition], player.age, [$Priority, $State]] -->
        <set_value name="$TargetSector" exact="event.param.$EvaluationReport.{3}.{1}"/>
        <do_if value="event.param.$EvaluationReport.{1}.exists">
          <set_value name="$TargetObject" exact="event.param.$EvaluationReport.{1}"/>
        </do_if>
        <!-- $TargetPosition is either:
                the current position of $TargetObject, if it still exists,
                or the last known position of $TargetObject. -->
        <do_if value="@$TargetObject.sector == $TargetSector">
          <create_position name="$TargetPosition" object="event.param.$EvaluationReport.{1}" space="event.param.$EvaluationReport.{1}.sector"/>
        </do_if>
        <do_else>
          <set_value name="$TargetPosition" exact="event.param.$EvaluationReport.{3}.{2}"/>
        </do_else>
        <set_value name="$TargetPriority" exact="event.param.$EvaluationReport.{5}.{1}"/>

        <find_cluster_in_range name="$LocalClusters" object="$TargetSector" maxdistance="$TargetPriority" multiple="true"/>

        <set_value name="$LocalForceDifferential" exact="0"/>

        <set_value name="$PCS_Orders" exact="[]"/>
        <set_value name="$PCS_PatrolOrders" exact="[]"/>
        <create_group groupname="$PCS_Ships"/>
        <create_group groupname="$TheirLocalShips"/>

        <set_value name="$DebugText" exact="'(' + $Faction.id + ') ' + static.$Name + ' ' + $TargetSector.knownname + ' - '"/>
        <debug_text text="$DebugText" chance="$DebugChance"/>
        <debug_text text="$DebugText + 'weight ' + $GoalWeight" context="false" chance="$DebugChance"/>

        <do_all exact="$FactionCue.$DistressCalls.count" counter="$Counter_DistressCalls">
          <do_if value="$Counter_DistressCalls gt 1">
            <do_if value="$FactionCue.$DistressCalls.{$Counter_DistressCalls}.{3}.{1}" exact="$TargetSector">
              <set_value name="$FactionCue.$DistressCalls.{$Counter_DistressCalls}.{5}.{2}" exact="2"/>
              <debug_text text="player.age + ': %1 responding to report from %2, %3. Flag set: %4.\nReport was sent by: %5 (%6). Time since report: %7'.[$Faction, $FactionCue.$DistressCalls.{$Counter_DistressCalls}.{3}.{1}.knownname, $FactionCue.$DistressCalls.{$Counter_DistressCalls}.{3}.{1}.cluster.knownname, $FactionCue.$DistressCalls.{$Counter_DistressCalls}.{5}.{2}, @$TargetObject.knownname, @$TargetObject, player.age - $FactionCue.$DistressCalls.{$Counter_DistressCalls}.{4}]" chance="$DebugChance"/>
              <break/>
            </do_if>
          </do_if>
        </do_all>
      </actions>
      <cues>
        <!--event.param.{1} == Signal ID
        Other elements are custom-->
        <cue name="Process_Signal" instantiate="true">
          <conditions>
            <event_cue_signalled cue="Start"/>
          </conditions>
          <actions>
            <do_if value="event.param.{1} == 'evaluate_event'">
              <!--do nothing-->
            </do_if>
            <do_elseif value="event.param.{1} == 'generate_report'">
              <signal_cue_instantly cue="Generate_Report"/>
            </do_elseif>
            <do_else>
              <assert value="false" text="'Signal ' + event.param + ' was not recognised [Owen]'" break="1"/>
            </do_else>
          </actions>
        </cue>

        <cue name="Faction_Deactivated">
          <conditions>
            <event_faction_deactivated faction="$Faction"/>
          </conditions>
          <actions>
            <set_value name="$Feedback" exact="-13"/>
            <signal_cue cue="End"/>
          </actions>
        </cue>

        <cue name="Designate_Scout" checkinterval="1s">
          <conditions>
            <cue_is_complete cue="Start"/>
          </conditions>
          <actions>
            <set_value name="$OurLocalShips" exact="[]"/>
            <find_ship_by_true_owner name="$OurLocalShips" faction="$Faction" primarypurpose="purpose.fight" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" space="$TargetSector" commandeerable="true" multiple="true"/>
            <do_if value="$OurLocalShips.count lt 1">
              <do_all exact="$LocalClusters.count" counter="$Counter_Clusters">
                <find_ship_by_true_owner name="$OurLocalShips" faction="$Faction" primarypurpose="purpose.fight" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" space="$LocalClusters.{$Counter_Clusters}" commandeerable="true" multiple="true" append="true"/>
              </do_all>
            </do_if>

            <do_if value="@$OurLocalShips.count gt 0">
              <do_all exact="$OurLocalShips.count" counter="$Counter_OurLocalShips">
                <do_if value="$OurLocalShips.{$Counter_OurLocalShips} == @$TargetObject">
                  <continue/>
                </do_if>

                <do_if value="$ClosestShip?">
                  <do_if value="$OurLocalShips.{$Counter_OurLocalShips}.distanceto.{$TargetPosition} lt $ClosestShip.distanceto.{$TargetPosition}">
                    <set_value name="$ClosestShip" exact="$OurLocalShips.{$Counter_OurLocalShips}"/>
                  </do_if>
                </do_if>
                <do_else>
                  <set_value name="$ClosestShip" exact="$OurLocalShips.{$Counter_OurLocalShips}"/>
                </do_else>
              </do_all>
            </do_if>

            <do_if value="$ClosestShip?">
              <commandeer_object object="$ClosestShip"/>
              <add_to_group groupname="$PCS_Ships" object="$ClosestShip"/>
              <signal_cue_instantly cue="Send_Patrol" param="$ClosestShip"/>
            </do_if>
            <do_else>
              <debug_text text="'%1 ending operation in %2, %3. No ships available. END 1'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
              <set_value name="$Feedback" exact="-10"/>
              <signal_cue cue="End"/>
            </do_else>
          </actions>
        </cue>

        <!-- NB: if we want reinforcements to be able to call reinforcements, reset this cue.
                  pros: they should be able to?
                  cons: would make it possible for conflicts to escalate, possibly drawing in all of each faction's ships to that one conflict.
                        could be fun, but potentially dangerous. -->
        <cue name="Reinforce_Position">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="$DebugText + player.age + ': %1 reinforcing %2, %3. Ships committed: %4'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $PCS_Ships.count]" chance="$DebugChance2"/>
            <set_value name="$OurLocalShips" exact="[]"/>
            <do_all exact="$LocalClusters.count" counter="$Counter_Clusters">
              <find_ship_by_true_owner name="$OurLocalShips" faction="$Faction" primarypurpose="purpose.fight" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" space="$LocalClusters.{$Counter_Clusters}" commandeerable="true" multiple="true" append="true"/>
            </do_all>

            <do_if value="$AdjustedForceDifferential?" negate="true">
              <set_value name="$AdjustedForceDifferential" exact="$LocalForceDifferential"/>
            </do_if>

            <do_all exact="$OurLocalShips.count" counter="$Counter_OurLocalShips">
              <do_if value="$AdjustedForceDifferential gt $AcceptableForceDifferential">
                <break/>
              </do_if>
              <do_else>
                <do_if value="$OurLocalShips.{$Counter_OurLocalShips} == @$TargetObject">
                  <continue/>
                </do_if>

                <do_if value="$OurLocalShips.{$Counter_OurLocalShips}.isclass.ship_s">
                  <set_value name="$AdjustedForceDifferential" exact="$AdjustedForceDifferential + 1"/>
                </do_if>
                <do_elseif value="$OurLocalShips.{$Counter_OurLocalShips}.isclass.ship_m">
                  <set_value name="$AdjustedForceDifferential" exact="$AdjustedForceDifferential + 3"/>
                </do_elseif>
                <do_elseif value="$OurLocalShips.{$Counter_OurLocalShips}.isclass.ship_l">
                  <set_value name="$AdjustedForceDifferential" exact="$AdjustedForceDifferential + 11"/>
                </do_elseif>
                <do_else>
                  <set_value name="$AdjustedForceDifferential" exact="$AdjustedForceDifferential + 23"/>
                </do_else>

                <commandeer_object object="$OurLocalShips.{$Counter_OurLocalShips}"/>
                <add_to_group groupname="$PCS_Ships" object="$OurLocalShips.{$Counter_OurLocalShips}"/>
                <set_value name="$ReinforcementsComing" exact="@$ReinforcementsComing + 1"/>
                <signal_cue_instantly cue="Send_Patrol" param="$OurLocalShips.{$Counter_OurLocalShips}"/>
              </do_else>
            </do_all>

            <!-- reinforcements will not be called unless they are deemed necessary. if none are coming, signal retreat.
                  update: if outnumbered by anything less than a destroyer, attack anyway. -->
            <do_if value="not @$PCS_AttackOrders.count and not @$ReinforcementsComing and (($LocalForceDifferential - $AcceptableForceDifferential) lt -7)">
              <debug_text text="$DebugText + player.age + ': %1 has no reinforcements available for %2, %3. Retreat. Force differential: %4'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $AdjustedForceDifferential]" chance="$DebugChance"/>
              <set_value name="$Feedback" exact="-2"/>
              <signal_cue cue="End"/>
            </do_if>
            <do_elseif value="@$ReinforcementsComing" negate="true">
              <set_value name="$Attack"/>
              <do_if value="Act.state" exact="cuestate.waiting">
                <signal_cue cue="Act"/>
              </do_if>
              <debug_text text="$DebugText + player.age + ': %1 has no reinforcements available for %2, %3. Attacking anyway. Force differential: %4'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $AdjustedForceDifferential]" chance="$DebugChance2"/>
            </do_elseif>
            <do_else>
              <debug_text text="$DebugText + player.age + ': %1 reinforcement of %2, %3 done. Ships committed: %4. Projected force differential: %5'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $PCS_Ships.count, $AdjustedForceDifferential]" chance="$DebugChance2"/>
            </do_else>
          </actions>
        </cue>

        <!-- NB: needs to be called with a parameter. event.param = ship to be sent -->
        <cue name="Send_Patrol" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="this.$Ship" exact="event.param"/>
            <debug_text text="$DebugText + player.age + ': %1 sending %2 to investigate report regarding %3, %4'.[$Faction, this.$Ship.knownname, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>

            <!-- back-up position in case $TargetObject gets destroyed or has already been destroyed. -->
            <create_order id="'ProtectPosition'" name="$PCS_Patrol" object="this.$Ship" immediate="true">
              <param name="destination" value="[$TargetSector, $TargetPosition]"/>
            </create_order>
            <append_to_list name="$PCS_Orders" exact="$PCS_Patrol"/>
            <append_to_list name="$PCS_PatrolOrders" exact="$PCS_Patrol"/>
            <!-- update: if TargetObject exists, protect it.
                          ProtectPosition is retained, but queued under ProtectShip/Station in case TargetObject is destroyed before we can switch to attack. -->
            <do_if value="@$TargetObject.exists">
              <do_if value="$TargetObject.isclass.station">
                <debug_text text="$DebugText + '%1 investigating %2, %3. Protecting station: %4 (%5) Is it operational? %6'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $TargetObject.knownname, $TargetObject, $TargetObject.isoperational]" chance="$DebugChance"/>
                <create_order id="'ProtectStation'" name="$PCS_Patrol" object="this.$Ship" immediate="true">
                  <param name="station" value="$TargetObject"/>
                </create_order>
              </do_if>
              <do_elseif value="$TargetObject.isclass.ship">
                <debug_text text="$DebugText + '%1 investigating %2, %3. Protecting ship: %4 (%5) Is it operational? %6'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $TargetObject.knownname, $TargetObject, $TargetObject.isoperational]" chance="$DebugChance"/>
                <create_order id="'ProtectShip'" name="$PCS_Patrol" object="this.$Ship" immediate="true">
                  <param name="target" value="$TargetObject"/>
                </create_order>
              </do_elseif>
              <do_else>
                <debug_text text="$DebugText + '%1 investigating %2, %3. TargetObject is neither a ship nor a station: %4 (%5) isclass: %6 Is it operational? %7'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $TargetObject.knownname, $TargetObject, $TargetObject.class, $TargetObject.isoperational]" chance="$DebugChance"/>
              </do_else>
              <append_to_list name="$PCS_Orders" exact="$PCS_Patrol"/>
              <append_to_list name="$PCS_PatrolOrders" exact="$PCS_Patrol"/>
            </do_if>

            <debug_text text="$DebugText + 'Orders given to %1. Orders so far: '.[this.$Ship.knownname]" chance="$DebugChance2"/>
            <do_all exact="$PCS_Orders.count" counter="$Counter_Orders" chance="$DebugChance2">
              <debug_text text="@$PCS_Orders.{$Counter_Orders}.id"/>
            </do_all>
          </actions>
          <cues>
            <cue name="Patrol_Disrupted">
              <conditions>
                <check_any>
                  <event_object_destroyed object="Send_Patrol.$Ship"/>
                  <event_object_abandoned object="Send_Patrol.$Ship"/>
                  <!-- remember that this event is fired AFTER ownership is changed. so ownership checks apply to the new owner. -->
                  <event_object_changed_true_owner object="Send_Patrol.$Ship"/>
                  <!-- this will break if a ship is subordinate to
                        a ship belonging to a different faction,
                          and that ship uncovers. -->
                </check_any>
              </conditions>
              <actions>
                <!-- NB: Logically, a sent patrol that is disrupted would lead to that area being locked down by more patrols being sent to reinforce.
                        BUT we want to avoid escalating indefinitely. So hm.
                        Then again, it's not entirely implausible that an investigating ship is destroyed before sending out for help.
                        Also, gamewise, a way to prevent an escalation can be a good thing. Rationalizing. -->
                <debug_text text="$DebugText + player.age + ': Patrol sent by %1 was disrupted via %2 while en route to %3, %4.'.[$Faction, event.name, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance2"/>
                <cancel_cue cue="parent"/>
              </actions>
            </cue>
            <cue name="Patrol_Arrived">
              <conditions>
                <event_object_arrived_at_waypoint object="Send_Patrol.$Ship" />
              </conditions>
              <actions>
                <debug_text text="player.age + ': %1 (%2) of %3 has arrived at %4, %5.'.[Send_Patrol.$Ship.knownname, Send_Patrol.$Ship, $Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance2"/>
                <add_to_group groupname="$ArrivedShips" object="event.object"/>

                <do_if value="@$ReinforcementsComing">
                  <set_value name="$ReinforcementsComing" exact="$ReinforcementsComing - 1"/>
                </do_if>
                <do_if value="event.object.subordinates.count gt 0">
                  <set_value name="$Subordinates" exact="event.object.subordinates"/>
                  <set_value name="$SubIndex" exact="1"/>
                  <do_while value="$SubIndex le $Subordinates.count">
                    <set_value name="$SubSubordinates" exact="$Subordinates.{$SubIndex}.subordinates"/>
                    <do_all exact="$SubSubordinates.count" counter="$SubSubordinateIndex">
                      <append_to_list name="$Subordinates" exact="$SubSubordinates.{$SubSubordinateIndex}"/>
                    </do_all>
                    <set_value name="$SubIndex" operation="add"/>
                  </do_while>

                  <do_all exact="$Subordinates.count" counter="$Counter_Subordinates">
                    <add_to_group groupname="$ArrivedShips" object="$Subordinates.{$Counter_Subordinates}"/>
                  </do_all>
                </do_if>
                <!--<do_all exact="$ArrivedShips.count" counter="$Counter_ArrivedShips">
                  <do_if value="$ArrivedShips.{$Counter_ArrivedShips}.subordinates.count gt 0">
                    <set_value name="$Subordinates" exact="$ArrivedShips.{$Counter_ArrivedShips}.subordinates"/>
                    <set_value name="$SubIndex" exact="1"/>
                    <do_while value="$SubIndex le $Subordinates.count">
                      <set_value name="$SubSubordinates" exact="$Subordinates.{$SubIndex}.subordinates"/>
                      <do_all exact="$SubSubordinates.count" counter="$SubSubordinateIndex">
                        <append_to_list name="$Subordinates" exact="$SubSubordinates.{$SubSubordinateIndex}"/>
                      </do_all>
                      <set_value name="$SubIndex" operation="add"/>
                    </do_while>

                    <do_all exact="$Subordinates.count" counter="$Counter_Subordinates">
                      <add_to_group groupname="$ArrivedShips" object="$Subordinates.{$Counter_Subordinates}"/>
                    </do_all>
                  </do_if>
                </do_all>-->

                <do_if value="(player.age ge @$NextUpdate) or ($PCS_Ships.count le $ArrivedShips.count)">
                  <signal_cue cue="Analyze_Threat"/>
                </do_if>
                <cancel_cue cue="Patrol_Disrupted"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="Analyze_Threat">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$NextUpdate" exact="player.age + 10s"/>

            <!-- reset both lists -->
            <set_value name="$OurLocalStrength" exact="0"/>
            <set_value name="$TheirLocalStrength" exact="0"/>
            <!--<set_value name="$TaskGroupShips" exact="[]"/>-->
            <!--<set_value name="$TheirLocalShips" exact="[]"/>-->

            <!-- populate both lists -->
            <find_ship groupname="$TheirLocalShips" space="$TargetSector" primarypurpose="purpose.fight" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" multiple="true">
              <match_relation_of faction="$Faction" relation="enemy" comparison="le"/>
              <!--<match_distance object="event.object" space="$TargetSector" max="50km"/>-->
              <match_distance value="$TargetPosition" space="$TargetSector" max="50km"/>
            </find_ship>

            <!--<do_all exact="$ArrivedShips.count" counter="$Counter_ArrivedShips">
              <do_if value="$ArrivedShips.{$Counter_ArrivedShips}.subordinates.count gt 0">
                <set_value name="$Subordinates" exact="$ArrivedShips.{$Counter_ArrivedShips}.subordinates"/>
                <set_value name="$SubIndex" exact="1"/>
                <do_while value="$SubIndex le $Subordinates.count">
                  <set_value name="$SubSubordinates" exact="$Subordinates.{$SubIndex}.subordinates"/>
                  <do_all exact="$SubSubordinates.count" counter="$SubSubordinateIndex">
                    <append_to_list name="$Subordinates" exact="$SubSubordinates.{$SubSubordinateIndex}"/>
                  </do_all>
                  <set_value name="$SubIndex" operation="add"/>
                </do_while>

                <do_all exact="$Subordinates.count" counter="$Counter_Subordinates">
                  <add_to_group groupname="$ArrivedShips" object="$Subordinates.{$Counter_Subordinates}"/>
                </do_all>
              </do_if>
            </do_all>-->

            <do_all exact="$ArrivedShips.count" counter="$Counter_ArrivedShips">
              <debug_text text="$DebugText + 'Task Group Ship %1 is %2'.[$Counter_ArrivedShips, $ArrivedShips.{$Counter_ArrivedShips}.knownname]" chance="0"/>
              <do_if value="$ArrivedShips.{$Counter_ArrivedShips}.isclass.ship_s">
                <set_value name="$OurLocalStrength" exact="@$OurLocalStrength + 1"/>
              </do_if>
              <do_elseif value="$ArrivedShips.{$Counter_ArrivedShips}.isclass.ship_m">
                <set_value name="$OurLocalStrength" exact="@$OurLocalStrength + 3"/>
              </do_elseif>
              <do_elseif value="$ArrivedShips.{$Counter_ArrivedShips}.isclass.ship_l">
                <set_value name="$OurLocalStrength" exact="@$OurLocalStrength + 11"/>
              </do_elseif>
              <do_else>
                <set_value name="$OurLocalStrength" exact="@$OurLocalStrength + 23"/>
              </do_else>
            </do_all>
            <do_all exact="$TheirLocalShips.count" counter="$Counter_TheirLocalShips">
              <do_if value="$TheirLocalShips.{$Counter_TheirLocalShips}.isclass.ship_s">
                <set_value name="$TheirLocalStrength" exact="@$TheirLocalStrength + 1"/>
              </do_if>
              <do_elseif value="$TheirLocalShips.{$Counter_TheirLocalShips}.isclass.ship_m">
                <set_value name="$TheirLocalStrength" exact="@$TheirLocalStrength + 3"/>
              </do_elseif>
              <do_elseif value="$TheirLocalShips.{$Counter_TheirLocalShips}.isclass.ship_l">
                <set_value name="$TheirLocalStrength" exact="@$TheirLocalStrength + 11"/>
              </do_elseif>
              <do_else>
                <set_value name="$TheirLocalStrength" exact="@$TheirLocalStrength + 23"/>
              </do_else>
            </do_all>

            <!-- compare -->
            <!-- NB: $TheirLocalStrength might be zero if there are no hostile ships in the area, but $OurLocalStrength should always be some positive number before you get here. -->
            <set_value name="$LocalForceDifferential" exact="$OurLocalStrength - @$TheirLocalStrength"/>

            <debug_text text="$DebugText + player.age + ': %1 analyzed situation at %2, %3. %4 ship(s) in position. Force Differential: %5'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $ArrivedShips.count, $LocalForceDifferential]" chance="$DebugChance2"/>

            <signal_cue cue="Act"/>

            <reset_cue cue="this"/>
          </actions>
        </cue>

        <cue name="Act">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!-- if the faction thinks they can win, attack,
                  if they don't think they can win, hold position and call for reinforcements,
                  if there aren't any hostiles in the immediate area, patrol for a while, then leave.

                  update: there was a problem where, if ships had already attacked, and things get worse but not quite bad enough to make them want to retreat, they will not update targets.
                    problem arises when their old list of targets has been exhausted.

                    this restructuring fixes it without dumbing it down, but the conditions are a lot harder to read than they were. -->
            <do_if value="$TheirLocalShips.count gt 0">
              <do_if value="$ReinforcementsComing?" chance="$DebugChance">
                <debug_text text="'Reinforcements Coming: ' + $ReinforcementsComing"/>
              </do_if>
              <!-- if we can, call for reinforcements -->
              <do_if value="not $Attack? and ($LocalForceDifferential lt $AcceptableForceDifferential) and (Reinforce_Position.state == cuestate.waiting)">
                <debug_text text="$DebugText + player.age + ': %1 investigating %2, %3. %4 ship(s) encountered %5 hostiles. Calling for reinforcements. ForceDifferential: %6'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $ArrivedShips.count, $TheirLocalShips.count, $LocalForceDifferential]" chance="$DebugChance2"/>
                <signal_cue cue="Reinforce_Position"/>
              </do_if>
              <!-- if we cannot call for reinforcements,
                    run away if:
                      hostile force is unacceptably more powerful than we are AND:
                        we are less aggressive than normal
                        OR
                        we have not yet attacked AND no more reinforcements are expected. 

                        update: removing check to see if Task Group has not yet attacked to allow later decision to retreat if situation gets much worse.
                          problem: $AdjustedForceDifferential does not take subordinates into account, so if several groups of ships are called to reinforce, and the first group has a number of ships ge all of the groups, condition will come out true.
                            deal with this if the faction patrols act unbearably stupid.

                    NB: bias is towards retreat. If Faction Aggression is less than normal, and they cannot reinforce, they will always decide to retreat. -->
              <!-- at the moment, the check for reinforcements arriving is a fast approximation that fails when:
                                    the first of several group of reinforcements that arrives has ships equal to the total number of reinforcement groups sent.
                                    if the resulting number is still below retreat threshold, they decide to retreat although they might still have substantial reinforcements pending.
                                    (it basically only reliably checks to see if any reinforcements are coming, when none have yet arrived.)

                                  it is done that way at the moment because it's faster, and we want this to be quickly decisive one way or the other to keep ships either:
                                    doing something useful,
                                    or available to do something useful.

                                should really be handled better though. think of a way to do this better without compromising the above advantages too much.        DONE -->
              <do_elseif value="not $Attack?
                                  and not @$ReinforcementsComing
                                  and ((($AcceptableForceDifferential gt -1)
                                      and ($LocalForceDifferential lt $AcceptableForceDifferential))
                                    or (($LocalForceDifferential - $AcceptableForceDifferential) lt -17))">
                <!--<do_elseif value="not $Attack?
                                  and ($LocalForceDifferential ge @$AdjustedForceDifferential)
                                  and ((($AcceptableForceDifferential gt -1)
                                      and ($LocalForceDifferential lt $AcceptableForceDifferential))
                                    or (($LocalForceDifferential - $AcceptableForceDifferential) lt -17))">-->
                <!--<do_elseif value="($AcceptableForceDifferential gt -1) or (not @$PCS_AttackOrders.count and ($LocalForceDifferential ge $AdjustedForceDifferential) and (($LocalForceDifferential - $AcceptableForceDifferential) ge -7))">-->
                <!-- run away! run away! -->
                <set_value name="$Feedback" exact="-2"/>
                <signal_cue cue="End"/>
              </do_elseif>
              <do_else>
                <!--<do_if value="($LocalForceDifferential ge $AcceptableForceDifferential) or $Attack?">-->
                <do_all exact="$TheirLocalShips.count" counter="$Counter_TheirLocalShips" reverse="true">
                  <!--<do_if value="$TheirLocalShips.{$Counter_TheirLocalShips}.distanceto.{$TargetPosition} gt 100km">
                    <remove_from_group group="$TheirLocalShips" object="$TheirLocalShips.{$Counter_TheirLocalShips}"/>
                  </do_if>-->
                  <do_if value="$ClosestTarget?">
                    <do_if value="$TheirLocalShips.{$Counter_TheirLocalShips}.distanceto.{$TargetPosition} lt @$ClosestTarget.distanceto.{$TargetPosition}">
                      <set_value name="$ClosestTarget" exact="$TheirLocalShips.{$Counter_TheirLocalShips}"/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <set_value name="$ClosestTarget" exact="$TheirLocalShips.{$Counter_TheirLocalShips}"/>
                  </do_else>
                </do_all>

                <!-- reset any outstanding attack orders before giving new ones.
                        Ugly. If they're currently chasing a ship other than what was $ClosestTarget, this will cause them to break off and go after the new $ClosestTarget, and will do this whenever a target is gone.
                        
                        Solution: check to see if any secondary orders are NOT ready, meaning they either started, or have finished, or have been somehow disabled.
                          if any orders from the list meet this criterion,
                            OR if there are no attack orders yet,
                              reset and give immediate orders.
                          Otherwise, update the secondary orders so that primary orders that are already running are not interrupted. -->
                <do_all exact="@$PCS_SecondaryAttackOrders.count + 1" counter="$Counter_AttackOrders">
                  <!--<do_if value="(@$PCS_AttackOrders.count lt 1) or (@$PCS_AttackOrders.{$Counter_AttackOrders}.exists and (@$PCS_AttackOrders.{$Counter_AttackOrders}.state != orderstate.started) and (@$PCS_AttackOrders.{$Counter_AttackOrders}.state != orderstate.ready))">-->
                  <!-- NB: remember that null is a valid state.
                            even if ships from the prior list of secondarytargets is still alive, 
                              it could arise when none of the targets in the target list are valid for whatever reason as defined in their respective fight scripts.
                            reset should filter for that too. -->
                  <do_if value="($Counter_AttackOrders gt @$PCS_SecondaryAttackOrders.count) or (@$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}.state != orderstate.ready)">
                    <do_if value="@$PCS_SecondaryAttackOrders.count gt 0" chance="$DebugChance2">
                      <debug_text text="'State of %1 (%2) is: %3'.[@$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}.id, @$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}, @$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}.state]"/>
                    </do_if>
                    <set_value name="$Reset_AttackOrders"/>
                    <break/>
                  </do_if>
                  <!--<do_elseif value="@$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}.state != orderstate.ready">-->
                  <!--<do_if value="($Counter_AttackOrders gt @$PCS_AttackOrders.count) or @$PCS_AttackOrders.{$Counter_AttackOrders}.state != orderstate.started">-->
                  <!--<do_if value="@$PCS_SecondaryAttackOrders.count gt 0" chance="$DebugChance">
                      <debug_text text="'State of %1 (%2) is: %3'.[@$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}.id, $PCS_SecondaryAttackOrders.{$Counter_AttackOrders}, @$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}.state]"/>
                    </do_if>
                    <set_value name="$Reset_AttackOrders"/>-->
                  <!--<set_value name="$Update_AttackOrders"/>-->
                  <!--<break/>
                  </do_elseif>-->
                </do_all>

                <!-- to do: review if below is necessary. all cases where below might be needed should be taken into account in the attack scripts.
                        still needed. one case, should be rare, where this script could fail is if a ship is still in $TheirLocalShips but is no longer within anyone's pursuedistance.
                        below should then become active ONLY IN THAT CASE.

                        in most cases, $TheirLocalShips or $PCS_Ships should all get wiped out before this situation could arise.

                        Addendum: this will also arise if prior attack orders finish because everything in the secondarytargets list are not valid after target is done.
                          happens more often than anticipated. to do: try to think of a better way to deal with this. -->
                <do_if value="@$Reset_AttackOrders">
                  <do_all exact="@$PCS_PatrolOrders.count" counter="$Counter_PatrolOrders" reverse="true">
                    <cancel_order order="$PCS_PatrolOrders.{$Counter_PatrolOrders}"/>
                  </do_all>
                  <do_all exact="@$PCS_AttackOrders.count" counter="$Counter_AttackOrders" reverse="true">
                    <cancel_order order="$PCS_AttackOrders.{$Counter_AttackOrders}"/>
                  </do_all>
                  <set_value name="$PCS_AttackOrders" exact="[]"/>
                  <set_value name="$PCS_SecondaryAttackOrders" exact="[]"/>

                  <!-- to do: check again to make sure that they are handling secondarytargets as you expect them to. -->
                  <do_all exact="$PCS_Ships.count" counter="$Counter_Ships">
                    <create_order id="'Attack'" name="$PCS_SecondaryAttack" object="$PCS_Ships.{$Counter_Ships}">
                      <!--<create_order id="'Attack'" name="$PCS_SecondaryAttack" object="$PCS_Ships.{$Counter_Ships}" immediate="true">-->
                      <param name="primarytarget" value="$ClosestTarget"/>
                      <param name="secondarytargets" value="$TheirLocalShips"/>
                      <param name="pursuetargets" value="true"/>
                    </create_order>
                    <create_order id="'Attack'" name="$PCS_Attack" object="$PCS_Ships.{$Counter_Ships}" immediate="true">
                      <param name="primarytarget" value="$ClosestTarget"/>
                      <param name="secondarytargets" value="$TheirLocalShips"/>
                      <!--<param name="secondarytargets" value="$TheirLocalShips.list"/>-->
                      <param name="pursuedistance" value="100km"/>
                      <!--<param name="pursuetargets" value="true"/>-->
                    </create_order>
                    <debug_text text="$DebugText + '%1 (%2) set to attack %3 and %4.'.[$PCS_Ships.{$Counter_Ships}.knownname, $PCS_Ships.{$Counter_Ships}, $PCS_Attack.$primarytarget.knownname, $PCS_Attack.$secondarytargets]" chance="$DebugChance2"/>
                    <append_to_list name="$PCS_Orders" exact="$PCS_Attack"/>
                    <append_to_list name="$PCS_AttackOrders" exact="$PCS_Attack"/>

                    <append_to_list name="$PCS_Orders" exact="$PCS_SecondaryAttack"/>
                    <append_to_list name="$PCS_AttackOrders" exact="$PCS_SecondaryAttack"/>
                    <append_to_list name="$PCS_SecondaryAttackOrders" exact="$PCS_SecondaryAttack"/>
                  </do_all>
                  <debug_text text="$DebugText + player.age + ': %1 investigating %2, %3. %4 ship(s) attacking %5 hostiles. ForceDifferential: %6'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $ArrivedShips.count, $TheirLocalShips.count, $LocalForceDifferential]" chance="$DebugChance2"/>
                </do_if>
                <do_else>
                  <do_all exact="@$PCS_SecondaryAttackOrders.count" counter="$Counter_AttackOrders" reverse="true">
                    <do_if value="@$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}.state" exact="orderstate.started" negate="true">
                      <cancel_order order="$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}"/>
                    </do_if>
                  </do_all>
                  <set_value name="$PCS_SecondaryAttackOrders" exact="[]"/>

                  <do_all exact="$PCS_Ships.count" counter="$Counter_Ships">
                    <create_order id="'Attack'" name="$PCS_SecondaryAttack" object="$PCS_Ships.{$Counter_Ships}">
                      <param name="primarytarget" value="$ClosestTarget"/>
                      <param name="secondarytargets" value="$TheirLocalShips.list"/>
                      <param name="pursuetargets" value="true"/>
                    </create_order>
                    <append_to_list name="$PCS_Orders" exact="$PCS_SecondaryAttack"/>
                    <append_to_list name="$PCS_AttackOrders" exact="$PCS_SecondaryAttack"/>
                    <append_to_list name="$PCS_SecondaryAttackOrders" exact="$PCS_SecondaryAttack"/>
                    <debug_text text="$DebugText + '%1 investigating %2, %3. %4 (%5) given secondary attack order.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $PCS_Ships.{$Counter_Ships}.knownname, $PCS_Ships.{$Counter_Ships}]" chance="$DebugChance2"/>
                  </do_all>
                  <set_value name="$Update_AttackOrders" exact="0"/>
                </do_else>
                <remove_value name="$Attack"/>
              </do_else>

              <!--<do_if value="($LocalForceDifferential ge $AcceptableForceDifferential) or $Attack?">
                <do_all exact="$TheirLocalShips.count" counter="$Counter_TheirLocalShips" reverse="true">
                  <do_if value="$ClosestTarget?">
                    <do_if value="$TheirLocalShips.{$Counter_TheirLocalShips}.distanceto.{$TargetPosition} lt @$ClosestTarget.distanceto.{$TargetPosition}">
                      <set_value name="$ClosestTarget" exact="$TheirLocalShips.{$Counter_TheirLocalShips}"/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <set_value name="$ClosestTarget" exact="$TheirLocalShips.{$Counter_TheirLocalShips}"/>
                  </do_else>
                </do_all>

                <do_all exact="@$PCS_SecondaryAttackOrders.count" counter="$Counter_AttackOrders">
                  <do_if value="@$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}.state == orderstate.ready">
                    <do_if value="@$PCS_SecondaryAttackOrders.count gt 0">
                      <debug_text text="'State of %1 (%2) is: %3'.[@$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}.id, $PCS_SecondaryAttackOrders.{$Counter_AttackOrders}, @$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}.state]" chance="$DebugChance"/>
                    </do_if>
                    <set_value name="$Update_AttackOrders"/>
                    <break/>
                  </do_if>
                </do_all>

                <do_if value="@$Update_AttackOrders">
                  <do_all exact="@$PCS_SecondaryAttackOrders.count" counter="$Counter_AttackOrders" reverse="true">
                    <do_if value="@$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}.state" exact="orderstate.started" negate="true">
                      <cancel_order order="$PCS_SecondaryAttackOrders.{$Counter_AttackOrders}"/>
                    </do_if>
                  </do_all>
                  <set_value name="$PCS_SecondaryAttackOrders" exact="[]"/>

                  <do_all exact="$PCS_Ships.count" counter="$Counter_Ships">
                    <create_order id="'Attack'" name="$PCS_SecondaryAttack" object="$PCS_Ships.{$Counter_Ships}">
                      <param name="primarytarget" value="$ClosestTarget"/>
                      <param name="secondarytargets" value="$TheirLocalShips"/>
                      <param name="pursuetargets" value="true"/>
                    </create_order>
                    <append_to_list name="$PCS_Orders" exact="$PCS_SecondaryAttack"/>
                    <append_to_list name="$PCS_AttackOrders" exact="$PCS_SecondaryAttack"/>
                    <append_to_list name="$PCS_SecondaryAttackOrders" exact="$PCS_SecondaryAttack"/>
                    <debug_text text="'%1 investigating %2, %3. %4 (%5) given secondary attack order.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $PCS_Ships.{$Counter_Ships}.knownname, $PCS_Ships.{$Counter_Ships}]" chance="$DebugChance"/>
                  </do_all>
                  <set_value name="$Update_AttackOrders" exact="0"/>
                </do_if>
                <do_else>
                  <do_all exact="@$PCS_PatrolOrders.count" counter="$Counter_PatrolOrders" reverse="true">
                    <cancel_order order="$PCS_PatrolOrders.{$Counter_PatrolOrders}"/>
                  </do_all>
                  <do_all exact="@$PCS_AttackOrders.count" counter="$Counter_AttackOrders" reverse="true">
                    <cancel_order order="$PCS_AttackOrders.{$Counter_AttackOrders}"/>
                  </do_all>
                  <set_value name="$PCS_AttackOrders" exact="[]"/>
                  <set_value name="$PCS_SecondaryAttackOrders" exact="[]"/>

                  <do_all exact="$PCS_Ships.count" counter="$Counter_Ships">
                    <create_order id="'Attack'" name="$PCS_SecondaryAttack" object="$PCS_Ships.{$Counter_Ships}">
                      <param name="primarytarget" value="$ClosestTarget"/>
                      <param name="secondarytargets" value="$TheirLocalShips"/>
                      <param name="pursuetargets" value="true"/>
                    </create_order>
                    <create_order id="'Attack'" name="$PCS_Attack" object="$PCS_Ships.{$Counter_Ships}" immediate="true">
                      <param name="primarytarget" value="$ClosestTarget"/>
                      <param name="secondarytargets" value="$TheirLocalShips"/>
                      <param name="pursuedistance" value="100km"/>
                    </create_order>
                    <append_to_list name="$PCS_Orders" exact="$PCS_Attack"/>
                    <append_to_list name="$PCS_AttackOrders" exact="$PCS_Attack"/>

                    <append_to_list name="$PCS_Orders" exact="$PCS_SecondaryAttack"/>
                    <append_to_list name="$PCS_AttackOrders" exact="$PCS_SecondaryAttack"/>
                    <append_to_list name="$PCS_SecondaryAttackOrders" exact="$PCS_SecondaryAttack"/>
                  </do_all>
                  <debug_text text="player.age + ': %1 investigating %2, %3. %4 ship(s) attacking %5 hostiles. ForceDifferential: %6'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $ArrivedShips.count, $TheirLocalShips.count, $LocalForceDifferential]" chance="$DebugChance"/>
                </do_else>
                <remove_value name="$Attack"/>
              </do_if>
              <do_elseif value="$LocalForceDifferential lt $AcceptableForceDifferential">
                <do_if value="Reinforce_Position.state" exact="cuestate.waiting">
                  <debug_text text="player.age + ': %1 investigating %2, %3. %4 ship(s) encountered %5 hostiles. Calling for reinforcements. ForceDifferential: %6'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $ArrivedShips.count, $TheirLocalShips.count, $LocalForceDifferential]" chance="$DebugChance"/>
                  <signal_cue cue="Reinforce_Position"/>
                </do_if>
                <do_elseif value="($AcceptableForceDifferential gt -1) or (($LocalForceDifferential ge $AdjustedForceDifferential) and (($LocalForceDifferential - $AcceptableForceDifferential) lt -17))">
                  <set_value name="$Feedback" exact="-2"/>
                  <signal_cue cue="End"/>
                </do_elseif>
                <do_else>
                  <set_value name="$Attack"/>
                </do_else>
              </do_elseif>-->
              <reset_cue cue="this"/>
            </do_if>
            <do_else>
              <!-- leave -->
              <debug_text text="$DebugText + '%1 ending operation in %2, %3. No hostile ships found. END 2'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
              <set_value name="$Feedback" exact="1"/>
              <signal_cue cue="End"/>
            </do_else>
          </actions>
        </cue>

        <!-- to do: for testing only. remove before committing. -->
        <!--<cue name="SecondaryAttackOrder_Given" checkinterval="10s">
          <conditions>
            <check_value value="@$PCS_SecondaryAttackOrders.count"/>
          </conditions>
          <actions>
            <debug_text text="player.age + ': %1 supporting %2, %3. Secondary attack orders given.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="100"/>
          </actions>
          <cues>
            <cue name="SecondaryAttackOrder_Active">
              <conditions>
                <event_object_order_ready group="$PCS_Ships"/>
                <check_value value="$PCS_SecondaryAttackOrders.indexof.{event.param}"/>
              </conditions>
              <actions>
                <debug_text text="player.age + ': %1 supporting %2, %3. %4 (%5) has activated secondary orders.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, event.object.knownname, event.object]" chance="100"/>
                <reset_cue cue="this"/>
              </actions>
            </cue>
          </cues>
        </cue>-->

        <cue name="BadGuy_Gone" instantiate="true">
          <conditions>
            <check_any>
              <event_object_destroyed group="$TheirLocalShips"/>
              <event_object_abandoned group="$TheirLocalShips"/>
              <event_object_changed_owner group="$TheirLocalShips"/>
              <check_all>
                <event_object_changed_sector group="$TheirLocalShips"/>
                <check_value value="event.param2" exact="$TargetSector"/>
              </check_all>
            </check_any>
          </conditions>
          <actions>
            <debug_text text="$DebugText + player.age + ': %1 supporting %2. Bad guy destroyed.'.[$Faction, $TargetSector.knownname]" chance="$DebugChance"/>
            <remove_from_group group="$TheirLocalShips" object="event.object"/>
            <do_if value="$TheirLocalShips.count lt 1">
              <do_if value="Analyze_Threat.state" exact="cuestate.waiting">
                <debug_text text="$DebugText + '%1 ending operation in %2, %3. Threat has been removed. Taking one last look to make sure that they are gone.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
                <signal_cue cue="Analyze_Threat"/>
              </do_if>
              <do_else>
                <debug_text text="$DebugText + '%1 ending operation in %2, %3. Threat has been removed. END 3'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
                <set_value name="$Feedback" exact="1"/>
                <signal_cue cue="End"/>
              </do_else>
            </do_if>
            <do_elseif value="player.age ge @$NextUpdate">
              <debug_text text="$DebugText + player.age + ': %1 supporting %2. Updating.'.[$Faction, $TargetSector.knownname]" chance="$DebugChance"/>
              <signal_cue cue="Analyze_Threat"/>
            </do_elseif>
          </actions>
        </cue>

        <cue name="Patrol_Gone" instantiate="true">
          <conditions>
            <check_any>
              <event_object_destroyed group="$PCS_Ships"/>
              <event_object_abandoned group="$PCS_Ships"/>
              <event_object_changed_owner group="$PCS_Ships"/>
            </check_any>
          </conditions>
          <actions>
            <debug_text text="$DebugText + player.age + ': %1 supporting %2. Good guy destroyed.'.[$Faction, $TargetSector.knownname]" chance="$DebugChance"/>
            <release_commandeered_object object="event.object"/>
            <remove_from_group group="$PCS_Ships" object="event.object"/>
            <do_if value="$PCS_Ships.count lt 1">
              <debug_text text="$DebugText + '%1 ending operation in %2, %3. Task group was wiped out. END 4'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
              <set_value name="$Feedback" exact="-1"/>
              <signal_cue cue="End"/>
            </do_if>
            <do_elseif value="player.age ge @$NextUpdate">
              <signal_cue cue="Analyze_Threat"/>
            </do_elseif>
          </actions>
        </cue>

        <!-- if the sector was hostile to begin with, the sector changing hands doesn't matter.
              if the sector was neutral or better, and it stays neutral or better, then it doesn't matter.
              if the sector was neutral, and it becomes hostile, then break off.

              the faction owning the space to begin with is taken into account in prioritization. -->
        <cue name="Sector_Gone">
          <conditions>
            <event_object_changed_true_owner object="$TargetSector"/>
            <!--<check_value value="event.param" exact="$Faction" negate="true"/>-->
            <check_value value="event.param.relationto.{$Faction} lt 0"/>
            <check_value value="event.param2.relationto.{$Faction} ge 0"/>
          </conditions>
          <actions>
            <debug_text text="$DebugText + '%1 ending operation in %2, %3. Sector is no longer owned by %1. New owner: %4 END 5'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, event.param]" chance="$DebugChance"/>
            <set_value name="$Feedback" exact="-3"/>
            <signal_cue cue="End"/>
          </actions>
        </cue>

        <cue name="End">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="$DebugText + '%1 support of %2, %3 ended. %4 ship(s) resuming former orders.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $PCS_Ships.count]" chance="$DebugChance"/>
            <do_all exact="$PCS_Orders.count" counter="$Counter_Orders" reverse="true">
              <cancel_order order="$PCS_Orders.{$Counter_Orders}"/>
            </do_all>
            <do_all exact="$PCS_Ships.count" counter="$Counter_Ships" reverse="true">
              <!--<do_all exact="$PCS_Ships.{$Counter_Ships}.orders.count" counter="$Counter_Orders" reverse="true">
                <do_if value="$PCS_Ships.{$Counter_Ships}.orders.{$Counter_Orders}.name" exact="'PCS_Attack'">
                  <debug_text text="'%1 removing %2'.[$PCS_Ships.{$Counter_Ships}.knownname, $PCS_Ships.{$Counter_Ships}.orders.PCS_Attack]" chance="100"/>
                  <cancel_order order="$PCS_Ships.{$Counter_Ships}.orders.{$Counter_Orders}"/>
                </do_if>
                <do_elseif value="$PCS_Ships.{$Counter_Ships}.orders.{$Counter_Orders}.name" exact="'PCS_Patrol'">
                  <debug_text text="'%1 removing %2'.[$PCS_Ships.{$Counter_Ships}.knownname, $PCS_Ships.{$Counter_Ships}.orders.PCS_Patrol]" chance="100"/>
                  <cancel_order order="$PCS_Ships.{$Counter_Ships}.orders.{$Counter_Orders}"/>
                </do_elseif>
              </do_all>-->
              <release_commandeered_object object="$PCS_Ships.{$Counter_Ships}"/>
              <debug_text text="$DebugText + '%1 released from task group.'.[$PCS_Ships.{$Counter_Ships}.knownname]" chance="$DebugChance2"/>
              <remove_from_group group="$PCS_Ships" object="$PCS_Ships.{$Counter_Ships}"/>
              <debug_text text="$DebugText + 'Group now has %1 ships'.[$PCS_Ships.count]" chance="$DebugChance2"/>
            </do_all>

            <!-- NB: we cannot do this at Start because the ReportID could still change if there are any other instances of this script for the same faction running and that ends before this does. -->
            <do_all exact="$FactionCue.$DistressCalls.count" counter="$Counter_DistressCalls">
              <do_if value="$Counter_DistressCalls gt 1">
                <do_if value="$FactionCue.$DistressCalls.{$Counter_DistressCalls}.{3}.{1}" exact="$TargetSector">
                  <set_value name="$ReportID" exact="$Counter_DistressCalls"/>
                  <break/>
                </do_if>
              </do_if>
            </do_all>
            <do_if value="$Feedback" exact="1">
              <debug_text text="$DebugText + player.age + ': %1 operation to support %2, %3 successful. No hostiles in immediate area.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
              <!-- if successful, discard the report. -->
              <remove_value name="$FactionCue.$DistressCalls.{$ReportID}"/>
            </do_if>
            <do_elseif value="$Feedback" max="-1">
              <!-- if failed or aborted, reset the report for re-evaluation. exceptions apply. -->
              <set_value name="$FactionCue.$DistressCalls.{$ReportID}.{5}.{2}" exact="0"/>
              <do_if value="$Feedback" min="-9">
                <!-- if the operation was begun but had failed, so ships were sent to investigate at some point, update the time of the report.
                        if they got any actual information on hostile presence in the area, update that information as well. -->
                <set_value name="$FactionCue.$DistressCalls.{$ReportID}.{4}" exact="player.age"/>
                <do_if value="@$LocalForceDifferential">
                  <set_value name="$FactionCue.$DistressCalls.{$ReportID}.{2}" exact="$LocalForceDifferential"/>
                </do_if>
                <do_if value="$Feedback" min="-2">
                  <!-- if failed due to all ships being destroyed or opposition being too strong, prioritize the report.
                        update: only prioritize if $Faction owns $TargetSector.
                          otherwise, discard? -->
                  <do_if value="$TargetSector.owner" exact="$Faction">
                    <set_value name="$FactionCue.$DistressCalls.{$ReportID}.{5}.{1}" exact="1"/>
                  </do_if>
                  <do_else>
                    <remove_value name="$FactionCue.$DistressCalls.{$ReportID}"/>
                  </do_else>
                  <do_if value="$Feedback" exact="-1">
                    <debug_text text="$DebugText + player.age + ': %1 operation to support %2, %3 failed. All friendly ships have been destroyed. SitRep updated: %3'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
                  </do_if>
                  <do_elseif value="$Feedback" exact="-2">
                    <debug_text text="$DebugText + player.age + ': %1 operation to support %2, %3 failed. Opposition was too strong. We retreated.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
                  </do_elseif>
                </do_if>
                <do_elseif value="$Feedback" exact="-3">
                  <!-- if failed due to sector changing hands, de-prioritize the report. -->
                  <set_value name="$FactionCue.$DistressCalls.{$ReportID}.{5}.{1}" exact="0"/>
                  <debug_text text="$DebugText + player.age + ': %1 operation to support %2, %3 failed. %1 no longer owns %2.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
                </do_elseif>
              </do_if>
              <do_elseif value="$Feedback" exact="-10">
                <!-- if the operation was never started due to no ships being available, de-prioritize the report. -->
                <set_value name="$FactionCue.$DistressCalls.{$ReportID}.{5}.{1}" exact="0"/>
                <debug_text text="$DebugText + player.age + ': %1 operation to support %2, %3 aborted. No friendly ships available.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
              </do_elseif>
              <do_elseif value="$Feedback" exact="-11">
                <debug_text text="$DebugText + player.age + ': %1 operation to support %2, %3 aborted. Encounter was in a temp zone. TO DO: Remove this and the referring condition when the scripts can handle positions relative to sectors.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
              </do_elseif>
              <do_elseif value="$Feedback" exact="-12">
                <debug_text text="$DebugText + player.age + ': %1 operation to support %2, %3 aborted. Encounter zone cannot be found. Possibly a temp zone that has since been removed. TO DO: Remove this and the referring condition when the scripts can handle positions relative to sectors.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
                <!-- if the operation could not be started due to being unable to find the zone, discard the report. -->
                <remove_value name="$FactionCue.$DistressCalls.{$ReportID}"/>
              </do_elseif>
              <do_elseif value="$Feedback" exact="-13">
                <debug_text text="$DebugText + player.age + ': %1 operation to support %2, %3 aborted. Faction deactivated.'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname]" chance="$DebugChance"/>
                <remove_value name="$FactionCue.$DistressCalls.{$ReportID}"/>
              </do_elseif>
              <do_else>
                <debug_text text="$DebugText + player.age + ': ERROR: %1 operation to support %2, %3 ended with invalid feedback code: %4'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $Feedback]"/>
              </do_else>
            </do_elseif>
            <do_else>
              <debug_text text="$DebugText + player.age + ': ERROR: %1 operation to support %2, %3 ended with invalid feedback code: %4'.[$Faction, $TargetSector.knownname, $TargetSector.cluster.knownname, $Feedback]"/>
            </do_else>

            <set_value name="this.$IDX" exact="$FactionCue.$Goals.indexof.{namespace}"/>
            <do_if value="this.$IDX">
              <remove_value name="$FactionCue.$Goals.{this.$IDX}"/>
            </do_if>

            <cancel_cue cue="namespace"/>
          </actions>
        </cue>

        <cue name="Generate_Report" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="$Faction.knownname + ' coordinating patrols in ' + $TargetSector.knownname" context="false"/>
          </actions>
        </cue>
      </cues>
    </cue>
  </cues>
</mdscript>