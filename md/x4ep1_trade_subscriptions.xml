<?xml version="1.0" encoding="utf-8"?>
<mdscript name="X4Ep1_Trade_Subscriptions" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <cue name="Start" namespace="this">
      <conditions>
        <event_cue_completed cue="md.Setup.Start"/>
        <check_value value="player.galaxy.macro == macro.xu_ep2_universe_macro" comment="only in main-galaxy"/>
      </conditions>
      <actions>
        <set_value name="$DebugChance" exact="0"/>
        <set_value name="$DebugChance2" exact="0"/>

        <set_value name="$MissionGroupCues" exact="table[]"/>
        <set_value name="$Threads" exact="[]"/>
        <set_value name="$ThreadDefinitions" exact="table[]"/>
        <set_value name="$ActiveThreads" exact="[]" comment="List of instanced thread cues of md.MC_Management.Thread_Manager"/>
        <set_value name="$Areas" exact="[]"/>
      </actions>
      <cues>
        <library name="Remove_Dynamic_Interior">
          <actions>
            <do_if value="$DynamicInterior">
              <debug_text text="event.name + ' Destroying interior ' + $DynamicInterior" chance="$DebugChance"/>
              <destroy_object object="$DynamicInterior"/>
            </do_if>
            <remove_value name="$DynamicInterior"/>
            <remove_value name="$DynamicCorridor"/>
            <remove_value name="$DynamicRoom"/>
          </actions>
        </library>

        <!--
        ############################
        ANTIGONE TRADE GUILD
        ############################-->
        <cue name="ANTIGONE_GUILD" namespace="this" version="4">
          <actions>
            <!--Common values-->
            <set_value name="$ManagerCue" exact="parent.namespace"/>
            <set_value name="$Faction" exact="faction.antigone"/>
            <set_value name="$MissionGroup" exact="missiongroup.antigone_trade_guild"/>
            <set_value name="$Mission_Contact" exact="null"/>
            <set_value name="$Page" exact="30205" comment="Antigone trade guild page"/>
            <set_value name="$ManagerCue.$MissionGroupCues.{$MissionGroup}" exact="this"/>
            <set_value name="$JoinFee" exact="50000Cr"/>
            <set_value name="$SubscriptionMinRel" exact="$Faction.relation.friend.min"/>
            <set_value name="$DebugChance" exact="$ManagerCue.$DebugChance"/>

            <!--Status-->
            <set_value name="$SubscriptionStatus" exact="null"/>
            <set_value name="$Invited" exact="false"/>
            <set_value name="$IntroducedToContact" exact="false"/>
            <set_value name="$JobsDescribed" exact="false"/>
            <set_value name="$ConflictDescribed" exact="false"/>
            <set_value name="$CooldownTime" exact="-1s"/>

            <!--Stats-->
            <set_value name="$ThreadsCompleted" exact="0"/>
            <set_value name="$ThreadsFailed" exact="0"/>

            <set_value name="$MissionsCompleted" exact="0"/>
            <set_value name="$MissionsFailed" exact="0"/>
          </actions>
          <patch sinceversion="2" state="complete">
            <do_if value="$CooldownTime gt (player.age + 5min)">
              <debug_text text="'Reducing mission subscription cooldowntime from ' + $CooldownTime + ' to ' + player.age + 5min" filter="savegame"/>
              <set_value name="$CooldownTime" exact="player.age + 5min"/>
            </do_if>
          </patch>
          <patch sinceversion="4" state="complete">
            <do_if value="not md.$SubscribedMissionGroups?">
              <create_list name="md.$SubscribedMissionGroups"/>
            </do_if>
            <do_if value="$SubscriptionStatus == 'subscribed'">
              <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
            </do_if>
          </patch>
          <patch sinceversion="4" state="complete">
            <do_if value="not md.$SubscribedMissionGroups?">
              <create_list name="md.$SubscribedMissionGroups"/>
            </do_if>
            <do_if value="$SubscriptionStatus == 'subscribed'">
              <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
            </do_if>
          </patch>
          <cues>
            <cue name="ANTIGONE_GUILD_Init">
              <actions>
                <set_value name="$ContactCreatorCue" exact="ANTIGONE_GUILD_Create_Contact"/>
                <set_value name="$IntroMissionCue" exact="ANTIGONE_GUILD_Introduction"/>

                <!--$SubscriptionStatus:
                - 'unsubscribed'
                - 'probation'
                - 'subscribed'
                - 'cooldown'-->
                <signal_cue_instantly cue="ANTIGONE_GUILD_Set_Subscription_Status" param="'unsubscribed'"/>
              </actions>
            </cue>

            <!--
            ####################
            DEBUG
            ####################-->
            <cue name="ANTIGONE_GUILD_Debug_Reset">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_all exact="$ManagerCue.$Threads.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$Threads.{$i}.$ThreadCue.$Definition.$MissionGroup == $MissionGroup">
                    <signal_cue_instantly cue="$ManagerCue.$Threads.{$i}.$CleanupCue"/>
                  </do_if>
                </do_all>
                <set_value name="$DefinitionKeys" exact="$ManagerCue.$ThreadDefinitions.keys.list"/>
                <do_all exact="$DefinitionKeys.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}.$MissionGroup == $MissionGroup">
                    <remove_value name="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}"/>
                  </do_if>
                </do_all>
                <do_if value="$Mission_Contact.isclass.npc">
                  <destroy_object object="$Mission_Contact"/>
                </do_if>
                <set_value name="$Mission_Contact" exact="null"/>
                <reset_cue cue="namespace"/>
                <reset_cue cue="Gamestart" comment="Trigger CalculateThreads again"/>
              </actions>
            </cue>

            <cue name="ANTIGONE_GUILD_Debug_Subscribe" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <signal_cue_instantly cue="ANTIGONE_GUILD_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>

            <!--
            ####################
            SUBSCRIPTION
            ####################-->

            <!--event.param == new status-->
            <cue name="ANTIGONE_GUILD_Set_Subscription_Status" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="
                       event.param == 'unsubscribed' or
                       event.param == 'probation' or
                       event.param == 'subscribed' or
                       event.param == 'cooldown'">

                  <debug_text text="'Changing subscription status from ' + $SubscriptionStatus + ' to ' + event.param" chance="$DebugChance"/>
                  <set_value name="$SubscriptionStatus" exact="event.param"/>

                  <!--Be careful with state change handlers here if the requested state was the same as the previous one-->
                  <do_if value="event.param == 'subscribed' and Gamestart.state == cuestate.complete">
                    <unlock_achievement name="JOIN_TRADE_GUILD" />
                    <signal_cue cue="CalculateThreads"/>
                  </do_if>
                  <do_elseif value="event.param == 'cooldown'">
                    <!--TODO @Owen balance cooldown. Have a harsher cooldown in certain situations?-->
                    <set_value name="$CooldownTime" exact="player.age + 5min"/>
                  </do_elseif>
                  <!-- update global missiongroup-registry -->
                  <do_if value="$SubscriptionStatus == 'subscribed'">
                    <assert value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}" />
                    <do_if value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}">
                      <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <remove_from_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                  </do_else>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown subscription status: ' + event.param + ' [Owen]'"/>
                </do_else>
              </actions>
            </cue>

            <cue name="ANTIGONE_GUILD_Check_Cooldown" instantiate="true" checkinterval="5s">
              <conditions>
                <check_value value="$SubscriptionStatus == 'cooldown' and player.age gt $CooldownTime"/>
              </conditions>
              <actions>
                <debug_text text="player.age + ' Ending  cooldown'" chance="$DebugChance"/>
                <signal_cue_instantly cue="ANTIGONE_GUILD_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>

            <!--
            ####################
            CONTACT
            ####################-->

            <!--event.param == Cloned list of the local host sectors to search for a placement object (or null to fallback to any owned space in the galaxy)-->
            <cue name="ANTIGONE_GUILD_Create_Contact">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <set_value name="$PlacementObject" exact="$Faction.headquarters"/>
                <do_if value="$PlacementObject">
                  <check_object result="this.$Result" object="$PlacementObject">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </check_object>
                  <do_if value="not this.$Result">
                    <set_value name="$PlacementObject" exact="null"/>
                  </do_if>
                </do_if>
                <do_if value="not $PlacementObject.exists">
                  <!--As we're not pointing the player to these stations for the intro mission, only find important stations-->
                  <find_station_by_true_owner name="$PlacementObject" faction="$Faction" space="player.sector">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                    <match_any>
                      <match shipyard="true"/>
                      <match equipmentdock="true"/>
                      <match tradestation="true"/>
                    </match_any>
                  </find_station_by_true_owner>
                </do_if>

                <do_if value="$PlacementObject">
                  <do_if value="not $Mission_Contact.isclass.npc">
                    <create_cue_actor name="$Mission_Contact" cue="namespace" group="argon.factionrepresentative.male">
                      <page exact="10104"/>
                      <owner exact="$Faction"/>
                      <skills>
                        <skill type="management"  min="12"  max="15"/>
                        <skill type="morale"      min="9"  max="15"/>
                        <skill type="piloting"    min="3"   max="15"/>
                        <skill type="engineering" min="3"   max="15"/>
                        <skill type="boarding"    min="3"   max="15"/>
                      </skills>
                    </create_cue_actor>
                    <do_if value="$Mission_Contact">
                      <set_entity_type entity="$Mission_Contact" type="entitytype.crowd"/>
                      <set_entity_traits entity="$Mission_Contact" missionactor="true" remote="false" customhandler="true" />
                      <debug_text text="'Created mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' for placement on ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>

                      <set_value name="$HQ" exact="$PlacementObject"/>
                      <set_value name="$Mission_Contact.$HQ" exact="$PlacementObject"/>
                    </do_if>
                  </do_if>
                </do_if>

                <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.exists">
                  <reset_cue cue="this"/>
                </do_if>
              </actions>
              <cues>
                <cue name="ANTIGONE_GUILD_Place_Contact_Init" version="2">
                  <actions>
                    <do_if value="$PlacementObject.attention ge attention.nearby">
                      <signal_cue cue="ANTIGONE_GUILD_Place_Contact_Create_Interior"/>
                    </do_if>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="not $PlacementObject.isoperational">
                      <set_value name="$PlacementObject" exact="null"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                  </patch>
                </cue>

                <cue name="ANTIGONE_GUILD_Place_Contact_Create_Interior">
                  <conditions>
                    <check_any>
                      <event_cue_signalled/>
                      <check_all>
                        <event_object_changed_attention object="$PlacementObject"/>
                        <check_value value="event.param ge attention.nearby"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Attempting to create dynamic interior to place NPC'" chance="$DebugChance"/>
                    <get_room_definition macro="$StartCorridorMacro" tags="tag.corridor" race="$Faction.primaryrace" />
                    <get_room_definition macro="$StartRoomMacro" doors="$RoomDoors" tags="tag.office" race="$Faction.primaryrace" />

                    <create_dynamic_interior object="$PlacementObject" corridor="$StartCorridorMacro" room="$StartRoomMacro" name="{30205,3}" interiorname="$DynamicInterior" corridorname="$DynamicCorridor" roomname="$DynamicRoom" />
                    <assert value="$DynamicInterior" text="'Unable to create dynamic interior for contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' [Owen]'"/>
                    <do_if value="$DynamicInterior">
                      <find_npc_slot name="$NPC_Slot" object="$DynamicRoom" tags="tag.control"/>
                      <do_if value="not $NPC_Slot">
                        <find_npc_slot name="$NPC_Slot" object="$DynamicRoom"/>
                      </do_if>
                      <assert value="$NPC_Slot" text="'Can not find slot for mission contact in ' + $DynamicInterior + ' ' + $DynamicInterior.knownname + ' [Owen]'"/>
                      <do_if value="$NPC_Slot">
                        <add_actor_to_room actor="$Mission_Contact" slot="$NPC_Slot"/>
                        <debug_text text="'Added mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' to ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </actions>
                  <cues>
                    <cue name="ANTIGONE_GUILD_Place_Contact_WithinDynamicInterior_Destroy">
                      <conditions>
                        <event_object_interiors_despawning object="$PlacementObject"/>
                      </conditions>
                      <actions>
                        <remove_actor_from_room actor="$Mission_Contact"/>
                        <include_actions ref="Remove_Dynamic_Interior"/>
                        <do_if value="$Faction.isactive">
                          <reset_cue cue="ANTIGONE_GUILD_Place_Contact_Create_Interior"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                          <reset_cue cue="$ContactCreatorCue"/>
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="ANTIGONE_GUILD_Contact_Killed">
                  <conditions>
                    <event_object_destroyed object="$Mission_Contact"/>
                  </conditions>
                  <actions>
                    <set_value name="$Mission_Contact" exact="null"/>
                    <reset_cue cue="ANTIGONE_GUILD_Create_Contact"/>
                  </actions>
                </cue>

                <cue name="ANTIGONE_GUILD_Placement_Object_Destroyed">
                  <conditions>
                    <event_object_destroyed object="$PlacementObject"/>
                  </conditions>
                  <actions>
                    <include_actions ref="Remove_Dynamic_Interior"/>
                    <set_value name="$PlacementObject" exact="null"/>
                    <reset_cue cue="$ContactCreatorCue"/>
                  </actions>
                </cue>

                <cue name="ANTIGONE_GUILD_Contact__Faction_Deactivated">
                  <conditions>
                    <event_faction_deactivated faction="$Faction"/>
                  </conditions>
                  <actions>
                    <do_if value="ANTIGONE_GUILD_Place_Contact_Create_Interior.state == cuestate.waiting">
                      <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                    <!--else, the depawning of the interior must happen-->
                  </actions>
                </cue>

                <cue name="ANTIGONE_GUILD_Contact_Conversation_Started" instantiate="true">
                  <conditions>
                    <check_any>
                      <event_conversation_started actor="$Mission_Contact" />
                      <event_conversation_returned_to_section actor="$Mission_Contact" />
                    </check_any>
                    <check_value value="event.param == 'default' and $Faction.isactive" />
                  </conditions>
                  <actions>
                    <do_if value="event.name == 'event_conversation_started'">
                      <substitute_text text="$JoinPlayerChoiceText" source="{1002,3020704}" comment="Join... \($CREDITS${1001,101}\)">
                        <replace string="'$CREDITS$'" with="$JoinFee.formatted.default"/>
                      </substitute_text>
                      <do_if value="ANTIGONE_GUILD_Introduction.hasmission">
                        <remove_mission cue="ANTIGONE_GUILD_Introduction" type="completed"/>
                        <signal_cue cue="ANTIGONE_GUILD_Cancel_Intro_Talkto"/>
                        <reset_cue cue="ANTIGONE_GUILD_Introduction"/>
                      </do_if>
                      <do_if value="$SubscriptionStatus == 'unsubscribed' or $SubscriptionStatus == 'cooldown'">
                        <do_if value="player.entity.isfemale">
                          <add_npc_line speaker="$Mission_Contact" line="3007" comment="Pilot. (female)"/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="3006" comment="Pilot. (male)"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <!--More familiar greeting-->
                        <add_npc_line speaker="$Mission_Contact" line="3003" comment="Captain."/>
                      </do_else>
                    </do_if>

                    <include_actions ref="ANTIGONE_GUILD_Contact_Player_Lines"/>
                  </actions>
                </cue>

                <library name="ANTIGONE_GUILD_Contact_Player_Lines">
                  <actions>
                    <!--Specific sections-->
                    <do_if value="event.name == 'event_conversation_next_section' and (event.param == 'subscribe_request' or event.param == 'subscribe_request_2')">
                      <add_player_choice text="{1002,3000401}" section="subscribe_ask_info" comment="What kind of jobs can I expect?"/>
                      <add_player_choice text="$JoinPlayerChoiceText" section="subscribe_start" position="top_right" comment="Let's get started."/>
                    </do_if>
                    <do_elseif value="event.name == 'event_conversation_next_section' and event.param == 'subscribe_ask_info'">
                      <add_player_choice text="$JoinPlayerChoiceText" section="subscribe_start" position="top_right" comment="Let's get started."/>
                    </do_elseif>

                    <!--Start or other sections-->
                    <do_else>
                      <do_if value="$SubscriptionStatus == 'unsubscribed'">
                        <do_if value="not $Invited">
                          <!--Intro mission is not in a state where the player was told to come.-->
                          <add_player_choice text="{1002,3000406}" section="subscribe_request_2" comment="Is there some work going?"/>
                        </do_if>
                        <do_elseif value="$IntroducedToContact">
                          <add_player_choice text="{1002,3000403}" section="subscribe_start" position="top_right" comment="Shall I get started?"/>
                          <do_if value="not $JobsDescribed">
                            <add_player_choice text="{1002,3000401}" section="subscribe_ask_info" comment="What kind of jobs can I expect?"/>
                          </do_if>
                        </do_elseif>
                        <do_else>
                          <add_player_choice text="{1002,3020501}" section="subscribe_request" comment="I'm here about the trade guild."/>
                        </do_else>
                      </do_if>
                      <do_elseif value="$SubscriptionStatus == 'probation'">
                        <add_player_choice text="{1002,3000405}" section="abort_intro" comment="I would like to stop."/>
                      </do_elseif>
                    </do_else>
                  </actions>
                </library>

                <cue name="ANTIGONE_GUILD_Contact_NextSection" instantiate="true">
                  <conditions>
                    <event_conversation_next_section actor="$Mission_Contact"/>
                  </conditions>
                  <actions>
                    <set_value name="$AddPlayerChoices" exact="true"/>
                    <do_if value="event.param == 'subscribe_request'">
                      <set_value name="$IntroducedToContact" exact="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30205003" hidechoices="true" comment="Ah, I'm glad you came. Our guild is currently seeking to increase our presence in the market."/>
                      <add_npc_line speaker="$Mission_Contact" line="30205004" hidechoices="true" comment="To compete with the Teladi, we're offering membership to a select number of trusted individuals."/>
                      <add_npc_line speaker="$Mission_Contact" line="30205005" hidechoices="true" comment="This is a one-time investment, after which you will have access to a number of job listings."/>
                    </do_if>
                    <do_elseif value="event.param == 'subscribe_ask_info'">
                      <set_value name="$JobsDescribed" exact="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30205006" hidechoices="true" comment="As you can expect, most jobs will involve shifting wares between stations but we're also looking for combat pilots."/>
                      <add_npc_line speaker="$Mission_Contact" line="30205007" hidechoices="true" comment="We have to protect our interests and seek out new opportunities. I believe you can help us do that."/>
                      <add_npc_line speaker="$Mission_Contact" line="30205008" hidechoices="true" comment="It's a competitive market and we need skilled partners. You just so happened to catch our attention."/>
                    </do_elseif>
                    <do_elseif value="event.param == 'subscribe_request_2'">
                      <!--This section is for when the intro mission is not currently active for the player to accept it. Either reject the player or signal the intro mission to activate.-->
                      <include_actions ref="ANTIGONE_GUILD_Can_Join_Subscription"/>
                      <do_if value="$CanJoin">
                        <!--Player shouldn't usually get access to this section as that would mean unlocking the interior while not triggering the intro mission.-->
                        <add_npc_line speaker="$Mission_Contact" line="30205003" hidechoices="true" comment="Ah, I'm glad you came. Our guild is currently seeking to increase our presence in the market."/>
                        <add_npc_line speaker="$Mission_Contact" line="30205004" hidechoices="true" comment="To compete with the Teladi, we're offering membership to a select number of trusted individuals."/>
                        <add_npc_line speaker="$Mission_Contact" line="30205005" hidechoices="true" comment="This is a one-time investment, after which you will have access to a number of job listings."/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="30205009" hidechoices="true" comment="(reject)Sorry. You'll need to become a member of our guild first."/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'subscribe_start'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <signal_cue cue="ANTIGONE_GUILD_Player_Requested_Subscription"/>
                      <do_if value="player.money ge $JoinFee">
                        <reward_player money="-$JoinFee"/>
                        <signal_cue_instantly cue="ANTIGONE_GUILD_Set_Subscription_Status" param="'subscribed'"/>
                        <add_npc_line speaker="$Mission_Contact" line="30205010" hidechoices="true" comment="Great. I'll update our database right away. You should now be able to see jobs on offer in the areas where we operate."/>
                        <add_npc_line speaker="$Mission_Contact" line="30205011" hidechoices="true" comment="We expect good things from you."/>
                      </do_if>
                      <do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30205012" hidechoices="true" comment="Sorry, it appears you don't have the necessary funds available."/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'abort_intro'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <signal_cue cue="ANTIGONE_GUILD_Player_Requests_Intro_Abort"/>
                    </do_elseif>
                    <do_else>
                      <set_value name="$AddPlayerChoices" exact="false"/>
                    </do_else>

                    <do_if value="$AddPlayerChoices">
                      <include_actions ref="ANTIGONE_GUILD_Contact_Player_Lines"/>
                    </do_if>
                  </actions>
                </cue>
              </cues>
            </cue>


            <!--event.param = table[
            $cue                = thread cue namespace,
            $completedmissions  = number of completed missions,
            $failedmissions     = number of failed missions]-->
            <cue name="ANTIGONE_GUILD_Thread_Finished" instantiate="true">
              <conditions>
                <event_cue_signalled cue="Cleanup_Thread"/>
                <check_value value="event.param.$cue.$Definition.$MissionGroup == $MissionGroup"/>
                <check_value value="$ManagerCue.$ActiveThreads.indexof.{event.param.$cue}"/>
              </conditions>
              <actions>
                <!--TODO @Owen spoken feedback?-->
                <debug_text text="'player finished ' + event.param.$cue + ' for ' + $MissionGroup + '. Completed missions: ' + event.param.$completedmissions + ' - Failed missions: ' + event.param.$failedmissions" chance="$DebugChance"/>

                <set_value name="$MissionsCompleted" operation="add" exact="event.param.$completedmissions"/>
                <set_value name="$MissionsFailed" operation="add" exact="event.param.$completedmissions"/>

                <do_if value="event.param.$failed">
                  <set_value name="$ThreadsFailed" operation="add"/>
                  <signal_cue_instantly cue="ANTIGONE_GUILD_Set_Subscription_Status" param="'cooldown'"/>
                </do_if>
                <do_else>
                  <set_value name="$ThreadsCompleted" operation="add"/>
                  <signal_cue cue="CalculateThreads"/>
                </do_else>
              </actions>
            </cue>

            <!--
            ####################
            INTRODUCTION
            ####################-->

            <cue name="ANTIGONE_GUILD_Player_Requested_Subscription" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>

            <cue name="ANTIGONE_GUILD_Player_Requests_Intro_Abort" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>

            <library name="ANTIGONE_GUILD_Can_Join_Subscription">
              <actions>
                <!--TODO @Owen other conditions based on if they failed a previous intro mission and need a cooldown-->
                <set_value name="$CanActivateIntro" exact="false"/>
                <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                  <set_value name="$CanActivateIntro" exact="true"/>
                </do_if>
                <do_else>
                  <debug_text text="'player does not meet minimum relationship requirement'"/>
                </do_else>
              </actions>
            </library>

            <cue name="ANTIGONE_GUILD_Introduction" version="2">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <set_value name="$Invited" exact="false"/>
                <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.isoperational">
                  <debug_text text="'Mission contact was not yet created for ' + $MissionGroup + '. Triggering creation now. [Owen]'" filter="error"/>
                  <signal_cue_instantly cue="$ContactCreatorCue"/>
                </do_if>
                <do_if value="$Mission_Contact.isclass.npc and $PlacementObject.isoperational">
                  <debug_text text="'Starting intro mission handling for ' + $MissionGroup" chance="$DebugChance"/>
                  <set_value name="$MissionIntroCue" exact="this"/>
                  <signal_cue_instantly cue="ANTIGONE_GUILD_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
                <do_else>
                  <debug_text text="'Unable to start intro mission as there is no placement object'"/>
                  <reset_cue cue="ANTIGONE_GUILD_Introduction"/>
                </do_else>
              </actions>
              <patch sinceversion="2" state="complete">
                <do_if value="$SubscriptionStatus == 'cooldown'">
                  <debug_text text="'Fixing trade mission which is still of state cooldown when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="ANTIGONE_GUILD_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <cues>
                <cue name="ANTIGONE_GUILD_Introduction_Station_Destroyed">
                  <conditions>
                    <event_object_destroyed object="$PlacementObject"/>
                    <!--Once landed, the DisconnectedActorObjectiveLibrary will handle the station being destroyed-->
                    <check_value value="ANTIGONE_GUILD_Introduction_Player_Landed.state == cuestate.waiting"/>
                  </conditions>
                  <actions>
                    <reset_cue cue="$MissionIntroCue"/>
                  </actions>
                </cue>
                <cue name="ANTIGONE_GUILD_Introduction_Player_Landed">
                  <conditions>
                    <event_object_docked_at container="$PlacementObject"/>
                    <check_value value="player.ship == event.param and $Mission_Contact.hascontext.{$PlacementObject}"/>
                  </conditions>
                  <delay exact="5s"/>
                  <actions>
                    <do_if value="player.entity.hascontext.{$PlacementObject}">
                      <speak actor="$Mission_Contact" priority="90">
                        <text line="30205001" comment="Greetings pilot. I represent the Antigone Trade Guild and I've been told to present you with the opportunity to become a member."/>
                        <text line="30205002" comment="If you're interested, come find me."/>
                      </speak>
                    </do_if>
                    <do_else>
                      <reset_cue cue="ANTIGONE_GUILD_Introduction_Player_Landed"/>
                    </do_else>
                  </actions>
                  <cues>

                    <!--TODO @Owen - remove when player flies away? Put on cooldown?-->
                    <cue name="ANTIGONE_GUILD_Introduction_Offer">
                      <conditions>
                        <event_speak_finished actor="$Mission_Contact" line="30205001" comment="the line passed as the event.param2 is always the first spoken line"/>
                      </conditions>
                      <actions>
                        <debug_text text="'Player has passed the conditions for the intro mission to be available for group: ' + $MissionGroup" chance="$DebugChance"/>
                        <set_value name="$Invited" exact="true"/>
                        <create_mission cue="$MissionIntroCue" type="missiontype.fight" name="{30205,1}" description="{30205,2}" difficulty="level.trivial" faction="$Faction" group="$MissionGroup">
                          <briefing>
                            <objective step="1" action="objective.talkto" object="$Mission_Contact"/>
                          </briefing>
                        </create_mission>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[
                                              $actor = $Mission_Contact,
                                              $object = $PlacementObject,
                                              $missioncue = $MissionIntroCue,
                                              $cancelcue = ANTIGONE_GUILD_Cancel_Intro_Talkto,
                                              $libfailedcue = ANTIGONE_GUILD_Intro_Abort,
                                              $objective = objective.talkto,
                                              $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>

                    <cue name="ANTIGONE_GUILD_Intro_Abort" version="2">
                      <conditions>
                        <check_any>
                          <event_mission_aborted cue="$MissionIntroCue"/>
                          <event_cue_signalled cue="ANTIGONE_GUILD_Player_Requests_Intro_Abort"/>
                          <event_cue_signalled/>
                          <event_object_destroyed object="$Mission_Contact"/>
                          <event_object_destroyed object="$PlacementObject"/>
                          <event_faction_deactivated faction="$Faction"/>
                        </check_any>
                      </conditions>
                      <actions>
                        <debug_text text="'Aborting due to ' + event.name" chance="$DebugChance"/>
                        <set_value name="$Invited" exact="false"/>
                        <do_if value="$MissionIntroCue.hasmission">
                          <remove_mission cue="$MissionIntroCue" type="aborted"/>
                        </do_if>
                        <signal_cue_instantly cue="ANTIGONE_GUILD_Set_Subscription_Status" param="'unsubscribed'"/>
                        <reset_cue cue="ANTIGONE_GUILD_Introduction"/>
                      </actions>
                      <patch sinceversion="2" state="waiting">
                        <set_value name="$Patch_CheckLibraryInstance" exact="true"/>
                      </patch>
                    </cue>

                    <cue name="ANTIGONE_GUILD_Patch_Check_Talkto_Lib" onfail="cancel">
                      <conditions>
                        <check_value value="@$Patch_CheckLibraryInstance"/>
                      </conditions>
                      <actions>
                        <do_if value="not @md.GenericMissions.DisconnectedActorObjectiveLibrary.$Patch_ActiveMissionCues.indexof.{$MissionIntroCue}">
                          <debug_text text="'Talkto helper instance no longer exists for ' + $MissionIntroCue + ' - aborting intro mission'" filter="savegame"/>
                          <signal_cue cue="ANTIGONE_GUILD_Intro_Abort"/>
                        </do_if>
                        <remove_value name="$Patch_CheckLibraryInstance"/>
                      </actions>
                    </cue>

                    <cue name="ANTIGONE_GUILD_Cancel_Intro_Talkto" instantiate="true">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

            <!--
            ####################
            THREADS
            ####################-->
            <cue name="ANTIGONE_GUILD_Remove_Obstacles">
              <cues>
                <cue name="ANTIGONE_GUILD_Remove_Obstacles_Register" version="3">
                  <actions>
                    <!--Antigone - Remove Obstacles-->
                    <set_value name="$ThreadID" exact="'$ANTIGONE_GUILD_remove_obstacles'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Always],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.medium,
                           $SubMissionLib = ANTIGONE_GUILD_Remove_Obstacles_Get_Submissions,
                           $NameLib = ANTIGONE_GUILD_Remove_Obstacles_Construct_Name,
                           $DescriptionLib = ANTIGONE_GUILD_Remove_Obstacles_Construct_Description,
                           $RewardLib = ANTIGONE_GUILD_Remove_Obstacles_Construct_Reward,
                           $MinMissions = 1,
                           $MaxMissions = 3,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$ANTIGONE_GUILD_remove_obstacles.$RewardLib" exact="ANTIGONE_GUILD_Remove_Obstacles_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Remove_Obstacles_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$clear_explosives"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Destroy_Objects__Clear_Explosives,  $MissionType = missiontype.destroy, $Page = 30205, $TextOffset = [101000, 101100, 101200, 101600], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$rescue_ship1"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Rescue_Ship__Standard,              $MissionType = missiontype.rescue, $Page = 30205, $TextOffset = [108000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$rescue_ship2"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Rescue_Ship_2__Standard,            $MissionType = missiontype.rescue, $Page = 30205, $TextOffset = [108100], $Sequence = -1 ]"/>

                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Remove_Obstacles_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30205,3000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Remove_Obstacles_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30205,3101}"/>
                      <set_value name="this.$Description" exact="{30205,3102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,3111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,3112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="ANTIGONE_GUILD_Remove_Obstacles_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="10" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="10" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="10" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="10" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shieldgeneratorcoil_t3,ware.modpart_shipnanoweave_t3].random]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2, ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="10"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="5"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0074" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

            <cue name="ANTIGONE_GUILD_Increase_Portfolio">
              <cues>
                <cue name="ANTIGONE_GUILD_Increase_Portfolio_Register" version="3">
                  <actions>
                    <!--Antigone - Increase Portfolio-->
                    <set_value name="$ThreadID" exact="'$ANTIGONE_GUILD_Increase_Portfolio'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Always],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.medium,
                           $SubMissionLib = ANTIGONE_GUILD_Increase_Portfolio_Get_Submissions,
                           $NameLib = ANTIGONE_GUILD_Increase_Portfolio_Construct_Name,
                           $DescriptionLib = ANTIGONE_GUILD_Increase_Portfolio_Construct_Description,
                           $RewardLib = ANTIGONE_GUILD_Increase_Portfolio_Construct_Reward,
                           $MinMissions = 4,
                           $MaxMissions = 5,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$ANTIGONE_GUILD_Increase_Portfolio.$RewardLib" exact="ANTIGONE_GUILD_Increase_Portfolio_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Increase_Portfolio_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$assisted_task"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Assisted_Task__Standard,    $MissionType = missiontype.find,    	  $Page = 30231, $TextOffset = [20000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$hack_panel"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.HackPanel__Standard,        $MissionType = missiontype.trade,       $Page = 30205, $TextOffset = [107000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$exact_fleet"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Get_Exact_Fleet__Standard,  $MissionType = missiontype.destroy,     $Page = 30205, $TextOffset = [102000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$find_resources"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Find_Resources__Standard,   $MissionType = missiontype.trade,       $Page = 30205, $TextOffset = [100000, 100100], $Sequence = -1 ]"/>
                    <!--<set_value name="$Submissions.$retrieve_dead_drop"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Retrieve_Dead_Drop__Standard,   $MissionType = missiontype.transport,   $Page = 30232, $TextOffset = [10100], $Sequence = 1 ]"/>
                    -->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Increase_Portfolio_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30205,4000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Increase_Portfolio_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30205,4101}"/>
                      <set_value name="this.$Description" exact="{30205,4102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,4111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,4112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="ANTIGONE_GUILD_Increase_Portfolio_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="13" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="12" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shipnanoweave_t3].random]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="13"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="12"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="5"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0074" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

            <cue name="ANTIGONE_GUILD_Help_Trade_Operation">
              <cues>
                <cue name="ANTIGONE_GUILD_Help_Trade_Operation_Register" version="3">
                  <actions>
                    <!--Antigone - Help Trade Operation-->
                    <set_value name="$ThreadID" exact="'$ANTIGONE_GUILD_Help_Trade_Operation'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Always],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.medium,
                           $SubMissionLib = ANTIGONE_GUILD_Help_Trade_Operation_Get_Submissions,
                           $NameLib = ANTIGONE_GUILD_Help_Trade_Operation_Construct_Name,
                           $DescriptionLib = ANTIGONE_GUILD_Help_Trade_Operation_Construct_Description,
                           $RewardLib = ANTIGONE_GUILD_Help_Trade_Operation_Construct_Reward,
                           $MinMissions = 4,
                           $MaxMissions = 5,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$ANTIGONE_GUILD_Help_Trade_Operation.$RewardLib" exact="ANTIGONE_GUILD_Help_Trade_Operation_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Help_Trade_Operation_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$assisted_task"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Assisted_Task__Standard,    $MissionType = missiontype.find,      $Page = 30231, $TextOffset = [20000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$get_item"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Bring_Item__Standard,       $MissionType = missiontype.trade,     $Page = 30205, $TextOffset = [109000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$find_resources"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Find_Resources__Standard, $MissionType = missiontype.trade, $Page = 30205, $TextOffset = [100000, 100100], $Sequence = -1, $NextMission = '$achieve_coverage' ]"/>
                    <set_value name="$Submissions.$achieve_coverage"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Achieve_Coverage__Standard,  $MissionType = missiontype.intelligence, $Page = 30205, $TextOffset = [103000], $FollowUp = true ]"/>

                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Help_Trade_Operation_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30205,5000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Help_Trade_Operation_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30205,5101}"/>
                      <set_value name="this.$Description" exact="{30205,5102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,5111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,5112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="ANTIGONE_GUILD_Help_Trade_Operation_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="15"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0074" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

            <cue name="ANTIGONE_GUILD_Price_Dumping">
              <cues>
                <cue name="ANTIGONE_GUILD_Price_Dumping_Register" version="3">
                  <actions>
                    <!--Antigone - Price Dumping-->
                    <set_value name="$ThreadID" exact="'$ANTIGONE_GUILD_Price_Dumping'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Always],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.veryeasy,
                           $SubMissionLib = ANTIGONE_GUILD_Price_Dumping_Get_Submissions,
                           $NameLib = ANTIGONE_GUILD_Price_Dumping_Construct_Name,
                           $DescriptionLib = ANTIGONE_GUILD_Price_Dumping_Construct_Description,
                           $RewardLib = ANTIGONE_GUILD_Price_Dumping_Construct_Reward,
                           $MinMissions = 4,
                           $MaxMissions = 5,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$ANTIGONE_GUILD_Price_Dumping.$RewardLib" exact="ANTIGONE_GUILD_Price_Dumping_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Price_Dumping_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$find_resources"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Find_Resources__Standard,  $MissionType = missiontype.trade, $Page = 30205, $TextOffset = [100000, 100100], $Sequence = -1 ]"/>

                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Price_Dumping_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30205,6000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Price_Dumping_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30205,6101}"/>
                      <set_value name="this.$Description" exact="{30205,6102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,6111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,6112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="ANTIGONE_GUILD_Price_Dumping_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="13" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="12" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_enginefuelinjector_t3].random]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="13"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="12"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="5"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0074" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

            <cue name="ANTIGONE_GUILD_Setup_Satellites">
              <cues>
                <cue name="ANTIGONE_GUILD_Setup_Satellites_Register" version="3">
                  <actions>
                    <!--Antigone - Setup satellites-->
                    <set_value name="$ThreadID" exact="'$ANTIGONE_GUILD_Setup_Satellites'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Always],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.veryeasy,
                           $SubMissionLib = ANTIGONE_GUILD_Setup_Satellites_Get_Submissions,
                           $NameLib = ANTIGONE_GUILD_Setup_Satellites_Construct_Name,
                           $DescriptionLib = ANTIGONE_GUILD_Setup_Satellites_Construct_Description,
                           $RewardLib = ANTIGONE_GUILD_Setup_Satellites_Construct_Reward,
                           $MinMissions = 4,
                           $MaxMissions = 5,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$ANTIGONE_GUILD_Setup_Satellites.$RewardLib" exact="ANTIGONE_GUILD_Setup_Satellites_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Setup_Satellites_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$achieve_coverage"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Achieve_Coverage__Standard, $MissionType = missiontype.intelligence, $Page = 30205, $TextOffset = [103000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deploy_satellite"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.intelligence, $Page = 30205, $TextOffset = [104000], $Sequence = -1 ]"/>

                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Setup_Satellites_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30205,7000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Setup_Satellites_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30205,7101}"/>
                      <set_value name="this.$Description" exact="{30205,7102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,7111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,7112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="ANTIGONE_GUILD_Setup_Satellites_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="15"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0074" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

            <cue name="ANTIGONE_GUILD_Maintain_Satellites">
              <cues>
                <cue name="ANTIGONE_GUILD_Maintain_Satellites_Register" version="3">
                  <actions>
                    <!--Antigone - Maintain satellites-->
                    <set_value name="$ThreadID" exact="'$ANTIGONE_GUILD_Maintain_Satellites'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Always],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.veryeasy,
                           $SubMissionLib = ANTIGONE_GUILD_Maintain_Satellites_Get_Submissions,
                           $NameLib = ANTIGONE_GUILD_Maintain_Satellites_Construct_Name,
                           $DescriptionLib = ANTIGONE_GUILD_Maintain_Satellites_Construct_Description,
                           $RewardLib = ANTIGONE_GUILD_Maintain_Satellites_Construct_Reward,
                           $MinMissions = 2,
                           $MaxMissions = 3,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$ANTIGONE_GUILD_Maintain_Satellites.$RewardLib" exact="ANTIGONE_GUILD_Maintain_Satellites_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Maintain_Satellites_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$repair_object"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.RepairObject__Standard, $MissionType = missiontype.repair, $Page = 30205, $TextOffset = [105000], $Sequence = -1 ]"/>
                    <!--<set_value name="$Submissions.$repair_dataleak"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.RepairObject__Standard, $MissionType = missiontype.repair, $Page = 30205, $TextOffset = [105100], $Sequence = -1 ]"/>-->

                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Maintain_Satellites_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30205,8000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Maintain_Satellites_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30205,8101}"/>
                      <set_value name="this.$Description" exact="{30205,8102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,8111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,8112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="ANTIGONE_GUILD_Maintain_Satellites_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="60" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_nividiumcrystallite].random]" weight="20" comment="common modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="20s"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0074" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

            <cue name="ANTIGONE_GUILD_Danger_Area">
              <cues>
                <cue name="ANTIGONE_GUILD_Danger_Area_Register" version="3">
                  <actions>
                    <!--Antigone - Danger Area-->
                    <set_value name="$ThreadID" exact="'$ANTIGONE_GUILD_Danger_Area'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Dangerous_Area],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.medium,
                           $SubMissionLib = ANTIGONE_GUILD_Danger_Area_Get_Submissions,
                           $NameLib = ANTIGONE_GUILD_Danger_Area_Construct_Name,
                           $DescriptionLib = ANTIGONE_GUILD_Danger_Area_Construct_Description,
                           $RewardLib = ANTIGONE_GUILD_Danger_Area_Construct_Reward,
                           $MinMissions = 4,
                           $MaxMissions = 5,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$ANTIGONE_GUILD_Danger_Area.$RewardLib" exact="ANTIGONE_GUILD_Danger_Area_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Danger_Area_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$assisted_task"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Assisted_Task__Standard, $MissionType = missiontype.find, $Page = 30231, $TextOffset = [20100] ]"/>
                    <set_value name="$Submissions.$find_object"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.FindObject__Standard, $MissionType = missiontype.find, $Page = 30205, $TextOffset = [106000] ]"/>
                    <set_value name="$Submissions.$resource_lasertowers"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.intelligence, $Page = 30205, $TextOffset = [104100] ]"/>

                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Danger_Area_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30205,9000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="ANTIGONE_GUILD_Danger_Area_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30205,9101}"/>
                      <set_value name="this.$Description" exact="{30205,9102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,9111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30205,9112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="ANTIGONE_GUILD_Danger_Area_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1].random]" weight="20" comment="low modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1].random]" weight="20" comment="low modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="20"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0074" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>


          </cues>
        </cue>

        <!--
        ###################################
        TELADI TRADE GUILD
        ###################################-->
        <cue name="TELADI_GUILD" namespace="this" version="4">
          <actions>
            <!--Common values-->
            <set_value name="$ManagerCue" exact="parent.namespace"/>
            <set_value name="$Faction" exact="faction.teladi"/>
            <set_value name="$MissionGroup" exact="missiongroup.teladi_trade_guild"/>
            <set_value name="$Mission_Contact" exact="null"/>
            <set_value name="$Page" exact="30204" comment="Teladi trade guild page"/>
            <set_value name="$ManagerCue.$MissionGroupCues.{$MissionGroup}" exact="this"/>
            <set_value name="$JoinFee" exact="80000Cr"/>
            <set_value name="$SubscriptionMinRel" exact="$Faction.relation.friend.min"/>
            <set_value name="$DebugChance" exact="$ManagerCue.$DebugChance"/>

            <!--Status-->
            <set_value name="$SubscriptionStatus" exact="null"/>
            <set_value name="$Invited" exact="false"/>
            <set_value name="$IntroducedToContact" exact="false"/>
            <set_value name="$JobsDescribed" exact="false"/>
            <set_value name="$ConflictDescribed" exact="false"/>
            <set_value name="$CooldownTime" exact="-1s"/>

            <!--Stats-->
            <set_value name="$ThreadsCompleted" exact="0"/>
            <set_value name="$ThreadsFailed" exact="0"/>

            <set_value name="$MissionsCompleted" exact="0"/>
            <set_value name="$MissionsFailed" exact="0"/>
          </actions>
          <patch sinceversion="2" state="complete">
            <set_value name="$JoinFee" exact="80000Cr"/>
            <set_value name="$Invited" exact="false"/>

            <do_if value="$Mission_Contact">
              <set_entity_page entity="$Mission_Contact" page="10507"/>
            </do_if>

            <do_if value="$PlacementObject?">
              <set_value name="$PlacementObject" exact="$Faction.headquarters"/>
              <do_if value="$PlacementObject">
                <set_value name="$HQ" exact="$PlacementObject"/>
                <set_value name="$Mission_Contact.$HQ" exact="$PlacementObject" comment="TODO: @Owen hack"/>
              </do_if>
            </do_if>
          </patch>
          <patch sinceversion="3" state="complete">
            <do_if value="$CooldownTime gt (player.age + 5min)">
              <debug_text text="'Reducing mission subscription cooldowntime from ' + $CooldownTime + ' to ' + player.age + 5min" filter="savegame"/>
              <set_value name="$CooldownTime" exact="player.age + 5min"/>
            </do_if>
          </patch>
          <patch sinceversion="4" state="complete">
            <do_if value="not md.$SubscribedMissionGroups?">
              <create_list name="md.$SubscribedMissionGroups"/>
            </do_if>
            <do_if value="$SubscriptionStatus == 'subscribed'">
              <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
            </do_if>
          </patch>
          <cues>
            <cue name="TELADI_GUILD_Init">
              <actions>
                <set_value name="$ContactCreatorCue" exact="TELADI_GUILD_Create_Contact"/>
                <set_value name="$IntroMissionCue" exact="TELADI_GUILD_Introduction"/>

                <!--$SubscriptionStatus:
                - 'unsubscribed'
                - 'probation'
                - 'subscribed'
                - 'cooldown'-->
                <signal_cue_instantly cue="TELADI_GUILD_Set_Subscription_Status" param="'unsubscribed'"/>
              </actions>
            </cue>

            <!--
            ####################
            DEBUG
            ####################-->
            <cue name="TELADI_GUILD_Debug_Reset">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_all exact="$ManagerCue.$Threads.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$Threads.{$i}.$ThreadCue.$Definition.$MissionGroup == $MissionGroup">
                    <signal_cue_instantly cue="$ManagerCue.$Threads.{$i}.$CleanupCue"/>
                  </do_if>
                </do_all>
                <set_value name="$DefinitionKeys" exact="$ManagerCue.$ThreadDefinitions.keys.list"/>
                <do_all exact="$DefinitionKeys.count" counter="$i" reverse="true">
                  <do_if value="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}.$MissionGroup == $MissionGroup">
                    <remove_value name="$ManagerCue.$ThreadDefinitions.{$DefinitionKeys.{$i}}"/>
                  </do_if>
                </do_all>
                <do_if value="$Mission_Contact.isclass.npc">
                  <destroy_object object="$Mission_Contact"/>
                </do_if>
                <set_value name="$Mission_Contact" exact="null"/>
                <reset_cue cue="namespace"/>
                <reset_cue cue="Gamestart" comment="Trigger CalculateThreads again"/>
              </actions>
            </cue>

            <cue name="TELADI_GUILD_Debug_Subscribe" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <signal_cue_instantly cue="TELADI_GUILD_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>

            <!--
            ####################
            SUBSCRIPTION
            ####################-->

            <!--event.param == new status-->
            <cue name="TELADI_GUILD_Set_Subscription_Status" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="
                       event.param == 'unsubscribed' or
                       event.param == 'probation' or
                       event.param == 'subscribed' or
                       event.param == 'cooldown'">

                  <debug_text text="'Changing subscription status from ' + $SubscriptionStatus + ' to ' + event.param" chance="$DebugChance"/>
                  <set_value name="$SubscriptionStatus" exact="event.param"/>

                  <!--Be careful with state change handlers here if the requested state was the same as the previous one-->
                  <do_if value="event.param == 'subscribed' and Gamestart.state == cuestate.complete">
                    <unlock_achievement name="JOIN_TRADE_GUILD" />
                    <signal_cue cue="CalculateThreads"/>
                  </do_if>
                  <do_elseif value="event.param == 'cooldown'">
                    <!--TODO @Owen balance cooldown. Have a harsher cooldown in certain situations?-->
                    <set_value name="$CooldownTime" exact="player.age + 5min"/>
                  </do_elseif>
                  <!-- update global missiongroup-registry -->
                  <do_if value="$SubscriptionStatus == 'subscribed'">
                    <assert value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}" />
                    <do_if value="not md.$SubscribedMissionGroups.indexof.{$MissionGroup}">
                      <append_to_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <remove_from_list name="md.$SubscribedMissionGroups" exact="$MissionGroup"/>
                  </do_else>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown subscription status: ' + event.param + ' [Owen]'"/>
                </do_else>
              </actions>
            </cue>

            <cue name="TELADI_GUILD_Check_Cooldown" instantiate="true" checkinterval="5s">
              <conditions>
                <check_value value="$SubscriptionStatus == 'cooldown' and player.age gt $CooldownTime"/>
              </conditions>
              <actions>
                <debug_text text="player.age + ' Ending  cooldown'" chance="$DebugChance"/>
                <signal_cue_instantly cue="TELADI_GUILD_Set_Subscription_Status" param="'subscribed'"/>
              </actions>
            </cue>

            <!--
            ####################
            CONTACT
            ####################-->

            <!--event.param == Cloned list of the local host sectors to search for a placement object (or null to fallback to any owned space in the galaxy)-->
            <cue name="TELADI_GUILD_Create_Contact">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <set_value name="$PlacementObject" exact="$Faction.headquarters"/>
                <do_if value="$PlacementObject">
                  <check_object result="this.$Result" object="$PlacementObject">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                  </check_object>
                  <do_if value="not this.$Result">
                    <set_value name="$PlacementObject" exact="null"/>
                  </do_if>
                </do_if>
                <do_if value="not $PlacementObject.exists">
                  <!--As we're not pointing the player to these stations for the intro mission, only find important stations-->
                  <find_station_by_true_owner name="$PlacementObject" faction="$Faction" space="player.sector">
                    <match_content class="class.walkablemodule" checkoperational="true"/>
                    <match_any>
                      <match shipyard="true"/>
                      <match equipmentdock="true"/>
                      <match tradestation="true"/>
                    </match_any>
                  </find_station_by_true_owner>
                </do_if>

                <do_if value="$PlacementObject">
                  <do_if value="not $Mission_Contact.isclass.npc">
                    <create_cue_actor name="$Mission_Contact" cue="namespace" group="teladi.factionrepresentative">
                      <page exact="10507"/>
                      <owner exact="$Faction"/>
                      <skills>
                        <skill type="management"  min="12"  max="15"/>
                        <skill type="morale"      min="9"  max="15"/>
                        <skill type="piloting"    min="3"   max="15"/>
                        <skill type="engineering" min="3"   max="15"/>
                        <skill type="boarding"    min="3"   max="15"/>
                      </skills>
                    </create_cue_actor>
                    <do_if value="$Mission_Contact">
                      <set_entity_type entity="$Mission_Contact" type="entitytype.crowd"/>
                      <set_entity_traits entity="$Mission_Contact" missionactor="true" remote="false" customhandler="true" />
                      <debug_text text="'Created mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' for placement on ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>

                      <set_value name="$HQ" exact="$PlacementObject"/>
                      <set_value name="$Mission_Contact.$HQ" exact="$PlacementObject"/>
                    </do_if>
                  </do_if>
                </do_if>

                <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.exists">
                  <reset_cue cue="this"/>
                </do_if>
              </actions>
              <cues>
                <cue name="TELADI_GUILD_Place_Contact_Init" version="2">
                  <actions>
                    <do_if value="$PlacementObject.attention ge attention.nearby">
                      <signal_cue cue="TELADI_GUILD_Place_Contact_Create_Interior"/>
                    </do_if>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="not $PlacementObject.isoperational">
                      <set_value name="$PlacementObject" exact="null"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                  </patch>
                </cue>

                <cue name="TELADI_GUILD_Place_Contact_Create_Interior" version="2">
                  <conditions>
                    <check_any>
                      <event_cue_signalled/>
                      <check_all>
                        <event_object_changed_attention object="$PlacementObject"/>
                        <check_value value="event.param ge attention.nearby"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <debug_text text="'Attempting to create dynamic interior to place NPC'" chance="$DebugChance"/>
                    <get_room_definition macro="$StartCorridorMacro" tags="tag.corridor" race="$Faction.primaryrace" />
                    <do_if value="not $StartCorridorMacro">
                      <get_room_definition macro="$StartCorridorMacro" tags="tag.corridor" />
                    </do_if>

                    <get_room_definition macro="$StartRoomMacro" doors="$RoomDoors" tags="tag.office" race="$Faction.primaryrace" />
                    <do_if value="not $StartRoomMacro">
                      <get_room_definition macro="$StartRoomMacro" doors="$RoomDoors" tags="tag.office" />
                    </do_if>

                    <create_dynamic_interior object="$PlacementObject" corridor="$StartCorridorMacro" room="$StartRoomMacro" name="{30204,3}" interiorname="$DynamicInterior" corridorname="$DynamicCorridor" roomname="$DynamicRoom" />
                    <assert value="$DynamicInterior" text="'Unable to create dynamic interior for contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' [Owen]'"/>
                    <do_if value="$DynamicInterior">
                      <find_npc_slot name="$NPC_Slot" object="$DynamicRoom" tags="tag.control"/>
                      <do_if value="not $NPC_Slot">
                        <find_npc_slot name="$NPC_Slot" object="$DynamicRoom"/>
                      </do_if>
                      <assert value="$NPC_Slot" text="'Can not find slot for mission contact in ' + $DynamicInterior + ' ' + $DynamicInterior.knownname + ' [Owen]'"/>
                      <do_if value="$NPC_Slot">
                        <add_actor_to_room actor="$Mission_Contact" slot="$NPC_Slot"/>
                        <debug_text text="'Added mission contact ' + $Mission_Contact + ' ' + $Mission_Contact.knownname + ' to ' + $PlacementObject + ' ' + $PlacementObject.knownname" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                  </actions>
                  <patch sinceversion="2" state="waiting">
                    <reset_cue cue="TELADI_GUILD_Place_Contact_Create_Interior"/>
                  </patch>
                  <cues>
                    <cue name="TELADI_GUILD_Place_Contact_WithinDynamicInterior_Destroy">
                      <conditions>
                        <event_object_interiors_despawning object="$PlacementObject"/>
                      </conditions>
                      <actions>
                        <remove_actor_from_room actor="$Mission_Contact"/>
                        <include_actions ref="Remove_Dynamic_Interior"/>
                        <do_if value="$Faction.isactive">
                          <reset_cue cue="TELADI_GUILD_Place_Contact_Create_Interior"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                          <reset_cue cue="$ContactCreatorCue"/>
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="TELADI_GUILD_Contact_Killed">
                  <conditions>
                    <event_object_destroyed object="$Mission_Contact"/>
                  </conditions>
                  <actions>
                    <set_value name="$Mission_Contact" exact="null"/>
                    <reset_cue cue="TELADI_GUILD_Create_Contact"/>
                  </actions>
                </cue>

                <cue name="TELADI_GUILD_Placement_Object_Destroyed">
                  <conditions>
                    <event_object_destroyed object="$PlacementObject"/>
                  </conditions>
                  <actions>
                    <include_actions ref="Remove_Dynamic_Interior"/>
                    <set_value name="$PlacementObject" exact="null"/>
                    <reset_cue cue="$ContactCreatorCue"/>
                  </actions>
                </cue>

                <cue name="TELADI_GUILD_Contact__Faction_Deactivated">
                  <conditions>
                    <event_faction_deactivated faction="$Faction"/>
                  </conditions>
                  <actions>
                    <do_if value="TELADI_GUILD_Place_Contact_Create_Interior.state == cuestate.waiting">
                      <debug_text text="'Faction is now inactive. Deactivating contact handling.'"/>
                      <reset_cue cue="$ContactCreatorCue"/>
                    </do_if>
                    <!--else, the depawning of the interior must happen-->
                  </actions>
                </cue>

                <cue name="TELADI_GUILD_Contact_Conversation_Started" instantiate="true">
                  <conditions>
                    <check_any>
                      <event_conversation_started actor="$Mission_Contact" />
                      <event_conversation_returned_to_section actor="$Mission_Contact" />
                    </check_any>
                    <check_value value="event.param == 'default' and $Faction.isactive" />
                  </conditions>
                  <actions>
                    <do_if value="event.name == 'event_conversation_started'">
                      <substitute_text text="$JoinPlayerChoiceText" source="{1002,3000407}" comment="Join... \($CREDITS${1001,101}\)">
                        <replace string="'$CREDITS$'" with="$JoinFee.formatted.default"/>
                      </substitute_text>
                      <do_if value="TELADI_GUILD_Introduction.hasmission">
                        <remove_mission cue="TELADI_GUILD_Introduction" type="completed"/>
                        <signal_cue cue="TELADI_GUILD_Cancel_Intro_Talkto"/>
                        <reset_cue cue="TELADI_GUILD_Introduction"/>
                      </do_if>
                      <do_if value="$SubscriptionStatus == 'unsubscribed' or $SubscriptionStatus == 'cooldown'">
                        <do_if value="player.entity.isfemale">
                          <add_npc_line speaker="$Mission_Contact" line="3007" comment="Pilot. (female)"/>
                        </do_if>
                        <do_else>
                          <add_npc_line speaker="$Mission_Contact" line="3006" comment="Pilot. (male)"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <!--More familiar greeting-->
                        <add_npc_line speaker="$Mission_Contact" line="3003" comment="Captain."/>
                      </do_else>
                    </do_if>

                    <include_actions ref="TELADI_GUILD_Contact_Player_Lines"/>
                  </actions>
                </cue>

                <!--TODO @Owen intro lines-->
                <library name="TELADI_GUILD_Contact_Player_Lines">
                  <actions>
                    <!--Specific sections-->
                    <do_if value="event.name == 'event_conversation_next_section' and (event.param == 'subscribe_request' or event.param == 'subscribe_request_2')">
                      <add_player_choice text="{1002,3000401}" section="subscribe_ask_info" comment="What kind of jobs can I expect?"/>
                      <add_player_choice text="$JoinPlayerChoiceText" section="subscribe_start" position="top_right" comment="Let's get started."/>
                    </do_if>
                    <do_elseif value="event.name == 'event_conversation_next_section' and event.param == 'subscribe_ask_info'">
                      <add_player_choice text="$JoinPlayerChoiceText" section="subscribe_start" position="top_right" comment="Let's get started."/>
                    </do_elseif>

                    <!--Start or other sections-->
                    <do_else>
                      <do_if value="$SubscriptionStatus == 'unsubscribed'">
                        <do_if value="not $Invited">
                          <!--Intro mission is not in a state where the player was told to come.-->
                          <add_player_choice text="{1002,3000406}" section="subscribe_request_2" comment="Is there some work going?"/>
                        </do_if>
                        <do_elseif value="$IntroducedToContact">
                          <add_player_choice text="{1002,3000403}" section="subscribe_start" position="top_right" comment="Shall I get started?"/>
                          <do_if value="not $JobsDescribed">
                            <add_player_choice text="{1002,3000401}" section="subscribe_ask_info" comment="What kind of jobs can I expect?"/>
                          </do_if>
                        </do_elseif>
                        <do_else>
                          <add_player_choice text="{1002,3020401}" section="subscribe_request" comment="I'm here about the trade guild."/>
                        </do_else>
                      </do_if>
                      <do_elseif value="$SubscriptionStatus == 'probation'">
                        <add_player_choice text="{1002,3000405}" section="abort_intro" comment="I would like to stop."/>
                      </do_elseif>
                    </do_else>
                  </actions>
                </library>

                <cue name="TELADI_GUILD_Contact_NextSection" instantiate="true">
                  <conditions>
                    <event_conversation_next_section actor="$Mission_Contact"/>
                  </conditions>
                  <actions>
                    <set_value name="$AddPlayerChoices" exact="true"/>
                    <do_if value="event.param == 'subscribe_request'">
                      <set_value name="$IntroducedToContact" exact="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30204003" hidechoices="true" comment="It is good to see you. Our guild is currently seeking to increase our presence in the market."/>
                      <add_npc_line speaker="$Mission_Contact" line="30204004" hidechoices="true" comment="To retain our lead in the market, we're offering membership to a select number of trusted individuals."/>
                      <add_npc_line speaker="$Mission_Contact" line="30204005" hidechoices="true" comment="This is a one-time investment, after which you will have access to a number of job listings."/>
                    </do_if>
                    <do_elseif value="event.param == 'subscribe_ask_info'">
                      <set_value name="$JobsDescribed" exact="true"/>
                      <add_npc_line speaker="$Mission_Contact" line="30204006" hidechoices="true" comment="As you can expect, most jobs will involve generating profit but we also require combat pilots."/>
                      <add_npc_line speaker="$Mission_Contact" line="30204007" hidechoices="true" comment="We must protect our interests and seek out new opportunities. You can help us do that."/>
                      <add_npc_line speaker="$Mission_Contact" line="30204008" hidechoices="true" comment="What do you say to this generous offer? We would be happy for you to join us."/>
                    </do_elseif>
                    <do_elseif value="event.param == 'subscribe_request_2'">
                      <!--This section is for when the intro mission is not currently active for the player to accept it. Either reject the player or signal the intro mission to activate.-->
                      <include_actions ref="TELADI_GUILD_Can_Join_Subscription"/>
                      <do_if value="$CanJoin">
                        <!--Player shouldn't usually get access to this section as that would mean unlocking the interior while not triggering the intro mission.-->
                        <add_npc_line speaker="$Mission_Contact" line="30204003" hidechoices="true" comment="It is good to see you. Our guild is currently seeking to increase our presence in the market."/>
                        <add_npc_line speaker="$Mission_Contact" line="30204004" hidechoices="true" comment="To retain our lead in the market, we're offering membership to a select number of trusted individuals."/>
                        <add_npc_line speaker="$Mission_Contact" line="30204005" hidechoices="true" comment="This is a one-time investment, after which you will have access to a number of job listings."/>
                      </do_if>
                      <do_else>
                        <set_value name="$AddPlayerChoices" exact="false"/>
                        <add_npc_line speaker="$Mission_Contact" line="30204009" hidechoices="true" comment="(reject)You will need to become a member of our guild first."/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'subscribe_start'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <signal_cue cue="TELADI_GUILD_Player_Requested_Subscription"/>
                      <do_if value="player.money ge $JoinFee">
                        <reward_player money="-$JoinFee"/>
                        <signal_cue_instantly cue="TELADI_GUILD_Set_Subscription_Status" param="'subscribed'"/>
                        <add_npc_line speaker="$Mission_Contact" line="30204010" hidechoices="true" comment="Very good. I'll update our database right away. You will now be able to see jobs on offer in the areas we operate."/>
                        <add_npc_line speaker="$Mission_Contact" line="30204011" hidechoices="true" comment="We expect good things from you."/>
                      </do_if>
                      <do_else>
                        <add_npc_line speaker="$Mission_Contact" line="30204012" hidechoices="true" comment="It appears you do not have the necessary funds available."/>
                      </do_else>
                    </do_elseif>
                    <do_elseif value="event.param == 'abort_intro'">
                      <set_value name="$AddPlayerChoices" exact="false"/>
                      <signal_cue cue="TELADI_GUILD_Player_Requests_Intro_Abort"/>
                    </do_elseif>
                    <do_else>
                      <set_value name="$AddPlayerChoices" exact="false"/>
                    </do_else>

                    <do_if value="$AddPlayerChoices">
                      <include_actions ref="TELADI_GUILD_Contact_Player_Lines"/>
                    </do_if>
                  </actions>
                </cue>
              </cues>
            </cue>


            <!--event.param = table[
            $cue                = thread cue namespace,
            $completedmissions  = number of completed missions,
            $failedmissions     = number of failed missions]-->
            <cue name="TELADI_GUILD_Thread_Finished" instantiate="true">
              <conditions>
                <event_cue_signalled cue="Cleanup_Thread"/>
                <check_value value="event.param.$cue.$Definition.$MissionGroup == $MissionGroup"/>
                <check_value value="$ManagerCue.$ActiveThreads.indexof.{event.param.$cue}"/>
              </conditions>
              <actions>
                <!--TODO @Owen spoken feedback?-->
                <debug_text text="'player finished ' + event.param.$cue + ' for ' + $MissionGroup + '. Completed missions: ' + event.param.$completedmissions + ' - Failed missions: ' + event.param.$failedmissions" chance="$DebugChance"/>

                <set_value name="$MissionsCompleted" operation="add" exact="event.param.$completedmissions"/>
                <set_value name="$MissionsFailed" operation="add" exact="event.param.$completedmissions"/>

                <do_if value="event.param.$failed">
                  <set_value name="$ThreadsFailed" operation="add"/>
                  <signal_cue_instantly cue="TELADI_GUILD_Set_Subscription_Status" param="'cooldown'"/>
                </do_if>
                <do_else>
                  <set_value name="$ThreadsCompleted" operation="add"/>
                  <signal_cue cue="CalculateThreads"/>
                </do_else>
              </actions>
            </cue>

            <!--
            ####################
            INTRODUCTION
            ####################-->

            <cue name="TELADI_GUILD_Player_Requested_Subscription" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>

            <cue name="TELADI_GUILD_Player_Requests_Intro_Abort" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
            </cue>

            <library name="TELADI_GUILD_Can_Join_Subscription">
              <actions>
                <!--TODO @Owen other conditions based on if they failed a previous intro mission and need a cooldown-->
                <set_value name="$CanActivateIntro" exact="false"/>
                <do_if value="$Faction.relationto.{faction.player} ge $SubscriptionMinRel">
                  <set_value name="$CanActivateIntro" exact="true"/>
                </do_if>
                <do_else>
                  <debug_text text="'player does not meet minimum relationship requirement'" chance="$DebugChance"/>
                </do_else>
              </actions>
            </library>

            <cue name="TELADI_GUILD_INTRO_PATCH" onfail="cancel">
              <conditions>
                <check_value value="TELADI_GUILD_Introduction.state == cuestate.complete"/>
              </conditions>
              <actions>
                <reset_cue cue="TELADI_GUILD_Introduction"/>
              </actions>
              <cues>
                <cue name="TELADI_GUILD_INTRO_PATCH_DELAY">
                  <delay exact="1s"/>
                  <actions>
                    <signal_cue cue="TELADI_GUILD_Introduction"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="TELADI_GUILD_Introduction" version="2">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$Faction.isactive"/>
              </conditions>
              <actions>
                <set_value name="$Invited" exact="false"/>
                <do_if value="not $Mission_Contact.isclass.npc or not $PlacementObject.isoperational">
                  <debug_text text="'Mission contact was not yet created for ' + $MissionGroup + '. Triggering creation now. [Owen]'" filter="error"/>
                  <signal_cue_instantly cue="$ContactCreatorCue"/>
                </do_if>
                <do_if value="$Mission_Contact.isclass.npc and $PlacementObject.isoperational">
                  <debug_text text="'Starting intro mission handling for ' + $MissionGroup" chance="$DebugChance"/>
                  <set_value name="$MissionIntroCue" exact="this"/>
                  <signal_cue_instantly cue="TELADI_GUILD_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
                <do_else>
                  <debug_text text="'Unable to start intro mission as there is no placement object'"/>
                  <reset_cue cue="TELADI_GUILD_Introduction"/>
                </do_else>
              </actions>
              <patch sinceversion="2" state="complete">
                <do_if value="$SubscriptionStatus == 'cooldown'">
                  <debug_text text="'Fixing trade mission which is still of state cooldown when it should be unsubscribed'" filter="savegame"/>
                  <signal_cue_instantly cue="TELADI_GUILD_Set_Subscription_Status" param="'unsubscribed'"/>
                </do_if>
              </patch>
              <cues>
                <cue name="TELADI_GUILD_Introduction_Station_Destroyed">
                  <conditions>
                    <event_object_destroyed object="$PlacementObject"/>
                    <!--Once landed, the DisconnectedActorObjectiveLibrary will handle the station being destroyed-->
                    <check_value value="TELADI_GUILD_Introduction_Player_Landed.state == cuestate.waiting"/>
                  </conditions>
                  <actions>
                    <reset_cue cue="$MissionIntroCue"/>
                  </actions>
                </cue>
                <cue name="TELADI_GUILD_Introduction_Player_Landed">
                  <conditions>
                    <event_object_docked_at container="$PlacementObject"/>
                    <check_value value="player.ship == event.param and $Mission_Contact.hascontext.{$PlacementObject}"/>
                  </conditions>
                  <delay exact="5s"/>
                  <actions>
                    <do_if value="player.entity.hascontext.{$PlacementObject}">
                      <speak actor="$Mission_Contact" priority="90">
                        <text line="30204001" comment="Greetings pilot. I represent the well-respected Teladi Trade Guild and I have a lucrative proposition for you."/>
                        <text line="30204002" comment="If you're interested, come find me."/>
                      </speak>
                    </do_if>
                    <do_else>
                      <reset_cue cue="TELADI_GUILD_Introduction_Player_Landed"/>
                    </do_else>
                  </actions>
                  <cues>

                    <!--TODO @Owen - remove when player flies away? Put on cooldown?-->
                    <cue name="TELADI_GUILD_Introduction_Offer">
                      <conditions>
                        <event_speak_finished actor="$Mission_Contact" line="30204001" comment="the line passed as the event.param2 is always the first spoken line"/>
                      </conditions>
                      <actions>
                        <debug_text text="'Player has passed the conditions for the intro mission to be available for group: ' + $MissionGroup" chance="$DebugChance"/>
                        <set_value name="$Invited" exact="true"/>
                        <create_mission cue="$MissionIntroCue" type="missiontype.fight" name="{30204,1}" description="{30204,2}" difficulty="level.trivial" faction="$Faction" group="$MissionGroup">
                          <briefing>
                            <objective step="1" action="objective.talkto" object="$Mission_Contact"/>
                          </briefing>
                        </create_mission>
                        <signal_cue_instantly cue="md.GenericMissions.DisconnectedActorObjectiveLibrary" param="table[
                                              $actor = $Mission_Contact,
                                              $object = $PlacementObject,
                                              $missioncue = $MissionIntroCue,
                                              $cancelcue = TELADI_GUILD_Cancel_Intro_Talkto__2,
                                              $libfailedcue = TELADI_GUILD_Intro_Abort__2,
                                              $objective = objective.talkto,
                                              $debugchance = $DebugChance]"/>
                      </actions>
                    </cue>

                    <!--TODO @Owen #Release rename without the __2. Added for patch reasons-->
                    <cue name="TELADI_GUILD_Intro_Abort__2" version="2">
                      <conditions>
                        <check_any>
                          <event_mission_aborted cue="$MissionIntroCue"/>
                          <event_cue_signalled cue="TELADI_GUILD_Player_Requests_Intro_Abort"/>
                          <event_cue_signalled/>
                          <event_object_destroyed object="$Mission_Contact"/>
                          <event_object_destroyed object="$PlacementObject"/>
                          <event_faction_deactivated faction="$Faction"/>
                        </check_any>
                      </conditions>
                      <actions>
                        <debug_text text="'Aborting due to ' + event.name" chance="$DebugChance"/>
                        <set_value name="$Invited" exact="false"/>
                        <do_if value="$MissionIntroCue.hasmission">
                          <remove_mission cue="$MissionIntroCue" type="aborted"/>
                        </do_if>
                        <signal_cue_instantly cue="TELADI_GUILD_Set_Subscription_Status" param="'unsubscribed'"/>
                        <reset_cue cue="TELADI_GUILD_Introduction"/>
                      </actions>
                      <patch sinceversion="2" state="waiting">
                        <set_value name="$Patch_CheckLibraryInstance" exact="true"/>
                      </patch>
                    </cue>

                    <cue name="TELADI_GUILD_Patch_Check_Talkto_Lib" onfail="cancel">
                      <conditions>
                        <check_value value="@$Patch_CheckLibraryInstance"/>
                      </conditions>
                      <actions>
                        <do_if value="not @md.GenericMissions.DisconnectedActorObjectiveLibrary.$Patch_ActiveMissionCues.indexof.{$MissionIntroCue}">
                          <debug_text text="'Talkto helper instance no longer exists for ' + $MissionIntroCue + ' - aborting intro mission'" filter="savegame"/>
                          <signal_cue cue="TELADI_GUILD_Intro_Abort__2"/>
                        </do_if>
                        <remove_value name="$Patch_CheckLibraryInstance"/>
                      </actions>
                    </cue>

                    <!--TODO @Owen review this!-->
                    <!--TODO @Owen #Release rename without the __2. Added for patch reasons-->
                    <cue name="TELADI_GUILD_Cancel_Intro_Talkto__2" instantiate="true">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

            <!--
            ####################
            THREADS
            ####################-->
            <cue name="TELADI_GUILD_Remove_Obstacles">
              <cues>
                <cue name="TELADI_GUILD_Remove_Obstacles_Register" version="3">
                  <actions>
                    <!--Teladi - Remove Obstacles-->
                    <set_value name="$ThreadID" exact="'$TELADI_GUILD_remove_obstacles'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Always],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.easy,
                           $SubMissionLib = TELADI_GUILD_Remove_Obstacles_Get_Submissions,
                           $NameLib = TELADI_GUILD_Remove_Obstacles_Construct_Name,
                           $DescriptionLib = TELADI_GUILD_Remove_Obstacles_Construct_Description,
                           $RewardLib = TELADI_GUILD_Remove_Obstacles_Construct_Reward,
                           $MinMissions = 1,
                           $MaxMissions = 3,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$TELADI_GUILD_remove_obstacles.$RewardLib" exact="TELADI_GUILD_Remove_Obstacles_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Remove_Obstacles_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$clear_explosives"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Destroy_Objects__Clear_Explosives,  $MissionType = missiontype.destroy, $Page = 30204, $TextOffset = [101000, 101100, 101200], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$rescue_ship1"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Rescue_Ship__Standard,              $MissionType = missiontype.rescue, $Page = 30204, $TextOffset = [108000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$rescue_ship2"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Rescue_Ship_2__Standard,            $MissionType = missiontype.rescue, $Page = 30204, $TextOffset = [108100], $Sequence = -1 ]"/>

                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Remove_Obstacles_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30204,3000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Remove_Obstacles_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30204,3101}"/>
                      <set_value name="this.$Description" exact="{30204,3102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,3111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,3112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="TELADI_GUILD_Remove_Obstacles_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_tuningsoftware, ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="7" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_tuningsoftware, [ware.modpart_shieldgeneratorcoil_t1, ware.modpart_shieldgeneratorcoil_t2].random]" weight="6" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="7" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="6" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shieldgeneratorcoil_t3,ware.modpart_shipnanoweave_t3].random]" weight="4" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="13"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="13"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="4"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0080" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

            <cue name="TELADI_GUILD_Increase_Portfolio">
              <cues>
                <cue name="TELADI_GUILD_Increase_Portfolio_Register" version="3">
                  <actions>
                    <!--Teladi - Increase Portfolio -->
                    <set_value name="$ThreadID" exact="'$TELADI_GUILD_Increase_Portfolio'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Always],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.hard,
                           $SubMissionLib = TELADI_GUILD_Increase_Portfolio_Get_Submissions,
                           $NameLib = TELADI_GUILD_Increase_Portfolio_Construct_Name,
                           $DescriptionLib = TELADI_GUILD_Increase_Portfolio_Construct_Description,
                           $RewardLib = TELADI_GUILD_Increase_Portfolio_Construct_Reward,
                           $MinMissions = 4,
                           $MaxMissions = 5,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$TELADI_GUILD_Increase_Portfolio.$RewardLib" exact="TELADI_GUILD_Increase_Portfolio_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Increase_Portfolio_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$assisted_task"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Assisted_Task__Standard,    $MissionType = missiontype.find,    	  $Page = 30231, $TextOffset = [10000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$hack_panel"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.HackPanel__Standard,        $MissionType = missiontype.trade,       $Page = 30204, $TextOffset = [107000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$exact_fleet"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Get_Exact_Fleet__Standard,  $MissionType = missiontype.destroy,     $Page = 30204, $TextOffset = [102000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$find_resources"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Find_Resources__Standard,   $MissionType = missiontype.trade,       $Page = 30204, $TextOffset = [100000, 100100], $Sequence = -1 ]"/>
                    <!--<set_value name="$Submissions.$retrieve_dead_drop"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Retrieve_Dead_Drop__Standard,   $MissionType = missiontype.transport,   $Page = 30232, $TextOffset = [20100], $Sequence = -1 ]"/>
                    -->
                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Increase_Portfolio_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30204,4000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Increase_Portfolio_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30204,4101}"/>
                      <set_value name="this.$Description" exact="{30204,4102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,4111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,4112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="TELADI_GUILD_Increase_Portfolio_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="13" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="12" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_shipnanoweave_t3].random]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="13"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="12"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="5"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0080" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

            <cue name="TELADI_GUILD_Help_Trade_Operation">
              <cues>
                <cue name="TELADI_GUILD_Help_Trade_Operation_Register" version="3">
                  <actions>
                    <!--Teladi - Help Trade Operation-->
                    <set_value name="$ThreadID" exact="'$TELADI_GUILD_Help_Trade_Operation'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Always],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.veryeasy,
                           $SubMissionLib = TELADI_GUILD_Help_Trade_Operation_Get_Submissions,
                           $NameLib = TELADI_GUILD_Help_Trade_Operation_Construct_Name,
                           $DescriptionLib = TELADI_GUILD_Help_Trade_Operation_Construct_Description,
                           $RewardLib = TELADI_GUILD_Help_Trade_Operation_Construct_Reward,
                           $MinMissions = 4,
                           $MaxMissions = 5,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$TELADI_GUILD_Help_Trade_Operation.$RewardLib" exact="TELADI_GUILD_Help_Trade_Operation_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Help_Trade_Operation_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$assisted_task"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Assisted_Task__Standard,    $MissionType = missiontype.find,      $Page = 30231, $TextOffset = [10000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$get_item"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Bring_Item__Standard,       $MissionType = missiontype.trade,     $Page = 30204, $TextOffset = [109000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$find_resources"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Find_Resources__Standard, $MissionType = missiontype.trade, $Page = 30204, $TextOffset = [100000, 100100], $Sequence = -1, $NextMission = '$achieve_coverage' ]"/>
                    <set_value name="$Submissions.$achieve_coverage"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Achieve_Coverage__Standard,  $MissionType = missiontype.intelligence, $Page = 30204, $TextOffset = [103000], $FollowUp = true ]"/>

                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Help_Trade_Operation_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30204,5000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Help_Trade_Operation_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30204,5101}"/>
                      <set_value name="this.$Description" exact="{30204,5102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,5111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,5112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="TELADI_GUILD_Help_Trade_Operation_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_nividiumcrystallite, [ware.modpart_shipnanoweave_t1, ware.modpart_shipnanoweave_t2].random]" weight="15" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="15"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0080" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

            <cue name="TELADI_GUILD_Price_Dumping">
              <cues>
                <cue name="TELADI_GUILD_Price_Dumping_Register" version="3">
                  <actions>
                    <!--Teladi - Price Dumping-->
                    <set_value name="$ThreadID" exact="'$TELADI_GUILD_Price_Dumping'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Always],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.veryeasy,
                           $SubMissionLib = TELADI_GUILD_Price_Dumping_Get_Submissions,
                           $NameLib = TELADI_GUILD_Price_Dumping_Construct_Name,
                           $DescriptionLib = TELADI_GUILD_Price_Dumping_Construct_Description,
                           $RewardLib = TELADI_GUILD_Price_Dumping_Construct_Reward,
                           $MinMissions = 4,
                           $MaxMissions = 5,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$TELADI_GUILD_Price_Dumping.$RewardLib" exact="TELADI_GUILD_Price_Dumping_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Price_Dumping_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$find_resources"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Find_Resources__Standard,  $MissionType = missiontype.trade, $Page = 30204, $TextOffset = [100000, 100100], $Sequence = -1 ]"/>

                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Price_Dumping_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30204,6000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Price_Dumping_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30204,6101}"/>
                      <set_value name="this.$Description" exact="{30204,6102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,6111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,6112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="TELADI_GUILD_Price_Dumping_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="13" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, [ware.modpart_enginefuelinjector_t1, ware.modpart_enginefuelinjector_t2].random]" weight="12" comment="complete mod"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_enginefuelinjector_t3].random]" weight="5" comment="rare modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="13"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="12"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_4, ware.inv_seminar_management_4].random]" weight="5"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0080" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

            <cue name="TELADI_GUILD_Setup_Satellites">
              <cues>
                <cue name="TELADI_GUILD_Setup_Satellites_Register" version="3">
                  <actions>
                    <!--Teladi - Setup Satellites-->
                    <set_value name="$ThreadID" exact="'$TELADI_GUILD_Setup_Satellites'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Always],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.veryeasy,
                           $SubMissionLib = TELADI_GUILD_Setup_Satellites_Get_Submissions,
                           $NameLib = TELADI_GUILD_Setup_Satellites_Construct_Name,
                           $DescriptionLib = TELADI_GUILD_Setup_Satellites_Construct_Description,
                           $RewardLib = TELADI_GUILD_Setup_Satellites_Construct_Reward,
                           $MinMissions = 4,
                           $MaxMissions = 5,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$TELADI_GUILD_Setup_Satellites.$RewardLib" exact="TELADI_GUILD_Setup_Satellites_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Setup_Satellites_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$achieve_coverage"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Achieve_Coverage__Standard, $MissionType = missiontype.intelligence, $Page = 30204, $TextOffset = [103000], $Sequence = -1 ]"/>
                    <set_value name="$Submissions.$deploy_satellite"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.intelligence, $Page = 30204, $TextOffset = [104000], $Sequence = -1 ]"/>

                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Setup_Satellites_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30204,7000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Setup_Satellites_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30204,7101}"/>
                      <set_value name="this.$Description" exact="{30204,7102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,7111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,7112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="TELADI_GUILD_Setup_Satellites_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1].random]" weight="15" comment="modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="15"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_3, ware.inv_seminar_management_3].random]" weight="15"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0080" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

            <cue name="TELADI_GUILD_Maintain_Satellites">
              <cues>
                <cue name="TELADI_GUILD_Maintain_Satellites_Register" version="3">
                  <actions>
                    <!--Teladi - Maintain Satellites-->
                    <set_value name="$ThreadID" exact="'$TELADI_GUILD_Maintain_Satellites'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Always],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.veryeasy,
                           $SubMissionLib = TELADI_GUILD_Maintain_Satellites_Get_Submissions,
                           $NameLib = TELADI_GUILD_Maintain_Satellites_Construct_Name,
                           $DescriptionLib = TELADI_GUILD_Maintain_Satellites_Construct_Description,
                           $RewardLib = TELADI_GUILD_Maintain_Satellites_Construct_Reward,
                           $MinMissions = 2,
                           $MaxMissions = 3,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$TELADI_GUILD_Maintain_Satellites.$RewardLib" exact="TELADI_GUILD_Maintain_Satellites_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Maintain_Satellites_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$repair_object"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.RepairObject__Standard, $MissionType = missiontype.repair, $Page = 30204, $TextOffset = [105000], $Sequence = -1 ]"/>
                    <!--<set_value name="$Submissions.$repair_dataleak"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.RepairObject__Standard, $MissionType = missiontype.repair, $Page = 30204, $TextOffset = [105100], $Sequence = -1 ]"/>-->

                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Maintain_Satellites_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30204,8000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Maintain_Satellites_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30204,8101}"/>
                      <set_value name="this.$Description" exact="{30204,8102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,8111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,8112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="TELADI_GUILD_Maintain_Satellites_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="60" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_nividiumcrystallite].random]" weight="20" comment="common modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2, ware.inv_seminar_piloting_1, ware.inv_seminar_management_1].random]" weight="20"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0080" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

            <cue name="TELADI_GUILD_Danger_Area">
              <cues>
                <cue name="TELADI_GUILD_Danger_Area_Register" version="3">
                  <actions>
                    <!--Teladi - Danger Area-->
                    <set_value name="$ThreadID" exact="'$TELADI_GUILD_Danger_Area'"/>
                    <set_value name="$Thread" exact="table[
                           $ID = $ThreadID,
                           $Faction = $Faction,
                           $MissionGroup = $MissionGroup,
                           $ThreadConditionLibs = [Situation__Dangerous_Area],
                           $ThreadType = 'sequential',
                           $MissionType = missiontype.trade,
                           $Difficulty = level.medium,
                           $SubMissionLib = TELADI_GUILD_Danger_Area_Get_Submissions,
                           $NameLib = TELADI_GUILD_Danger_Area_Construct_Name,
                           $DescriptionLib = TELADI_GUILD_Danger_Area_Construct_Description,
                           $RewardLib = TELADI_GUILD_Danger_Area_Construct_Reward,
                           $MinMissions = 4,
                           $MaxMissions = 5,
                           $ThreadAbortRelation = -0.00064]"/>

                    <assert value="not $ManagerCue.$ThreadDefinitions.{$ThreadID}?" text="'Thread definition ' + $ThreadID + ' already exists in this table [Owen]'"/>
                    <set_value name="$ManagerCue.$ThreadDefinitions.{$ThreadID}" exact="$Thread"/>
                  </actions>
                  <patch sinceversion="3" state="complete">
                    <set_value name="$ManagerCue.$ThreadDefinitions.$TELADI_GUILD_Danger_Area.$RewardLib" exact="TELADI_GUILD_Danger_Area_Construct_Reward"/>
                  </patch>
                </cue>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Danger_Area_Get_Submissions">
                  <actions>
                    <set_value name="$Submissions" exact="table[]"/>
                    <set_value name="$Submissions.$assisted_task"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.Assisted_Task__Standard, $MissionType = missiontype.find, $Page = 30231, $TextOffset = [10100] ]"/>
                    <set_value name="$Submissions.$find_object"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.FindObject__Standard, $MissionType = missiontype.find, $Page = 30204, $TextOffset = [106000] ]"/>
                    <set_value name="$Submissions.$resource_lasertowers"
                                 exact="table[$Cue = md.X4Ep1_Trade_Subscriptions.DeployInPlace__Standard,    $MissionType = missiontype.intelligence, $Page = 30204, $TextOffset = [104100] ]"/>

                    <set_value name="$New_Thread.$Submissions" exact="$Submissions"/>
                  </actions>
                </library>

                <!--Called from CalculateThreads. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Danger_Area_Construct_Name">
                  <actions>
                    <do_any>
                      <set_value name="this.$Name" exact="{30204,9000}"/>
                    </do_any>
                  </actions>
                </library>

                <!--Called from CalculateThreads where several values are set to help decide the briefing text. Result saved to $New_Thread. Namespace is not this parent.-->
                <library name="TELADI_GUILD_Danger_Area_Construct_Description">
                  <actions>
                    <do_any>
                      <set_value name="this.$Description" exact="{30204,9101}"/>
                      <set_value name="this.$Description" exact="{30204,9102}"/>
                    </do_any>

                    <do_any>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,9111}"/>
                      <set_value name="this.$Description" operation="add" exact="'\n' + {30204,9112}"/>
                    </do_any>
                  </actions>
                </library>

                <library name="TELADI_GUILD_Danger_Area_Construct_Reward">
                  <actions>
                    <do_any>
                      <set_value name="this.$RewardObject" exact="[]" weight="40" comment="nothing"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_nividiumcrystallite, ware.modpart_shipnanoweave_t1].random]" weight="20" comment="low modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.modpart_extendedfuelcontainer, ware.modpart_nividiumoxide, ware.modpart_enginefuelinjector_t1].random]" weight="20" comment="low modpart"/>
                      <set_value name="this.$RewardObject" exact="[[ware.inv_seminar_piloting_2, ware.inv_seminar_management_2].random]" weight="20"/>
                    </do_any>
                    <append_to_list name="this.$RewardObject" exact="ware.paintmod_0080" chance="15"/>
                    <include_actions ref="md.LIB_Generic.GenerateRewardText"/>
                  </actions>
                </library>

              </cues>
            </cue>

          </cues>
        </cue>

        <!--
        ############################
        Mission Thread Condition Libraries
        ############################-->

        <!-- For debugging, to always enable a specific subscription -->
        <library name="Situation__Always">
          <actions>
            <set_value name="$SituationValid" exact="true"/>
          </actions>
        </library>

        <library name="Situation__Dangerous_Area">
          <actions>
            <do_if value="$Area.$EnemyContestedSectors.count or $Area.$EnemySectors.count">
              <set_value name="$SituationValid" exact="true"/>
            </do_if>
            <do_else>
              <set_value name="$SituationValid" exact="false"/>
            </do_else>
          </actions>
        </library>

        <cue name="GenerateAreaTables" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <clear_list list="$Areas"/>

            <!--
            $Areas = [
              table[
                $Faction = Host faction of the mission threads
                $Clusters = All clusters related to this area (used for mission thread visibility)
                $Sectors = All sectors in the related clusters
                $HostSectors = All sectors owned or contested by the host faction
                $EnemyContestedSectors = All host faction sectors which are also contested by an enemy faction
                $EnemySectors = All related sectors which are primarily owned by an enemy faction
                $OtherSectors = All related sectors which do not involve the host faction or an enemy faction
                $ActiveSituations = list of situation libraries which currently pass for this warfront e.g. Situation__Invading. Populated when iterating over potential threads
                ]
            ]-->

            <set_value name="$ThreadRelatedFactions" exact="[]"/>
            <set_value name="$ThreadDefinitionIDs" exact="$ThreadDefinitions.keys.list"/>
            <do_all exact="$ThreadDefinitionIDs.count" counter="$i">
              <do_if value="$ThreadDefinitions.{$ThreadDefinitionIDs.{$i}}.$Faction.isactive and not $ThreadRelatedFactions.indexof.{$ThreadDefinitions.{$ThreadDefinitionIDs.{$i}}.$Faction}">
                <append_to_list name="$ThreadRelatedFactions" exact="$ThreadDefinitions.{$ThreadDefinitionIDs.{$i}}.$Faction"/>
              </do_if>
            </do_all>

            <do_all exact="$ThreadRelatedFactions.count" counter="$i">
              <set_value name="$Faction" exact="$ThreadRelatedFactions.{$i}"/>
              <find_sector name="$Sectors" multiple="true">
                <match_any>
                  <match owner="$Faction"/>
                  <match contestedby="$Faction"/>
                </match_any>
              </find_sector>
              <!--Add all clusters of the faction related sectors to a list-->
              <set_value name="$Clusters" exact="[]"/>
              <do_all exact="$Sectors.count" counter="$j">
                <do_if value="not $Clusters.indexof.{$Sectors.{$j}.cluster}">
                  <append_to_list name="$Clusters" exact="$Sectors.{$j}.cluster"/>
                </do_if>
              </do_all>

              <shuffle_list list="$Clusters"/>

              <set_value name="$ProcessedClusters" exact="[]"/>

              <!--Loop over the faction related clusters-->
              <do_all exact="$Clusters.count" counter="$j">
                <set_value name="$AnchorCluster" exact="$Clusters.{$j}"/>
                <do_if value="not $ProcessedClusters.indexof.{$AnchorCluster}">
                  <set_value name="$NewArea" exact="table[
                     $Faction = $Faction,
                     $Clusters = [],
                     $Sectors = [],
                     $HostSectors = [],
                     $EnemyContestedSectors = [],
                     $EnemySectors = [],
                     $OtherSectors = [],
                     $ActiveSituations = [],
                     ]"/>
                  <append_to_list name="$Areas" exact="$NewArea"/>

                  <debug_text text="'** Processing anchor cluster: ' + $AnchorCluster + ' ' + $AnchorCluster.knownname" chance="$DebugChance2"/>
                  <append_to_list name="$ProcessedClusters" exact="$AnchorCluster"/>
                  <append_to_list name="$NewArea.$Clusters" exact="$AnchorCluster"/>
                  <!--Find adjacent clusters-->
                  <find_cluster_in_range name="$AdjacentClusters" mindistance="1" maxdistance="1" object="$AnchorCluster" multiple="true"/>
                  <do_all exact="$AdjacentClusters.count" counter="$k" reverse="true">
                    <!--Check if any of these clusters have already been processed, meaning already part of another mission thread 'Area'-->
                    <do_if value="$ProcessedClusters.indexof.{$AdjacentClusters.{$k}}">
                      <debug_text text="'Removing processed adjacent cluster: ' + $AdjacentClusters.{$k} + ' ' + $AdjacentClusters.{$k}.knownname" chance="$DebugChance2"/>
                      <remove_value name="$AdjacentClusters.{$k}"/>
                    </do_if>
                    <do_else>
                      <!--Cluster has not been processed. Add to this area.-->
                      <debug_text text="'Adding adjacent cluster: ' + $AdjacentClusters.{$k} + ' ' + $AdjacentClusters.{$k}.knownname" chance="$DebugChance2"/>
                      <append_to_list name="$NewArea.$Clusters" exact="$AdjacentClusters.{$k}"/>
                      <append_to_list name="$ProcessedClusters" exact="$AdjacentClusters.{$k}"/>
                    </do_else>
                  </do_all>

                  <!--TODO @Owen - improve finding adjacent enemy sectors. They may be 2 jump from the AnchorCluster-->

                  <!--The anchor cluster and any remaining adjacent clusters are now part of a new 'Area'-->
                  <debug_text text="'New Area: '" chance="$DebugChance"/>
                  <do_all exact="$NewArea.$Clusters.count" counter="$k">
                    <debug_text text="$NewArea.$Clusters.{$k} + ' ' + $NewArea.$Clusters.{$k}.knownname" chance="$DebugChance"/>

                    <!--Find all sectors within the cluster and add them to the relevant lists in $NewArea-->
                    <find_sector name="$ClusterSectors" space="$NewArea.$Clusters.{$k}" multiple="true"/>
                    <do_all exact="$ClusterSectors.count" counter="$m">
                      <append_to_list name="$NewArea.$Sectors" exact="$ClusterSectors.{$m}"/>
                      <do_if value="$ClusterSectors.{$m}.owner == $Faction">
                        <debug_text text="'Has host sector: ' + $ClusterSectors.{$m} + ' ' + $ClusterSectors.{$m}.knownname" chance="$DebugChance2"/>
                        <append_to_list name="$NewArea.$HostSectors" exact="$ClusterSectors.{$m}"/>
                      </do_if>
                      <do_elseif value="$ClusterSectors.{$m}.iscontestedby.{$Faction}">
                        <debug_text text="'Has host sector: ' + $ClusterSectors.{$m} + ' ' + $ClusterSectors.{$m}.knownname" chance="$DebugChance2"/>
                        <append_to_list name="$NewArea.$HostSectors" exact="$ClusterSectors.{$m}"/>
                        <set_value name="this.$ContestingFactions" exact="$ClusterSectors.{$m}.contestingfactions "/>
                        <do_all exact="this.$ContestingFactions.count" counter="$n">
                          <do_if value="$Faction.hasrelation.enemy.{this.$ContestingFactions.{$n}}">
                            <debug_text text="'Which is also an enemy contested sector for ' + this.$ContestingFactions.{$n}.id" chance="$DebugChance2"/>
                            <append_to_list name="$NewArea.$EnemyContestedSectors" exact="$ClusterSectors.{$m}"/>
                            <break/>
                          </do_if>
                        </do_all>
                      </do_elseif>
                      <do_elseif value="$Faction.hasrelation.enemy.{$ClusterSectors.{$m}.owner}">
                        <debug_text text="'Has enemy sector: ' + $ClusterSectors.{$m} + ' ' + $ClusterSectors.{$m}.knownname + ' for ' + $ClusterSectors.{$m}.owner.id" chance="$DebugChance2"/>
                        <append_to_list name="$NewArea.$EnemySectors" exact="$ClusterSectors.{$m}"/>
                      </do_elseif>
                      <do_else>
                        <debug_text text="'Has unrelated sector: ' + $ClusterSectors.{$m} + ' ' + $ClusterSectors.{$m}.knownname + ' for ' + $ClusterSectors.{$m}.owner.id" chance="$DebugChance2"/>
                        <append_to_list name="$NewArea.$OtherSectors" exact="$ClusterSectors.{$m}"/>
                      </do_else>
                    </do_all>
                  </do_all>

                </do_if>
              </do_all>
            </do_all>
          </actions>
        </cue>


        <cue name="Gamestart">
          <delay exact="2s"/>
          <actions>
            <signal_cue cue="CalculateThreads"/>
          </actions>
        </cue>

        <cue name="RegenerateAreaTable" instantiate="true" checktime="60s" checkinterval="15min">
          <actions>
            <signal_cue_instantly cue="GenerateAreaTables"/>
          </actions>
        </cue>

        <cue name="ThreadOfferTimeout" instantiate="true" checktime="60s" checkinterval="15min">
          <delay min="2s" max="5s"/>
          <actions>
            <do_all exact="$Threads.count" counter="$i" reverse="true">
              <do_if value="player.age - $Threads.{$i}.$ThreadCue.time gt 1h and $ActiveThreads.indexof.{$Threads.{$i}.$ThreadCue} == 0">
                <signal_cue_instantly cue="$Threads.{$i}.$CleanupCue"/>
              </do_if>
            </do_all>
          </actions>
        </cue>

        <cue name="CalculateThreads" instantiate="true">
          <conditions>
            <check_any>
              <event_object_changed_sector object="player.entity"/>
              <event_cue_signalled/>
            </check_any>
            <check_value value="player.sector"/>
          </conditions>
          <actions>
            <do_if value="not $ThreadList?">
              <set_value name="$ThreadList" exact="[]"/>
            </do_if>
            <set_value name="$SignalledContactCreationCues" exact="[]"/>
            <set_value name="$SignalledIntroMissions" exact="[]"/>

            <debug_text text="'Player is now in ' + player.sector + ' ' + player.sector.knownname" chance="$DebugChance"/>

            <!--TODO @Owen update areas if something changes e.g. owner-->
            <do_if value="not $Areas.count">
              <signal_cue_instantly cue="GenerateAreaTables"/>
            </do_if>

            <!--Check if the player is in an 'Area' which may be suitable to have a mission thread spawn-->
            <do_all exact="$Areas.count" counter="$i">
              <do_if value="$Areas.{$i}.$Sectors.indexof.{player.sector}">

                <debug_text text="'Player is in area which may be suitable for a mission-thread spawn'" chance="$DebugChance"/>

                <set_value name="$Area" exact="$Areas.{$i}"/>
                <set_value name="$Faction" exact="$Areas.{$i}.$Faction"/>
                <set_value name="$ThreadDefinitionIDs" exact="$ThreadDefinitions.keys.list"/>
                <do_all exact="$ThreadDefinitionIDs.count" counter="$j">
                  <set_value name="$Potential_Thread" exact="$ThreadDefinitions.{$ThreadDefinitionIDs.{$j}}"/>
                  <debug_text text="'Checking if mission thread ' + $ThreadDefinitionIDs.{$j} + ' should be spawned in the area containing sector ' + player.sector.knownname + ' for faction ' + $Faction" chance="$DebugChance2"/>

                  <do_if value="$Faction == $Potential_Thread.$Faction">
                    <set_value name="$ThreadValid" exact="true"/>

                    <!--First, check that there isn't already the same thread already running for this area-->
                    <do_all exact="$Threads.count" counter="$tc_k">
                      <do_if value="$Threads.{$tc_k}.$ThreadCue.$Definition.$ID == $Potential_Thread.$ID">
                        <set_value name="$ThreadInstanceDefinition" exact="$Threads.{$tc_k}.$ThreadCue.$Definition"/>
                        <do_if value="$ThreadInstanceDefinition.$Area.$Sectors.indexof.{$Area.$Sectors.{1}}">
                          <set_value name="$ThreadValid" exact="false"/>
                          <break/>
                        </do_if>
                      </do_if>
                    </do_all>

                    <do_if value="$ThreadValid">
                      <set_value name="$ThreadValid" exact="false"/>
                      <do_if value="@$Potential_Thread.$ThreadConditionLibs.count">
                        <do_all exact="$Potential_Thread.$ThreadConditionLibs.count" counter="$o">
                          <do_if value="$Area.$ActiveSituations.indexof.{$Potential_Thread.$ThreadConditionLibs.{$o}}">
                            <set_value name="$ThreadValid" exact="true"/>
                          </do_if>
                          <do_else>
                            <include_actions ref="$Potential_Thread.$ThreadConditionLibs.{$o}"/>
                            <do_if value="$SituationValid">
                              <append_to_list name="$Area.$ActiveSituations" exact="$Potential_Thread.$ThreadConditionLibs.{$o}"/>
                              <set_value name="$ThreadValid" exact="true"/>
                            </do_if>
                          </do_else>
                        </do_all>
                      </do_if>
                      <do_else>
                        <set_value name="$ThreadValid" exact="true"/>
                      </do_else>
                    </do_if>

                    <do_if value="$ThreadValid">
                      <set_value name="$MissionGroupCue" exact="$MissionGroupCues.{$Potential_Thread.$MissionGroup}"/>
                      <do_if value="$MissionGroupCue.$SubscriptionStatus == 'unsubscribed'">
                        <do_if value="$MissionGroupCue.$IntroMissionCue.state == cuestate.waiting and not $SignalledIntroMissions.indexof.{$MissionGroupCue.$IntroMissionCue}">
                          <do_if value="(not $MissionGroupCue.$Mission_Contact.isclass.npc or not $MissionGroupCue.$PlacementObject.isoperational) and not $SignalledContactCreationCues.indexof.{$MissionGroupCue.$ContactCreatorCue}" comment="npc class check incase of disconnected">
                            <append_to_list name="$SignalledContactCreationCues" exact="$MissionGroupCue.$ContactCreatorCue"/>
                            <signal_cue_instantly cue="$MissionGroupCue.$ContactCreatorCue" param="$Area.$HostSectors.clone"/>
                          </do_if>
                          <do_if value="$MissionGroupCue.$Mission_Contact.isclass.npc and $MissionGroupCue.$PlacementObject.isoperational">
                            <debug_text text="'Signalling intro mission cue ' + $MissionGroupCue.$IntroMissionCue + ' for mission group ' + $Potential_Thread.$MissionGroup" chance="$DebugChance"/>
                            <append_to_list name="$SignalledIntroMissions" exact="$MissionGroupCue.$IntroMissionCue"/>
                            <signal_cue cue="$MissionGroupCue.$IntroMissionCue"/>
                          </do_if>
                        </do_if>
                      </do_if>
                      <do_elseif value="$MissionGroupCue.$SubscriptionStatus == 'subscribed'">

                        <set_value name="$New_Thread" exact="$Potential_Thread.clone"/>
                        <!--TODO @Owen sanity checks-->
                        <do_if value="not $MissionGroupCue.$Mission_Contact.isclass.npc" comment="class check incase of disconnected (should we allow disconnected contacts?)">
                          <signal_cue_instantly cue="$MissionGroupCue.$ContactCreatorCue" param="$Area.$HostSectors.clone"/>
                        </do_if>
                        <set_value name="$New_Thread.$Contact" exact="$MissionGroupCue.$Mission_Contact"/>
                        <set_value name="$New_Thread.$HQ" exact="$New_Thread.$Faction.headquarters"/>
                        <!--$Area should essentially be read-only, so we're not going to clone it-->
                        <set_value name="$New_Thread.$Area" exact="$Area"/>
                        <set_value name="$New_Thread.$OfferSectors" exact="$Area.$Sectors"/>

                        <set_value name="$New_Thread.$DebugChance" exact="$DebugChance"/>

                        <!--TODO @Guage the current mood of this faction-->
                        <do_any>
                          <set_value name="$ThreadMood" exact="'negative'"/>
                          <set_value name="$ThreadMood" exact="'positive'"/>
                        </do_any>

                        <do_if value="$New_Thread.$NameLib?" comment="Support for older mission threads without text construction libs">
                          <!--Get sub-missions-->
                          <include_actions ref="$New_Thread.$SubMissionLib"/>

                          <!--Get thread name-->
                          <include_actions ref="$New_Thread.$NameLib"/>
                          <set_value name="$New_Thread.$ThreadName" exact="this.$Name"/>

                          <!--Construct a suitable description-->
                          <include_actions ref="$New_Thread.$DescriptionLib"/>
                          <set_value name="$New_Thread.$ThreadDescription" exact="this.$Description"/>

                          <!-- Construct reward for this instance of the thread -->
                          <do_if value="$New_Thread.$RewardLib?">
                            <include_actions ref="$New_Thread.$RewardLib"/>

                            <do_if value="this.$Reward?">
                              <set_value name="$New_Thread.$Reward" exact="this.$Reward"/>
                            </do_if>
                            <do_if value="this.$RewardObject?">
                              <set_value name="$New_Thread.$RewardObject" exact="this.$RewardObject"/>
                            </do_if>
                            <do_if value="this.$RewardText?">
                              <set_value name="$New_Thread.$RewardText" exact="this.$RewardText"/>
                            </do_if>
                          </do_if>

                        </do_if>

                        <set_value name="$ThreadManagerParams" exact="table[
                         $ThreadDefinition = $New_Thread,
                         $RegisterThreadCue = Register_Thread,
                         $ThreadAcceptedCue = Thread_Accepted,
                         $CleanupThreadCue  = Cleanup_Thread]"/>
                        <signal_cue_instantly cue="md.MC_Management.Thread_Manager" param="$ThreadManagerParams"/>
                      </do_elseif>
                    </do_if>
                    <do_else>
                      <debug_text text="'Missionthread not (yet) valid'" chance="$DebugChance"/>
                    </do_else>
                  </do_if>
                </do_all>
              </do_if>
            </do_all>
          </actions>
        </cue>

        <!--event.param = thread table: table[$ThreadCue, $CleanupCue]-->
        <cue name="Register_Thread" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <append_to_list name="$Threads" exact="event.param"/>
          </actions>
        </cue>

        <!-- Store the selected mission-thread in $ActiveThreads, and disable all other mission-thread cues of that mission group-->
        <cue name="Thread_Accepted" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'Accepted mission thread: ' + event.param.$Definition.$ID" chance="$DebugChance"/>
            <append_to_list name="$ActiveThreads" exact="event.param"/>
            <do_all exact="$Threads.count" counter="$i" reverse="true">
              <do_if value="$Threads.{$i}.$ThreadCue != event.param and $Threads.{$i}.$ThreadCue.$Definition.$MissionGroup == event.param.$Definition.$MissionGroup">
                <signal_cue_instantly cue="$Threads.{$i}.$CleanupCue"/>
              </do_if>
            </do_all>
          </actions>
        </cue>

        <!--event.param = table[
        $cue                = thread cue namespace,
        $completedmissions  = number of completed missions,
        $failedmissions     = number of failed missions]-->
        <cue name="Cleanup_Thread" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="'Attempting to clean up mission thread: ' + event.param.$cue.$Definition.$ID" chance="$DebugChance"/>

            <set_value name="this.$ActiveThreadIdx" exact="$ActiveThreads.indexof.{event.param.$cue}"/>
            <do_if value="this.$ActiveThreadIdx">
              <remove_value name="$ActiveThreads.{this.$ActiveThreadIdx}"/>
            </do_if>
            <set_value name="this.$Removed" exact="false"/>
            <do_all exact="$Threads.count" counter="$Cleanup_Thread_i" reverse="true">
              <do_if value="$Threads.{$Cleanup_Thread_i}.$ThreadCue == event.param.$cue">
                <assert value="not this.$Removed" text="'Matching thread was already removed. Should not happen again. Thread: ' + event.param.$cue.$Definition.$ID + ' [Owen]'"/>
                <set_value name="this.$Removed" exact="true"/>
                <remove_value name="$Threads.{$Cleanup_Thread_i}"/>
              </do_if>
            </do_all>
            <assert value="this.$Removed" text="'No matching thread was found to be removed. Thread: ' + event.param.$cue.$Definition.$ID + ' [Owen]'"/>
          </actions>
        </cue>
      </cues>
    </cue>

    <!--Generic Event-handling code -->

    <library name="MM__Standard_GM_Event">
      <actions>
        <do_if value="@static.$EndFeedbackValue" comment="Evaluate return-value of GM (success/failure)">
          <debug_text text="'Mission ended. feedback' + static.$EndFeedbackValue" chance="$DebugChance"/>

          <do_if value="$SuccessfullyGenerated">
            <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
          </do_if>
          <do_else>
            <signal_cue_instantly cue="$Definition.$SpawnFailedCue"/>
          </do_else>

          <do_if value="static.$EndFeedbackValue.$ID" exact="'$MISSION_SUCCEEDED'" comment="see the $FeedbackValues table in the Generic Mission">
            <do_if value="@$MissionDataTable.$NextMission">
              <do_if value="false" comment="Forced failure as there are no valid NextMission cases defined for this mission. Replace with valid case if needed.">

              </do_if>
              <do_else>
                <!--If there is a followup mission, signal it with whatever parameters it needs-->
                <assert value="false" text="'Next mission ' + $MissionDataTable.$NextMission + ' is missing handling in ' + namespace + '. It should be explicitly signalled with whatever parameters it requires. [Owen]'"/>
              </do_else>
            </do_if>
          </do_if>
          <do_elseif value="static.$EndFeedbackValue.$ID" exact="'$MISSION_TIMEOUT'">
          </do_elseif>

          <cancel_cue cue="namespace"/>
        </do_if>
        <do_elseif value="@static.$FeedbackValue">
          <debug_text text="'Mission signalled with feedback' + static.$FeedbackValue" chance="$DebugChance"/>
          <do_if value="static.$FeedbackValue.$ID == '$MISSION_GENERATED'">
            <!--If a followup mission, no need to inform the Mission Thread Manager of the mission successfully being generated as $Definition.$SpawnSuccessCue was already called for this mission-->
            <do_if value="not $FollowUp">
              <set_value name="$MissionDataTable" exact="event.param.clone"/>
              <set_value name="$MissionDataTable.$WrapperCue" exact="namespace"/>
              <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
            </do_if>
            <set_value name="$SuccessfullyGenerated" exact="true"/>
          </do_if>
        </do_elseif>
      </actions>
    </library>


    <!--
    ######################
    Submission Libraries
    ######################-->

    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->

    <!--Requires:
    $ResourceTryList - list of resource wares-->
    <library name="Find_Resources__Allied_Space_1">
      <actions>
        <set_value name="$Spaces" exact="[]"/>
        <do_if value="$Definition.$ThreadData.$Area.$HostSectors.count">
          <set_value name="$Spaces" exact="$Definition.$ThreadData.$Area.$HostSectors.clone"/>
          <shuffle_list list="$Spaces" chance="40"/>
        </do_if>

        <do_all exact="$Spaces.count" counter="$i">
          <set_value name="$Space" exact="$Spaces.{$i}"/>
          <include_actions ref="md.GM_Find_Resources.Check_Space" comment ="input: $MissionLevel (optional), $ResourceTryList, $Space; output: $MissionLevel, $ResourceList, $ResourceYieldList, $Valid == 2"/>

          <!-- Check that at least something was found - abort otherwise-->
          <do_if value="$ResourceList.count == 0">
            <debug_text text="'No matching resources found, aborting'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <set_value name="$Valid" exact="2"/>
            <break/>
          </do_else>
        </do_all>
      </actions>
    </library>

    <!--Requires:
    $ResourceTryList - list of resource wares-->
    <library name="Find_Resources__Enemy_Space_1">
      <actions>
        <set_value name="$Spaces" exact="[]"/>
        <do_if value="$Definition.$ThreadData.$Area.$EnemySectors.count">
          <set_value name="$Spaces" exact="$Definition.$ThreadData.$Area.$EnemySectors.clone"/>
          <shuffle_list list="$Spaces" chance="40"/>
        </do_if>

        <do_all exact="$Spaces.count" counter="$i">
          <set_value name="$Space" exact="$Spaces.{$i}"/>
          <include_actions ref="md.GM_Find_Resources.Check_Space" comment ="input: $MissionLevel (optional), $ResourceTryList, $Space; output: $MissionLevel, $ResourceList, $ResourceYieldList, $Valid == 2"/>

          <!-- Check that at least something was found - abort otherwise-->
          <do_if value="$ResourceList.count == 0">
            <debug_text text="'No matching resources found, aborting'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <set_value name="$Valid" exact="2"/>
            <break/>
          </do_else>
        </do_all>
      </actions>
    </library>

    <cue name="Assisted_Task__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>

        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Correct Page/TextOffset and resources found but unable to setup mission
        3: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>

        <!--Find allied trade stations-->
        <create_list name="$TradeStations"/>
        <set_value name="$PotentialSectors" exact="$Definition.$ThreadData.$Area.$HostSectors.clone"/>
        <shuffle_list list="$PotentialSectors"/>
        <do_all exact="$PotentialSectors.count" counter="$PScounter">
          <set_value name="$PotentialTradeStation" exact="null"/>
          <find_station name="$PotentialTradeStation" space="$PotentialSectors.{$PScounter}" owner="$Definition.$ThreadData.$Faction" tradestation="true" multiple="false"/>
          <do_if value="$PotentialTradeStation">
            <append_to_list name="$TradeStations" exact="$PotentialTradeStation"/>
          </do_if>
        </do_all>

        <!-- Failsafe in case trade stations are destroyed -->
        <do_if value="not $TradeStations.count">
          <do_all exact="$PotentialSectors.count" counter="$PScounter2">
            <set_value name="$PotentialStations" exact="null"/>
            <find_station name="$PotentialStations" space="$PotentialSectors.{$PScounter2}" owner="$Definition.$ThreadData.$Faction" multiple="false"/>
            <do_if value="$PotentialStations">
              <append_to_list name="$TradeStations" exact="$PotentialStations"/>
            </do_if>
          </do_all>
        </do_if>

        <!-- Set basic variables -->
        <set_value name="$HarvestWaresTable" exact="table[]" comment="Wares for main objective"/>
        <set_value name="$DeliveryItemsTable" exact="table[]" comment="Wares for delivery in prologue"/>
        <set_value name="$StartRoomTag" exact="null"/>
        <set_value name="$StartInteriorName" exact="null"/>

        <set_value name="$Faction" exact="$Definition.$ThreadData.$Faction"/>
        <set_value name="$MissionLevel" exact="3" comment="Short mission chain, takes a while."/>
        <set_value name="$Difficulty" exact="level.medium" comment="can be modified by variations"/>

        <set_value name="$StartObject" exact="$TradeStations.random"/>
        <set_value name="$EndObject" exact="$StartObject"/>
        <set_value name="$PlayerShipPurpose" exact="purpose.mine"/>

        <!-- Only allow for a single resource -->
        <set_value name="$TryResource" exact="[ware.ore, ware.silicon, ware.ice, ware.nividium].random"/>
        <do_if value="$TryResource == ware.silicon">
          <set_value name="$MissionLevel" operation="add"/>
        </do_if>
        <do_elseif value="$TryResource == ware.nividium">
          <set_value name="$MissionLevel" exact="2" operation="add"/>
        </do_elseif>
        <set_value name="$ResourceTryList" exact="[$TryResource]"/>

        <!--### TELADI ###-->
        <do_if value="$Page == 30231">
          <do_if value="$TextOffset == 10000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="Find_Resources__Allied_Space_1"/>
          </do_if>
          <do_elseif value="$TextOffset == 10100">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="Find_Resources__Enemy_Space_1"/>
          </do_elseif>
          <!--### ANTIGONE ###-->
          <do_if value="$TextOffset == 20000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="Find_Resources__Allied_Space_1"/>
          </do_if>
          <do_elseif value="$TextOffset == 20100">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="Find_Resources__Enemy_Space_1"/>
          </do_elseif>
        </do_if>

        <!-- Clean up variables from Check_Space library in GM_Find_Resources -->
        <do_if value="$Valid == 2">
          <set_value name="$FindResourcesSpace" exact="$Space"/>
          <remove_value name="$Space" comment="Generic variable name, might be reused elsewhere"/>
          <remove_value name="$ResourceTryList"/>

          <!-- Finalise Setup -->
          <!-- Set the smallest solid storage capacity of miners as maximum for collection -->
          <get_ship_definition macro="$MiningShips" multiple="true" tags="tag.miner"/>
          <do_all exact="$MiningShips.count" counter="$MScounter">
            <do_if value="not $SmallestStorage? and $MiningShips.{$MScounter}.cargo.capacity.solid gt 0">
              <set_value name="$SmallestStorage" exact="$MiningShips.{$MScounter}.cargo.capacity.solid"/>
            </do_if>
            <do_elseif value="$MiningShips.{$MScounter}.cargo.capacity.solid lt $SmallestStorage and $MiningShips.{$MScounter}.cargo.capacity.solid gt 0">
              <set_value name="$SmallestStorage" exact="$MiningShips.{$MScounter}.cargo.capacity.solid"/>
            </do_elseif>
          </do_all>

          <set_value name="$HarvestWaresTable.{$TryResource}" exact="$SmallestStorage / $TryResource.volume"/>
          <set_value name="$HarvestWaresTable.{$TryResource}" exact="($HarvestWaresTable.{$TryResource})L / 10 * 10" comment="round"/>

          <!-- Create room for NPCContact -->
          <get_room_definition macro="$StartCorridorMacro" doors="$StartDoors" race="$Faction.primaryrace" tags="tag.corridor"/>
          <get_room_definition macro="$StartRoomMacro" tags="if $StartRoomTag then $StartRoomTag else tag.bar"/>
          <do_if value="$StartCorridorMacro and $StartRoomMacro">
            <do_if value="not $StartInteriorName">
              <set_value name="$StartInteriorName" exact="readtext.{20007}.{1031}" comment="Bar"/>
            </do_if>
            <set_value name="$Valid" exact="3"/>
          </do_if>
        </do_if>

        <!-- Check_Space library in GM_Find_Resources sets $Valid == 2 -->
        <do_if value="$Valid == 3">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 2">
            <debug_text text="'Unable to set up room for NPC for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Lennart]'" chance="$DebugChance"/>
          </do_if>
          <do_elseif value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Lennart]'" chance="$DebugChance"/>
          </do_elseif>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Lennart]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <!-- Too much variance in GMC, FollowUp doesn't work yet -->
        <cue name="Assisted_Task__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Assisted_Task__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.pickup">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.pickup"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="Assisted_Task__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Assisted_Task__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Assisted_Task__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="Assisted_Task__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Assisted_Task__Standard_Create_GM"/>
          </actions>
        </cue>

        <cue name="Assisted_Task__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <create_cue_actor cue="Assisted_Task__Standard_Create_GM" name="$MissionActor">
              <select faction="$Faction"/>
            </create_cue_actor>
            <set_entity_type entity="$MissionActor" type="entitytype.crowd"/>
            <set_entity_traits entity="$MissionActor" missionactor="true" customhandler="true"/>
          </actions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Assisted_Task__Standard_Ref" ref="md.GMC_Assisted_Task.Start">
              <param name="Client"              value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"          value="$MissionCue"/>
              <param name="MissionThread"       value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue"     value="Assisted_Task__Standard_GM_Event" comment="tell GM to call this cue when done"/>
              <param name="WithoutOffer"        value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup"        value="$Definition.$ForceCleanupCue"/>

              <param name="Page"                value="$Page"/>
              <param name="TextOffset"          value="$TextOffset"/>

              <param name="MissionLevel"        value="$MissionLevel"/>
              <param name="Difficulty"          value="$Difficulty"/>

              <!--************************* Mission specific params *************************-->
              <!--Deliver Inventory Mission-->
              <param name="DeliveryNPC"           value="$MissionActor"           comment="The NPC to which the items should be delivered" />
              <param name="PlaceNPC"              value="true"                    comment="Does the mission handle the placement and removal of the delivery NPC? If false, some other system must be in charge of doing so." />
              <param name="DeliveryItemsTable"    value="$DeliveryItemsTable"     comment="Table of ware amounts. Key = ware. Value = amount. Inventory wares only."/>

              <!-- If the mission is to manage placing the delivery NPC, all of these parameters must be passed in together -->
              <!-- Room, corridor and door definitions could be provided by the caller through get_room_definition -->
              <param name="DeliveryObject"        value="$StartObject"            comment="The object on which to create the interior" />
              <param name="DeliveryRoomMacro"     value="$StartRoomMacro"         comment="The dynamic interior room the DeliveryNPC should be placed in, if not placed already" />
              <param name="DeliveryCorridorMacro" value="$StartCorridorMacro"     comment="The dynamic interior corridor leading to DeliveryRoomMacro" />
              <param name="DeliveryDoors"         value="$StartDoors"             comment="The possible dynamic interior doors used to connect the room and corridor. When defining a room or corridor macro, this is is the variable saved in the doors parameter" />
              <param name="DeliveryInteriorName"  value="$StartInteriorName"      comment="The name of the dynamic interior the DeliveryNPC should used, if not placed already" />

              <!--Transport Passenger Mission-->
              <param name="StartObject"           value="$StartObject"            comment="The object (e.g. station) to initially pick the NPC up on"/>
              <param name="PlayerShipPurpose"     value="$PlayerShipPurpose"      comment="The ship type required to pick up the passenger"/>
              <param name="NPCContact"            value="$MissionActor"           comment="The NPC who accompanies the player during the mission"/>

              <param name="StartRoomMacro"        value="$StartRoomMacro"         comment="The dynamic interior room the NPCContact should be placed in, if not placed already"/>
              <param name="StartCorridorMacro"    value="$StartCorridorMacro"     comment="The dynamic interior corridor leading to InteriorRoomMacro"/>
              <param name="StartDoors"            value="$StartDoors"             comment="The possible dynamic interior doors used to connect the room and corridor. When defining a room or corridor macro, this is is the variable saved in the doors parameter"/>
              <param name="StartInteriorName"     value="$StartInteriorName"      comment="The name of the dynamic interior the NPCContact should used, if not placed already"/>

              <!--Find Resources Mission-->
              <param name="FindResourcesSpace"    value="$FindResourcesSpace"     comment="Space (e.g. sector) the player has to find resources in"/>
              <param name="ResourceList"          value="$ResourceList"           comment="List of resources to find (currently any will do)"/>
              <param name="ResourceYieldList"     value="$ResourceYieldList"      comment="Minimum Yield we are looking for"/>

              <!--Collect Wares Mission-->
              <param name="HarvestWaresTable"     value="$HarvestWaresTable"      comment="The wares which need to be collected after the find resources step (e.g. a certain amount of said resources)"/>

              <!-- Drop off Passenger Mission-->
              <param name="EndObject"             value="$EndObject"              comment="The object (e.g. station) to drop the NPC off at"/>

              <param name="DebugChance"           value="$DebugChance"/>
            </cue>

            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Assisted_Task__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="@static.$EndFeedbackValue" comment="Evaluate return-value of GM (success/failure)">
                  <debug_text text="'Mission ended. feedback' + static.$EndFeedbackValue" chance="$DebugChance"/>

                  <do_if value="$SuccessfullyGenerated">
                    <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  </do_if>
                  <do_else>
                    <signal_cue_instantly cue="$Definition.$SpawnFailedCue"/>
                  </do_else>

                  <!-- handle EndFeedbackValue of the GM -->
                  <do_if value="static.$EndFeedbackValue.$ID" exact="'$MISSION_SUCCEEDED'" comment="see the $FeedbackValues table in the Generic Mission">
                    <do_if value="@$MissionDataTable.$NextMission">
                      <do_if value="$MissionDataTable.$NextMission.$WrapperCue.static == Achieve_Coverage__Standard">
                        <!--TODO @Owen find the best resource yield and use that location-->
                        <set_value name="$ResourceLocationKeys" exact="$ResultTable.$ResourceLocations.keys.list"/>
                        <do_if value="@$ResourceLocationKeys.count">
                          <set_value name="$ResourceWare" exact="$ResourceLocationKeys.{$ResourceLocationKeys.count}"/>
                          <signal_cue_instantly cue="$MissionDataTable.$NextMission.$WrapperCue" param="table[$Sector = $ResultTable.$ResourceLocations.{$ResourceWare}.$Sector, $Offset = $ResultTable.$ResourceLocations.{$ResourceWare}.$Offset]"/>
                        </do_if>
                        <do_else>
                          <!--TODO @Owen - better way of cleaning up a following mission which can't be performed due to this GM's feedback?-->
                          <signal_cue_instantly cue="$MissionDataTable.$NextMission.$WrapperCue" param="null"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <!--If there is a followup mission, signal it with whatever parameters it needs-->
                        <assert value="false" text="'Next mission ' + $MissionDataTable.$NextMission + ' is missing handling in ' + namespace + '. It should be explicitly signalled with whatever parameters it requires. [Owen]'"/>
                      </do_else>
                    </do_if>
                  </do_if>
                  <do_elseif value="static.$EndFeedbackValue.$ID" exact="'$MISSION_TIMEOUT'">
                  </do_elseif>

                  <cancel_cue cue="namespace"/>
                </do_if>
                <do_elseif value="@static.$FeedbackValue">
                  <debug_text text="'Mission signalled with feedback' + static.$FeedbackValue" chance="$DebugChance"/>
                  <do_if value="static.$FeedbackValue.$ID == '$MISSION_GENERATED'">
                    <!--If a followup mission, no need to inform the Mission Thread Manager of the mission successfully being generated as $Definition.$SpawnSuccessCue was already called for this mission-->
                    <do_if value="not $FollowUp">
                      <set_value name="$MissionDataTable" exact="event.param.clone"/>
                      <set_value name="$MissionDataTable.$WrapperCue" exact="namespace"/>
                      <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
                    </do_if>
                    <set_value name="$SuccessfullyGenerated" exact="true"/>
                  </do_if>
                </do_elseif>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <!--TODO @Owen better names for submission variations-->
    <cue name="Find_Resources__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <set_value name="$Difficulty" exact="level.veryeasy"/>
        <set_value name="$MissionLevel" exact="1"/>

        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>

        <set_value name="$Valid" exact="0"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>

        <!--### TELADI ###-->
        <do_if value="$Page == 30204">
          <!-- Setup what resources we suggest to look for depending on the mission-variation/text -->
          <do_if value="$TextOffset == 100000">
            <!--set_value name="$Space" exact="$Definition.$ThreadData.$HQ.sector"/-->
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen @Roger - better list of resources?-->
            <set_value name="$ResourceTryList" exact="[ware.ore, ware.silicon, ware.ice, ware.nividium]"/>
            <include_actions ref="Find_Resources__Allied_Space_1"/>
          </do_if>
          <do_elseif value="$TextOffset == 100100">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen @Roger - better list of resources?-->
            <set_value name="$ResourceTryList" exact="[ware.helium, ware.methane, ware.hydrogen]"/>
            <include_actions ref="Find_Resources__Allied_Space_1"/>
          </do_elseif>
        </do_if>
        <!--### ANTIGONE ###-->
        <do_elseif value="$Page == 30205">
          <!-- Setup what resources we suggest to look for depending on the mission-variation/text -->
          <do_if value="$TextOffset == 100000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen @Roger - better list of resources?-->
            <set_value name="$ResourceTryList" exact="[ware.ore, ware.silicon, ware.ice, ware.nividium]"/>
            <include_actions ref="Find_Resources__Allied_Space_1"/>
          </do_if>
          <do_elseif value="$TextOffset == 100100">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <!--TODO @Owen @Roger - better list of resources?-->
            <set_value name="$ResourceTryList" exact="[ware.helium, ware.methane, ware.hydrogen]"/>
            <include_actions ref="Find_Resources__Allied_Space_1"/>
          </do_elseif>
        </do_elseif>

        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Find_Resources__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Find_Resources__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.find"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="Find_Resources__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Find_Resources__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Find_Resources__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="Find_Resources__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Find_Resources__Standard_Create_GM"/>
          </actions>
        </cue>

        <cue name="Find_Resources__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$ResultTable" exact="table[]"/>
          </actions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Find_Resources__Standard_Ref" ref="md.GM_Find_Resources.Start">
              <param name="Client"              value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"          value="$MissionCue"/>
              <param name="MissionThread"       value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue"     value="Find_Resources__Standard_GM_Event" comment="tell GM to call this cue when done"/>
              <param name="WithoutOffer"        value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup"        value="$Definition.$ForceCleanupCue"/>

              <param name="Page"                value="$Page"/>
              <param name="TextOffset"          value="$TextOffset"/>

              <param name="MissionLevel"        value="$MissionLevel"/>
              <param name="Difficulty"          value="$Difficulty"/>

              <param name="FindArea"            value="$Space"/>
              <param name="ResourceList"        value="$ResourceList"/>
              <param name="ResourceYieldList"   value="$ResourceYieldList"/>

              <param name="ResultTable"         value="$ResultTable"/>

              <param name="DebugChance"         value="$DebugChance"/>
            </cue>

            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Find_Resources__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="@static.$EndFeedbackValue" comment="Evaluate return-value of GM (success/failure)">
                  <debug_text text="'Mission ended. feedback' + static.$EndFeedbackValue" chance="$DebugChance"/>

                  <do_if value="$SuccessfullyGenerated">
                    <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  </do_if>
                  <do_else>
                    <signal_cue_instantly cue="$Definition.$SpawnFailedCue"/>
                  </do_else>

                  <!-- handle EndFeedbackValue of the GM -->
                  <do_if value="static.$EndFeedbackValue.$ID" exact="'$MISSION_SUCCEEDED'" comment="see the $FeedbackValues table in the Generic Mission">
                    <do_if value="@$MissionDataTable.$NextMission">
                      <do_if value="$MissionDataTable.$NextMission.$WrapperCue.static == Achieve_Coverage__Standard">
                        <!--TODO @Owen find the best resource yield and use that location-->
                        <set_value name="$ResourceLocationKeys" exact="$ResultTable.$ResourceLocations.keys.list"/>
                        <do_if value="@$ResourceLocationKeys.count">
                          <set_value name="$ResourceWare" exact="$ResourceLocationKeys.{$ResourceLocationKeys.count}"/>
                          <signal_cue_instantly cue="$MissionDataTable.$NextMission.$WrapperCue" param="table[$Sector = $ResultTable.$ResourceLocations.{$ResourceWare}.$Sector, $Offset = $ResultTable.$ResourceLocations.{$ResourceWare}.$Offset]"/>
                        </do_if>
                        <do_else>
                          <!--TODO @Owen - better way of cleaning up a following mission which can't be performed due to this GM's feedback?-->
                          <signal_cue_instantly cue="$MissionDataTable.$NextMission.$WrapperCue" param="null"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <!--If there is a followup mission, signal it with whatever parameters it needs-->
                        <assert value="false" text="'Next mission ' + $MissionDataTable.$NextMission + ' is missing handling in ' + namespace + '. It should be explicitly signalled with whatever parameters it requires. [Owen]'"/>
                      </do_else>
                    </do_if>
                  </do_if>
                  <do_elseif value="static.$EndFeedbackValue.$ID" exact="'$MISSION_TIMEOUT'">
                  </do_elseif>

                  <cancel_cue cue="namespace"/>
                </do_if>
                <do_elseif value="@static.$FeedbackValue">
                  <debug_text text="'Mission signalled with feedback' + static.$FeedbackValue" chance="$DebugChance"/>
                  <do_if value="static.$FeedbackValue.$ID == '$MISSION_GENERATED'">
                    <!--If a followup mission, no need to inform the Mission Thread Manager of the mission successfully being generated as $Definition.$SpawnSuccessCue was already called for this mission-->
                    <do_if value="not $FollowUp">
                      <set_value name="$MissionDataTable" exact="event.param.clone"/>
                      <set_value name="$MissionDataTable.$WrapperCue" exact="namespace"/>
                      <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
                    </do_if>
                    <set_value name="$SuccessfullyGenerated" exact="true"/>
                  </do_if>
                </do_elseif>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <cue name="Destroy_Objects__Clear_Explosives" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <set_value name="$Difficulty" exact="level.easy"/>
        <set_value name="$MissionLevel" exact="1"/>

        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>

        <!--This is an example of using a library to create a group of targets. If the targets are invalid by the time the sub-mission runs, the library could be run again.
          Could also be done for finding an existing object as a target-->

        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>


        <find_cluster_in_range name="$LocalClusters" object="player.entity" maxdistance="3" multiple="true"/>
        <do_all exact="$LocalClusters.count" counter="$c">
          <find_sector name="$Sectors" owner="$Definition.$ThreadData.$Faction" space="$LocalClusters.{$c}" multiple="true"/>
          <do_all exact="$Sectors.count" counter="$i">
            <set_value name="$Sector" exact="$Sectors.{$i}"/>

            <!--### TELADI ###-->
            <do_if value="$Page == 30204">
              <do_if value="$TextOffset == 101000 or $TextOffset == 101100 or $TextOffset == 101200">
                <set_value name="$Valid" exact="1" comment="Valid text offset"/>
                <find_zone name="$Zone" space="$Definition.$ThreadData.$HQ.sector" normalzone="true"/>
                <do_if value="$Zone">
                  <set_value name="$Sector" exact="player.sector"/>
                  <do_if value="$TextOffset == 101100">
                    <set_value name="$ExplosiveOwner" exact="$Definition.$ThreadData.$Faction" comment="Remove own mines gone bad"/>
                  </do_if>
                  <do_else>
                    <set_value name="$ExplosiveOwner" exact="[faction.scaleplate, faction.hatikvah].random" comment="Pirates"/>
                  </do_else>
                  <include_actions ref="md.GM_Destroy_Objects.FindMinefieldOrRiggedAsteroids" comment="input: $Sector, $ExplosiveOwner output: $Explosives"/>
                  <do_if value="$Explosives.count">
                    <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                  </do_if>
                </do_if>
              </do_if>
            </do_if>

            <!--### ANTIGONE ###-->
            <do_if value="$Page == 30205">
              <do_if value="$TextOffset == 101000 or $TextOffset == 101100 or $TextOffset == 101200 or $TextOffset == 101600">
                <set_value name="$Valid" exact="1" comment="Valid text offset"/>
                <find_zone name="$Zone" space="$Definition.$ThreadData.$HQ.sector" normalzone="true"/>
                <do_if value="$Zone">
                  <set_value name="$Sector" exact="player.sector"/>
                  <do_if value="$TextOffset == 101100 or $TextOffset == 101600">
                    <set_value name="$ExplosiveOwner" exact="$Definition.$ThreadData.$Faction" comment="Remove own mines gone bad"/>
                  </do_if>
                  <do_else>
                    <set_value name="$ExplosiveOwner" exact="[faction.scaleplate, faction.hatikvah].random" comment="Pirates"/>
                  </do_else>
                  <!--do_all exact="3" comment="testing the code by placing mines">
                      <create_object macro="macro.weapon_gen_mine_01_macro" owner="$ExplosiveOwner" sector="$Sector">
                        <position max="120km" min="10km" x="0" y="0" z="0"/>
                      </create_object>
                      <debug_text text="'mines spawn loop'"/>
                    </do_all-->

                  <include_actions ref="md.GM_Destroy_Objects.FindMinefieldOrRiggedAsteroids" comment="input: $Sector, $ExplosiveOwner output: $Explosives"/>
                  <do_if value="$Explosives.count">
                    <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
                  </do_if>
                </do_if>
              </do_if>
            </do_if>

            <do_if value="$Valid == 2">
              <break/>
            </do_if>
          </do_all>
          <do_if value="$Valid == 2">
            <break/>
          </do_if>
        </do_all>

        <do_if value="$Valid == 2">
          <set_value name="$MissionLevel" exact="($Explosives.count / 3)i" operation="add"/>

          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Destroy_Objects__Clear_Explosives_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Destroy_Objects__Clear_Explosives_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.destroy"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="Destroy_Objects__Clear_Explosives_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Destroy_Objects__Clear_Explosives_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Destroy_Objects__Clear_Explosives_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="Destroy_Objects__Clear_Explosives_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Destroy_Objects__Clear_Explosives_Create_GM"/>
          </actions>
        </cue>

        <cue name="Destroy_Objects__Clear_Explosives_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!--event.param == result cue
            Result saved to event.param.$Targets-->
            <cue name="Destroy_Objects__Clear_Explosives__New_Targets" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="md.GM_Destroy_Objects.FindMinefieldOrRiggedAsteroids" comment="input: $Sector, $ExplosiveOwner output: $Explosives"/>
                <add_to_group groupname="event.param.$Targets" group="$Explosives"/>
                <debug_text text="'Finding new targets as the previous group was invalid. Found: ' + $Explosives.count" chance="$DebugChance"/>
              </actions>
            </cue>

            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Destroy_Objects__Clear_Explosives_Ref" ref="md.GM_Destroy_Objects.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"          value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Destroy_Objects__Clear_Explosives_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>

              <param name="Page" value="$Page"/>
              <param name="TextOffset" value="$TextOffset"/>

              <param name="MissionLevel" value="$MissionLevel"/>
              <param name="Difficulty" value="$Difficulty"/>

              <param name="TargetSector"        value="$Explosives.{1}.sector.knownname"/>
              <param name="Targets"             value="$Explosives"/>
              <param name="TargetRequestCue"    value="Destroy_Objects__Clear_Explosives__New_Targets"/>

              <param name="DebugChance" value="$DebugChance"/>
            </cue>

            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Destroy_Objects__Clear_Explosives_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <cue name="Get_Exact_Fleet__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <set_value name="$Difficulty" exact="level.hard"/>
        <set_value name="$MissionLevel" exact="1"/>

        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>

        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>

        <!--### TELADI ###-->
        <do_if value="$Page == 30204">
          <do_if value="$TextOffset == 102000" comment="acquire 1 specific ship (using RML_AcquireFleet)">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <get_ship_definition macro="$ShipMacro" size="class.ship_m" faction="$Definition.$ThreadData.$Faction" tags="[tag.mission, tag.trader]" />
            <do_if value="$ShipMacro">
              <do_any>
                <!--TODO @Owen @Roger - generate a suitable fleet table for each variant-->
                <set_value name="$Fleet" exact="[
                            table[
                              $macro = $ShipMacro,
                              $amount = 1,
                            ]
                           ]"/>
              </do_any>
              <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$Area.$HostSectors.clone"/>
              <do_if value="$PotentialLocations.count">
                <set_value name="$Sector" exact="$PotentialLocations.random"/>
                <find_station name="$PositionObject" space="$Sector" owner="$Definition.$ThreadData.$Faction"/>
                <do_if value="$PositionObject">
                  <get_safe_pos result="$Offset" object="$PositionObject" sector="$Sector" allowyaxis="false" min="5km" max="10km"/>
                </do_if>
                <do_else>
                  <create_position name="$Offset" space="$Sector" min="5km" max="250km" />
                  <set_value name="$Offset"     exact="position.[$Offset.x, 0, $Offset.z]" comment="Engine limitation, keep it on ecliptic (y=0)"/>
                </do_else>
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_if>
            </do_if>
          </do_if>
        </do_if>
        <!--### ANTIGONE ###-->
        <do_if value="$Page == 30205">
          <do_if value="$TextOffset == 102000" comment="acquire 1 specific ship (using RML_AcquireFleet)">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <get_ship_definition macro="$ShipMacro" size="class.ship_m" faction="$Definition.$ThreadData.$Faction" tags="[tag.mission, tag.trader]" />
            <do_if value="$ShipMacro">
              <do_any>
                <!--TODO @Owen @Roger - generate a suitable fleet table for each variant-->

                <set_value name="$Fleet" exact="[
                            table[
                              $macro = $ShipMacro,
                              $amount = 1,
                            ]
                           ]"/>
              </do_any>
              <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$Area.$HostSectors.clone"/>
              <do_if value="$PotentialLocations.count">
                <set_value name="$Sector" exact="$PotentialLocations.random"/>
                <find_station name="$PositionObject" space="$Sector" owner="$Definition.$ThreadData.$Faction"/>
                <do_if value="$PositionObject">
                  <get_safe_pos result="$Offset" object="$PositionObject" sector="$Sector" allowyaxis="false" min="5km" max="10km"/>
                </do_if>
                <do_else>
                  <create_position name="$Offset" space="$Sector" min="5km" max="250km" />
                  <set_value name="$Offset"     exact="position.[$Offset.x, 0, $Offset.z]" comment="Engine limitation, keep it on ecliptic (y=0)"/>
                </do_else>
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_if>
            </do_if>

          </do_if>
        </do_if>

        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Get_Exact_Fleet__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Get_Exact_Fleet__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.build_ship"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="Get_Exact_Fleet__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Get_Exact_Fleet__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Get_Exact_Fleet__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="Get_Exact_Fleet__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Get_Exact_Fleet__Standard_Create_GM"/>
          </actions>
        </cue>

        <cue name="Get_Exact_Fleet__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="Get_Exact_Fleet__Standard_Ref" ref="md.GM_GetExactFleet.Start">
              <param name="Client" value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"          value="$MissionCue"/>
              <param name="MissionThread" value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue" value="Get_Exact_Fleet__Standard_GM_Event"/>
              <param name="WithoutOffer" value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup" value="$Definition.$ForceCleanupCue"/>

              <param name="Page"              value="$Page"/>
              <param name="TextOffset"        value="$TextOffset"/>
              <param name="MissionLevel"      value="$MissionLevel"/>
              <param name="Difficulty"        value="$Difficulty"/>

              <param name="Faction"           value="$Definition.$ThreadData.$Faction"    comment="this faction..."/>
              <param name="Fleet"             value="$Fleet" comment="is looking for these ships with the specified upgrades"/>
              <param name="TargetSector"      value="$Sector"/>
              <param name="TargetOffset"      value="$Offset"/>

              <param name="DebugChance" value="$DebugChance"/>
            </cue>

            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Get_Exact_Fleet__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->

    <library name="DeployInPlace__Satellite_In_Host_Space">
      <actions>
        <do_if value="$Definition.$ThreadData.$Area.$HostSectors.count">
          <set_value name="$TargetSector" exact="$Definition.$ThreadData.$Area.$HostSectors.random"/>
          <do_if value="$TargetSector">
            <create_position name="$TargetOffset" max="150km"/>
            <set_value name="$Y" min="-5km" max="5km"/>
            <set_value name="$TargetOffset" exact="position.[$TargetOffset.x, $Y, $TargetOffset.z]"/>
            <get_safe_pos result="$TargetOffset" sector="$TargetSector" allowyaxis="false" radius="5km" value="$TargetOffset"/>
            <set_value name="$TargetRadius" exact="500m"/>

            <set_value name="$DeployableCategory" exact="deployablecategory.satellite"/>
            <set_value name="$DropAmount" exact="1"/>

            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
        </do_if>
      </actions>
    </library>

    <library name="DeployInPlace__LaserTowers_Around_Allied_Object">
      <actions>
        <do_if value="$Definition.$ThreadData.$Area.$HostSectors.count">
          <set_value name="$TargetSector" exact="$Definition.$ThreadData.$Area.$HostSectors.random"/>
          <do_if value="$TargetSector">
            <!--TODO @Owen find entry points towards enemy space-->
            <find_station name="$AnchorObject" space="$TargetSector">
              <match_relation_of faction="$Definition.$ThreadData.$Faction" relation="friend" comparison="ge"/>
            </find_station>

            <do_if value="$AnchorObject">
              <create_position name="$TargetOffset" object="$AnchorObject" space="$TargetSector" />
              <!--TODO @Owen @Roger This is a test to see if a sphere being around an object is fine even if it's away from the y axis -->
              <!--<set_value name="$TargetOffset"     exact="position.[$TargetOffset.x, 0, $TargetOffset.z]" comment="Keep guidance sphere on ecliptic (y=0)"/>-->
              <set_value name="$TargetRadius" exact="$AnchorObject.size + 5km"/>

              <set_value name="$DeployableCategory" exact="deployablecategory.lasertower"/>
              <set_value name="$DropAmount" exact="3"/>

              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_if>
        </do_if>
      </actions>
    </library>

    <cue name="DeployInPlace__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <set_value name="$Difficulty" exact="level.veryeasy"/>
        <set_value name="$MissionLevel" exact="1"/>

        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>
        <set_value name="$Valid" exact="0"/>

        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->

        <!--### TELADI ###-->
        <do_if value="$Page == 30204">
          <do_if value="$TextOffset == 104000" comment="Intelligence on competition variation">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="DeployInPlace__Satellite_In_Host_Space"/>
          </do_if>
          <do_elseif value="$TextOffset == 104100" comment="Laser towers around allied object variation">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="DeployInPlace__LaserTowers_Around_Allied_Object"/>
          </do_elseif>
        </do_if>
        <!--### ANTIGONE ###-->
        <do_if value="$Page == 30205">
          <do_if value="$TextOffset == 104000" comment="Intelligence on competition variation">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="DeployInPlace__Satellite_In_Host_Space"/>
          </do_if>
          <do_elseif value="$TextOffset == 104100" comment="Laser towers around allied object variation">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="DeployInPlace__LaserTowers_Around_Allied_Object"/>
          </do_elseif>
        </do_if>

        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="DeployInPlace__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="DeployInPlace__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.deploy"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="DeployInPlace__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="DeployInPlace__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="DeployInPlace__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="DeployInPlace__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="DeployInPlace__Standard_Create_GM"/>
          </actions>
        </cue>

        <cue name="DeployInPlace__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <!-- Trigger actual GM, passing the specified parameters -->
            <cue name="DeployInPlace__Standard_Ref" ref="md.GM_DeployInPlace.Start">
              <param name="Client"              value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"          value="$MissionCue"/>
              <param name="MissionThread"       value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue"     value="DeployInPlace__Standard_GM_Event"/>
              <param name="WithoutOffer"        value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup"        value="$Definition.$ForceCleanupCue"/>

              <param name="Page"                value="$Page"/>
              <param name="TextOffset"          value="$TextOffset"/>
              <param name="MissionLevel"        value="$MissionLevel"/>
              <param name="Difficulty"          value="$Difficulty"/>

              <param name="Faction"             value="$Definition.$ThreadData.$Faction"/>
              <param name="TargetSector"        value="$TargetSector"/>
              <param name="TargetOffset"        value="$TargetOffset"/>
              <param name="TargetRadius"        value="10km"/>
              <param name="TargetCount"         value="1"/>
              <param name="DeployableCategory"  value="$DeployableCategory"/>

              <param name="DebugChance" value="$DebugChance"/>
            </cue>

            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="DeployInPlace__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <!--Variant Helper Libraries
    Helper libraries to be call from different threads but want to have the same basic variant rules
    If you want to have something custom for a faction e.g. if Vs Xenon, have twice as many enemies, either write your own variant within the cue itself, or modify variables after calling the library-->

    <library name="Achieve_Coverage__Competitor_Space">
      <actions>
        <set_value name="$Location" exact="null"/>
        <do_if value="$Definition.$ThreadData.$Area.$OtherSectors.count">
          <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$Area.$OtherSectors.clone"/>
          <do_while value="$PotentialLocations.count or not $Location">
            <do_any>
              <set_value name="$PotentialLocation" exact="$PotentialLocations.{1}" weight="50"/>
              <set_value name="$PotentialLocation" exact="$PotentialLocations.random" weight="20"/>
            </do_any>

            <!--Check that there are not already a huge amount of satellites already in this location-->
            <find_object name="$ExistingSatellites" class="class.satellite" owner="[faction.player, $Definition.$ThreadData.$Faction]" space="$PotentialLocation" multiple="true"/>
            <debug_text text="'$ExistingSatellites found: ' + $ExistingSatellites.count" chance="$DebugChance"/>
            <do_if value="$ExistingSatellites.count lt 100">
              <debug_text text="'$ExistingSatellites.count is lower than 100. Location is valid.'" chance="$DebugChance"/>
              <set_value name="$Location" exact="$PotentialLocation"/>
              <break/>
            </do_if>
            <do_else>
              <remove_value name="$PotentialLocations.{$PotentialLocations.indexof.{$PotentialLocation}}"/>
            </do_else>
          </do_while>
        </do_if>
        <do_else>
          <debug_text text="'No $OtherSectors found. Achieve Coverage cannot run in competitor space.'" chance="$DebugChance"/>
        </do_else>

        <do_if value="$Location">
          <create_position name="$Offset" space="$Location" max="150km" />
          <set_value name="$Y" exact="0km" comment="On the ecliptic"/>
          <set_value name="$Offset" exact="position.[$Offset.x, $Y, $Offset.z]"/>
          <get_safe_pos result="$Offset" sector="$Location" allowyaxis="false" radius="5km"/>

          <include_actions ref="md.GM_AchieveCoverage.ConfigureDifficulty" comment="input: $MissionLevel, output: $MissionLevel, $Radius"/>

          <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
        </do_if>
      </actions>
    </library>

    <cue name="Achieve_Coverage__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <set_value name="$Difficulty" exact="level.veryeasy"/>
        <set_value name="$MissionLevel" exact="1"/>

        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>

        <!--### TELADI ###-->
        <do_if value="$Page == 30204">
          <do_if value="$TextOffset == 103000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="Achieve_Coverage__Competitor_Space"/>
          </do_if>
        </do_if>
        <!--### ANTIGONE ###-->
        <do_if value="$Page == 30205">
          <do_if value="$TextOffset == 103000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="Achieve_Coverage__Competitor_Space"/>
          </do_if>
        </do_if>

        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Achieve_Coverage__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Achieve_Coverage__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective-->
                    <objective step="1" action="objective.achieve_coverage"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="Achieve_Coverage__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Achieve_Coverage__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <debug_text text="'Followup mission signalled with ' + event.param"/>
                <!--Check that the correct parameters have been passed-->
                <set_value name="this.$Valid" exact="false"/>
                <do_if value="typeof event.param == datatype.table">
                  <do_if value="@event.param.$Sector and @event.param.$Offset">
                    <set_value name="this.$Valid" exact="true"/>
                    <set_value name="$Location" exact="event.param.$Sector"/>
                    <create_position name="$Offset" x="event.param.$Offset.x" y="0" z="event.param.$Offset.z"/>
                    <signal_cue cue="Achieve_Coverage__Standard_Create_GM"/>
                    <cancel_cue cue="parent"/>
                  </do_if>
                </do_if>

                <do_if value="not this.$Valid">
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_if>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="Achieve_Coverage__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Achieve_Coverage__Standard_Create_GM"/>
          </actions>
        </cue>

        <cue name="Achieve_Coverage__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <cue name="Achieve_Coverage__Standard_Ref" ref="md.GM_AchieveCoverage.Start">
              <param name="Client"              value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"          value="$MissionCue"/>
              <param name="MissionThread"       value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue"     value="Achieve_Coverage__Standard_GM_Event"/>
              <param name="WithoutOffer"        value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup"        value="$Definition.$ForceCleanupCue"/>

              <param name="Page"              value="$Page"/>
              <param name="TextOffset"        value="$TextOffset"/>
              <param name="MissionLevel"      value="$MissionLevel"/>
              <param name="Difficulty"        value="$Difficulty"/>

              <param name="Faction"           value="$Definition.$ThreadData.$Faction"    comment="this faction..."/>
              <param name="CoverageSector"    value="$Location"/>
              <param name="CoverageOffset"    value="$Offset"/>
              <param name="CoverageRadius"    value="$Radius"/>
              <param name="CoveragePercent"   value="75"/>

              <param name="DebugChance" value="$DebugChance"/>
            </cue>

            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Achieve_Coverage__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>


    <library name="RepairObject_SetupDataLeaks">
      <actions>
        <do_if value="$TargetStations.count">
          <do_all exact="$TargetStations.count" counter="$s">
            <debug_text text="'checking ' + $TargetStations.{$s}.name" chance="$DebugChance"/>
            <find_object_component name="$TargetObjectsTmp" object="$TargetStations.{$s}" class="class.signalleak" multiple="true"/>
            <!-- only data-leaks can be repaired (so filter out signal-leaks) -->
            <debug_text text="'Leaks on station: ' + $TargetObjectsTmp.count" chance="$DebugChance"/>
            <do_all exact="$TargetObjectsTmp.count" counter="$i">
              <do_if value="$TargetObjectsTmp.{$i}.type == signalleaktype.data">
                <add_to_group groupname="$TargetObjects" object="$TargetObjectsTmp.{$i}"/>
                <debug_text text="'Found dataleak: ' + $TargetObjectsTmp.{$i}" chance="$DebugChance"/>
              </do_if>
            </do_all>
            <do_if value="$TargetObjects.count">
              <break/>
            </do_if>
          </do_all>

          <!-- Limit # of targetcomponents to something reasonable -->
          <set_value name="$targetcount" exact="[3,4,5].random"/>
          <do_while value="$TargetObjects.count gt $targetcount">
            <remove_from_group group="$TargetObjects" object="$TargetObjects.random"/>
          </do_while>
        </do_if>
      </actions>
    </library>


    <cue name="RepairObject__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <set_value name="$Difficulty" exact="level.veryeasy"/>
        <set_value name="$MissionLevel" exact="1"/>

        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>

        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <set_value name="$Sector" exact="player.sector"/>
        <set_value name="$Cluster" exact="player.cluster"/>

        <!--### TELADI ###-->
        <do_if value="$Page == 30204">
          <do_if value="$TextOffset == 105000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$Faction" exact="$Definition.$ThreadData.$Faction"/>
            <set_value name="$RepairPercentage" exact="100"/>
            <include_actions ref="md.GM_RepairObject.RepairObject_SetupSatellites" comment="input: $Cluster, $Faction output: $TargetObjects(-group)"/>
          </do_if>
          <do_elseif value="$TextOffset == 105100">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <create_group groupname="$TargetObjects"/>
            <set_value name="$RepairPercentage" exact="100" comment="dataleak requires 100% repair, always"/>
            <find_station name="$TargetStations" space="player.sector" owner="$Definition.$ThreadData.$Faction" multiple="true"/>
            <include_actions ref="RepairObject_SetupDataLeaks"/>
          </do_elseif>
        </do_if>
        <do_elseif value="$Page == 30205">
          <do_if value="$TextOffset == 105000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$Faction" exact="$Definition.$ThreadData.$Faction"/>
            <set_value name="$RepairPercentage" exact="100"/>
            <include_actions ref="md.GM_RepairObject.RepairObject_SetupSatellites" comment="input: $Cluster, $Faction output: $TargetObjects(-group)"/>
          </do_if>
          <do_elseif value="$TextOffset == 105100">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <create_group groupname="$TargetObjects"/>
            <set_value name="$RepairPercentage" exact="100" comment="dataleak requires 100% repair, always"/>
            <find_station name="$TargetStations" space="player.sector" owner="$Definition.$ThreadData.$Faction" multiple="true"/>
            <include_actions ref="RepairObject_SetupDataLeaks"/>
          </do_elseif>
        </do_elseif>

        <do_if value="@$TargetObjects.count">
          <set_value name="$MissionLevel" exact="$TargetObjects.count" operation="add"/>
          <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
        </do_if>

        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="RepairObject__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="RepairObject__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.repair">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.repair"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="RepairObject__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="RepairObject__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="RepairObject__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="RepairObject__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="RepairObject__Standard_Create_GM"/>
          </actions>
        </cue>

        <cue name="RepairObject__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <cue name="RepairObject__Standard_Ref" ref="md.GM_RepairObject.Start">
              <param name="Client"              value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"          value="$MissionCue"/>
              <param name="MissionThread"       value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue"     value="RepairObject__Standard_GM_Event"/>
              <param name="WithoutOffer"        value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup"        value="$Definition.$ForceCleanupCue"/>

              <param name="Page"                value="$Page"/>
              <param name="TextOffset"          value="$TextOffset"/>
              <param name="MissionLevel"        value="$MissionLevel"/>
              <param name="Difficulty"          value="$Difficulty"/>

              <param name="Targets"             value="$TargetObjects"/>
              <param name="RepairPercentage"    value="$RepairPercentage"/>

              <param name="DebugChance"         value="$DebugChance"/>
            </cue>

            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="RepairObject__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <cue name="FindObject__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <set_value name="$Difficulty" exact="level.easy"/>
        <set_value name="$MissionLevel" exact="1"/>

        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>

        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>

        <set_value name="$Faction" exact="$Definition.$ThreadData.$Faction"/>
        <set_value name="$DeliveryStation" exact="null"/>
        <set_value name="$DeliveryStep" exact="true"/>

        <!--### TELADI ###-->
        <do_if value="$Page == 30204">
          <!-- With Delivery -->
          <do_if value="$TextOffset == 106000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="md.GM_FindObject.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $TargetRadius, $LockboxMacro"/>
            <include_actions ref="md.GM_FindObject.Setup_SetupCrates_Normal"/>
            <create_group groupname="$TargetObjects" comment="empty group, filled in postinit"/>
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
        </do_if>
        <!--### ANTIGONE ###-->
        <do_elseif value="$Page == 30205">
          <!-- With Delivery -->
          <do_if value="$TextOffset == 106000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="md.GM_FindObject.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $TargetRadius, $LockboxMacro"/>
            <include_actions ref="md.GM_FindObject.Setup_SetupCrates_Normal"/>
            <create_group groupname="$TargetObjects" comment="empty group, filled in postinit"/>
            <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
          </do_if>
        </do_elseif>

        <!-- Lockbox spawn location set randomly. Once there are more variations, add the options below to the appropriate offset above instead -->
        <do_any>
          <!-- Lockboxes in enemy territory -->
          <do_all>
            <include_actions ref="md.GM_FindObject.Setup_DangerousSpawnLocation" comment="input: $Faction, output: $TargetOffset and $TargetSector"/>
            <do_if value="$Faction == faction.antigone">
              <set_value name="$MissionLevel" exact="3" operation="add" comment="Player just has to travel a bit farther than normally."/>
            </do_if>
            <do_elseif value="$Faction == faction.teladi">
              <set_value name="$Difficulty" exact="level.medium" comment="Player gets sent into Xenon space."/>
            </do_elseif>
            <set_value name="$Valid" exact="3" comment="Valid spawn location"/>
          </do_all>
          <!-- Lockboxes in player sector -->
          <do_all>
            <include_actions ref="md.GM_FindObject.Setup_SpawnLocation" comment="input: -, output: $TargetOffset and $TargetSector"/>
            <set_value name="$Valid" exact="3" comment="Valid spawn location"/>
          </do_all>
        </do_any>

        <do_if value="$Valid == 3">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_elseif value="$Valid == 2">
          <debug_text text="'Unable to find suitable spawn location for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Lennart]'" chance="$DebugChance"/>
        </do_elseif>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="FindObject__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="FindObject__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.repair"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="FindObject__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="FindObject__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="FindObject__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="FindObject__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="FindObject__Standard_Create_GM"/>
          </actions>
        </cue>

        <cue name="FindObject__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <do_if value="$DeliveryStep == true">

              <!-- Set a random $Faction-owned station in the sector that's closest to $TargetSector as $DeliveryStation -->
              <do_if value="$DeliveryStation == null">
                <set_value name="$TargetLocation" exact="$TargetSector"/>
                <include_actions ref="md.LIB_Generic.FindNearestStationForFaction" comment="input: $Faction and $TargetLocation, output: $SuitableStation"/>
                <set_value name="$DeliveryStation" exact="$SuitableStation" />
              </do_if>

              <!-- Create room for delivery NPC -->
              <get_room_definition macro="$DeliveryCorridorMacro" doors="$DeliveryDoors" race="$DeliveryStation.owner.primaryrace" tags="tag.corridor"/>
              <get_room_definition macro="$DeliveryRoomMacro" tags="tag.bar"/>
              <do_if value="$DeliveryCorridorMacro and $DeliveryRoomMacro">
                <set_value name="$DeliveryInteriorName" exact="readtext.{20007}.{1031}"/>
              </do_if>

              <create_cue_actor cue="FindObject__Standard_Create_GM" name="$MissionActor">
                <select faction="$Definition.$ThreadData.$Faction"/>
              </create_cue_actor>
              <set_entity_traits entity="$MissionActor" missionactor="true" customhandler="true"/>
              <set_entity_type entity="$MissionActor" type="entitytype.trader"/>

            </do_if>
          </actions>
          <cues>
            <cue name="FindObject__Standard_Ref" ref="md.GM_FindObject.Start">
              <param name="Client"              value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"          value="$MissionCue"/>
              <param name="MissionThread"       value="$Definition.$ThreadCue"/>
              <param name="ReportActivateCue"   value="FindObject__Standard_GM_PostInit"/>
              <param name="ReportSignalCue"     value="FindObject__Standard_GM_Event"/>
              <param name="WithoutOffer"        value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup"        value="$Definition.$ForceCleanupCue"/>

              <param name="Page"              value="$Page"/>
              <param name="TextOffset"        value="$TextOffset"/>
              <param name="MissionLevel"      value="$MissionLevel"/>
              <param name="Difficulty"        value="$Difficulty"/>

              <param name="Faction"           value="$Definition.$ThreadData.$Faction"/>
              <param name="TargetSector"      value="$TargetSector"/>
              <param name="TargetOffset"      value="$TargetOffset"/>
              <param name="TargetRadius"      value="$TargetRadius"/>
              <param name="TargetObjects"     value="$TargetObjects"/>

              <param name="DeliveryNPC"       value="@$MissionActor"   comment="The NPC to which the items should be delivered. If null, the mission ends on collecting the ware (primarily for legacy mission support)" />
              <param name="PlaceNPC"          value="$DeliveryStep"    comment="Does the mission handle the placement and removal of the delivery NPC? If false, some other system must be in charge of doing so." />
              <!-- ************************************************************************************************************************************************************************ -->
              <!-- If the mission is to manage placing the delivery NPC, all of these parameters must be passed in together -->
              <!-- Room, corridor and door definitions could be provided by the caller through get_room_definition -->
              <param name="DeliveryObject"        value="@$DeliveryStation"  comment="The object on which to create the interior" />
              <param name="DeliveryRoomMacro"     value="@$DeliveryRoomMacro" />
              <param name="DeliveryCorridorMacro" value="@$DeliveryCorridorMacro" />
              <param name="DeliveryDoors"         value="@$DeliveryDoors" />
              <param name="DeliveryInteriorName"  value="@$DeliveryInteriorName" />

              <param name="DebugChance" value="$DebugChance"/>
            </cue>

            <cue name="FindObject__Standard_GM_PostInit" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="md.GM_FindObject.Setup_SpawnCrates" comment="returns $TargetObjects"/>
                <set_value name="event.param.$TargetObjects" exact="$TargetObjects"/>
              </actions>
            </cue>

            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="FindObject__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <cue name="HackPanel__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <set_value name="$Difficulty" exact="level.medium"/>
        <set_value name="$MissionLevel" exact="1"/>

        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>

        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>

        <!--### TELADI ###-->
        <do_if value="$Page == 30204">
          <do_if value="$TextOffset == 107000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$PanelType" exact="[controlpaneltype.hack_storage, controlpaneltype.hack_discount].random"/>
            <find_station groupname="$TargetObjects" space="player.sector" owner="faction.teladi" multiple="false"/>
            <do_if value="$TargetObjects.count">
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_if>
        </do_if>
        <!--### ANTIGONE ###-->
        <do_if value="$Page == 30205">
          <do_if value="$TextOffset == 107000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$PanelType" exact="[controlpaneltype.hack_buildmodules, controlpaneltype.hack_production].random"/>
            <find_station groupname="$TargetObjects" space="player.sector" owner="faction.antigone" multiple="false"/>
            <do_if value="$TargetObjects.count">
              <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
            </do_if>
          </do_if>
        </do_if>

        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="HackPanel__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="HackPanel__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.repair"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="HackPanel__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="HackPanel__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="HackPanel__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="HackPanel__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="HackPanel__Standard_Create_GM"/>
          </actions>
        </cue>

        <cue name="HackPanel__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <cues>
            <cue name="HackPanel__Standard_Ref" ref="md.GM_HackPanel.Start">
              <param name="Client"              value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"          value="$MissionCue"/>
              <param name="MissionThread"       value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue"     value="HackPanel__Standard_GM_Event"/>
              <param name="WithoutOffer"        value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup"        value="$Definition.$ForceCleanupCue"/>

              <param name="Page"              value="$Page"/>
              <param name="TextOffset"        value="$TextOffset"/>
              <param name="MissionLevel"      value="$MissionLevel"/>
              <param name="Difficulty"        value="$Difficulty"/>

              <param name="Faction"           value="$Definition.$ThreadData.$Faction"/>
              <param name="Targets_Param"     value="$TargetObjects"/>
              <param name="PanelType"         value="$PanelType"/>

              <param name="DebugChance" value="$DebugChance"/>
            </cue>

            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="HackPanel__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <cue name="Rescue_Ship__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <set_value name="$Difficulty" exact="level.easy"/>
        <set_value name="$MissionLevel" exact="1"/>

        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>

        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <set_value name="$DeliveryStation" exact="null"/>
        <set_value name="$yVariation" min="-5km" max="5km"/>
        <set_value name="$Faction" exact="$Definition.$ThreadData.$Faction"/>

        <!--### TELADI ###-->
        <do_if value="$Page == 30204">
          <do_if value="$TextOffset == 108000" comment="seeker mines, player needs to clear">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <get_ship_definition reference="$SalvageShipDef" size="class.ship_m" faction="$Faction" tags="tag.mission" />
            <do_if value="$SalvageShipDef">
              <set_value name="$Sector" exact="player.sector"/>
              <create_position name="$Offset" space="$Sector" max="100km" />
              <set_value name="$Offset"     exact="position.[$Offset.x, $yVariation, $Offset.z]" comment="Engine limitation, keep it near ecliptic"/>
              <set_value name="$SalvageShipFaction" exact="$Definition.$ThreadData.$Faction"/>
              <set_value name="$HostileFaction" exact="faction.ownerless"/>
              <include_actions ref="md.GM_Rescue_Ship.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $HostileAmount, $HostileRange"/>
              <set_value name="$Valid" exact="2" comment="created in post-init"/>
            </do_if>
          </do_if>
        </do_if>
        <!--### ANTIGONE ###-->
        <do_if value="$Page == 30205">
          <do_if value="$TextOffset == 108000" comment="seeker mines, player needs to clear">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <get_ship_definition reference="$SalvageShipDef" size="class.ship_m" faction="$Faction" tags="tag.mission" />
            <do_if value="$SalvageShipDef">
              <set_value name="$Sector" exact="player.sector"/>
              <create_position name="$Offset" space="$Sector" max="100km" />
              <set_value name="$Offset"     exact="position.[$Offset.x, $yVariation, $Offset.z]"/>
              <set_value name="$SalvageShipFaction" exact="$Definition.$ThreadData.$Faction"/>
              <set_value name="$HostileFaction" exact="faction.ownerless"/>
              <include_actions ref="md.GM_Rescue_Ship.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $HostileAmount, $HostileRange"/>
              <set_value name="$Valid" exact="2" comment="created in post-init"/>
            </do_if>
          </do_if>
        </do_if>
        <!-- abort/error handling -->
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Rescue_Ship__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Rescue_Ship__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.repair"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="Rescue_Ship__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Rescue_Ship__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Rescue_Ship__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="Rescue_Ship__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Rescue_Ship__Standard_Create_GM"/>
          </actions>
        </cue>

        <cue name="Rescue_Ship__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <create_group groupname="$Hostiles" comment="hostiles spawned in PostInit"/>
          </actions>
          <cues>
            <cue name="Rescue_Ship__Standard_Ref" ref="md.GM_Rescue_Ship.Start">
              <param name="Client"              value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"          value="$MissionCue"/>
              <param name="MissionThread"       value="$Definition.$ThreadCue"/>
              <param name="ReportActivateCue"   value="Rescue_Ship__Standard_GM_PostInit"/>
              <param name="ReportSignalCue"     value="Rescue_Ship__Standard_GM_Event"/>
              <param name="WithoutOffer"        value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup"        value="$Definition.$ForceCleanupCue"/>

              <param name="Page"              value="$Page"/>
              <param name="TextOffset"        value="$TextOffset"/>
              <param name="MissionLevel"      value="$MissionLevel"/>
              <param name="Difficulty"        value="$Difficulty"/>

              <param name="Faction"           value="$Faction"/>
              <!--param name="SalvageShip"       value="$SalvageShip"/-->
              <param name="Hostiles"          value="$Hostiles"/>

              <param name="DebugChance"       value="$DebugChance"/>
            </cue>

            <cue name="Rescue_Ship__Standard_GM_PostInit" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="md.GM_Rescue_Ship_Lib.Setup_Variation_SeekingMines"
                  comment="requires $SalvageShipFaction, $Sector, $Offset - returns $SalvageShip and $Hostiles"/>
                <do_if value="$SalvageShip">
                  <!-- event.param is the cue which triggered the callback, write to it's local variables -->
                  <set_value name="event.param.$SalvageShip" exact="$SalvageShip"/>
                  <add_to_group groupname="event.param.$Hostiles" group="$Hostiles"/>
                </do_if>
              </actions>
            </cue>


            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Rescue_Ship__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <library name="Rescue_Ship__FindNearbyStation">
      <actions>
        <!-- find closest station to return salvageship to -->
        <find_station name="$StationCandidates" space="$SalvageShip.sector" owner="$Definition.$ThreadData.$Faction" multiple="true"/>
        <debug_text text="'StationsFound: ' + $StationCandidates.count + ' for faction ' + $Definition.$ThreadData.$Faction.name" chance="$DebugChance"/>
        <set_value name="$DeliveryStation" exact="null"/>
        <set_value name="$DeliveryDistance" exact="9999km"/>
        <do_all exact="$StationCandidates.count" counter="$i">
          <set_value name="$StationDistance" exact="$StationCandidates.{$i}.distanceto.{$SalvageShip}"/>
          <do_if value="$StationDistance lt $DeliveryDistance">
            <set_value name="$DeliveryStation" exact="$StationCandidates.{$i}"/>
            <set_value name="$DeliveryDistance" exact="$StationDistance"/>
          </do_if>
        </do_all>
      </actions>
    </library>

    <cue name="Rescue_Ship_2__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <set_value name="$Difficulty" exact="level.easy"/>
        <set_value name="$MissionLevel" exact="1"/>

        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>

        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <set_value name="$DeliveryStation" exact="null"/>
        <set_value name="$yVariation" min="-5km" max="5km"/>

        <!--### TELADI ###-->
        <do_if value="$Page == 30204">
          <do_if value="$TextOffset == 108100" comment="static mines, player needs to fly it out">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$SalvageShipFaction" exact="$Definition.$ThreadData.$Faction"/>
            <get_ship_definition reference="$SalvageShipDef" size="class.ship_m" faction="$SalvageShipFaction" tags="tag.mission" />
            <do_if value="$SalvageShipDef">
              <set_value name="$Sector" exact="player.sector"/>
              <!--Check if there is a delivery station in this sector. The closest one will be found later once the ship is spawned.-->
              <find_station name="$StationCandidate" space="$Sector" owner="$SalvageShipFaction"/>
              <do_if value="$StationCandidate.exists">
                <create_position name="$Offset" object="player.entity.object" space="player.sector" min="10km" max="50km" />
                <set_value name="$Offset"     exact="position.[$Offset.x, $yVariation, $Offset.z]" comment="Engine limitation, keep it near ecliptic"/>
                <set_value name="$Space"      exact="player.sector"/>
                <set_value name="$HostileFaction" exact="faction.ownerless"/>
                <include_actions ref="md.GM_Rescue_Ship_2.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $HostileAmount, $HostileRange"/>
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_if>
            </do_if>
          </do_if>
        </do_if>
        <!--### ANTIGONE ###-->
        <do_if value="$Page == 30205">
          <do_if value="$TextOffset == 108100" comment="seeker mines, player needs to fly it out">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <set_value name="$SalvageShipFaction" exact="$Definition.$ThreadData.$Faction"/>
            <get_ship_definition reference="$SalvageShipDef" size="class.ship_m" faction="$SalvageShipFaction" tags="tag.mission" />
            <do_if value="$SalvageShipDef">
              <set_value name="$Sector" exact="player.sector"/>
              <!--Check if there is a delivery station in this sector. The closest one will be found later once the ship is spawned.-->
              <find_station name="$StationCandidate" space="$Sector" owner="$SalvageShipFaction"/>
              <do_if value="$StationCandidate.exists">
                <create_position name="$Offset" object="player.entity.object" space="player.sector" min="10km" max="50km" />
                <set_value name="$Offset"     exact="position.[$Offset.x, $yVariation, $Offset.z]"/>
                <set_value name="$Space"      exact="player.sector"/>
                <set_value name="$HostileFaction" exact="faction.ownerless"/>
                <include_actions ref="md.GM_Rescue_Ship_2.ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $HostileAmount, $HostileRange"/>
                <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
              </do_if>
            </do_if>
          </do_if>
        </do_if>
        <!-- abort/error handling -->
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Rescue_Ship_2__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Rescue_Ship_2__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.repair"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="Rescue_Ship_2__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Rescue_Ship_2__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Rescue_Ship_2__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="Rescue_Ship_2__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Rescue_Ship_2__Standard_Create_GM"/>
          </actions>
        </cue>

        <cue name="Rescue_Ship_2__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <create_group groupname="$Hostiles" comment="hostiles spawned in PostInit"/>
          </actions>
          <cues>
            <cue name="Rescue_Ship_2__Standard_Ref" ref="md.GM_Rescue_Ship_2.Start">
              <param name="Client"              value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"          value="$MissionCue"/>
              <param name="MissionThread"       value="$Definition.$ThreadCue"/>
              <param name="ReportActivateCue"   value="Rescue_Ship_2__Standard_GM_PostInit"/>
              <param name="ReportSignalCue"     value="Rescue_Ship_2__Standard_GM_Event"/>
              <param name="WithoutOffer"        value="true"/>
              <param name="WithoutOfferWaitCue" value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup"        value="$Definition.$ForceCleanupCue"/>

              <param name="Page"              value="$Page"/>
              <param name="TextOffset"        value="$TextOffset"/>
              <param name="MissionLevel"      value="$MissionLevel"/>
              <param name="Difficulty"        value="$Difficulty"/>

              <param name="Faction"           value="$Definition.$ThreadData.$Faction"/>
              <param name="Hostiles"          value="$Hostiles"/>
              <param name="DeliveryStation"   value="$DeliveryStation"/>

              <param name="DebugChance"       value="$DebugChance"/>
            </cue>

            <!-- Use a callback, so we don't spam the entire universe with loads of objects -->
            <cue name="Rescue_Ship_2__Standard_GM_PostInit" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="md.GM_Rescue_Ship_Lib.Setup_Variation_BoardSalvageShip" comment="sets $SalvageShip and $Hostiles"/>
                <do_if value="$SalvageShip">
                  <set_value name="event.param.$SalvageShip" exact="$SalvageShip"/>
                  <set_value name="event.param.$Hostiles" exact="$Hostiles"/>
                  <include_actions ref="Rescue_Ship__FindNearbyStation"/>
                  <!-- suitable station found? -->
                  <do_if value="not $DeliveryStation">
                    <!--To get here, there must have been a station when the mission spawned but no longer. Rare case, don't worry about the expensive gate distance filter-->
                    <find_station name="$DeliveryStation" space="player.galaxy" owner="$SalvageShipFaction">
                      <match_gate_distance object="$SalvageShip" max="3"/>
                    </find_station>
                  </do_if>
                  <do_if value="$DeliveryStation">
                    <set_value name="event.param.$DeliveryStation" exact="$DeliveryStation"/>
                  </do_if>
                </do_if>
              </actions>
            </cue>

            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Rescue_Ship_2__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <cue name="Bring_Item__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <set_value name="$Difficulty" exact="level.veryeasy"/>
        <set_value name="$MissionLevel" exact="1"/>

        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>

        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <set_value name="$Faction" exact="$Definition.$ThreadData.$Faction"/>

        <!--### TELADI ###-->
        <do_if value="$Page == 30204">
          <do_if value="$TextOffset == 109000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="md.GM_BringItems.Setup_ExquisiteFood"/>
          </do_if>
        </do_if>
        <!--### ANTIGONE ###-->
        <do_elseif value="$Page == 30205">
          <do_if value="$TextOffset == 109000">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
            <include_actions ref="md.GM_BringItems.Setup_ExquisiteFood"/>
          </do_if>
        </do_elseif>

        <do_if value="$TargetStation">
          <set_value name="$Valid" exact="2" comment="Valid mission variables"/>
        </do_if>

        <!-- abort/error handling -->
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Bring_Item__Standard_FollowUp_Manager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Bring_Item__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Owen Better objective?-->
                    <objective step="1" action="objective.repair"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="Bring_Item__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Bring_Item__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Bring_Item__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="Bring_Item__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Bring_Item__Standard_Create_GM"/>
          </actions>
        </cue>

        <cue name="Bring_Item__Standard_Create_GM" version="2">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <create_cue_actor cue="Bring_Item__Standard_Create_GM" name="$MissionActor">
              <select faction="$Faction"/>
            </create_cue_actor>
            <set_entity_traits entity="$MissionActor" missionactor="true" customhandler="true"/>
          </actions>
          <patch sinceversion="2" state="complete">
            <debug_text text="'Clearing the role of Bring Item mission actor ' + $MissionActor + ' ' + $MissionActor.knownname" filter="savegame"/>
            <clear_entity_role entity="$MissionActor"/>
          </patch>
          <cues>

            <cue name="Bring_Item__Standard_Ref" ref="md.GM_BringItems.Start">
              <param name="Client"                value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"            value="$MissionCue"/>
              <param name="MissionThread"         value="$Definition.$ThreadCue"/>
              <param name="ReportSignalCue"       value="Bring_Item__Standard_GM_Event"/>
              <param name="WithoutOffer"          value="true"/>
              <param name="WithoutOfferWaitCue"   value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup"          value="$Definition.$ForceCleanupCue"/>
              <param name="Page"                  value="$Page"/>
              <param name="TextOffset"            value="$TextOffset"/>
              <param name="MissionLevel"          value="$MissionLevel"/>
              <param name="Difficulty"            value="$Difficulty"/>
              <param name="DeliveryNPC"           value="$MissionActor" />
              <param name="DeliveryStation"       value="$TargetStation" />
              <param name="DeliveryItem"          value="$DeliveryItem" />
              <param name="DeliveryAmount"        value="$DeliveryAmount" />
              <param name="PlaceNPC"              value="true" />
              <param name="DebugChance"           value="$DebugChance"/>
            </cue>

            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Bring_Item__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <cue name="Retrieve_Dead_Drop__Standard" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
        <!--Signal the static cue to trigger a new instance of this mission.
        Signalling a running instance will trigger a followup mission to run its GM library. See XXX_Activate_FollowUp cue for parameters-->
      </conditions>
      <actions>
        <set_value name="$Definition" exact="event.param"/>
        <set_value name="$Page" exact="$Definition.$Page"/>
        <set_value name="$TextOffset" exact="$Definition.$TextOffset.random"/>
        <set_value name="$FollowUp" exact="@$Definition.$FollowUp == true" comment="Does this mission follow directly after another, with parameters potentially passing between them. This changes how this mission is spawned and managed."/>
        <set_value name="$SuccessfullyGenerated" exact="false"/>
        <set_value name="$DebugChance" exact="$Definition.$ThreadData.$DebugChance"/>

        <assert value="not $FollowUp" text="'This mission does not currently have any parameters where it makes sense as a follow up mission. If there is, adjust the _Activate_FollowUp cue and remove this assert [Owen]'"/>

        <set_value name="$Valid" exact="0"/>
        <!--This mission is specific enough that it will only run if a matching text offset is found. If not, the offer will abort with an error.
        $Valid:
        0: Page/TextOffset not handled
        1: Correct Page/TextOffset but unable to setup mission
        2: Mission can attempt to be spawned -->
        <set_value name="$Valid" exact="0"/>
        <set_value name="$Faction" exact="$Definition.$ThreadData.$Faction"/>
        <!--### TELADI ###-->
        <do_if value="$Page == 30232">
          <do_if value="$TextOffset == 10100">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
          </do_if>
        </do_if>
        <!--### ANTIGONE ###-->
        <do_elseif value="$Page == 30232">
          <do_if value="$TextOffset == 20100">
            <set_value name="$Valid" exact="1" comment="Valid text offset"/>
          </do_if>
        </do_elseif>

        <do_if value="$Valid" comment="Valid TextOffset found, Continue Validation">

          <set_value name="$PotentialLocations" exact="$Definition.$ThreadData.$Area.$HostSectors.clone"/>
          <shuffle_list list="$PotentialLocations"/>
          <do_if value="$PotentialLocations.count">
            <do_all exact="$PotentialLocations.count" counter="$Sector">
              <find_station name="$Stations_Trade" space="$PotentialLocations.{$Sector}" multiple="true" tradestation="true" trueowner="$Faction" owner="$Faction">
                <match_any>
                  <match_content checkoperational="true">
                    <match_dock size="tag.dock_s"/>
                  </match_content>
                  <match_content checkoperational="true">
                    <match_dock size="tag.dock_m"/>
                  </match_content>
                </match_any>
              </find_station>

              <create_list name="$Ships_Trade"/>
              <!-- M ships with dockinbays are out (Frigates) since they could be put in storage by other ships/stations docks and be inaccessable to the player -->
              <find_ship trueowner="$Faction" owner="$Faction" name="$Ships_Trade" space="$PotentialLocations.{$Sector}" multiple="true" docked="false" capturable="true" masstraffic="false" deployable="false" class="[class.ship_xl, class.ship_l]">
                <match_any>
                  <match primarypurpose="purpose.trade"/>
                </match_any>
                <match_any>
                  <match_content checkoperational="true">
                    <match_dock size="tag.dock_s"/>
                  </match_content>
                  <match_content checkoperational="true">
                    <match_dock size="tag.dock_m"/>
                  </match_content>
                </match_any>
              </find_ship>
              <shuffle_list list="$Ships_Trade"/>

              <do_if value="$Stations_Trade.count and $Ships_Trade.count">
                <break/>
              </do_if>
            </do_all>


            <!-- Populate the 3 Containers [Stations/Ships] -->
            <set_value name="$StartContainer"    exact="null"/>
            <set_value name="$DeadDropContainer" exact="null"/>
            <set_value name="$TargetContainer"   exact="null"/>
            <set_value name="$TransportStartToDeadDrop"  exact="true"   comment="Passenger Transport"/>
            <set_value name="$TransportDeadDropToTarget" exact="true"   comment="Passenger Transport"/>
            <set_value name="$TransportStartToDeadDrop_BriefingUpdate"   exact="false" />
            <set_value name="$TransportDeadDropToTarget_BriefingUpdate"  exact="false" />
            <set_value name="$DeliverToPassenger"        exact="false"  comment="Deliver the Item to the Passenger"/>
            <set_value name="$PickupWare" exact="ware.inv_sensitivedatapacket" comment="Overwrite for story specific unique items"/>

            <set_value name="$MissionLevel" exact="3" comment="Short mission chain, takes a while."/>
            <set_value name="$Difficulty" exact="level.veryeasy" comment="No requirements, no fighting."/>

            <do_if value="$Stations_Trade.count and $Ships_Trade.count" comment="Both Container Variants(Ships and Stations) are available">
              <!--  SETUP STORY VARIATION  -->
              <!-- Always have a mix of Stations and Ships -->
              <!-- Find 2-3 distinct objects from multiple containers lists owned by the same faction -->
              <do_all exact="5" counter="$StorySetupChanceModifier" comment="Try to find a valid set of DockingBays, but abort after failing a couple of times">
                <set_value name="$StorySetupChance" exact="$StorySetupChanceModifier * 20"  comment="100% in the last run of the loop"/>
                <set_value name="$StoryFound" exact="false"/>

                <!-- STORY VARIANT: Trade Guild Merchant asks you to collect sensitive data on another company. -->
                <!-- DOCKS: TradeStation => TradeShip => TradeStation -->
                <do_if value="not $StoryFound" chance="$StorySetupChance">
                  <!-- Find Factions which have entries in both lists -->
                  <set_value name="$ContainersA" exact="$Stations_Trade"/>
                  <set_value name="$ContainersB" exact="$Ships_Trade"/>
                  <!-- Factions Found -->
                  <!-- Save a TradeStation of $Faction to $FoundA -->
                  <remove_value name="$Containers" comment="Necessary?"/>
                  <set_value name="$Containers" exact="$ContainersA"/>
                  <include_actions ref="md.GMC_Retrieve_Dead_Drop.FindContainer" comment="input: $Faction, $Containers output: $Container"/>
                  <set_value name="$FoundA" exact="$Container"/>

                  <!-- Save a TradeShip of $Faction to $FoundB -->
                  <remove_value name="$Containers" comment="Necessary?"/>
                  <set_value name="$Containers" exact="$ContainersB"/>
                  <include_actions ref="md.GMC_Retrieve_Dead_Drop.FindContainer" comment="input: $Faction, $Containers output: $Container"/>
                  <set_value name="$FoundB" exact="$Container"/>

                  <set_value name="$StartContainer"    exact="$FoundA"/>
                  <set_value name="$DeadDropContainer" exact="$FoundB"/>
                  <set_value name="$TargetContainer"   exact="$FoundA"/>
                  <set_value name="$StoryFound" exact="true"/>
                  <set_value name="$PickupWare" exact="[ware.inv_encrypted_contract, ware.inv_encrypted_recording, ware.inv_encrypted_evidence].random"/>
                  <set_value name="$TransportStartToDeadDrop"  exact="true" comment="Passenger Transport"/>
                  <set_value name="$TransportStartToDeadDrop_BriefingUpdate" exact="true" comment="Update the mission before transport"/>
                  <set_value name="$TransportDeadDropToTarget" exact="true" comment="Passenger Transport"/>
                  <set_value name="$DeliverToPassenger"        exact="true" comment="Deliver the Item to the Passenger before transporting him away"/>

                </do_if>

                <do_if value="$StoryFound">
                  <!-- Validation of Parameters -->
                  <do_if value="$StartContainer and $DeadDropContainer and $TargetContainer" comment="Mandatory, All (possibly) required targets are set">
                    <!-- If no Transports are set there will be no Passenger to deliver the item to, abort in this case-->
                    <do_if value="$DeliverToPassenger">
                      <do_if value="not ($TransportStartToDeadDrop or $TransportDeadDropToTarget)">
                        <set_value name="$StoryFound" exact="false" comment="DeliverToPassenger with no Passenger"/>
                        <debug_text text="'Wrong Mission Setup: Trying $DeliverToPassenger with no PassengerTransport set, abort story variation. [Heinrich] TextOffSet: ' + $TextOffset"/>
                      </do_if>
                    </do_if>
                    <do_if value="$StoryFound">
                      <break/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <set_value name="$StoryFound" exact="false" comment="Missing a crucial variable"/>
                    <debug_text text="'Wrong Mission Setup: $StartContainer and $DeadDropContainer and $TargetContainer need to be set, abort story variation. [Heinrich] TextOffSet: ' + $TextOffset"/>
                  </do_else>
                </do_if>
              </do_all>
            </do_if>

          </do_if>

          <do_if value="$StoryFound">

            <set_value name="$OfferStation"   exact="$StartContainer" />
            <set_value name="$StartStation"   exact="$StartContainer" />
            <set_value name="$TargetStation"  exact="$TargetContainer"/>
            <remove_value name="$Ships_All"/>
            <remove_value name="$Ships_Trade"/>
            <remove_value name="$Ships_Build"/>
            <remove_value name="$Ships_Mine"/>
            <remove_value name="$Ships_Fight"/>
            <remove_value name="$Ships_Auxiliary"/>
            <remove_value name="$Stations_Trade"/>
            <remove_value name="$Stations_Defence"/>
            <remove_value name="$Stations_Pirate"/>
            <remove_value name="$Stations_FactionHQ"/>
            <remove_value name="$Stations_Equipmentdock"/>
            <remove_value name="$Stations_Wharf"/>
            <remove_value name="$Stations_Shipyard"/>
            <remove_value name="$Stations_Factory"/>

            <do_if value="$TargetContainer.isclass.station">
              <set_value name="$TargetStation"  exact="$TargetContainer"/>
            </do_if>
            <do_elseif value="$DeadDropContainer.isclass.station">
              <set_value name="$TargetStation"  exact="$DeadDropContainer"/>
            </do_elseif>

            <do_if value="$StartContainer.isclass.ship">
              <set_value name="$MissionLevel" operation="add"/>
            </do_if>

            <do_if value="$DeadDropContainer.isclass.ship">
              <set_value name="$MissionLevel" operation="add"/>
            </do_if>

            <do_if value="$TargetContainer.isclass.ship">
              <set_value name="$MissionLevel" operation="add"/>
            </do_if>

            <!-- Check dock sizes to tell the player if he can use an M ship for this mission -->
            <find_dockingbay name="$DeadDropContainerMDock" object="$DeadDropContainer" checkoperational="true" multiple="false">
              <match_content checkoperational="true">
                <match_dock size="tag.dock_m"/>
              </match_content>
            </find_dockingbay>
            <find_dockingbay name="$TargetContainerMDock" object="$TargetContainer" checkoperational="true" multiple="false">
              <match_content checkoperational="true">
                <match_dock size="tag.dock_m"/>
              </match_content>
            </find_dockingbay>

            <!-- Find $DockingBays in the $DeadDropContainer -->
            <find_dockingbay name="$DockingBays" object="$DeadDropContainer" checkoperational="true" multiple="true">
              <match_any>
                <match_dock size="tag.dock_m"/>
                <match_dock size="tag.dock_s"/>
              </match_any>
            </find_dockingbay>
            <!-- Find $CrateSlots in all $DockingBays-->
            <create_list name="$CrateSlots"/>
            <create_list name="$Crates"/>
            <do_all exact="$DockingBays.count" counter="$db">
              <find_crate_slot name="$DockingBayCrateSlots" object="$DockingBays.{$db}" tags="tag.crate_s" multiple="true" />
              <debug_text text="$DockingBayCrateSlots.count + ' Docking Bay Crate Slots found in Docking Bay ' + $DockingBays.{$db}" chance="$DebugChance"/>
              <do_all exact="$DockingBayCrateSlots.count" counter="$CrateSlotCounter">
                <append_to_list name="$CrateSlots" exact="$DockingBayCrateSlots.{$CrateSlotCounter}" />
              </do_all>
              <debug_text text="$CrateSlots.count + ' Docking Bay Crate Slots added to List'" chance="$DebugChance"/>
            </do_all>

            <do_if value="$CrateSlots.count" comment="Mandatory for Retrieve Dead Drop Missions">
              <set_value name="$Valid" exact="2"/>
            </do_if>

          </do_if>
        </do_if>

        <!-- abort/error handling -->
        <do_if value="$Valid == 2">
          <do_if value="$FollowUp">
            <!--Followup missions use the namespace as the mission cue-->
            <set_value name="$MissionCue" exact="namespace"/>
          </do_if>
          <do_else>
            <set_value name="$MissionCue" exact="null"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$Valid == 1">
            <debug_text text="'Unable to find suitable variant variables for mission on ' + this + ' with combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + '. [Owen]'" chance="$DebugChance"/>
          </do_if>
          <do_else>
            <assert value="false" text="'Attempting to spawn a mission on ' + this + ' but the combination of Page: ' + $Page + ' and TextOffset: ' + $TextOffset + ' do not match any definitions [Owen]'"/>
          </do_else>
          <signal_cue cue="$Definition.$SpawnFailedCue"/>
          <cancel_cue cue="this"/>
        </do_else>
      </actions>
      <cues>
        <cue name="Retrieve_Dead_Drop__Standard_FollowUpManager" onfail="cancel">
          <conditions>
            <check_value value="$FollowUp"/>
          </conditions>
          <actions>
            <!--If this is going to be a followup mission, first, inform the mission thread manager of this submission so it can be displayed in the offer.-->
            <!--Currently means you need to find the mission name here, instead of relying on the GM itself finding it.-->
            <set_value name="$MissionName" exact="readtext.{$Page}.{$TextOffset + 1}"/>
            <set_value name="$MissionDescription" exact="readtext.{$Page}.{$TextOffset + 2}"/>
            <debug_text text="'Attempting to signal the mission thread that followup mission cue ' + $MissionCue + ' is ready to be added to the offer'" chance="$DebugChance"/>
            <set_value name="$MissionDataTable" exact="table[$Name = $MissionName, $Cue = $MissionCue, $WrapperCue = $MissionCue, $FollowUp = true]"/>
            <signal_cue_instantly cue="$Definition.$SpawnSuccessCue" param="$MissionDataTable"/>
          </actions>
          <cues>
            <cue name="Retrieve_Dead_Drop__Standard_FollowUp_Offer_Accepted">
              <conditions>
                <event_cue_signalled cue="$Definition.$OfferAcceptedCue"/>
                <check_value value="event.param == $MissionCue"/>
              </conditions>
              <actions>
                <!--We don't want to call the GM yet. Create the mission here and pass it into the GM when the previous mission ends
                TODO @Owen Move this to a library in the GM file?-->
                <create_mission cue="$MissionCue" missionthread="$Definition.$ThreadCue" name="$MissionName" description="$MissionDescription" faction="$Definition.$ThreadData.$Faction" type="missiontype.deliver">
                  <briefing>
                    <!--TODO @Heinrich - NPCPassenger unknown here? -->
                    <objective step="1"       action="objective.talkto"    comment="optional"   text="$NPCPassenger.knownname"/>
                    <objective step="2"       action="objective.transport" comment="optional"   text="$NPCPassenger.knownname"/>
                    <objective step="3"       action="objective.talkto"    comment="optional"   text="$NPCPassenger.knownname"/>
                    <objective step="4"       action="objective.transport" comment="optional"   text="$NPCPassenger.knownname"/>
                  </briefing>
                </create_mission>
              </actions>
            </cue>

            <cue name="Retrieve_Dead_Drop__Standard_Aborted">
              <conditions>
                <event_cue_signalled cue="$Definition.$ForceCleanupCue"/>
              </conditions>
              <actions>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <!--namespace signalled to activate followup mission
            event.param = Station to supply-->
            <cue name="Retrieve_Dead_Drop__Standard_Activate_FollowUp">
              <conditions>
                <event_cue_signalled cue="namespace"/>
              </conditions>
              <actions>
                <!--Check that the correct parameters have been passed-->
                <do_if value="false">
                  <!--Currently no followup case for this type of mission-->
                  <signal_cue cue="Retrieve_Dead_Drop__Standard_Create_GM"/>
                  <cancel_cue cue="parent"/>
                </do_if>
                <do_else>
                  <assert value="false" text="namespace + ' was signalled to start a followup mission, but the passed parameter ' + event.param + ' was not what this mission was expecting. Ending mission.'"/>
                  <!--TODO @Owen what if there is another followup mission?-->
                  <signal_cue_instantly cue="$Definition.$EndedCue" param="namespace"/>
                  <cancel_cue cue="namespace"/>
                </do_else>
              </actions>
            </cue>

          </cues>
        </cue>

        <cue name="Retrieve_Dead_Drop__Standard_Not_FollowUp" onfail="cancel">
          <conditions>
            <check_value value="not $FollowUp"/>
          </conditions>
          <actions>
            <signal_cue cue="Retrieve_Dead_Drop__Standard_Create_GM"/>
          </actions>
        </cue>

        <cue name="Retrieve_Dead_Drop__Standard_Create_GM">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <do_if value="$TransportStartToDeadDrop or $TransportDeadDropToTarget">
              <!--More objectives, increase $MissionLevel-->
              <set_value name="$MissionLevel" operation="add"/>
              <do_if value="$TransportStartToDeadDrop and $TransportDeadDropToTarget">
                <set_value name="$MissionLevel" operation="add"/>
              </do_if>
              <!-- Create Passenger -->
              <create_cue_actor cue="Retrieve_Dead_Drop__Standard_Create_GM" name="$NPCPassenger">
                <select faction="$Faction"/>
                <skills>
                  <skill type="management"  min="7"   max="12"/>
                  <skill type="morale"      min="7"   max="12"/>
                  <skill type="piloting"    min="3"   max="6"/>
                  <skill type="engineering" min="3"   max="6"/>
                  <skill type="boarding"    min="3"   max="6"/>
                </skills>
              </create_cue_actor>
              <set_entity_type entity="$NPCPassenger" type="entitytype.crowd"/>
              <set_entity_traits entity="$NPCPassenger" missionactor="true" customhandler="true"/>
            </do_if>
            <set_value name="$NPCDeliverTo" exact="$NPCPassenger"/>

            <set_value name="$DeliveryWaresTable" exact="table[]"/>
            <set_value name="$DeliveryWaresTable.{$PickupWare}" exact="1"/>
          </actions>
          <cues>

            <cue name="Retrieve_Dead_Drop__Standard_Ref" ref="md.GMC_Retrieve_Dead_Drop.Start">
              <param name="OfferObject"   value="$OfferStation"/>
              <param name="MissionLevel"  value="$MissionLevel"/>
              <param name="Difficulty"    value="$Difficulty"/>

              <!--Mission specific params-->
              <param name="DeadDropContainerMDock"      value="$DeadDropContainerMDock"/>
              <param name="TargetContainerMDock"        value="$TargetContainerMDock"/>
              <param name="StartContainer"              value="$StartContainer"/>
              <param name="DeadDropContainer"           value="$DeadDropContainer"/>
              <param name="TargetContainer"             value="$TargetContainer"/>
              <param name="TransportStartToDeadDrop"    value="$TransportStartToDeadDrop"/>
              <param name="TransportDeadDropToTarget"   value="$TransportDeadDropToTarget"/>

              <param name="TransportStartToDeadDrop_BriefingUpdate"  value="$TransportStartToDeadDrop_BriefingUpdate"   />
              <param name="TransportDeadDropToTarget_BriefingUpdate" value="$TransportDeadDropToTarget_BriefingUpdate"  />

              <param name="DeliverToPassenger"          value="$DeliverToPassenger"/>
              <param name="Crates"                      value="$Crates"/>
              <param name="CrateSlots"                  value="$CrateSlots"/>
              <param name="PickupWare"                  value="$PickupWare"/>
              <param name="DeliveryWaresTable"          value="$DeliveryWaresTable"/>

              <param name="NPCPassenger"                value="$NPCPassenger"/>
              <param name="NPCDeliverTo"                value="$NPCDeliverTo" />

              <param name="StartStation"                value="$StartStation"/>
              <param name="Station"                     value="$TargetStation" />
              <param name="ReportSignalCue"             value="Retrieve_Dead_Drop__Standard_GM_Event"/>
              <param name="DebugChance"                 value="$DebugChance"/>


              <!-- @Heinrich TODO Parameters -->
              <param name="Client"                value="$Definition.$ThreadData.$Contact"/>
              <param name="MissionCue"            value="$MissionCue"/>
              <param name="MissionThread"         value="$Definition.$ThreadCue"/>
              <param name="WithoutOffer"          value="true"/>
              <param name="WithoutOfferWaitCue"   value="if $FollowUp then null else $Definition.$OfferAcceptedCue"/>
              <param name="ForceCleanup"          value="$Definition.$ForceCleanupCue"/>
              <param name="Page"                  value="$Page"/>
              <param name="TextOffset"            value="$TextOffset"/>
            </cue>

            <!--Signalled by GM when an event happens e.g. mission successfully generated or mission ended.
            Feedback values saved to the static of this cue: $FeedbackValue and $EndFeedbackValue-->
            <cue name="Retrieve_Dead_Drop__Standard_GM_Event" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <include_actions ref="MM__Standard_GM_Event"/>
              </actions>
            </cue>
          </cues>
        </cue>

      </cues>
    </cue>

  </cues>
</mdscript>
